



// All versions of the CSGL (C# OpenGL) software are created by Colin P. Fahey
// ( http://colinfahey.com ) and are declared to be in the public domain.
//
// Therefore, all versions of the CSGL (C# OpenGL) software can be used for any
// purpose (commercial or private), without payment, without restrictions, and
// without obligations.  The code can be modified, or portions reused, without
// restrictions, and without obligations.  This note may be removed from the
// code, and there is no need to mention the original author of this code.
//
// This file is part of CSGL 12 (2009 July 25).








// This file (GL.cs) cannot be compiled unless the following definition is at
// the beginning of this file:
// 
//     #define ENABLE_GL_CODE
//     
// If that definition is contained within a comment, i.e.,
// 
//     //#define ENABLE_GL_CODE
//     
// then you must remove the comment prefix (i.e., "//") to enable that definition.
// 
// 
// If you are using Microsoft Visual C# 2008/2005/2003, or Microsoft Visual C# 
// 2008/2005/2003 Express Edition, or Microsoft Visual Studio 2008/2005/2003, or 
// possibly the 2010 version of one of those editors, then it is likely that 
// your editor will become totally unresponsive for 10 seconds, and then become 
// usable for a few seconds before becoming unresponsive for another 10 seconds,
// repeating that pattern indefinitely -- unless you temporarily disable the 
// definition specified above.  The problem is that IntelliSense is repeatedly 
// analyzing thousands of lines of code that haven't changed, and that, for some
// reason, the code analysis blocks the editor itself from working!  The only 
// practical solution is to simply disable the code while editing, by disabling the 
// definition specified above, and then enable that definition only when ready to 
// compile the code.
// 
// If you are not using a Microsoft code editor, then you can enable that 
// definition permanently.


#define ENABLE_GL_CODE








using System;
using System.Windows.Forms;
using System.Runtime.InteropServices;








namespace CSGL12
{




    public sealed class GL
    {




        // Version

        public const String Version = "CSGL12DLL"; 
        
        
        
        
        
        


        // State information

        private IntPtr mhModuleGL  = System.IntPtr.Zero;
        private IntPtr mhModuleGLU = System.IntPtr.Zero;
        private IntPtr mhModuleGDI = System.IntPtr.Zero;

        
        
        
        
        
        
        
        // Structures to support native calls


        [System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential )]
        public struct WGLSWAP
        {
            public int hdc; // same as pvoid; 32-bit on x86
            public int uiFlags;
        } // 8 bytes total


        [System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential )]
        public struct POINTFLOAT
        {
            public float x;
            public float y;
        } // 8 bytes total


        [System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential )]
        public struct GLYPHMETRICSFLOAT
        {
            public float gmfBlackBoxX;
            public float gmfBlackBoxY;
            public POINTFLOAT gmfptGlyphOrigin;
            public float gmfCellIncX;
            public float gmfCellIncY;
        } // 24 bytes total


        [System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential )]
        public struct LAYERPLANEDESCRIPTOR
        {
            public short nSize;
            public short nVersion;
            public int dwFlags;
            public byte iPixelType;
            public byte cColorBits;
            public byte cRedBits;
            public byte cRedShift;
            public byte cGreenBits;
            public byte cGreenShift;
            public byte cBlueBits;
            public byte cBlueShift;
            public byte cAlphaBits;
            public byte cAlphaShift;
            public byte cAccumBits;
            public byte cAccumRedBits;
            public byte cAccumGreenBits;
            public byte cAccumBlueBits;
            public byte cAccumAlphaBits;
            public byte cDepthBits;
            public byte cStencilBits;
            public byte cAuxBuffers;
            public byte iLayerPlane;
            public byte bReserved;
            public int colorrefTransparent; // COLORREF is simply an int : 0x00bbggrr            
        } // 32 bytes total


        [System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential )]
        public struct PIXELFORMATDESCRIPTOR
        {
            public short nSize;
            public short nVersion;
            public int dwFlags;
            public byte iPixelType;
            public byte cColorBits;
            public byte cRedBits;
            public byte cRedShift;
            public byte cGreenBits;
            public byte cGreenShift;
            public byte cBlueBits;
            public byte cBlueShift;
            public byte cAlphaBits;
            public byte cAlphaShift;
            public byte cAccumBits;
            public byte cAccumRedBits;
            public byte cAccumGreenBits;
            public byte cAccumBlueBits;
            public byte cAccumAlphaBits;
            public byte cDepthBits;
            public byte cStencilBits;
            public byte cAuxBuffers;
            public byte iLayerType;
            public byte bReserved;
            public int dwLayerMask;
            public int dwVisibleMask;
            public int dwDamageMask;
        } // 40 bytes total


        [System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential )]
        public struct BITMAPINFOHEADER
        {
            public int biSize;
            public int biWidth;
            public int biHeight;
            public short biPlanes;
            public short biBitCount;
            public int biCompression;
            public int biSizeImage;
            public int biXPelsPerMeter;
            public int biYPelsPerMeter;
            public int biClrUsed;
            public int biClrImportant;
        } // 40 bytes total


        [System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential )]
        public struct RGBQUAD
        {
            public byte rgbBlue;
            public byte rgbGreen;
            public byte rgbRed;
            public byte rgbReserved;
        } // 4 bytes total


        [System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential )]
        public struct BITMAPINFO
        {
            public BITMAPINFOHEADER bmiHeader;
            public RGBQUAD[] bmiRGBQUADArray;
        } // 44+ bytes total





        // Constants to support native calls

        // From wingdi.h:
        // Stock Logical Objects
        public const int WHITE_BRUSH = 0;
        public const int LTGRAY_BRUSH = 1;
        public const int GRAY_BRUSH = 2;
        public const int DKGRAY_BRUSH = 3;
        public const int BLACK_BRUSH = 4;
        public const int NULL_BRUSH = 5;
        public const int HOLLOW_BRUSH = NULL_BRUSH;
        public const int WHITE_PEN = 6;
        public const int BLACK_PEN = 7;
        public const int NULL_PEN = 8;
        public const int OEM_FIXED_FONT = 10;
        public const int ANSI_FIXED_FONT = 11;
        public const int ANSI_VAR_FONT = 12;
        public const int SYSTEM_FONT = 13;
        public const int DEVICE_DEFAULT_FONT = 14;
        public const int DEFAULT_PALETTE = 15;
        public const int SYSTEM_FIXED_FONT = 16;

        // pixel types
        public const int PFD_TYPE_RGBA = 0;
        public const int PFD_TYPE_COLORINDEX = 1;

        // layer types
        public const int PFD_MAIN_PLANE = 0;
        public const int PFD_OVERLAY_PLANE = 1;
        public const int PFD_UNDERLAY_PLANE = 0xff; // (-1)

        // PIXELFORMATDESCRIPTOR flags
        public const int PFD_DOUBLEBUFFER = 0x00000001;
        public const int PFD_STEREO = 0x00000002;
        public const int PFD_DRAW_TO_WINDOW = 0x00000004;
        public const int PFD_DRAW_TO_BITMAP = 0x00000008;
        public const int PFD_SUPPORT_GDI = 0x00000010;
        public const int PFD_SUPPORT_OPENGL = 0x00000020;
        public const int PFD_GENERIC_FORMAT = 0x00000040;
        public const int PFD_NEED_PALETTE = 0x00000080;
        public const int PFD_NEED_SYSTEM_PALETTE = 0x00000100;
        public const int PFD_SWAP_EXCHANGE = 0x00000200;
        public const int PFD_SWAP_COPY = 0x00000400;
        public const int PFD_SWAP_LAYER_BUFFERS = 0x00000800;
        public const int PFD_GENERIC_ACCELERATED = 0x00001000;
        public const int PFD_SUPPORT_DIRECTDRAW = 0x00002000;

        // PIXELFORMATDESCRIPTOR flags for use in ChoosePixelFormat only
        public const int PFD_DEPTH_DONTCARE = 0x20000000;
        public const int PFD_DOUBLEBUFFER_DONTCARE = 0x40000000;
        public const int PFD_STEREO_DONTCARE = unchecked( (int)0x80000000 );





        // Font weights
        public const int FW_DONTCARE = 0;
        public const int FW_THIN = 100;
        public const int FW_EXTRALIGHT = 200;
        public const int FW_ULTRALIGHT = 200;
        public const int FW_LIGHT = 300;
        public const int FW_NORMAL = 400;
        public const int FW_REGULAR = 400;
        public const int FW_MEDIUM = 500;
        public const int FW_SEMIBOLD = 600;
        public const int FW_DEMIBOLD = 600;
        public const int FW_BOLD = 700;
        public const int FW_EXTRABOLD = 800;
        public const int FW_ULTRABOLD = 800;
        public const int FW_HEAVY = 900;
        public const int FW_BLACK = 900;


        // Font Families
        public const int FF_DONTCARE = (0 << 4);  // Don't care or don't know.
        public const int FF_ROMAN = (1 << 4);  // Variable stroke width, serifed. Times Roman, Century Schoolbook, etc.
        public const int FF_SWISS = (2 << 4);  // Variable stroke width, sans-serifed. Helvetica, Swiss, etc.
        public const int FF_MODERN = (3 << 4);  // Constant stroke width, serifed or sans-serifed. Pica, Elite, Courier, etc.
        public const int FF_SCRIPT = (4 << 4);  // Cursive, etc.
        public const int FF_DECORATIVE = (5 << 4);  // Old English, etc.


        public const int OUT_DEFAULT_PRECIS = 0;
        public const int OUT_STRING_PRECIS = 1;
        public const int OUT_CHARACTER_PRECIS = 2;
        public const int OUT_STROKE_PRECIS = 3;
        public const int OUT_TT_PRECIS = 4;
        public const int OUT_DEVICE_PRECIS = 5;
        public const int OUT_RASTER_PRECIS = 6;
        public const int OUT_TT_ONLY_PRECIS = 7;
        public const int OUT_OUTLINE_PRECIS = 8;
        public const int OUT_SCREEN_OUTLINE_PRECIS = 9;

        public const int CLIP_DEFAULT_PRECIS = 0;
        public const int CLIP_CHARACTER_PRECIS = 1;
        public const int CLIP_STROKE_PRECIS = 2;
        public const int CLIP_MASK = 0xf;
        public const int CLIP_LH_ANGLES = (1 << 4);
        public const int CLIP_TT_ALWAYS = (2 << 4);
        public const int CLIP_EMBEDDED = (8 << 4);

        public const int DEFAULT_QUALITY = 0;
        public const int DRAFT_QUALITY = 1;
        public const int PROOF_QUALITY = 2;
        public const int NONANTIALIASED_QUALITY = 3;
        public const int ANTIALIASED_QUALITY = 4;

        public const int DEFAULT_PITCH = 0;
        public const int FIXED_PITCH = 1;
        public const int VARIABLE_PITCH = 2;
        public const int MONO_FONT = 8;

        public const int ANSI_CHARSET = 0;
        public const int DEFAULT_CHARSET = 1;
        public const int SYMBOL_CHARSET = 2;
        public const int SHIFTJIS_CHARSET = 128;
        public const int HANGEUL_CHARSET = 129;
        public const int HANGUL_CHARSET = 129;
        public const int GB2312_CHARSET = 134;
        public const int CHINESEBIG5_CHARSET = 136;
        public const int OEM_CHARSET = 255;
        public const int JOHAB_CHARSET = 130;
        public const int HEBREW_CHARSET = 177;
        public const int ARABIC_CHARSET = 178;
        public const int GREEK_CHARSET = 161;
        public const int TURKISH_CHARSET = 162;
        public const int VIETNAMESE_CHARSET = 163;
        public const int THAI_CHARSET = 222;
        public const int EASTEUROPE_CHARSET = 238;
        public const int RUSSIAN_CHARSET = 204;
        public const int MAC_CHARSET = 77;
        public const int BALTIC_CHARSET = 186;

        public const int FS_LATIN1 = 0x00000001;
        public const int FS_LATIN2 = 0x00000002;
        public const int FS_CYRILLIC = 0x00000004;
        public const int FS_GREEK = 0x00000008;
        public const int FS_TURKISH = 0x00000010;
        public const int FS_HEBREW = 0x00000020;
        public const int FS_ARABIC = 0x00000040;
        public const int FS_BALTIC = 0x00000080;
        public const int FS_VIETNAMESE = 0x00000100;
        public const int FS_THAI = 0x00010000;
        public const int FS_JISJAPAN = 0x00020000;
        public const int FS_CHINESESIMP = 0x00040000;
        public const int FS_WANSUNG = 0x00080000;
        public const int FS_CHINESETRAD = 0x00100000;
        public const int FS_JOHAB = 0x00200000;
        public const int FS_SYMBOL = unchecked( (int)0x80000000 );







        // Native functions to support OpenGL operations

        // NOTES:
        //
        // (1) The wglGetProcAddress() function returns the address of an 
        // OpenGL extension function for use with the current OpenGL rendering
        // context.
        //
        // (2) When no current rendering context exists or wglGetProcAddress()
        // fails, the return value is NULL. 
        //
        // (3) The OpenGL library supports multiple implementations of its 
        // functions. Extension functions supported in one rendering context
        // are not necessarily available in a separate rendering context. 
        // Thus, for a given rendering context in an application, use the 
        // function addresses returned by the wglGetProcAddress function only.
        //
        // The extension function addresses are unique for each pixel format. 
        // All rendering contexts of a given pixel format share the same 
        // extension function addresses.


        [System.Runtime.InteropServices.DllImport( "user32", EntryPoint = "GetDC", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        IntPtr
        User32_GetDC
        (
            IntPtr hwnd
        );


        [System.Runtime.InteropServices.DllImport( "opengl32", EntryPoint = "wglGetProcAddress", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        IntPtr
        OpenGL32_wglGetProcAddress
        (
            [System.Runtime.InteropServices.MarshalAs( System.Runtime.InteropServices.UnmanagedType.LPStr )] String functionName
        );


        [System.Runtime.InteropServices.DllImport( "opengl32", EntryPoint = "wglCreateContext", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        IntPtr
        OpenGL32_wglCreateContext
        (
            IntPtr hdc
        );


        [System.Runtime.InteropServices.DllImport( "opengl32", EntryPoint = "wglDeleteContext", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        int
        OpenGL32_wglDeleteContext
        (
            IntPtr hglrc
        );


        [System.Runtime.InteropServices.DllImport( "opengl32", EntryPoint = "wglMakeCurrent", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        int
        OpenGL32_wglMakeCurrent
        (
            IntPtr hdc,
            IntPtr hglrc
        );


        [System.Runtime.InteropServices.DllImport( "opengl32", EntryPoint = "wglSwapBuffers", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        int
        OpenGL32_wglSwapBuffers
        (
            IntPtr hdc
        );


        [System.Runtime.InteropServices.DllImport( "gdi32", EntryPoint = "ChoosePixelFormat", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        int
        GDI32_ChoosePixelFormat
        (
            IntPtr hdc,
            ref PIXELFORMATDESCRIPTOR pfd
        );


        [System.Runtime.InteropServices.DllImport( "gdi32", EntryPoint = "SetPixelFormat", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        int
        GDI32_SetPixelFormat
        (
            IntPtr hdc,
            int pixelFormat,
            ref PIXELFORMATDESCRIPTOR pfd
        );


        [System.Runtime.InteropServices.DllImport( "gdi32", EntryPoint = "CreateDIBitmap", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        IntPtr
        GDI32_CreateDIBitmap
        (
            IntPtr hdc,
            ref BITMAPINFOHEADER lpbmih,
            int fdwInit,
            byte[] dataInit,
            ref BITMAPINFO lpbmi,
            int fuUsage
        );


        [System.Runtime.InteropServices.DllImport( "gdi32", EntryPoint = "CreateDIBSection", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        IntPtr
        GDI32_CreateDIBSection
        (
            IntPtr hdc,
            ref BITMAPINFO lpbmi,
            int iUsage,
            byte[] dataBits,
            IntPtr hSection,
            int dwOffset
        );


        [System.Runtime.InteropServices.DllImport( "gdi32", EntryPoint = "DeleteObject", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        int
        GDI32_DeleteObject
        (
            IntPtr hobject
        );


        [System.Runtime.InteropServices.DllImport( "gdi32", EntryPoint = "SelectObject", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        IntPtr
        GDI32_SelectObject
        (
            IntPtr hdc,
            IntPtr hgdiobj
        );


        [System.Runtime.InteropServices.DllImport( "gdi32", EntryPoint = "GetStockObject", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        IntPtr
        GDI32_GetStockObject
        (
            int fnObject
        );



        [System.Runtime.InteropServices.DllImport( "gdi32", EntryPoint = "CreateFont", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        IntPtr
        GDI32_CreateFont
        (
            int nHeight,             // logical height of font
            int nWidth,              // logical average character width
            int nEscapement,         // angle of escapement
            int nOrientation,        // base-line orientation angle
            int fnWeight,            // font weight
            int fdwItalic,           // italic attribute flag
            int fdwUnderline,        // underline attribute flag
            int fdwStrikeOut,        // strikeout attribute flag
            int fdwCharSet,          // character set identifier
            int fdwOutputPrecision,  // output precision
            int fdwClipPrecision,    // clipping precision
            int fdwQuality,          // output quality
            int fdwPitchAndFamily,   // pitch and family
            [System.Runtime.InteropServices.MarshalAs( System.Runtime.InteropServices.UnmanagedType.LPStr )] String lpszFace // pointer to typeface name string
        );



        [System.Runtime.InteropServices.DllImport( "kernel32", EntryPoint = "LoadLibrary", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        IntPtr
        Kernel32_LoadLibrary
        (
            [System.Runtime.InteropServices.MarshalAs( System.Runtime.InteropServices.UnmanagedType.LPStr )] String s
        );


        [System.Runtime.InteropServices.DllImport( "kernel32", EntryPoint = "GetProcAddress", SetLastError = true ),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        IntPtr
        Kernel32_GetProcAddress
        (
            IntPtr hmodule,
            [System.Runtime.InteropServices.MarshalAs( System.Runtime.InteropServices.UnmanagedType.LPStr )] String s
        );


        [System.Runtime.InteropServices.DllImport("kernel32", EntryPoint = "GetLastError", SetLastError = true),
        System.Security.SuppressUnmanagedCodeSecurity]
        public
        static
        extern
        int
        Kernel32_GetLastError
        (
        );






        















        public GL()
        {
            mhModuleGL = System.IntPtr.Zero;
            mhModuleGLU = System.IntPtr.Zero;
            mhModuleGDI = System.IntPtr.Zero;
        }












#if ENABLE_GL_CODE

        public const int ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB = 0x00002054;
        public const int ERROR_INVALID_PIXEL_TYPE_ARB = 0x00002043;
        public const int ERROR_INVALID_PIXEL_TYPE_EXT = 0x00002043;




        public const int GL_1PASS_EXT = 0x000080a1;
        public const int GL_1PASS_SGIS = 0x000080a1;
        public const int GL_2_BYTES = 0x00001407;
        public const int GL_2D = 0x00000600;
        public const int GL_2PASS_0_EXT = 0x000080a2;
        public const int GL_2PASS_0_SGIS = 0x000080a2;
        public const int GL_2PASS_1_EXT = 0x000080a3;
        public const int GL_2PASS_1_SGIS = 0x000080a3;
        public const int GL_2X_BIT_ATI = 0x00000001;
        public const int GL_3_BYTES = 0x00001408;
        public const int GL_3D = 0x00000601;
        public const int GL_3D_COLOR = 0x00000602;
        public const int GL_3D_COLOR_TEXTURE = 0x00000603;
        public const int GL_4_BYTES = 0x00001409;
        public const int GL_422_AVERAGE_EXT = 0x000080ce;
        public const int GL_422_EXT = 0x000080cc;
        public const int GL_422_REV_AVERAGE_EXT = 0x000080cf;
        public const int GL_422_REV_EXT = 0x000080cd;
        public const int GL_4D_COLOR_TEXTURE = 0x00000604;
        public const int GL_4PASS_0_EXT = 0x000080a4;
        public const int GL_4PASS_0_SGIS = 0x000080a4;
        public const int GL_4PASS_1_EXT = 0x000080a5;
        public const int GL_4PASS_1_SGIS = 0x000080a5;
        public const int GL_4PASS_2_EXT = 0x000080a6;
        public const int GL_4PASS_2_SGIS = 0x000080a6;
        public const int GL_4PASS_3_EXT = 0x000080a7;
        public const int GL_4PASS_3_SGIS = 0x000080a7;
        public const int GL_4X_BIT_ATI = 0x00000002;
        public const int GL_8X_BIT_ATI = 0x00000004;
        public const int GL_ABGR_EXT = 0x00008000;
        public const int GL_ACCUM = 0x00000100;
        public const int GL_ACCUM_ALPHA_BITS = 0x00000d5b;
        public const int GL_ACCUM_BLUE_BITS = 0x00000d5a;
        public const int GL_ACCUM_BUFFER_BIT = 0x00000200;
        public const int GL_ACCUM_CLEAR_VALUE = 0x00000b80;
        public const int GL_ACCUM_GREEN_BITS = 0x00000d59;
        public const int GL_ACCUM_RED_BITS = 0x00000d58;
        public const int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x00008b8a;
        public const int GL_ACTIVE_ATTRIBUTES = 0x00008b89;
        public const int GL_ACTIVE_STENCIL_FACE_EXT = 0x00008911;
        public const int GL_ACTIVE_TEXTURE = 0x000084e0;
        public const int GL_ACTIVE_TEXTURE_ARB = 0x000084e0;
        public const int GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x00008b87;
        public const int GL_ACTIVE_UNIFORMS = 0x00008b86;
        public const int GL_ACTIVE_VERTEX_UNITS_ARB = 0x000086a5;
        public const int GL_ADD = 0x00000104;
        public const int GL_ADD_ATI = 0x00008963;
        public const int GL_ADD_SIGNED = 0x00008574;
        public const int GL_ADD_SIGNED_ARB = 0x00008574;
        public const int GL_ADD_SIGNED_EXT = 0x00008574;
        public const int GL_ALIASED_LINE_WIDTH_RANGE = 0x0000846e;
        public const int GL_ALIASED_POINT_SIZE_RANGE = 0x0000846d;
        public const int GL_ALL_ATTRIB_BITS = 0x000fffff;
        public const int GL_ALL_COMPLETED_NV = 0x000084f2;
        public const int GL_ALLOW_DRAW_FRG_HINT_PGI = 0x0001a210;
        public const int GL_ALLOW_DRAW_MEM_HINT_PGI = 0x0001a211;
        public const int GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x0001a20e;
        public const int GL_ALLOW_DRAW_WIN_HINT_PGI = 0x0001a20f;
        public const int GL_ALPHA = 0x00001906;
        public const int GL_ALPHA_BIAS = 0x00000d1d;
        public const int GL_ALPHA_BITS = 0x00000d55;
        public const int GL_ALPHA_FLOAT16_ATI = 0x0000881c;
        public const int GL_ALPHA_FLOAT32_ATI = 0x00008816;
        public const int GL_ALPHA_MAX_CLAMP_INGR = 0x00008567;
        public const int GL_ALPHA_MAX_SGIX = 0x00008321;
        public const int GL_ALPHA_MIN_CLAMP_INGR = 0x00008563;
        public const int GL_ALPHA_MIN_SGIX = 0x00008320;
        public const int GL_ALPHA_SCALE = 0x00000d1c;
        public const int GL_ALPHA_TEST = 0x00000bc0;
        public const int GL_ALPHA_TEST_FUNC = 0x00000bc1;
        public const int GL_ALPHA_TEST_REF = 0x00000bc2;
        public const int GL_ALPHA12 = 0x0000803d;
        public const int GL_ALPHA12_EXT = 0x0000803d;
        public const int GL_ALPHA16 = 0x0000803e;
        public const int GL_ALPHA16_EXT = 0x0000803e;
        public const int GL_ALPHA16F_ARB = 0x0000881c;
        public const int GL_ALPHA32F_ARB = 0x00008816;
        public const int GL_ALPHA4 = 0x0000803b;
        public const int GL_ALPHA4_EXT = 0x0000803b;
        public const int GL_ALPHA8 = 0x0000803c;
        public const int GL_ALPHA8_EXT = 0x0000803c;
        public const int GL_ALWAYS = 0x00000207;
        public const int GL_ALWAYS_FAST_HINT_PGI = 0x0001a20c;
        public const int GL_ALWAYS_SOFT_HINT_PGI = 0x0001a20d;
        public const int GL_AMBIENT = 0x00001200;
        public const int GL_AMBIENT_AND_DIFFUSE = 0x00001602;
        public const int GL_AND = 0x00001501;
        public const int GL_AND_INVERTED = 0x00001504;
        public const int GL_AND_REVERSE = 0x00001502;
        public const int GL_ARRAY_BUFFER = 0x00008892;
        public const int GL_ARRAY_BUFFER_ARB = 0x00008892;
        public const int GL_ARRAY_BUFFER_BINDING = 0x00008894;
        public const int GL_ARRAY_BUFFER_BINDING_ARB = 0x00008894;
        public const int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x000081a9;
        public const int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x000081a8;
        public const int GL_ARRAY_OBJECT_BUFFER_ATI = 0x00008766;
        public const int GL_ARRAY_OBJECT_OFFSET_ATI = 0x00008767;
        public const int GL_ASYNC_DRAW_PIXELS_SGIX = 0x0000835d;
        public const int GL_ASYNC_HISTOGRAM_SGIX = 0x0000832c;
        public const int GL_ASYNC_MARKER_SGIX = 0x00008329;
        public const int GL_ASYNC_READ_PIXELS_SGIX = 0x0000835e;
        public const int GL_ASYNC_TEX_IMAGE_SGIX = 0x0000835c;
        public const int GL_ATTACHED_SHADERS = 0x00008b85;
        public const int GL_ATTENUATION_EXT = 0x0000834d;
        public const int GL_ATTRIB_ARRAY_POINTER_NV = 0x00008645;
        public const int GL_ATTRIB_ARRAY_SIZE_NV = 0x00008623;
        public const int GL_ATTRIB_ARRAY_STRIDE_NV = 0x00008624;
        public const int GL_ATTRIB_ARRAY_TYPE_NV = 0x00008625;
        public const int GL_ATTRIB_STACK_DEPTH = 0x00000bb0;
        public const int GL_AUTO_NORMAL = 0x00000d80;
        public const int GL_AUX_BUFFERS = 0x00000c00;
        public const int GL_AUX0 = 0x00000409;
        public const int GL_AUX1 = 0x0000040a;
        public const int GL_AUX2 = 0x0000040b;
        public const int GL_AUX3 = 0x0000040c;
        public const int GL_AVERAGE_EXT = 0x00008335;
        public const int GL_AVERAGE_HP = 0x00008160;
        public const int GL_BACK = 0x00000405;
        public const int GL_BACK_LEFT = 0x00000402;
        public const int GL_BACK_NORMALS_HINT_PGI = 0x0001a223;
        public const int GL_BACK_RIGHT = 0x00000403;
        public const int GL_BGR = 0x000080e0;
        public const int GL_BGR_EXT = 0x000080e0;
        public const int GL_BGRA = 0x000080e1;
        public const int GL_BGRA_EXT = 0x000080e1;
        public const int GL_BIAS_BIT_ATI = 0x00000008;
        public const int GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x00008541;
        public const int GL_BINORMAL_ARRAY_EXT = 0x0000843a;
        public const int GL_BINORMAL_ARRAY_POINTER_EXT = 0x00008443;
        public const int GL_BINORMAL_ARRAY_STRIDE_EXT = 0x00008441;
        public const int GL_BINORMAL_ARRAY_TYPE_EXT = 0x00008440;
        public const int GL_BITMAP = 0x00001a00;
        public const int GL_BITMAP_TOKEN = 0x00000704;
        public const int GL_BLEND = 0x00000be2;
        public const int GL_BLEND_COLOR = 0x00008005;
        public const int GL_BLEND_COLOR_EXT = 0x00008005;
        public const int GL_BLEND_DST = 0x00000be0;
        public const int GL_BLEND_DST_ALPHA = 0x000080ca;
        public const int GL_BLEND_DST_ALPHA_EXT = 0x000080ca;
        public const int GL_BLEND_DST_RGB = 0x000080c8;
        public const int GL_BLEND_DST_RGB_EXT = 0x000080c8;
        public const int GL_BLEND_EQUATION = 0x00008009;
        public const int GL_BLEND_EQUATION_ALPHA = 0x0000883d;
        public const int GL_BLEND_EQUATION_ALPHA_EXT = 0x0000883d;
        public const int GL_BLEND_EQUATION_EXT = 0x00008009;
        public const int GL_BLEND_EQUATION_RGB = 0x00008009;
        public const int GL_BLEND_EQUATION_RGB_EXT = 0x00008009;
        public const int GL_BLEND_SRC = 0x00000be1;
        public const int GL_BLEND_SRC_ALPHA = 0x000080cb;
        public const int GL_BLEND_SRC_ALPHA_EXT = 0x000080cb;
        public const int GL_BLEND_SRC_RGB = 0x000080c9;
        public const int GL_BLEND_SRC_RGB_EXT = 0x000080c9;
        public const int GL_BLUE = 0x00001905;
        public const int GL_BLUE_BIAS = 0x00000d1b;
        public const int GL_BLUE_BIT_ATI = 0x00000004;
        public const int GL_BLUE_BITS = 0x00000d54;
        public const int GL_BLUE_MAX_CLAMP_INGR = 0x00008566;
        public const int GL_BLUE_MIN_CLAMP_INGR = 0x00008562;
        public const int GL_BLUE_SCALE = 0x00000d1a;
        public const int GL_BOOL = 0x00008b56;
        public const int GL_BOOL_ARB = 0x00008b56;
        public const int GL_BOOL_VEC2 = 0x00008b57;
        public const int GL_BOOL_VEC2_ARB = 0x00008b57;
        public const int GL_BOOL_VEC3 = 0x00008b58;
        public const int GL_BOOL_VEC3_ARB = 0x00008b58;
        public const int GL_BOOL_VEC4 = 0x00008b59;
        public const int GL_BOOL_VEC4_ARB = 0x00008b59;
        public const int GL_BUFFER_ACCESS = 0x000088bb;
        public const int GL_BUFFER_ACCESS_ARB = 0x000088bb;
        public const int GL_BUFFER_MAP_POINTER = 0x000088bd;
        public const int GL_BUFFER_MAP_POINTER_ARB = 0x000088bd;
        public const int GL_BUFFER_MAPPED = 0x000088bc;
        public const int GL_BUFFER_MAPPED_ARB = 0x000088bc;
        public const int GL_BUFFER_SIZE = 0x00008764;
        public const int GL_BUFFER_SIZE_ARB = 0x00008764;
        public const int GL_BUFFER_USAGE = 0x00008765;
        public const int GL_BUFFER_USAGE_ARB = 0x00008765;
        public const int GL_BUMP_ENVMAP_ATI = 0x0000877b;
        public const int GL_BUMP_NUM_TEX_UNITS_ATI = 0x00008777;
        public const int GL_BUMP_ROT_MATRIX_ATI = 0x00008775;
        public const int GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x00008776;
        public const int GL_BUMP_TARGET_ATI = 0x0000877c;
        public const int GL_BUMP_TEX_UNITS_ATI = 0x00008778;
        public const int GL_BYTE = 0x00001400;
        public const int GL_C3F_V3F = 0x00002a24;
        public const int GL_C4F_N3F_V3F = 0x00002a26;
        public const int GL_C4UB_V2F = 0x00002a22;
        public const int GL_C4UB_V3F = 0x00002a23;
        public const int GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x00008183;
        public const int GL_CCW = 0x00000901;
        public const int GL_CLAMP = 0x00002900;
        public const int GL_CLAMP_FRAGMENT_COLOR_ARB = 0x0000891b;
        public const int GL_CLAMP_READ_COLOR_ARB = 0x0000891c;
        public const int GL_CLAMP_TO_BORDER = 0x0000812d;
        public const int GL_CLAMP_TO_BORDER_ARB = 0x0000812d;
        public const int GL_CLAMP_TO_BORDER_SGIS = 0x0000812d;
        public const int GL_CLAMP_TO_EDGE = 0x0000812f;
        public const int GL_CLAMP_TO_EDGE_SGIS = 0x0000812f;
        public const int GL_CLAMP_VERTEX_COLOR_ARB = 0x0000891a;
        public const int GL_CLEAR = 0x00001500;
        public const int GL_CLIENT_ACTIVE_TEXTURE = 0x000084e1;
        public const int GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x000084e1;
        public const int GL_CLIENT_ALL_ATTRIB_BITS = unchecked( (int)0xffffffff );
        public const int GL_CLIENT_ATTRIB_STACK_DEPTH = 0x00000bb1;
        public const int GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
        public const int GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
        public const int GL_CLIP_FAR_HINT_PGI = 0x0001a221;
        public const int GL_CLIP_NEAR_HINT_PGI = 0x0001a220;
        public const int GL_CLIP_PLANE0 = 0x00003000;
        public const int GL_CLIP_PLANE1 = 0x00003001;
        public const int GL_CLIP_PLANE2 = 0x00003002;
        public const int GL_CLIP_PLANE3 = 0x00003003;
        public const int GL_CLIP_PLANE4 = 0x00003004;
        public const int GL_CLIP_PLANE5 = 0x00003005;
        public const int GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x000080f0;
        public const int GL_CMYK_EXT = 0x0000800c;
        public const int GL_CMYKA_EXT = 0x0000800d;
        public const int GL_CND_ATI = 0x0000896a;
        public const int GL_CND0_ATI = 0x0000896b;
        public const int GL_COEFF = 0x00000a00;
        public const int GL_COLOR = 0x00001800;
        public const int GL_COLOR_ALPHA_PAIRING_ATI = 0x00008975;
        public const int GL_COLOR_ARRAY = 0x00008076;
        public const int GL_COLOR_ARRAY_BUFFER_BINDING = 0x00008898;
        public const int GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x00008898;
        public const int GL_COLOR_ARRAY_COUNT_EXT = 0x00008084;
        public const int GL_COLOR_ARRAY_EXT = 0x00008076;
        public const int GL_COLOR_ARRAY_LIST_IBM = 0x000192a0;
        public const int GL_COLOR_ARRAY_LIST_STRIDE_IBM = 0x000192aa;
        public const int GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x000083f7;
        public const int GL_COLOR_ARRAY_POINTER = 0x00008090;
        public const int GL_COLOR_ARRAY_POINTER_EXT = 0x00008090;
        public const int GL_COLOR_ARRAY_SIZE = 0x00008081;
        public const int GL_COLOR_ARRAY_SIZE_EXT = 0x00008081;
        public const int GL_COLOR_ARRAY_STRIDE = 0x00008083;
        public const int GL_COLOR_ARRAY_STRIDE_EXT = 0x00008083;
        public const int GL_COLOR_ARRAY_TYPE = 0x00008082;
        public const int GL_COLOR_ARRAY_TYPE_EXT = 0x00008082;
        public const int GL_COLOR_ATTACHMENT0_EXT = 0x00008ce0;
        public const int GL_COLOR_ATTACHMENT1_EXT = 0x00008ce1;
        public const int GL_COLOR_ATTACHMENT10_EXT = 0x00008cea;
        public const int GL_COLOR_ATTACHMENT11_EXT = 0x00008ceb;
        public const int GL_COLOR_ATTACHMENT12_EXT = 0x00008cec;
        public const int GL_COLOR_ATTACHMENT13_EXT = 0x00008ced;
        public const int GL_COLOR_ATTACHMENT14_EXT = 0x00008cee;
        public const int GL_COLOR_ATTACHMENT15_EXT = 0x00008cef;
        public const int GL_COLOR_ATTACHMENT2_EXT = 0x00008ce2;
        public const int GL_COLOR_ATTACHMENT3_EXT = 0x00008ce3;
        public const int GL_COLOR_ATTACHMENT4_EXT = 0x00008ce4;
        public const int GL_COLOR_ATTACHMENT5_EXT = 0x00008ce5;
        public const int GL_COLOR_ATTACHMENT6_EXT = 0x00008ce6;
        public const int GL_COLOR_ATTACHMENT7_EXT = 0x00008ce7;
        public const int GL_COLOR_ATTACHMENT8_EXT = 0x00008ce8;
        public const int GL_COLOR_ATTACHMENT9_EXT = 0x00008ce9;
        public const int GL_COLOR_BUFFER_BIT = 0x00004000;
        public const int GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x00008835;
        public const int GL_COLOR_CLEAR_VALUE = 0x00000c22;
        public const int GL_COLOR_INDEX = 0x00001900;
        public const int GL_COLOR_INDEX1_EXT = 0x000080e2;
        public const int GL_COLOR_INDEX12_EXT = 0x000080e6;
        public const int GL_COLOR_INDEX16_EXT = 0x000080e7;
        public const int GL_COLOR_INDEX2_EXT = 0x000080e3;
        public const int GL_COLOR_INDEX4_EXT = 0x000080e4;
        public const int GL_COLOR_INDEX8_EXT = 0x000080e5;
        public const int GL_COLOR_INDEXES = 0x00001603;
        public const int GL_COLOR_LOGIC_OP = 0x00000bf2;
        public const int GL_COLOR_MATERIAL = 0x00000b57;
        public const int GL_COLOR_MATERIAL_FACE = 0x00000b55;
        public const int GL_COLOR_MATERIAL_PARAMETER = 0x00000b56;
        public const int GL_COLOR_MATRIX = 0x000080b1;
        public const int GL_COLOR_MATRIX_SGI = 0x000080b1;
        public const int GL_COLOR_MATRIX_STACK_DEPTH = 0x000080b2;
        public const int GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x000080b2;
        public const int GL_COLOR_SUM = 0x00008458;
        public const int GL_COLOR_SUM_ARB = 0x00008458;
        public const int GL_COLOR_SUM_CLAMP_NV = 0x0000854f;
        public const int GL_COLOR_SUM_EXT = 0x00008458;
        public const int GL_COLOR_TABLE = 0x000080d0;
        public const int GL_COLOR_TABLE_ALPHA_SIZE = 0x000080dd;
        public const int GL_COLOR_TABLE_ALPHA_SIZE_EXT = 0x000080dd;
        public const int GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x000080dd;
        public const int GL_COLOR_TABLE_BIAS = 0x000080d7;
        public const int GL_COLOR_TABLE_BIAS_SGI = 0x000080d7;
        public const int GL_COLOR_TABLE_BLUE_SIZE = 0x000080dc;
        public const int GL_COLOR_TABLE_BLUE_SIZE_EXT = 0x000080dc;
        public const int GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x000080dc;
        public const int GL_COLOR_TABLE_FORMAT = 0x000080d8;
        public const int GL_COLOR_TABLE_FORMAT_EXT = 0x000080d8;
        public const int GL_COLOR_TABLE_FORMAT_SGI = 0x000080d8;
        public const int GL_COLOR_TABLE_GREEN_SIZE = 0x000080db;
        public const int GL_COLOR_TABLE_GREEN_SIZE_EXT = 0x000080db;
        public const int GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x000080db;
        public const int GL_COLOR_TABLE_INTENSITY_SIZE = 0x000080df;
        public const int GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 0x000080df;
        public const int GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x000080df;
        public const int GL_COLOR_TABLE_LUMINANCE_SIZE = 0x000080de;
        public const int GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 0x000080de;
        public const int GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x000080de;
        public const int GL_COLOR_TABLE_RED_SIZE = 0x000080da;
        public const int GL_COLOR_TABLE_RED_SIZE_EXT = 0x000080da;
        public const int GL_COLOR_TABLE_RED_SIZE_SGI = 0x000080da;
        public const int GL_COLOR_TABLE_SCALE = 0x000080d6;
        public const int GL_COLOR_TABLE_SCALE_SGI = 0x000080d6;
        public const int GL_COLOR_TABLE_SGI = 0x000080d0;
        public const int GL_COLOR_TABLE_WIDTH = 0x000080d9;
        public const int GL_COLOR_TABLE_WIDTH_EXT = 0x000080d9;
        public const int GL_COLOR_TABLE_WIDTH_SGI = 0x000080d9;
        public const int GL_COLOR_WRITEMASK = 0x00000c23;
        public const int GL_COLOR3_BIT_PGI = 0x00010000;
        public const int GL_COLOR4_BIT_PGI = 0x00020000;
        public const int GL_COMBINE = 0x00008570;
        public const int GL_COMBINE_ALPHA = 0x00008572;
        public const int GL_COMBINE_ALPHA_ARB = 0x00008572;
        public const int GL_COMBINE_ALPHA_EXT = 0x00008572;
        public const int GL_COMBINE_ARB = 0x00008570;
        public const int GL_COMBINE_EXT = 0x00008570;
        public const int GL_COMBINE_RGB = 0x00008571;
        public const int GL_COMBINE_RGB_ARB = 0x00008571;
        public const int GL_COMBINE_RGB_EXT = 0x00008571;
        public const int GL_COMBINE4_NV = 0x00008503;
        public const int GL_COMBINER_AB_DOT_PRODUCT_NV = 0x00008545;
        public const int GL_COMBINER_AB_OUTPUT_NV = 0x0000854a;
        public const int GL_COMBINER_BIAS_NV = 0x00008549;
        public const int GL_COMBINER_CD_DOT_PRODUCT_NV = 0x00008546;
        public const int GL_COMBINER_CD_OUTPUT_NV = 0x0000854b;
        public const int GL_COMBINER_COMPONENT_USAGE_NV = 0x00008544;
        public const int GL_COMBINER_INPUT_NV = 0x00008542;
        public const int GL_COMBINER_MAPPING_NV = 0x00008543;
        public const int GL_COMBINER_MUX_SUM_NV = 0x00008547;
        public const int GL_COMBINER_SCALE_NV = 0x00008548;
        public const int GL_COMBINER_SUM_OUTPUT_NV = 0x0000854c;
        public const int GL_COMBINER0_NV = 0x00008550;
        public const int GL_COMBINER1_NV = 0x00008551;
        public const int GL_COMBINER2_NV = 0x00008552;
        public const int GL_COMBINER3_NV = 0x00008553;
        public const int GL_COMBINER4_NV = 0x00008554;
        public const int GL_COMBINER5_NV = 0x00008555;
        public const int GL_COMBINER6_NV = 0x00008556;
        public const int GL_COMBINER7_NV = 0x00008557;
        public const int GL_COMP_BIT_ATI = 0x00000002;
        public const int GL_COMPARE_R_TO_TEXTURE = 0x0000884e;
        public const int GL_COMPARE_R_TO_TEXTURE_ARB = 0x0000884e;
        public const int GL_COMPILE = 0x00001300;
        public const int GL_COMPILE_AND_EXECUTE = 0x00001301;
        public const int GL_COMPILE_STATUS = 0x00008b81;
        public const int GL_COMPRESSED_ALPHA = 0x000084e9;
        public const int GL_COMPRESSED_ALPHA_ARB = 0x000084e9;
        public const int GL_COMPRESSED_INTENSITY = 0x000084ec;
        public const int GL_COMPRESSED_INTENSITY_ARB = 0x000084ec;
        public const int GL_COMPRESSED_LUMINANCE = 0x000084ea;
        public const int GL_COMPRESSED_LUMINANCE_ALPHA = 0x000084eb;
        public const int GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x000084eb;
        public const int GL_COMPRESSED_LUMINANCE_ARB = 0x000084ea;
        public const int GL_COMPRESSED_RGB = 0x000084ed;
        public const int GL_COMPRESSED_RGB_ARB = 0x000084ed;
        public const int GL_COMPRESSED_RGB_FXT1_3DFX = 0x000086b0;
        public const int GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x000083f0;
        public const int GL_COMPRESSED_RGBA = 0x000084ee;
        public const int GL_COMPRESSED_RGBA_ARB = 0x000084ee;
        public const int GL_COMPRESSED_RGBA_FXT1_3DFX = 0x000086b1;
        public const int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x000083f1;
        public const int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x000083f2;
        public const int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x000083f3;
        public const int GL_COMPRESSED_TEXTURE_FORMATS = 0x000086a3;
        public const int GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x000086a3;
        public const int GL_CON_0_ATI = 0x00008941;
        public const int GL_CON_1_ATI = 0x00008942;
        public const int GL_CON_10_ATI = 0x0000894b;
        public const int GL_CON_11_ATI = 0x0000894c;
        public const int GL_CON_12_ATI = 0x0000894d;
        public const int GL_CON_13_ATI = 0x0000894e;
        public const int GL_CON_14_ATI = 0x0000894f;
        public const int GL_CON_15_ATI = 0x00008950;
        public const int GL_CON_16_ATI = 0x00008951;
        public const int GL_CON_17_ATI = 0x00008952;
        public const int GL_CON_18_ATI = 0x00008953;
        public const int GL_CON_19_ATI = 0x00008954;
        public const int GL_CON_2_ATI = 0x00008943;
        public const int GL_CON_20_ATI = 0x00008955;
        public const int GL_CON_21_ATI = 0x00008956;
        public const int GL_CON_22_ATI = 0x00008957;
        public const int GL_CON_23_ATI = 0x00008958;
        public const int GL_CON_24_ATI = 0x00008959;
        public const int GL_CON_25_ATI = 0x0000895a;
        public const int GL_CON_26_ATI = 0x0000895b;
        public const int GL_CON_27_ATI = 0x0000895c;
        public const int GL_CON_28_ATI = 0x0000895d;
        public const int GL_CON_29_ATI = 0x0000895e;
        public const int GL_CON_3_ATI = 0x00008944;
        public const int GL_CON_30_ATI = 0x0000895f;
        public const int GL_CON_31_ATI = 0x00008960;
        public const int GL_CON_4_ATI = 0x00008945;
        public const int GL_CON_5_ATI = 0x00008946;
        public const int GL_CON_6_ATI = 0x00008947;
        public const int GL_CON_7_ATI = 0x00008948;
        public const int GL_CON_8_ATI = 0x00008949;
        public const int GL_CON_9_ATI = 0x0000894a;
        public const int GL_CONSERVE_MEMORY_HINT_PGI = 0x0001a1fd;
        public const int GL_CONST_EYE_NV = 0x000086e5;
        public const int GL_CONSTANT = 0x00008576;
        public const int GL_CONSTANT_ALPHA = 0x00008003;
        public const int GL_CONSTANT_ALPHA_EXT = 0x00008003;
        public const int GL_CONSTANT_ARB = 0x00008576;
        public const int GL_CONSTANT_ATTENUATION = 0x00001207;
        public const int GL_CONSTANT_BORDER = 0x00008151;
        public const int GL_CONSTANT_BORDER_HP = 0x00008151;
        public const int GL_CONSTANT_COLOR = 0x00008001;
        public const int GL_CONSTANT_COLOR_EXT = 0x00008001;
        public const int GL_CONSTANT_COLOR0_NV = 0x0000852a;
        public const int GL_CONSTANT_COLOR1_NV = 0x0000852b;
        public const int GL_CONSTANT_EXT = 0x00008576;
        public const int GL_CONVOLUTION_1D = 0x00008010;
        public const int GL_CONVOLUTION_1D_EXT = 0x00008010;
        public const int GL_CONVOLUTION_2D = 0x00008011;
        public const int GL_CONVOLUTION_2D_EXT = 0x00008011;
        public const int GL_CONVOLUTION_BORDER_COLOR = 0x00008154;
        public const int GL_CONVOLUTION_BORDER_COLOR_HP = 0x00008154;
        public const int GL_CONVOLUTION_BORDER_MODE = 0x00008013;
        public const int GL_CONVOLUTION_BORDER_MODE_EXT = 0x00008013;
        public const int GL_CONVOLUTION_FILTER_BIAS = 0x00008015;
        public const int GL_CONVOLUTION_FILTER_BIAS_EXT = 0x00008015;
        public const int GL_CONVOLUTION_FILTER_SCALE = 0x00008014;
        public const int GL_CONVOLUTION_FILTER_SCALE_EXT = 0x00008014;
        public const int GL_CONVOLUTION_FORMAT = 0x00008017;
        public const int GL_CONVOLUTION_FORMAT_EXT = 0x00008017;
        public const int GL_CONVOLUTION_HEIGHT = 0x00008019;
        public const int GL_CONVOLUTION_HEIGHT_EXT = 0x00008019;
        public const int GL_CONVOLUTION_HINT_SGIX = 0x00008316;
        public const int GL_CONVOLUTION_WIDTH = 0x00008018;
        public const int GL_CONVOLUTION_WIDTH_EXT = 0x00008018;
        public const int GL_COORD_REPLACE = 0x00008862;
        public const int GL_COORD_REPLACE_ARB = 0x00008862;
        public const int GL_COORD_REPLACE_NV = 0x00008862;
        public const int GL_COPY = 0x00001503;
        public const int GL_COPY_INVERTED = 0x0000150c;
        public const int GL_COPY_PIXEL_TOKEN = 0x00000706;
        public const int GL_CUBIC_EXT = 0x00008334;
        public const int GL_CUBIC_HP = 0x0000815f;
        public const int GL_CULL_FACE = 0x00000b44;
        public const int GL_CULL_FACE_MODE = 0x00000b45;
        public const int GL_CULL_FRAGMENT_NV = 0x000086e7;
        public const int GL_CULL_MODES_NV = 0x000086e0;
        public const int GL_CULL_VERTEX_EXT = 0x000081aa;
        public const int GL_CULL_VERTEX_EYE_POSITION_EXT = 0x000081ab;
        public const int GL_CULL_VERTEX_IBM = 0x0001928a;
        public const int GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x000081ac;
        public const int GL_CURRENT_ATTRIB_NV = 0x00008626;
        public const int GL_CURRENT_BINORMAL_EXT = 0x0000843c;
        public const int GL_CURRENT_BIT = 0x00000001;
        public const int GL_CURRENT_COLOR = 0x00000b00;
        public const int GL_CURRENT_FOG_COORD = 0x00008453;
        public const int GL_CURRENT_FOG_COORDINATE = 0x00008453;
        public const int GL_CURRENT_FOG_COORDINATE_EXT = 0x00008453;
        public const int GL_CURRENT_INDEX = 0x00000b01;
        public const int GL_CURRENT_MATRIX_ARB = 0x00008641;
        public const int GL_CURRENT_MATRIX_INDEX_ARB = 0x00008845;
        public const int GL_CURRENT_MATRIX_NV = 0x00008641;
        public const int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x00008640;
        public const int GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x00008640;
        public const int GL_CURRENT_NORMAL = 0x00000b02;
        public const int GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x00008865;
        public const int GL_CURRENT_PALETTE_MATRIX_ARB = 0x00008843;
        public const int GL_CURRENT_PROGRAM = 0x00008b8d;
        public const int GL_CURRENT_QUERY = 0x00008865;
        public const int GL_CURRENT_QUERY_ARB = 0x00008865;
        public const int GL_CURRENT_RASTER_COLOR = 0x00000b04;
        public const int GL_CURRENT_RASTER_DISTANCE = 0x00000b09;
        public const int GL_CURRENT_RASTER_INDEX = 0x00000b05;
        public const int GL_CURRENT_RASTER_NORMAL_SGIX = 0x00008406;
        public const int GL_CURRENT_RASTER_POSITION = 0x00000b07;
        public const int GL_CURRENT_RASTER_POSITION_VALID = 0x00000b08;
        public const int GL_CURRENT_RASTER_TEXTURE_COORDS = 0x00000b06;
        public const int GL_CURRENT_SECONDARY_COLOR = 0x00008459;
        public const int GL_CURRENT_SECONDARY_COLOR_EXT = 0x00008459;
        public const int GL_CURRENT_TANGENT_EXT = 0x0000843b;
        public const int GL_CURRENT_TEXTURE_COORDS = 0x00000b03;
        public const int GL_CURRENT_VERTEX_ATTRIB = 0x00008626;
        public const int GL_CURRENT_VERTEX_ATTRIB_ARB = 0x00008626;
        public const int GL_CURRENT_VERTEX_EXT = 0x000087e2;
        public const int GL_CURRENT_VERTEX_WEIGHT_EXT = 0x0000850b;
        public const int GL_CURRENT_WEIGHT_ARB = 0x000086a8;
        public const int GL_CW = 0x00000900;
        public const int GL_DECAL = 0x00002101;
        public const int GL_DECR = 0x00001e03;
        public const int GL_DECR_WRAP = 0x00008508;
        public const int GL_DECR_WRAP_EXT = 0x00008508;
        public const int GL_DEFORMATIONS_MASK_SGIX = 0x00008196;
        public const int GL_DELETE_STATUS = 0x00008b80;
        public const int GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x000086e9;
        public const int GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x000086ea;
        public const int GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x00008858;
        public const int GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x00008859;
        public const int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x0000885a;
        public const int GL_DEPTH = 0x00001801;
        public const int GL_DEPTH_ATTACHMENT_EXT = 0x00008d00;
        public const int GL_DEPTH_BIAS = 0x00000d1f;
        public const int GL_DEPTH_BITS = 0x00000d56;
        public const int GL_DEPTH_BOUNDS_EXT = 0x00008891;
        public const int GL_DEPTH_BOUNDS_TEST_EXT = 0x00008890;
        public const int GL_DEPTH_BUFFER_BIT = 0x00000100;
        public const int GL_DEPTH_CLAMP_NV = 0x0000864f;
        public const int GL_DEPTH_CLEAR_VALUE = 0x00000b73;
        public const int GL_DEPTH_COMPONENT = 0x00001902;
        public const int GL_DEPTH_COMPONENT16 = 0x000081a5;
        public const int GL_DEPTH_COMPONENT16_ARB = 0x000081a5;
        public const int GL_DEPTH_COMPONENT16_SGIX = 0x000081a5;
        public const int GL_DEPTH_COMPONENT24 = 0x000081a6;
        public const int GL_DEPTH_COMPONENT24_ARB = 0x000081a6;
        public const int GL_DEPTH_COMPONENT24_SGIX = 0x000081a6;
        public const int GL_DEPTH_COMPONENT32 = 0x000081a7;
        public const int GL_DEPTH_COMPONENT32_ARB = 0x000081a7;
        public const int GL_DEPTH_COMPONENT32_SGIX = 0x000081a7;
        public const int GL_DEPTH_FUNC = 0x00000b74;
        public const int GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x00008311;
        public const int GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x00008312;
        public const int GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x00008310;
        public const int GL_DEPTH_RANGE = 0x00000b70;
        public const int GL_DEPTH_SCALE = 0x00000d1e;
        public const int GL_DEPTH_STENCIL_NV = 0x000084f9;
        public const int GL_DEPTH_STENCIL_TO_BGRA_NV = 0x0000886f;
        public const int GL_DEPTH_STENCIL_TO_RGBA_NV = 0x0000886e;
        public const int GL_DEPTH_TEST = 0x00000b71;
        public const int GL_DEPTH_TEXTURE_MODE = 0x0000884b;
        public const int GL_DEPTH_TEXTURE_MODE_ARB = 0x0000884b;
        public const int GL_DEPTH_WRITEMASK = 0x00000b72;
        public const int GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x00008096;
        public const int GL_DETAIL_TEXTURE_2D_SGIS = 0x00008095;
        public const int GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x0000809c;
        public const int GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x0000809a;
        public const int GL_DETAIL_TEXTURE_MODE_SGIS = 0x0000809b;
        public const int GL_DIFFUSE = 0x00001201;
        public const int GL_DISCARD_ATI = 0x00008763;
        public const int GL_DISCARD_NV = 0x00008530;
        public const int GL_DISTANCE_ATTENUATION_EXT = 0x00008129;
        public const int GL_DISTANCE_ATTENUATION_SGIS = 0x00008129;
        public const int GL_DITHER = 0x00000bd0;
        public const int GL_DOMAIN = 0x00000a02;
        public const int GL_DONT_CARE = 0x00001100;
        public const int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x0000885d;
        public const int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x000086f3;
        public const int GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x000086ed;
        public const int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x000086f1;
        public const int GL_DOT_PRODUCT_NV = 0x000086ec;
        public const int GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x0000885b;
        public const int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x000086f2;
        public const int GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x0000885c;
        public const int GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x000086ee;
        public const int GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x000086ef;
        public const int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x000086f0;
        public const int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x0000864e;
        public const int GL_DOT2_ADD_ATI = 0x0000896c;
        public const int GL_DOT3_ATI = 0x00008966;
        public const int GL_DOT3_RGB = 0x000086ae;
        public const int GL_DOT3_RGB_ARB = 0x000086ae;
        public const int GL_DOT3_RGB_EXT = 0x00008740;
        public const int GL_DOT3_RGBA = 0x000086af;
        public const int GL_DOT3_RGBA_ARB = 0x000086af;
        public const int GL_DOT3_RGBA_EXT = 0x00008741;
        public const int GL_DOT4_ATI = 0x00008967;
        public const int GL_DOUBLE = 0x0000140a;
        public const int GL_DOUBLE_EXT = 0x0000140a;
        public const int GL_DOUBLEBUFFER = 0x00000c32;
        public const int GL_DRAW_BUFFER = 0x00000c01;
        public const int GL_DRAW_BUFFER0 = 0x00008825;
        public const int GL_DRAW_BUFFER0_ARB = 0x00008825;
        public const int GL_DRAW_BUFFER0_ATI = 0x00008825;
        public const int GL_DRAW_BUFFER1 = 0x00008826;
        public const int GL_DRAW_BUFFER1_ARB = 0x00008826;
        public const int GL_DRAW_BUFFER1_ATI = 0x00008826;
        public const int GL_DRAW_BUFFER10 = 0x0000882f;
        public const int GL_DRAW_BUFFER10_ARB = 0x0000882f;
        public const int GL_DRAW_BUFFER10_ATI = 0x0000882f;
        public const int GL_DRAW_BUFFER11 = 0x00008830;
        public const int GL_DRAW_BUFFER11_ARB = 0x00008830;
        public const int GL_DRAW_BUFFER11_ATI = 0x00008830;
        public const int GL_DRAW_BUFFER12 = 0x00008831;
        public const int GL_DRAW_BUFFER12_ARB = 0x00008831;
        public const int GL_DRAW_BUFFER12_ATI = 0x00008831;
        public const int GL_DRAW_BUFFER13 = 0x00008832;
        public const int GL_DRAW_BUFFER13_ARB = 0x00008832;
        public const int GL_DRAW_BUFFER13_ATI = 0x00008832;
        public const int GL_DRAW_BUFFER14 = 0x00008833;
        public const int GL_DRAW_BUFFER14_ARB = 0x00008833;
        public const int GL_DRAW_BUFFER14_ATI = 0x00008833;
        public const int GL_DRAW_BUFFER15 = 0x00008834;
        public const int GL_DRAW_BUFFER15_ARB = 0x00008834;
        public const int GL_DRAW_BUFFER15_ATI = 0x00008834;
        public const int GL_DRAW_BUFFER2 = 0x00008827;
        public const int GL_DRAW_BUFFER2_ARB = 0x00008827;
        public const int GL_DRAW_BUFFER2_ATI = 0x00008827;
        public const int GL_DRAW_BUFFER3 = 0x00008828;
        public const int GL_DRAW_BUFFER3_ARB = 0x00008828;
        public const int GL_DRAW_BUFFER3_ATI = 0x00008828;
        public const int GL_DRAW_BUFFER4 = 0x00008829;
        public const int GL_DRAW_BUFFER4_ARB = 0x00008829;
        public const int GL_DRAW_BUFFER4_ATI = 0x00008829;
        public const int GL_DRAW_BUFFER5 = 0x0000882a;
        public const int GL_DRAW_BUFFER5_ARB = 0x0000882a;
        public const int GL_DRAW_BUFFER5_ATI = 0x0000882a;
        public const int GL_DRAW_BUFFER6 = 0x0000882b;
        public const int GL_DRAW_BUFFER6_ARB = 0x0000882b;
        public const int GL_DRAW_BUFFER6_ATI = 0x0000882b;
        public const int GL_DRAW_BUFFER7 = 0x0000882c;
        public const int GL_DRAW_BUFFER7_ARB = 0x0000882c;
        public const int GL_DRAW_BUFFER7_ATI = 0x0000882c;
        public const int GL_DRAW_BUFFER8 = 0x0000882d;
        public const int GL_DRAW_BUFFER8_ARB = 0x0000882d;
        public const int GL_DRAW_BUFFER8_ATI = 0x0000882d;
        public const int GL_DRAW_BUFFER9 = 0x0000882e;
        public const int GL_DRAW_BUFFER9_ARB = 0x0000882e;
        public const int GL_DRAW_BUFFER9_ATI = 0x0000882e;
        public const int GL_DRAW_PIXEL_TOKEN = 0x00000705;
        public const int GL_DRAW_PIXELS_APPLE = 0x00008a0a;
        public const int GL_DS_BIAS_NV = 0x00008716;
        public const int GL_DS_SCALE_NV = 0x00008710;
        public const int GL_DSDT_MAG_INTENSITY_NV = 0x000086dc;
        public const int GL_DSDT_MAG_NV = 0x000086f6;
        public const int GL_DSDT_MAG_VIB_NV = 0x000086f7;
        public const int GL_DSDT_NV = 0x000086f5;
        public const int GL_DSDT8_MAG8_INTENSITY8_NV = 0x0000870b;
        public const int GL_DSDT8_MAG8_NV = 0x0000870a;
        public const int GL_DSDT8_NV = 0x00008709;
        public const int GL_DST_ALPHA = 0x00000304;
        public const int GL_DST_COLOR = 0x00000306;
        public const int GL_DT_BIAS_NV = 0x00008717;
        public const int GL_DT_SCALE_NV = 0x00008711;
        public const int GL_DU8DV8_ATI = 0x0000877a;
        public const int GL_DUAL_ALPHA12_SGIS = 0x00008112;
        public const int GL_DUAL_ALPHA16_SGIS = 0x00008113;
        public const int GL_DUAL_ALPHA4_SGIS = 0x00008110;
        public const int GL_DUAL_ALPHA8_SGIS = 0x00008111;
        public const int GL_DUAL_INTENSITY12_SGIS = 0x0000811a;
        public const int GL_DUAL_INTENSITY16_SGIS = 0x0000811b;
        public const int GL_DUAL_INTENSITY4_SGIS = 0x00008118;
        public const int GL_DUAL_INTENSITY8_SGIS = 0x00008119;
        public const int GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x0000811c;
        public const int GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x0000811d;
        public const int GL_DUAL_LUMINANCE12_SGIS = 0x00008116;
        public const int GL_DUAL_LUMINANCE16_SGIS = 0x00008117;
        public const int GL_DUAL_LUMINANCE4_SGIS = 0x00008114;
        public const int GL_DUAL_LUMINANCE8_SGIS = 0x00008115;
        public const int GL_DUAL_TEXTURE_SELECT_SGIS = 0x00008124;
        public const int GL_DUDV_ATI = 0x00008779;
        public const int GL_DYNAMIC_ATI = 0x00008761;
        public const int GL_DYNAMIC_COPY = 0x000088ea;
        public const int GL_DYNAMIC_COPY_ARB = 0x000088ea;
        public const int GL_DYNAMIC_DRAW = 0x000088e8;
        public const int GL_DYNAMIC_DRAW_ARB = 0x000088e8;
        public const int GL_DYNAMIC_READ = 0x000088e9;
        public const int GL_DYNAMIC_READ_ARB = 0x000088e9;
        public const int GL_E_TIMES_F_NV = 0x00008531;
        public const int GL_EDGE_FLAG = 0x00000b43;
        public const int GL_EDGE_FLAG_ARRAY = 0x00008079;
        public const int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x0000889b;
        public const int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x0000889b;
        public const int GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x0000808d;
        public const int GL_EDGE_FLAG_ARRAY_EXT = 0x00008079;
        public const int GL_EDGE_FLAG_ARRAY_LIST_IBM = 0x000192a3;
        public const int GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 0x000192ad;
        public const int GL_EDGE_FLAG_ARRAY_POINTER = 0x00008093;
        public const int GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x00008093;
        public const int GL_EDGE_FLAG_ARRAY_STRIDE = 0x0000808c;
        public const int GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x0000808c;
        public const int GL_EDGEFLAG_BIT_PGI = 0x00040000;
        public const int GL_EIGHTH_BIT_ATI = 0x00000020;
        public const int GL_ELEMENT_ARRAY_APPLE = 0x00008768;
        public const int GL_ELEMENT_ARRAY_ATI = 0x00008768;
        public const int GL_ELEMENT_ARRAY_BUFFER = 0x00008893;
        public const int GL_ELEMENT_ARRAY_BUFFER_ARB = 0x00008893;
        public const int GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x00008895;
        public const int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x00008895;
        public const int GL_ELEMENT_ARRAY_POINTER_APPLE = 0x0000876a;
        public const int GL_ELEMENT_ARRAY_POINTER_ATI = 0x0000876a;
        public const int GL_ELEMENT_ARRAY_TYPE_APPLE = 0x00008769;
        public const int GL_ELEMENT_ARRAY_TYPE_ATI = 0x00008769;
        public const int GL_EMBOSS_CONSTANT_NV = 0x0000855e;
        public const int GL_EMBOSS_LIGHT_NV = 0x0000855d;
        public const int GL_EMBOSS_MAP_NV = 0x0000855f;
        public const int GL_EMISSION = 0x00001600;
        public const int GL_ENABLE_BIT = 0x00002000;
        public const int GL_EQUAL = 0x00000202;
        public const int GL_EQUIV = 0x00001509;
        public const int GL_EVAL_2D_NV = 0x000086c0;
        public const int GL_EVAL_BIT = 0x00010000;
        public const int GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x000086c5;
        public const int GL_EVAL_TRIANGULAR_2D_NV = 0x000086c1;
        public const int GL_EVAL_VERTEX_ATTRIB0_NV = 0x000086c6;
        public const int GL_EVAL_VERTEX_ATTRIB1_NV = 0x000086c7;
        public const int GL_EVAL_VERTEX_ATTRIB10_NV = 0x000086d0;
        public const int GL_EVAL_VERTEX_ATTRIB11_NV = 0x000086d1;
        public const int GL_EVAL_VERTEX_ATTRIB12_NV = 0x000086d2;
        public const int GL_EVAL_VERTEX_ATTRIB13_NV = 0x000086d3;
        public const int GL_EVAL_VERTEX_ATTRIB14_NV = 0x000086d4;
        public const int GL_EVAL_VERTEX_ATTRIB15_NV = 0x000086d5;
        public const int GL_EVAL_VERTEX_ATTRIB2_NV = 0x000086c8;
        public const int GL_EVAL_VERTEX_ATTRIB3_NV = 0x000086c9;
        public const int GL_EVAL_VERTEX_ATTRIB4_NV = 0x000086ca;
        public const int GL_EVAL_VERTEX_ATTRIB5_NV = 0x000086cb;
        public const int GL_EVAL_VERTEX_ATTRIB6_NV = 0x000086cc;
        public const int GL_EVAL_VERTEX_ATTRIB7_NV = 0x000086cd;
        public const int GL_EVAL_VERTEX_ATTRIB8_NV = 0x000086ce;
        public const int GL_EVAL_VERTEX_ATTRIB9_NV = 0x000086cf;
        public const int GL_EXP = 0x00000800;
        public const int GL_EXP2 = 0x00000801;
        public const int GL_EXPAND_NEGATE_NV = 0x00008539;
        public const int GL_EXPAND_NORMAL_NV = 0x00008538;
        public const int GL_EXTENSIONS = 0x00001f03;
        public const int GL_EYE_DISTANCE_TO_LINE_SGIS = 0x000081f2;
        public const int GL_EYE_DISTANCE_TO_POINT_SGIS = 0x000081f0;
        public const int GL_EYE_LINE_SGIS = 0x000081f6;
        public const int GL_EYE_LINEAR = 0x00002400;
        public const int GL_EYE_PLANE = 0x00002502;
        public const int GL_EYE_PLANE_ABSOLUTE_NV = 0x0000855c;
        public const int GL_EYE_POINT_SGIS = 0x000081f4;
        public const int GL_EYE_RADIAL_NV = 0x0000855b;
        public const int GL_FALSE = 0x00000000;
        public const int GL_FASTEST = 0x00001101;
        public const int GL_FEEDBACK = 0x00001c01;
        public const int GL_FEEDBACK_BUFFER_POINTER = 0x00000df0;
        public const int GL_FEEDBACK_BUFFER_SIZE = 0x00000df1;
        public const int GL_FEEDBACK_BUFFER_TYPE = 0x00000df2;
        public const int GL_FENCE_APPLE = 0x00008a0b;
        public const int GL_FENCE_CONDITION_NV = 0x000084f4;
        public const int GL_FENCE_STATUS_NV = 0x000084f3;
        public const int GL_FILL = 0x00001b02;
        public const int GL_FILTER4_SGIS = 0x00008146;
        public const int GL_FIXED_ONLY_ARB = 0x0000891d;
        public const int GL_FLAT = 0x00001d00;
        public const int GL_FLOAT = 0x00001406;
        public const int GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x0000888d;
        public const int GL_FLOAT_MAT2 = 0x00008b5a;
        public const int GL_FLOAT_MAT2_ARB = 0x00008b5a;
        public const int GL_FLOAT_MAT3 = 0x00008b5b;
        public const int GL_FLOAT_MAT3_ARB = 0x00008b5b;
        public const int GL_FLOAT_MAT4 = 0x00008b5c;
        public const int GL_FLOAT_MAT4_ARB = 0x00008b5c;
        public const int GL_FLOAT_R_NV = 0x00008880;
        public const int GL_FLOAT_R16_NV = 0x00008884;
        public const int GL_FLOAT_R32_NV = 0x00008885;
        public const int GL_FLOAT_RG_NV = 0x00008881;
        public const int GL_FLOAT_RG16_NV = 0x00008886;
        public const int GL_FLOAT_RG32_NV = 0x00008887;
        public const int GL_FLOAT_RGB_NV = 0x00008882;
        public const int GL_FLOAT_RGB16_NV = 0x00008888;
        public const int GL_FLOAT_RGB32_NV = 0x00008889;
        public const int GL_FLOAT_RGBA_MODE_NV = 0x0000888e;
        public const int GL_FLOAT_RGBA_NV = 0x00008883;
        public const int GL_FLOAT_RGBA16_NV = 0x0000888a;
        public const int GL_FLOAT_RGBA32_NV = 0x0000888b;
        public const int GL_FLOAT_VEC2 = 0x00008b50;
        public const int GL_FLOAT_VEC2_ARB = 0x00008b50;
        public const int GL_FLOAT_VEC3 = 0x00008b51;
        public const int GL_FLOAT_VEC3_ARB = 0x00008b51;
        public const int GL_FLOAT_VEC4 = 0x00008b52;
        public const int GL_FLOAT_VEC4_ARB = 0x00008b52;
        public const int GL_FOG = 0x00000b60;
        public const int GL_FOG_BIT = 0x00000080;
        public const int GL_FOG_COLOR = 0x00000b66;
        public const int GL_FOG_COORD = 0x00008451;
        public const int GL_FOG_COORD_ARRAY = 0x00008457;
        public const int GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x0000889d;
        public const int GL_FOG_COORD_ARRAY_POINTER = 0x00008456;
        public const int GL_FOG_COORD_ARRAY_STRIDE = 0x00008455;
        public const int GL_FOG_COORD_ARRAY_TYPE = 0x00008454;
        public const int GL_FOG_COORD_SRC = 0x00008450;
        public const int GL_FOG_COORDINATE = 0x00008451;
        public const int GL_FOG_COORDINATE_ARRAY = 0x00008457;
        public const int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x0000889d;
        public const int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x0000889d;
        public const int GL_FOG_COORDINATE_ARRAY_EXT = 0x00008457;
        public const int GL_FOG_COORDINATE_ARRAY_LIST_IBM = 0x000192a4;
        public const int GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 0x000192ae;
        public const int GL_FOG_COORDINATE_ARRAY_POINTER = 0x00008456;
        public const int GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x00008456;
        public const int GL_FOG_COORDINATE_ARRAY_STRIDE = 0x00008455;
        public const int GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x00008455;
        public const int GL_FOG_COORDINATE_ARRAY_TYPE = 0x00008454;
        public const int GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x00008454;
        public const int GL_FOG_COORDINATE_EXT = 0x00008451;
        public const int GL_FOG_COORDINATE_SOURCE = 0x00008450;
        public const int GL_FOG_COORDINATE_SOURCE_EXT = 0x00008450;
        public const int GL_FOG_DENSITY = 0x00000b62;
        public const int GL_FOG_DISTANCE_MODE_NV = 0x0000855a;
        public const int GL_FOG_END = 0x00000b64;
        public const int GL_FOG_FUNC_POINTS_SGIS = 0x0000812b;
        public const int GL_FOG_FUNC_SGIS = 0x0000812a;
        public const int GL_FOG_HINT = 0x00000c54;
        public const int GL_FOG_INDEX = 0x00000b61;
        public const int GL_FOG_MODE = 0x00000b65;
        public const int GL_FOG_OFFSET_SGIX = 0x00008198;
        public const int GL_FOG_OFFSET_VALUE_SGIX = 0x00008199;
        public const int GL_FOG_SCALE_SGIX = 0x000081fc;
        public const int GL_FOG_SCALE_VALUE_SGIX = 0x000081fd;
        public const int GL_FOG_SPECULAR_TEXTURE_WIN = 0x000080ec;
        public const int GL_FOG_START = 0x00000b63;
        public const int GL_FORCE_BLUE_TO_ONE_NV = 0x00008860;
        public const int GL_FORMAT_SUBSAMPLE_24_24_OML = 0x00008982;
        public const int GL_FORMAT_SUBSAMPLE_244_244_OML = 0x00008983;
        public const int GL_FRAGMENT_COLOR_EXT = 0x0000834c;
        public const int GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x00008402;
        public const int GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x00008403;
        public const int GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x00008401;
        public const int GL_FRAGMENT_DEPTH = 0x00008452;
        public const int GL_FRAGMENT_DEPTH_EXT = 0x00008452;
        public const int GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x0000840a;
        public const int GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x00008408;
        public const int GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x0000840b;
        public const int GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x00008409;
        public const int GL_FRAGMENT_LIGHT0_SGIX = 0x0000840c;
        public const int GL_FRAGMENT_LIGHT1_SGIX = 0x0000840d;
        public const int GL_FRAGMENT_LIGHT2_SGIX = 0x0000840e;
        public const int GL_FRAGMENT_LIGHT3_SGIX = 0x0000840f;
        public const int GL_FRAGMENT_LIGHT4_SGIX = 0x00008410;
        public const int GL_FRAGMENT_LIGHT5_SGIX = 0x00008411;
        public const int GL_FRAGMENT_LIGHT6_SGIX = 0x00008412;
        public const int GL_FRAGMENT_LIGHT7_SGIX = 0x00008413;
        public const int GL_FRAGMENT_LIGHTING_SGIX = 0x00008400;
        public const int GL_FRAGMENT_MATERIAL_EXT = 0x00008349;
        public const int GL_FRAGMENT_NORMAL_EXT = 0x0000834a;
        public const int GL_FRAGMENT_PROGRAM_ARB = 0x00008804;
        public const int GL_FRAGMENT_PROGRAM_BINDING_NV = 0x00008873;
        public const int GL_FRAGMENT_PROGRAM_NV = 0x00008870;
        public const int GL_FRAGMENT_SHADER = 0x00008b30;
        public const int GL_FRAGMENT_SHADER_ARB = 0x00008b30;
        public const int GL_FRAGMENT_SHADER_ATI = 0x00008920;
        public const int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x00008b8b;
        public const int GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x00008b8b;
        public const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x00008cd1;
        public const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x00008cd0;
        public const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x00008cd4;
        public const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x00008cd3;
        public const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x00008cd2;
        public const int GL_FRAMEBUFFER_BINDING_EXT = 0x00008ca6;
        public const int GL_FRAMEBUFFER_COMPLETE_EXT = 0x00008cd5;
        public const int GL_FRAMEBUFFER_EXT = 0x00008d40;
        public const int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x00008cd6;
        public const int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x00008cd9;
        public const int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x00008cdb;
        public const int GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = 0x00008cd8;
        public const int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x00008cda;
        public const int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x00008cd7;
        public const int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x00008cdc;
        public const int GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x00008cdd;
        public const int GL_FRAMEZOOM_FACTOR_SGIX = 0x0000818c;
        public const int GL_FRAMEZOOM_SGIX = 0x0000818b;
        public const int GL_FRONT = 0x00000404;
        public const int GL_FRONT_AND_BACK = 0x00000408;
        public const int GL_FRONT_FACE = 0x00000b46;
        public const int GL_FRONT_LEFT = 0x00000400;
        public const int GL_FRONT_RIGHT = 0x00000401;
        public const int GL_FULL_RANGE_EXT = 0x000087e1;
        public const int GL_FULL_STIPPLE_HINT_PGI = 0x0001a219;
        public const int GL_FUNC_ADD = 0x00008006;
        public const int GL_FUNC_ADD_EXT = 0x00008006;
        public const int GL_FUNC_REVERSE_SUBTRACT = 0x0000800b;
        public const int GL_FUNC_REVERSE_SUBTRACT_EXT = 0x0000800b;
        public const int GL_FUNC_SUBTRACT = 0x0000800a;
        public const int GL_FUNC_SUBTRACT_EXT = 0x0000800a;
        public const int GL_GENERATE_MIPMAP = 0x00008191;
        public const int GL_GENERATE_MIPMAP_HINT = 0x00008192;
        public const int GL_GENERATE_MIPMAP_HINT_SGIS = 0x00008192;
        public const int GL_GENERATE_MIPMAP_SGIS = 0x00008191;
        public const int GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
        public const int GL_GEOMETRY_DEFORMATION_SGIX = 0x00008194;
        public const int GL_GEQUAL = 0x00000206;
        public const int GL_GLEXT_VERSION = 0x0000001d;
        public const int GL_GLOBAL_ALPHA_FACTOR_SUN = 0x000081da;
        public const int GL_GLOBAL_ALPHA_SUN = 0x000081d9;
        public const int GL_GREATER = 0x00000204;
        public const int GL_GREEN = 0x00001904;
        public const int GL_GREEN_BIAS = 0x00000d19;
        public const int GL_GREEN_BIT_ATI = 0x00000002;
        public const int GL_GREEN_BITS = 0x00000d53;
        public const int GL_GREEN_MAX_CLAMP_INGR = 0x00008565;
        public const int GL_GREEN_MIN_CLAMP_INGR = 0x00008561;
        public const int GL_GREEN_SCALE = 0x00000d18;
        public const int GL_HALF_BIAS_NEGATE_NV = 0x0000853b;
        public const int GL_HALF_BIAS_NORMAL_NV = 0x0000853a;
        public const int GL_HALF_BIT_ATI = 0x00000008;
        public const int GL_HALF_FLOAT_ARB = 0x0000140b;
        public const int GL_HALF_FLOAT_NV = 0x0000140b;
        public const int GL_HI_BIAS_NV = 0x00008714;
        public const int GL_HI_SCALE_NV = 0x0000870e;
        public const int GL_HILO_NV = 0x000086f4;
        public const int GL_HILO16_NV = 0x000086f8;
        public const int GL_HILO8_NV = 0x0000885e;
        public const int GL_HINT_BIT = 0x00008000;
        public const int GL_HISTOGRAM = 0x00008024;
        public const int GL_HISTOGRAM_ALPHA_SIZE = 0x0000802b;
        public const int GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x0000802b;
        public const int GL_HISTOGRAM_BLUE_SIZE = 0x0000802a;
        public const int GL_HISTOGRAM_BLUE_SIZE_EXT = 0x0000802a;
        public const int GL_HISTOGRAM_EXT = 0x00008024;
        public const int GL_HISTOGRAM_FORMAT = 0x00008027;
        public const int GL_HISTOGRAM_FORMAT_EXT = 0x00008027;
        public const int GL_HISTOGRAM_GREEN_SIZE = 0x00008029;
        public const int GL_HISTOGRAM_GREEN_SIZE_EXT = 0x00008029;
        public const int GL_HISTOGRAM_LUMINANCE_SIZE = 0x0000802c;
        public const int GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x0000802c;
        public const int GL_HISTOGRAM_RED_SIZE = 0x00008028;
        public const int GL_HISTOGRAM_RED_SIZE_EXT = 0x00008028;
        public const int GL_HISTOGRAM_SINK = 0x0000802d;
        public const int GL_HISTOGRAM_SINK_EXT = 0x0000802d;
        public const int GL_HISTOGRAM_WIDTH = 0x00008026;
        public const int GL_HISTOGRAM_WIDTH_EXT = 0x00008026;
        public const int GL_IDENTITY_NV = 0x0000862a;
        public const int GL_IGNORE_BORDER_HP = 0x00008150;
        public const int GL_IMAGE_CUBIC_WEIGHT_HP = 0x0000815e;
        public const int GL_IMAGE_MAG_FILTER_HP = 0x0000815c;
        public const int GL_IMAGE_MIN_FILTER_HP = 0x0000815d;
        public const int GL_IMAGE_ROTATE_ANGLE_HP = 0x00008159;
        public const int GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x0000815a;
        public const int GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x0000815b;
        public const int GL_IMAGE_SCALE_X_HP = 0x00008155;
        public const int GL_IMAGE_SCALE_Y_HP = 0x00008156;
        public const int GL_IMAGE_TRANSFORM_2D_HP = 0x00008161;
        public const int GL_IMAGE_TRANSLATE_X_HP = 0x00008157;
        public const int GL_IMAGE_TRANSLATE_Y_HP = 0x00008158;
        public const int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x00008b9b;
        public const int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x00008b9a;
        public const int GL_INCR = 0x00001e02;
        public const int GL_INCR_WRAP = 0x00008507;
        public const int GL_INCR_WRAP_EXT = 0x00008507;
        public const int GL_INDEX_ARRAY = 0x00008077;
        public const int GL_INDEX_ARRAY_BUFFER_BINDING = 0x00008899;
        public const int GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x00008899;
        public const int GL_INDEX_ARRAY_COUNT_EXT = 0x00008087;
        public const int GL_INDEX_ARRAY_EXT = 0x00008077;
        public const int GL_INDEX_ARRAY_LIST_IBM = 0x000192a1;
        public const int GL_INDEX_ARRAY_LIST_STRIDE_IBM = 0x000192ab;
        public const int GL_INDEX_ARRAY_POINTER = 0x00008091;
        public const int GL_INDEX_ARRAY_POINTER_EXT = 0x00008091;
        public const int GL_INDEX_ARRAY_STRIDE = 0x00008086;
        public const int GL_INDEX_ARRAY_STRIDE_EXT = 0x00008086;
        public const int GL_INDEX_ARRAY_TYPE = 0x00008085;
        public const int GL_INDEX_ARRAY_TYPE_EXT = 0x00008085;
        public const int GL_INDEX_BIT_PGI = 0x00080000;
        public const int GL_INDEX_BITS = 0x00000d51;
        public const int GL_INDEX_CLEAR_VALUE = 0x00000c20;
        public const int GL_INDEX_LOGIC_OP = 0x00000bf1;
        public const int GL_INDEX_MATERIAL_EXT = 0x000081b8;
        public const int GL_INDEX_MATERIAL_FACE_EXT = 0x000081ba;
        public const int GL_INDEX_MATERIAL_PARAMETER_EXT = 0x000081b9;
        public const int GL_INDEX_MODE = 0x00000c30;
        public const int GL_INDEX_OFFSET = 0x00000d13;
        public const int GL_INDEX_SHIFT = 0x00000d12;
        public const int GL_INDEX_TEST_EXT = 0x000081b5;
        public const int GL_INDEX_TEST_FUNC_EXT = 0x000081b6;
        public const int GL_INDEX_TEST_REF_EXT = 0x000081b7;
        public const int GL_INDEX_WRITEMASK = 0x00000c21;
        public const int GL_INFO_LOG_LENGTH = 0x00008b84;
        public const int GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x00008180;
        public const int GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x00008181;
        public const int GL_INT = 0x00001404;
        public const int GL_INT_VEC2 = 0x00008b53;
        public const int GL_INT_VEC2_ARB = 0x00008b53;
        public const int GL_INT_VEC3 = 0x00008b54;
        public const int GL_INT_VEC3_ARB = 0x00008b54;
        public const int GL_INT_VEC4 = 0x00008b55;
        public const int GL_INT_VEC4_ARB = 0x00008b55;
        public const int GL_INTENSITY = 0x00008049;
        public const int GL_INTENSITY_EXT = 0x00008049;
        public const int GL_INTENSITY_FLOAT16_ATI = 0x0000881d;
        public const int GL_INTENSITY_FLOAT32_ATI = 0x00008817;
        public const int GL_INTENSITY12 = 0x0000804c;
        public const int GL_INTENSITY12_EXT = 0x0000804c;
        public const int GL_INTENSITY16 = 0x0000804d;
        public const int GL_INTENSITY16_EXT = 0x0000804d;
        public const int GL_INTENSITY16F_ARB = 0x0000881d;
        public const int GL_INTENSITY32F_ARB = 0x00008817;
        public const int GL_INTENSITY4 = 0x0000804a;
        public const int GL_INTENSITY4_EXT = 0x0000804a;
        public const int GL_INTENSITY8 = 0x0000804b;
        public const int GL_INTENSITY8_EXT = 0x0000804b;
        public const int GL_INTERLACE_OML = 0x00008980;
        public const int GL_INTERLACE_READ_INGR = 0x00008568;
        public const int GL_INTERLACE_READ_OML = 0x00008981;
        public const int GL_INTERLACE_SGIX = 0x00008094;
        public const int GL_INTERPOLATE = 0x00008575;
        public const int GL_INTERPOLATE_ARB = 0x00008575;
        public const int GL_INTERPOLATE_EXT = 0x00008575;
        public const int GL_INVALID_ENUM = 0x00000500;
        public const int GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x00000506;
        public const int GL_INVALID_OPERATION = 0x00000502;
        public const int GL_INVALID_VALUE = 0x00000501;
        public const int GL_INVARIANT_DATATYPE_EXT = 0x000087eb;
        public const int GL_INVARIANT_EXT = 0x000087c2;
        public const int GL_INVARIANT_VALUE_EXT = 0x000087ea;
        public const int GL_INVERSE_NV = 0x0000862b;
        public const int GL_INVERSE_TRANSPOSE_NV = 0x0000862d;
        public const int GL_INVERT = 0x0000150a;
        public const int GL_INVERTED_SCREEN_W_REND = 0x00008491;
        public const int GL_IR_INSTRUMENT1_SGIX = 0x0000817f;
        public const int GL_IUI_N3F_V2F_EXT = 0x000081af;
        public const int GL_IUI_N3F_V3F_EXT = 0x000081b0;
        public const int GL_IUI_V2F_EXT = 0x000081ad;
        public const int GL_IUI_V3F_EXT = 0x000081ae;
        public const int GL_KEEP = 0x00001e00;
        public const int GL_LEFT = 0x00000406;
        public const int GL_LEQUAL = 0x00000203;
        public const int GL_LERP_ATI = 0x00008969;
        public const int GL_LESS = 0x00000201;
        public const int GL_LIGHT_ENV_MODE_SGIX = 0x00008407;
        public const int GL_LIGHT_MODEL_AMBIENT = 0x00000b53;
        public const int GL_LIGHT_MODEL_COLOR_CONTROL = 0x000081f8;
        public const int GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x000081f8;
        public const int GL_LIGHT_MODEL_LOCAL_VIEWER = 0x00000b51;
        public const int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x000085b0;
        public const int GL_LIGHT_MODEL_TWO_SIDE = 0x00000b52;
        public const int GL_LIGHT0 = 0x00004000;
        public const int GL_LIGHT1 = 0x00004001;
        public const int GL_LIGHT2 = 0x00004002;
        public const int GL_LIGHT3 = 0x00004003;
        public const int GL_LIGHT4 = 0x00004004;
        public const int GL_LIGHT5 = 0x00004005;
        public const int GL_LIGHT6 = 0x00004006;
        public const int GL_LIGHT7 = 0x00004007;
        public const int GL_LIGHTING = 0x00000b50;
        public const int GL_LIGHTING_BIT = 0x00000040;
        public const int GL_LINE = 0x00001b01;
        public const int GL_LINE_BIT = 0x00000004;
        public const int GL_LINE_LOOP = 0x00000002;
        public const int GL_LINE_RESET_TOKEN = 0x00000707;
        public const int GL_LINE_SMOOTH = 0x00000b20;
        public const int GL_LINE_SMOOTH_HINT = 0x00000c52;
        public const int GL_LINE_STIPPLE = 0x00000b24;
        public const int GL_LINE_STIPPLE_PATTERN = 0x00000b25;
        public const int GL_LINE_STIPPLE_REPEAT = 0x00000b26;
        public const int GL_LINE_STRIP = 0x00000003;
        public const int GL_LINE_TOKEN = 0x00000702;
        public const int GL_LINE_WIDTH = 0x00000b21;
        public const int GL_LINE_WIDTH_GRANULARITY = 0x00000b23;
        public const int GL_LINE_WIDTH_RANGE = 0x00000b22;
        public const int GL_LINEAR = 0x00002601;
        public const int GL_LINEAR_ATTENUATION = 0x00001208;
        public const int GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x00008170;
        public const int GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x0000844f;
        public const int GL_LINEAR_DETAIL_ALPHA_SGIS = 0x00008098;
        public const int GL_LINEAR_DETAIL_COLOR_SGIS = 0x00008099;
        public const int GL_LINEAR_DETAIL_SGIS = 0x00008097;
        public const int GL_LINEAR_MIPMAP_LINEAR = 0x00002703;
        public const int GL_LINEAR_MIPMAP_NEAREST = 0x00002701;
        public const int GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x000080ae;
        public const int GL_LINEAR_SHARPEN_COLOR_SGIS = 0x000080af;
        public const int GL_LINEAR_SHARPEN_SGIS = 0x000080ad;
        public const int GL_LINES = 0x00000001;
        public const int GL_LINK_STATUS = 0x00008b82;
        public const int GL_LIST_BASE = 0x00000b32;
        public const int GL_LIST_BIT = 0x00020000;
        public const int GL_LIST_INDEX = 0x00000b33;
        public const int GL_LIST_MODE = 0x00000b30;
        public const int GL_LIST_PRIORITY_SGIX = 0x00008182;
        public const int GL_LO_BIAS_NV = 0x00008715;
        public const int GL_LO_SCALE_NV = 0x0000870f;
        public const int GL_LOAD = 0x00000101;
        public const int GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x000087ed;
        public const int GL_LOCAL_CONSTANT_EXT = 0x000087c3;
        public const int GL_LOCAL_CONSTANT_VALUE_EXT = 0x000087ec;
        public const int GL_LOCAL_EXT = 0x000087c4;
        public const int GL_LOGIC_OP = 0x00000bf1;
        public const int GL_LOGIC_OP_MODE = 0x00000bf0;
        public const int GL_LOWER_LEFT = 0x00008ca1;
        public const int GL_LUMINANCE = 0x00001909;
        public const int GL_LUMINANCE_ALPHA = 0x0000190a;
        public const int GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x0000881f;
        public const int GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x00008819;
        public const int GL_LUMINANCE_ALPHA16F_ARB = 0x0000881f;
        public const int GL_LUMINANCE_ALPHA32F_ARB = 0x00008819;
        public const int GL_LUMINANCE_FLOAT16_ATI = 0x0000881e;
        public const int GL_LUMINANCE_FLOAT32_ATI = 0x00008818;
        public const int GL_LUMINANCE12 = 0x00008041;
        public const int GL_LUMINANCE12_ALPHA12 = 0x00008047;
        public const int GL_LUMINANCE12_ALPHA12_EXT = 0x00008047;
        public const int GL_LUMINANCE12_ALPHA4 = 0x00008046;
        public const int GL_LUMINANCE12_ALPHA4_EXT = 0x00008046;
        public const int GL_LUMINANCE12_EXT = 0x00008041;
        public const int GL_LUMINANCE16 = 0x00008042;
        public const int GL_LUMINANCE16_ALPHA16 = 0x00008048;
        public const int GL_LUMINANCE16_ALPHA16_EXT = 0x00008048;
        public const int GL_LUMINANCE16_EXT = 0x00008042;
        public const int GL_LUMINANCE16F_ARB = 0x0000881e;
        public const int GL_LUMINANCE32F_ARB = 0x00008818;
        public const int GL_LUMINANCE4 = 0x0000803f;
        public const int GL_LUMINANCE4_ALPHA4 = 0x00008043;
        public const int GL_LUMINANCE4_ALPHA4_EXT = 0x00008043;
        public const int GL_LUMINANCE4_EXT = 0x0000803f;
        public const int GL_LUMINANCE6_ALPHA2 = 0x00008044;
        public const int GL_LUMINANCE6_ALPHA2_EXT = 0x00008044;
        public const int GL_LUMINANCE8 = 0x00008040;
        public const int GL_LUMINANCE8_ALPHA8 = 0x00008045;
        public const int GL_LUMINANCE8_ALPHA8_EXT = 0x00008045;
        public const int GL_LUMINANCE8_EXT = 0x00008040;
        public const int GL_MAD_ATI = 0x00008968;
        public const int GL_MAGNITUDE_BIAS_NV = 0x00008718;
        public const int GL_MAGNITUDE_SCALE_NV = 0x00008712;
        public const int GL_MAP_ATTRIB_U_ORDER_NV = 0x000086c3;
        public const int GL_MAP_ATTRIB_V_ORDER_NV = 0x000086c4;
        public const int GL_MAP_COLOR = 0x00000d10;
        public const int GL_MAP_STENCIL = 0x00000d11;
        public const int GL_MAP_TESSELLATION_NV = 0x000086c2;
        public const int GL_MAP1_BINORMAL_EXT = 0x00008446;
        public const int GL_MAP1_COLOR_4 = 0x00000d90;
        public const int GL_MAP1_GRID_DOMAIN = 0x00000dd0;
        public const int GL_MAP1_GRID_SEGMENTS = 0x00000dd1;
        public const int GL_MAP1_INDEX = 0x00000d91;
        public const int GL_MAP1_NORMAL = 0x00000d92;
        public const int GL_MAP1_TANGENT_EXT = 0x00008444;
        public const int GL_MAP1_TEXTURE_COORD_1 = 0x00000d93;
        public const int GL_MAP1_TEXTURE_COORD_2 = 0x00000d94;
        public const int GL_MAP1_TEXTURE_COORD_3 = 0x00000d95;
        public const int GL_MAP1_TEXTURE_COORD_4 = 0x00000d96;
        public const int GL_MAP1_VERTEX_3 = 0x00000d97;
        public const int GL_MAP1_VERTEX_4 = 0x00000d98;
        public const int GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x00008660;
        public const int GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x00008661;
        public const int GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x0000866a;
        public const int GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x0000866b;
        public const int GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x0000866c;
        public const int GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x0000866d;
        public const int GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x0000866e;
        public const int GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x0000866f;
        public const int GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x00008662;
        public const int GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x00008663;
        public const int GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x00008664;
        public const int GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x00008665;
        public const int GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x00008666;
        public const int GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x00008667;
        public const int GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x00008668;
        public const int GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x00008669;
        public const int GL_MAP2_BINORMAL_EXT = 0x00008447;
        public const int GL_MAP2_COLOR_4 = 0x00000db0;
        public const int GL_MAP2_GRID_DOMAIN = 0x00000dd2;
        public const int GL_MAP2_GRID_SEGMENTS = 0x00000dd3;
        public const int GL_MAP2_INDEX = 0x00000db1;
        public const int GL_MAP2_NORMAL = 0x00000db2;
        public const int GL_MAP2_TANGENT_EXT = 0x00008445;
        public const int GL_MAP2_TEXTURE_COORD_1 = 0x00000db3;
        public const int GL_MAP2_TEXTURE_COORD_2 = 0x00000db4;
        public const int GL_MAP2_TEXTURE_COORD_3 = 0x00000db5;
        public const int GL_MAP2_TEXTURE_COORD_4 = 0x00000db6;
        public const int GL_MAP2_VERTEX_3 = 0x00000db7;
        public const int GL_MAP2_VERTEX_4 = 0x00000db8;
        public const int GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x00008670;
        public const int GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x00008671;
        public const int GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x0000867a;
        public const int GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x0000867b;
        public const int GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x0000867c;
        public const int GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x0000867d;
        public const int GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x0000867e;
        public const int GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x0000867f;
        public const int GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x00008672;
        public const int GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x00008673;
        public const int GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x00008674;
        public const int GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x00008675;
        public const int GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x00008676;
        public const int GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x00008677;
        public const int GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x00008678;
        public const int GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x00008679;
        public const int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
        public const int GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
        public const int GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
        public const int GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
        public const int GL_MAT_EMISSION_BIT_PGI = 0x00800000;
        public const int GL_MAT_SHININESS_BIT_PGI = 0x02000000;
        public const int GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
        public const int GL_MATERIAL_SIDE_HINT_PGI = 0x0001a22c;
        public const int GL_MATRIX_EXT = 0x000087c0;
        public const int GL_MATRIX_INDEX_ARRAY_ARB = 0x00008844;
        public const int GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x00008849;
        public const int GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x00008846;
        public const int GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x00008848;
        public const int GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x00008847;
        public const int GL_MATRIX_MODE = 0x00000ba0;
        public const int GL_MATRIX_PALETTE_ARB = 0x00008840;
        public const int GL_MATRIX0_ARB = 0x000088c0;
        public const int GL_MATRIX0_NV = 0x00008630;
        public const int GL_MATRIX1_ARB = 0x000088c1;
        public const int GL_MATRIX1_NV = 0x00008631;
        public const int GL_MATRIX10_ARB = 0x000088ca;
        public const int GL_MATRIX11_ARB = 0x000088cb;
        public const int GL_MATRIX12_ARB = 0x000088cc;
        public const int GL_MATRIX13_ARB = 0x000088cd;
        public const int GL_MATRIX14_ARB = 0x000088ce;
        public const int GL_MATRIX15_ARB = 0x000088cf;
        public const int GL_MATRIX16_ARB = 0x000088d0;
        public const int GL_MATRIX17_ARB = 0x000088d1;
        public const int GL_MATRIX18_ARB = 0x000088d2;
        public const int GL_MATRIX19_ARB = 0x000088d3;
        public const int GL_MATRIX2_ARB = 0x000088c2;
        public const int GL_MATRIX2_NV = 0x00008632;
        public const int GL_MATRIX20_ARB = 0x000088d4;
        public const int GL_MATRIX21_ARB = 0x000088d5;
        public const int GL_MATRIX22_ARB = 0x000088d6;
        public const int GL_MATRIX23_ARB = 0x000088d7;
        public const int GL_MATRIX24_ARB = 0x000088d8;
        public const int GL_MATRIX25_ARB = 0x000088d9;
        public const int GL_MATRIX26_ARB = 0x000088da;
        public const int GL_MATRIX27_ARB = 0x000088db;
        public const int GL_MATRIX28_ARB = 0x000088dc;
        public const int GL_MATRIX29_ARB = 0x000088dd;
        public const int GL_MATRIX3_ARB = 0x000088c3;
        public const int GL_MATRIX3_NV = 0x00008633;
        public const int GL_MATRIX30_ARB = 0x000088de;
        public const int GL_MATRIX31_ARB = 0x000088df;
        public const int GL_MATRIX4_ARB = 0x000088c4;
        public const int GL_MATRIX4_NV = 0x00008634;
        public const int GL_MATRIX5_ARB = 0x000088c5;
        public const int GL_MATRIX5_NV = 0x00008635;
        public const int GL_MATRIX6_ARB = 0x000088c6;
        public const int GL_MATRIX6_NV = 0x00008636;
        public const int GL_MATRIX7_ARB = 0x000088c7;
        public const int GL_MATRIX7_NV = 0x00008637;
        public const int GL_MATRIX8_ARB = 0x000088c8;
        public const int GL_MATRIX9_ARB = 0x000088c9;
        public const int GL_MAX = 0x00008008;
        public const int GL_MAX_3D_TEXTURE_SIZE = 0x00008073;
        public const int GL_MAX_3D_TEXTURE_SIZE_EXT = 0x00008073;
        public const int GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x00008138;
        public const int GL_MAX_ACTIVE_LIGHTS_SGIX = 0x00008405;
        public const int GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x00008360;
        public const int GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x0000832d;
        public const int GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x00008361;
        public const int GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x0000835f;
        public const int GL_MAX_ATTRIB_STACK_DEPTH = 0x00000d35;
        public const int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x00000d3b;
        public const int GL_MAX_CLIP_PLANES = 0x00000d32;
        public const int GL_MAX_CLIPMAP_DEPTH_SGIX = 0x00008177;
        public const int GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x00008178;
        public const int GL_MAX_COLOR_ATTACHMENTS_EXT = 0x00008cdf;
        public const int GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x000080b3;
        public const int GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x000080b3;
        public const int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x00008b4d;
        public const int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x00008b4d;
        public const int GL_MAX_CONVOLUTION_HEIGHT = 0x0000801b;
        public const int GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x0000801b;
        public const int GL_MAX_CONVOLUTION_WIDTH = 0x0000801a;
        public const int GL_MAX_CONVOLUTION_WIDTH_EXT = 0x0000801a;
        public const int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x0000851c;
        public const int GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x0000851c;
        public const int GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x0000851c;
        public const int GL_MAX_DEFORMATION_ORDER_SGIX = 0x00008197;
        public const int GL_MAX_DRAW_BUFFERS = 0x00008824;
        public const int GL_MAX_DRAW_BUFFERS_ARB = 0x00008824;
        public const int GL_MAX_DRAW_BUFFERS_ATI = 0x00008824;
        public const int GL_MAX_ELEMENTS_INDICES = 0x000080e9;
        public const int GL_MAX_ELEMENTS_INDICES_EXT = 0x000080e9;
        public const int GL_MAX_ELEMENTS_INDICES_WIN = 0x000080e9;
        public const int GL_MAX_ELEMENTS_VERTICES = 0x000080e8;
        public const int GL_MAX_ELEMENTS_VERTICES_EXT = 0x000080e8;
        public const int GL_MAX_ELEMENTS_VERTICES_WIN = 0x000080e8;
        public const int GL_MAX_EVAL_ORDER = 0x00000d30;
        public const int GL_MAX_EXT = 0x00008008;
        public const int GL_MAX_FOG_FUNC_POINTS_SGIS = 0x0000812c;
        public const int GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x00008404;
        public const int GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x00008868;
        public const int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x00008b49;
        public const int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x00008b49;
        public const int GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x0000818d;
        public const int GL_MAX_GENERAL_COMBINERS_NV = 0x0000854d;
        public const int GL_MAX_LIGHTS = 0x00000d31;
        public const int GL_MAX_LIST_NESTING = 0x00000b31;
        public const int GL_MAX_MAP_TESSELLATION_NV = 0x000086d6;
        public const int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x00008841;
        public const int GL_MAX_MODELVIEW_STACK_DEPTH = 0x00000d36;
        public const int GL_MAX_NAME_STACK_DEPTH = 0x00000d37;
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x000087ca;
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x000087cd;
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x000087cc;
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x000087ce;
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x000087cb;
        public const int GL_MAX_PALETTE_MATRICES_ARB = 0x00008842;
        public const int GL_MAX_PIXEL_MAP_TABLE = 0x00000d34;
        public const int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x00008337;
        public const int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x000087f1;
        public const int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x000088b1;
        public const int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x0000880b;
        public const int GL_MAX_PROGRAM_ATTRIBS_ARB = 0x000088ad;
        public const int GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x000088f5;
        public const int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x000088b5;
        public const int GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x000088f4;
        public const int GL_MAX_PROGRAM_IF_DEPTH_NV = 0x000088f6;
        public const int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x000088a1;
        public const int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x000088b4;
        public const int GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x000088f8;
        public const int GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x000088f7;
        public const int GL_MAX_PROGRAM_MATRICES_ARB = 0x0000862f;
        public const int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x0000862e;
        public const int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x000088b3;
        public const int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x0000880e;
        public const int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x000088af;
        public const int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x000088a3;
        public const int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x000088ab;
        public const int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x000088a7;
        public const int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x00008810;
        public const int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x0000880f;
        public const int GL_MAX_PROGRAM_PARAMETERS_ARB = 0x000088a9;
        public const int GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x000088a5;
        public const int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x0000880d;
        public const int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x0000880c;
        public const int GL_MAX_PROJECTION_STACK_DEPTH = 0x00000d38;
        public const int GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x000086d7;
        public const int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x000084f8;
        public const int GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x000084f8;
        public const int GL_MAX_RENDERBUFFER_SIZE_EXT = 0x000084e8;
        public const int GL_MAX_SHININESS_NV = 0x00008504;
        public const int GL_MAX_SPOT_EXPONENT_NV = 0x00008505;
        public const int GL_MAX_TEXTURE_COORDS = 0x00008871;
        public const int GL_MAX_TEXTURE_COORDS_ARB = 0x00008871;
        public const int GL_MAX_TEXTURE_COORDS_NV = 0x00008871;
        public const int GL_MAX_TEXTURE_IMAGE_UNITS = 0x00008872;
        public const int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x00008872;
        public const int GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x00008872;
        public const int GL_MAX_TEXTURE_LOD_BIAS = 0x000084fd;
        public const int GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x000084fd;
        public const int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x000084ff;
        public const int GL_MAX_TEXTURE_SIZE = 0x00000d33;
        public const int GL_MAX_TEXTURE_STACK_DEPTH = 0x00000d39;
        public const int GL_MAX_TEXTURE_UNITS = 0x000084e2;
        public const int GL_MAX_TEXTURE_UNITS_ARB = 0x000084e2;
        public const int GL_MAX_TRACK_MATRICES_NV = 0x0000862f;
        public const int GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x0000862e;
        public const int GL_MAX_VARYING_FLOATS = 0x00008b4b;
        public const int GL_MAX_VARYING_FLOATS_ARB = 0x00008b4b;
        public const int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x00008520;
        public const int GL_MAX_VERTEX_ATTRIBS = 0x00008869;
        public const int GL_MAX_VERTEX_ATTRIBS_ARB = 0x00008869;
        public const int GL_MAX_VERTEX_HINT_PGI = 0x0001a22d;
        public const int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x000087c5;
        public const int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x000087c7;
        public const int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x000087c8;
        public const int GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x000087c9;
        public const int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x000087c6;
        public const int GL_MAX_VERTEX_STREAMS_ATI = 0x0000876b;
        public const int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x00008b4c;
        public const int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x00008b4c;
        public const int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x00008b4a;
        public const int GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x00008b4a;
        public const int GL_MAX_VERTEX_UNITS_ARB = 0x000086a4;
        public const int GL_MAX_VIEWPORT_DIMS = 0x00000d3a;
        public const int GL_MIN = 0x00008007;
        public const int GL_MIN_EXT = 0x00008007;
        public const int GL_MINMAX = 0x0000802e;
        public const int GL_MINMAX_EXT = 0x0000802e;
        public const int GL_MINMAX_FORMAT = 0x0000802f;
        public const int GL_MINMAX_FORMAT_EXT = 0x0000802f;
        public const int GL_MINMAX_SINK = 0x00008030;
        public const int GL_MINMAX_SINK_EXT = 0x00008030;
        public const int GL_MIRROR_CLAMP_ATI = 0x00008742;
        public const int GL_MIRROR_CLAMP_EXT = 0x00008742;
        public const int GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x00008912;
        public const int GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x00008743;
        public const int GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x00008743;
        public const int GL_MIRRORED_REPEAT = 0x00008370;
        public const int GL_MIRRORED_REPEAT_ARB = 0x00008370;
        public const int GL_MIRRORED_REPEAT_IBM = 0x00008370;
        public const int GL_MODELVIEW = 0x00001700;
        public const int GL_MODELVIEW_MATRIX = 0x00000ba6;
        public const int GL_MODELVIEW_PROJECTION_NV = 0x00008629;
        public const int GL_MODELVIEW_STACK_DEPTH = 0x00000ba3;
        public const int GL_MODELVIEW0_ARB = 0x00001700;
        public const int GL_MODELVIEW0_EXT = 0x00001700;
        public const int GL_MODELVIEW0_MATRIX_EXT = 0x00000ba6;
        public const int GL_MODELVIEW0_STACK_DEPTH_EXT = 0x00000ba3;
        public const int GL_MODELVIEW1_ARB = 0x0000850a;
        public const int GL_MODELVIEW1_EXT = 0x0000850a;
        public const int GL_MODELVIEW1_MATRIX_EXT = 0x00008506;
        public const int GL_MODELVIEW1_STACK_DEPTH_EXT = 0x00008502;
        public const int GL_MODELVIEW10_ARB = 0x0000872a;
        public const int GL_MODELVIEW11_ARB = 0x0000872b;
        public const int GL_MODELVIEW12_ARB = 0x0000872c;
        public const int GL_MODELVIEW13_ARB = 0x0000872d;
        public const int GL_MODELVIEW14_ARB = 0x0000872e;
        public const int GL_MODELVIEW15_ARB = 0x0000872f;
        public const int GL_MODELVIEW16_ARB = 0x00008730;
        public const int GL_MODELVIEW17_ARB = 0x00008731;
        public const int GL_MODELVIEW18_ARB = 0x00008732;
        public const int GL_MODELVIEW19_ARB = 0x00008733;
        public const int GL_MODELVIEW2_ARB = 0x00008722;
        public const int GL_MODELVIEW20_ARB = 0x00008734;
        public const int GL_MODELVIEW21_ARB = 0x00008735;
        public const int GL_MODELVIEW22_ARB = 0x00008736;
        public const int GL_MODELVIEW23_ARB = 0x00008737;
        public const int GL_MODELVIEW24_ARB = 0x00008738;
        public const int GL_MODELVIEW25_ARB = 0x00008739;
        public const int GL_MODELVIEW26_ARB = 0x0000873a;
        public const int GL_MODELVIEW27_ARB = 0x0000873b;
        public const int GL_MODELVIEW28_ARB = 0x0000873c;
        public const int GL_MODELVIEW29_ARB = 0x0000873d;
        public const int GL_MODELVIEW3_ARB = 0x00008723;
        public const int GL_MODELVIEW30_ARB = 0x0000873e;
        public const int GL_MODELVIEW31_ARB = 0x0000873f;
        public const int GL_MODELVIEW4_ARB = 0x00008724;
        public const int GL_MODELVIEW5_ARB = 0x00008725;
        public const int GL_MODELVIEW6_ARB = 0x00008726;
        public const int GL_MODELVIEW7_ARB = 0x00008727;
        public const int GL_MODELVIEW8_ARB = 0x00008728;
        public const int GL_MODELVIEW9_ARB = 0x00008729;
        public const int GL_MODULATE = 0x00002100;
        public const int GL_MODULATE_ADD_ATI = 0x00008744;
        public const int GL_MODULATE_SIGNED_ADD_ATI = 0x00008745;
        public const int GL_MODULATE_SUBTRACT_ATI = 0x00008746;
        public const int GL_MOV_ATI = 0x00008961;
        public const int GL_MUL_ATI = 0x00008964;
        public const int GL_MULT = 0x00000103;
        public const int GL_MULTISAMPLE = 0x0000809d;
        public const int GL_MULTISAMPLE_3DFX = 0x000086b2;
        public const int GL_MULTISAMPLE_ARB = 0x0000809d;
        public const int GL_MULTISAMPLE_BIT = 0x20000000;
        public const int GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        public const int GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        public const int GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        public const int GL_MULTISAMPLE_EXT = 0x0000809d;
        public const int GL_MULTISAMPLE_FILTER_HINT_NV = 0x00008534;
        public const int GL_MULTISAMPLE_SGIS = 0x0000809d;
        public const int GL_MVP_MATRIX_EXT = 0x000087e3;
        public const int GL_N3F_V3F = 0x00002a25;
        public const int GL_NAME_STACK_DEPTH = 0x00000d70;
        public const int GL_NAND = 0x0000150e;
        public const int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x0001a203;
        public const int GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x0001a204;
        public const int GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x0001a202;
        public const int GL_NEAREST = 0x00002600;
        public const int GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x0000844e;
        public const int GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x0000844d;
        public const int GL_NEAREST_MIPMAP_LINEAR = 0x00002702;
        public const int GL_NEAREST_MIPMAP_NEAREST = 0x00002700;
        public const int GL_NEGATE_BIT_ATI = 0x00000004;
        public const int GL_NEGATIVE_ONE_EXT = 0x000087df;
        public const int GL_NEGATIVE_W_EXT = 0x000087dc;
        public const int GL_NEGATIVE_X_EXT = 0x000087d9;
        public const int GL_NEGATIVE_Y_EXT = 0x000087da;
        public const int GL_NEGATIVE_Z_EXT = 0x000087db;
        public const int GL_NEVER = 0x00000200;
        public const int GL_NICEST = 0x00001102;
        public const int GL_NO_ERROR = 0x00000000;
        public const int GL_NONE = 0x00000000;
        public const int GL_NOOP = 0x00001505;
        public const int GL_NOR = 0x00001508;
        public const int GL_NORMAL_ARRAY = 0x00008075;
        public const int GL_NORMAL_ARRAY_BUFFER_BINDING = 0x00008897;
        public const int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x00008897;
        public const int GL_NORMAL_ARRAY_COUNT_EXT = 0x00008080;
        public const int GL_NORMAL_ARRAY_EXT = 0x00008075;
        public const int GL_NORMAL_ARRAY_LIST_IBM = 0x0001929f;
        public const int GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 0x000192a9;
        public const int GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x000083f6;
        public const int GL_NORMAL_ARRAY_POINTER = 0x0000808f;
        public const int GL_NORMAL_ARRAY_POINTER_EXT = 0x0000808f;
        public const int GL_NORMAL_ARRAY_STRIDE = 0x0000807f;
        public const int GL_NORMAL_ARRAY_STRIDE_EXT = 0x0000807f;
        public const int GL_NORMAL_ARRAY_TYPE = 0x0000807e;
        public const int GL_NORMAL_ARRAY_TYPE_EXT = 0x0000807e;
        public const int GL_NORMAL_BIT_PGI = 0x08000000;
        public const int GL_NORMAL_MAP = 0x00008511;
        public const int GL_NORMAL_MAP_ARB = 0x00008511;
        public const int GL_NORMAL_MAP_EXT = 0x00008511;
        public const int GL_NORMAL_MAP_NV = 0x00008511;
        public const int GL_NORMALIZE = 0x00000ba1;
        public const int GL_NORMALIZED_RANGE_EXT = 0x000087e0;
        public const int GL_NOTEQUAL = 0x00000205;
        public const int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x000086a2;
        public const int GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x000086a2;
        public const int GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x0000896f;
        public const int GL_NUM_FRAGMENT_REGISTERS_ATI = 0x0000896e;
        public const int GL_NUM_GENERAL_COMBINERS_NV = 0x0000854e;
        public const int GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x00008973;
        public const int GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x00008971;
        public const int GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x00008972;
        public const int GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x00008974;
        public const int GL_NUM_PASSES_ATI = 0x00008970;
        public const int GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x00008b8a;
        public const int GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x00008b89;
        public const int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x00008b87;
        public const int GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x00008b86;
        public const int GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x00008b85;
        public const int GL_OBJECT_BUFFER_SIZE_ATI = 0x00008764;
        public const int GL_OBJECT_BUFFER_USAGE_ATI = 0x00008765;
        public const int GL_OBJECT_COMPILE_STATUS_ARB = 0x00008b81;
        public const int GL_OBJECT_DELETE_STATUS_ARB = 0x00008b80;
        public const int GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x000081f3;
        public const int GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x000081f1;
        public const int GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x00008b84;
        public const int GL_OBJECT_LINE_SGIS = 0x000081f7;
        public const int GL_OBJECT_LINEAR = 0x00002401;
        public const int GL_OBJECT_LINK_STATUS_ARB = 0x00008b82;
        public const int GL_OBJECT_PLANE = 0x00002501;
        public const int GL_OBJECT_POINT_SGIS = 0x000081f5;
        public const int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x00008b88;
        public const int GL_OBJECT_SUBTYPE_ARB = 0x00008b4f;
        public const int GL_OBJECT_TYPE_ARB = 0x00008b4e;
        public const int GL_OBJECT_VALIDATE_STATUS_ARB = 0x00008b83;
        public const int GL_OCCLUSION_TEST_HP = 0x00008165;
        public const int GL_OCCLUSION_TEST_RESULT_HP = 0x00008166;
        public const int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x00008856;
        public const int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x00008857;
        public const int GL_OFFSET_HILO_TEXTURE_2D_NV = 0x00008854;
        public const int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x00008855;
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x00008850;
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x00008851;
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x00008852;
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x00008853;
        public const int GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x000086e3;
        public const int GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x000086e1;
        public const int GL_OFFSET_TEXTURE_2D_NV = 0x000086e8;
        public const int GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x000086e2;
        public const int GL_OFFSET_TEXTURE_BIAS_NV = 0x000086e3;
        public const int GL_OFFSET_TEXTURE_MATRIX_NV = 0x000086e1;
        public const int GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x0000864c;
        public const int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x0000864d;
        public const int GL_OFFSET_TEXTURE_SCALE_NV = 0x000086e2;
        public const int GL_ONE = 0x00000001;
        public const int GL_ONE_EXT = 0x000087de;
        public const int GL_ONE_MINUS_CONSTANT_ALPHA = 0x00008004;
        public const int GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x00008004;
        public const int GL_ONE_MINUS_CONSTANT_COLOR = 0x00008002;
        public const int GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x00008002;
        public const int GL_ONE_MINUS_DST_ALPHA = 0x00000305;
        public const int GL_ONE_MINUS_DST_COLOR = 0x00000307;
        public const int GL_ONE_MINUS_SRC_ALPHA = 0x00000303;
        public const int GL_ONE_MINUS_SRC_COLOR = 0x00000301;
        public const int GL_OP_ADD_EXT = 0x00008787;
        public const int GL_OP_CLAMP_EXT = 0x0000878e;
        public const int GL_OP_CROSS_PRODUCT_EXT = 0x00008797;
        public const int GL_OP_DOT3_EXT = 0x00008784;
        public const int GL_OP_DOT4_EXT = 0x00008785;
        public const int GL_OP_EXP_BASE_2_EXT = 0x00008791;
        public const int GL_OP_FLOOR_EXT = 0x0000878f;
        public const int GL_OP_FRAC_EXT = 0x00008789;
        public const int GL_OP_INDEX_EXT = 0x00008782;
        public const int GL_OP_LOG_BASE_2_EXT = 0x00008792;
        public const int GL_OP_MADD_EXT = 0x00008788;
        public const int GL_OP_MAX_EXT = 0x0000878a;
        public const int GL_OP_MIN_EXT = 0x0000878b;
        public const int GL_OP_MOV_EXT = 0x00008799;
        public const int GL_OP_MUL_EXT = 0x00008786;
        public const int GL_OP_MULTIPLY_MATRIX_EXT = 0x00008798;
        public const int GL_OP_NEGATE_EXT = 0x00008783;
        public const int GL_OP_POWER_EXT = 0x00008793;
        public const int GL_OP_RECIP_EXT = 0x00008794;
        public const int GL_OP_RECIP_SQRT_EXT = 0x00008795;
        public const int GL_OP_ROUND_EXT = 0x00008790;
        public const int GL_OP_SET_GE_EXT = 0x0000878c;
        public const int GL_OP_SET_LT_EXT = 0x0000878d;
        public const int GL_OP_SUB_EXT = 0x00008796;
        public const int GL_OPERAND0_ALPHA = 0x00008598;
        public const int GL_OPERAND0_ALPHA_ARB = 0x00008598;
        public const int GL_OPERAND0_ALPHA_EXT = 0x00008598;
        public const int GL_OPERAND0_RGB = 0x00008590;
        public const int GL_OPERAND0_RGB_ARB = 0x00008590;
        public const int GL_OPERAND0_RGB_EXT = 0x00008590;
        public const int GL_OPERAND1_ALPHA = 0x00008599;
        public const int GL_OPERAND1_ALPHA_ARB = 0x00008599;
        public const int GL_OPERAND1_ALPHA_EXT = 0x00008599;
        public const int GL_OPERAND1_RGB = 0x00008591;
        public const int GL_OPERAND1_RGB_ARB = 0x00008591;
        public const int GL_OPERAND1_RGB_EXT = 0x00008591;
        public const int GL_OPERAND2_ALPHA = 0x0000859a;
        public const int GL_OPERAND2_ALPHA_ARB = 0x0000859a;
        public const int GL_OPERAND2_ALPHA_EXT = 0x0000859a;
        public const int GL_OPERAND2_RGB = 0x00008592;
        public const int GL_OPERAND2_RGB_ARB = 0x00008592;
        public const int GL_OPERAND2_RGB_EXT = 0x00008592;
        public const int GL_OPERAND3_ALPHA_NV = 0x0000859b;
        public const int GL_OPERAND3_RGB_NV = 0x00008593;
        public const int GL_OR = 0x00001507;
        public const int GL_OR_INVERTED = 0x0000150d;
        public const int GL_OR_REVERSE = 0x0000150b;
        public const int GL_ORDER = 0x00000a01;
        public const int GL_OUT_OF_MEMORY = 0x00000505;
        public const int GL_OUTPUT_COLOR0_EXT = 0x0000879b;
        public const int GL_OUTPUT_COLOR1_EXT = 0x0000879c;
        public const int GL_OUTPUT_FOG_EXT = 0x000087bd;
        public const int GL_OUTPUT_TEXTURE_COORD0_EXT = 0x0000879d;
        public const int GL_OUTPUT_TEXTURE_COORD1_EXT = 0x0000879e;
        public const int GL_OUTPUT_TEXTURE_COORD10_EXT = 0x000087a7;
        public const int GL_OUTPUT_TEXTURE_COORD11_EXT = 0x000087a8;
        public const int GL_OUTPUT_TEXTURE_COORD12_EXT = 0x000087a9;
        public const int GL_OUTPUT_TEXTURE_COORD13_EXT = 0x000087aa;
        public const int GL_OUTPUT_TEXTURE_COORD14_EXT = 0x000087ab;
        public const int GL_OUTPUT_TEXTURE_COORD15_EXT = 0x000087ac;
        public const int GL_OUTPUT_TEXTURE_COORD16_EXT = 0x000087ad;
        public const int GL_OUTPUT_TEXTURE_COORD17_EXT = 0x000087ae;
        public const int GL_OUTPUT_TEXTURE_COORD18_EXT = 0x000087af;
        public const int GL_OUTPUT_TEXTURE_COORD19_EXT = 0x000087b0;
        public const int GL_OUTPUT_TEXTURE_COORD2_EXT = 0x0000879f;
        public const int GL_OUTPUT_TEXTURE_COORD20_EXT = 0x000087b1;
        public const int GL_OUTPUT_TEXTURE_COORD21_EXT = 0x000087b2;
        public const int GL_OUTPUT_TEXTURE_COORD22_EXT = 0x000087b3;
        public const int GL_OUTPUT_TEXTURE_COORD23_EXT = 0x000087b4;
        public const int GL_OUTPUT_TEXTURE_COORD24_EXT = 0x000087b5;
        public const int GL_OUTPUT_TEXTURE_COORD25_EXT = 0x000087b6;
        public const int GL_OUTPUT_TEXTURE_COORD26_EXT = 0x000087b7;
        public const int GL_OUTPUT_TEXTURE_COORD27_EXT = 0x000087b8;
        public const int GL_OUTPUT_TEXTURE_COORD28_EXT = 0x000087b9;
        public const int GL_OUTPUT_TEXTURE_COORD29_EXT = 0x000087ba;
        public const int GL_OUTPUT_TEXTURE_COORD3_EXT = 0x000087a0;
        public const int GL_OUTPUT_TEXTURE_COORD30_EXT = 0x000087bb;
        public const int GL_OUTPUT_TEXTURE_COORD31_EXT = 0x000087bc;
        public const int GL_OUTPUT_TEXTURE_COORD4_EXT = 0x000087a1;
        public const int GL_OUTPUT_TEXTURE_COORD5_EXT = 0x000087a2;
        public const int GL_OUTPUT_TEXTURE_COORD6_EXT = 0x000087a3;
        public const int GL_OUTPUT_TEXTURE_COORD7_EXT = 0x000087a4;
        public const int GL_OUTPUT_TEXTURE_COORD8_EXT = 0x000087a5;
        public const int GL_OUTPUT_TEXTURE_COORD9_EXT = 0x000087a6;
        public const int GL_OUTPUT_VERTEX_EXT = 0x0000879a;
        public const int GL_PACK_ALIGNMENT = 0x00000d05;
        public const int GL_PACK_CMYK_HINT_EXT = 0x0000800e;
        public const int GL_PACK_IMAGE_DEPTH_SGIS = 0x00008131;
        public const int GL_PACK_IMAGE_HEIGHT = 0x0000806c;
        public const int GL_PACK_IMAGE_HEIGHT_EXT = 0x0000806c;
        public const int GL_PACK_INVERT_MESA = 0x00008758;
        public const int GL_PACK_LSB_FIRST = 0x00000d01;
        public const int GL_PACK_RESAMPLE_OML = 0x00008984;
        public const int GL_PACK_RESAMPLE_SGIX = 0x0000842c;
        public const int GL_PACK_ROW_LENGTH = 0x00000d02;
        public const int GL_PACK_SKIP_IMAGES = 0x0000806b;
        public const int GL_PACK_SKIP_IMAGES_EXT = 0x0000806b;
        public const int GL_PACK_SKIP_PIXELS = 0x00000d04;
        public const int GL_PACK_SKIP_ROWS = 0x00000d03;
        public const int GL_PACK_SKIP_VOLUMES_SGIS = 0x00008130;
        public const int GL_PACK_SUBSAMPLE_RATE_SGIX = 0x000085a0;
        public const int GL_PACK_SWAP_BYTES = 0x00000d00;
        public const int GL_PARALLEL_ARRAYS_INTEL = 0x000083f4;
        public const int GL_PASS_THROUGH_NV = 0x000086e6;
        public const int GL_PASS_THROUGH_TOKEN = 0x00000700;
        public const int GL_PER_STAGE_CONSTANTS_NV = 0x00008535;
        public const int GL_PERSPECTIVE_CORRECTION_HINT = 0x00000c50;
        public const int GL_PERTURB_EXT = 0x000085ae;
        public const int GL_PHONG_HINT_WIN = 0x000080eb;
        public const int GL_PHONG_WIN = 0x000080ea;
        public const int GL_PIXEL_COUNT_AVAILABLE_NV = 0x00008867;
        public const int GL_PIXEL_COUNT_NV = 0x00008866;
        public const int GL_PIXEL_COUNTER_BITS_NV = 0x00008864;
        public const int GL_PIXEL_CUBIC_WEIGHT_EXT = 0x00008333;
        public const int GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x00008355;
        public const int GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x00008354;
        public const int GL_PIXEL_GROUP_COLOR_SGIS = 0x00008356;
        public const int GL_PIXEL_MAG_FILTER_EXT = 0x00008331;
        public const int GL_PIXEL_MAP_A_TO_A = 0x00000c79;
        public const int GL_PIXEL_MAP_A_TO_A_SIZE = 0x00000cb9;
        public const int GL_PIXEL_MAP_B_TO_B = 0x00000c78;
        public const int GL_PIXEL_MAP_B_TO_B_SIZE = 0x00000cb8;
        public const int GL_PIXEL_MAP_G_TO_G = 0x00000c77;
        public const int GL_PIXEL_MAP_G_TO_G_SIZE = 0x00000cb7;
        public const int GL_PIXEL_MAP_I_TO_A = 0x00000c75;
        public const int GL_PIXEL_MAP_I_TO_A_SIZE = 0x00000cb5;
        public const int GL_PIXEL_MAP_I_TO_B = 0x00000c74;
        public const int GL_PIXEL_MAP_I_TO_B_SIZE = 0x00000cb4;
        public const int GL_PIXEL_MAP_I_TO_G = 0x00000c73;
        public const int GL_PIXEL_MAP_I_TO_G_SIZE = 0x00000cb3;
        public const int GL_PIXEL_MAP_I_TO_I = 0x00000c70;
        public const int GL_PIXEL_MAP_I_TO_I_SIZE = 0x00000cb0;
        public const int GL_PIXEL_MAP_I_TO_R = 0x00000c72;
        public const int GL_PIXEL_MAP_I_TO_R_SIZE = 0x00000cb2;
        public const int GL_PIXEL_MAP_R_TO_R = 0x00000c76;
        public const int GL_PIXEL_MAP_R_TO_R_SIZE = 0x00000cb6;
        public const int GL_PIXEL_MAP_S_TO_S = 0x00000c71;
        public const int GL_PIXEL_MAP_S_TO_S_SIZE = 0x00000cb1;
        public const int GL_PIXEL_MIN_FILTER_EXT = 0x00008332;
        public const int GL_PIXEL_MODE_BIT = 0x00000020;
        public const int GL_PIXEL_PACK_BUFFER_ARB = 0x000088eb;
        public const int GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x000088ed;
        public const int GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x000088ed;
        public const int GL_PIXEL_PACK_BUFFER_EXT = 0x000088eb;
        public const int GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x000085a3;
        public const int GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x000085a4;
        public const int GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x000085a2;
        public const int GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x00008189;
        public const int GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x0000818a;
        public const int GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x00008188;
        public const int GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x00008187;
        public const int GL_PIXEL_TEX_GEN_MODE_SGIX = 0x0000832b;
        public const int GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x00008184;
        public const int GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x00008186;
        public const int GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x00008185;
        public const int GL_PIXEL_TEX_GEN_SGIX = 0x00008139;
        public const int GL_PIXEL_TEXTURE_SGIS = 0x00008353;
        public const int GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x0000813e;
        public const int GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x0000813f;
        public const int GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x00008145;
        public const int GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x00008144;
        public const int GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x00008143;
        public const int GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x00008142;
        public const int GL_PIXEL_TILE_HEIGHT_SGIX = 0x00008141;
        public const int GL_PIXEL_TILE_WIDTH_SGIX = 0x00008140;
        public const int GL_PIXEL_TRANSFORM_2D_EXT = 0x00008330;
        public const int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x00008338;
        public const int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x00008336;
        public const int GL_PIXEL_UNPACK_BUFFER_ARB = 0x000088ec;
        public const int GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x000088ef;
        public const int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x000088ef;
        public const int GL_PIXEL_UNPACK_BUFFER_EXT = 0x000088ec;
        public const int GL_PN_TRIANGLES_ATI = 0x000087f0;
        public const int GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x000087f3;
        public const int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x000087f7;
        public const int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x000087f8;
        public const int GL_PN_TRIANGLES_POINT_MODE_ATI = 0x000087f2;
        public const int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x000087f6;
        public const int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x000087f5;
        public const int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x000087f4;
        public const int GL_POINT = 0x00001b00;
        public const int GL_POINT_BIT = 0x00000002;
        public const int GL_POINT_DISTANCE_ATTENUATION = 0x00008129;
        public const int GL_POINT_DISTANCE_ATTENUATION_ARB = 0x00008129;
        public const int GL_POINT_FADE_THRESHOLD_SIZE = 0x00008128;
        public const int GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x00008128;
        public const int GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x00008128;
        public const int GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x00008128;
        public const int GL_POINT_SIZE = 0x00000b11;
        public const int GL_POINT_SIZE_GRANULARITY = 0x00000b13;
        public const int GL_POINT_SIZE_MAX = 0x00008127;
        public const int GL_POINT_SIZE_MAX_ARB = 0x00008127;
        public const int GL_POINT_SIZE_MAX_EXT = 0x00008127;
        public const int GL_POINT_SIZE_MAX_SGIS = 0x00008127;
        public const int GL_POINT_SIZE_MIN = 0x00008126;
        public const int GL_POINT_SIZE_MIN_ARB = 0x00008126;
        public const int GL_POINT_SIZE_MIN_EXT = 0x00008126;
        public const int GL_POINT_SIZE_MIN_SGIS = 0x00008126;
        public const int GL_POINT_SIZE_RANGE = 0x00000b12;
        public const int GL_POINT_SMOOTH = 0x00000b10;
        public const int GL_POINT_SMOOTH_HINT = 0x00000c51;
        public const int GL_POINT_SPRITE = 0x00008861;
        public const int GL_POINT_SPRITE_ARB = 0x00008861;
        public const int GL_POINT_SPRITE_COORD_ORIGIN = 0x00008ca0;
        public const int GL_POINT_SPRITE_NV = 0x00008861;
        public const int GL_POINT_SPRITE_R_MODE_NV = 0x00008863;
        public const int GL_POINT_TOKEN = 0x00000701;
        public const int GL_POINTS = 0x00000000;
        public const int GL_POLYGON = 0x00000009;
        public const int GL_POLYGON_BIT = 0x00000008;
        public const int GL_POLYGON_MODE = 0x00000b40;
        public const int GL_POLYGON_OFFSET_BIAS_EXT = 0x00008039;
        public const int GL_POLYGON_OFFSET_EXT = 0x00008037;
        public const int GL_POLYGON_OFFSET_FACTOR = 0x00008038;
        public const int GL_POLYGON_OFFSET_FACTOR_EXT = 0x00008038;
        public const int GL_POLYGON_OFFSET_FILL = 0x00008037;
        public const int GL_POLYGON_OFFSET_LINE = 0x00002a02;
        public const int GL_POLYGON_OFFSET_POINT = 0x00002a01;
        public const int GL_POLYGON_OFFSET_UNITS = 0x00002a00;
        public const int GL_POLYGON_SMOOTH = 0x00000b41;
        public const int GL_POLYGON_SMOOTH_HINT = 0x00000c53;
        public const int GL_POLYGON_STIPPLE = 0x00000b42;
        public const int GL_POLYGON_STIPPLE_BIT = 0x00000010;
        public const int GL_POLYGON_TOKEN = 0x00000703;
        public const int GL_POSITION = 0x00001203;
        public const int GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x000080bb;
        public const int GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x000080bb;
        public const int GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x000080b7;
        public const int GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x000080b7;
        public const int GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x000080ba;
        public const int GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x000080ba;
        public const int GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x000080b6;
        public const int GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x000080b6;
        public const int GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x000080d2;
        public const int GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x000080d2;
        public const int GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x000080b9;
        public const int GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x000080b9;
        public const int GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x000080b5;
        public const int GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x000080b5;
        public const int GL_POST_COLOR_MATRIX_RED_BIAS = 0x000080b8;
        public const int GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x000080b8;
        public const int GL_POST_COLOR_MATRIX_RED_SCALE = 0x000080b4;
        public const int GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x000080b4;
        public const int GL_POST_CONVOLUTION_ALPHA_BIAS = 0x00008023;
        public const int GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x00008023;
        public const int GL_POST_CONVOLUTION_ALPHA_SCALE = 0x0000801f;
        public const int GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x0000801f;
        public const int GL_POST_CONVOLUTION_BLUE_BIAS = 0x00008022;
        public const int GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x00008022;
        public const int GL_POST_CONVOLUTION_BLUE_SCALE = 0x0000801e;
        public const int GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x0000801e;
        public const int GL_POST_CONVOLUTION_COLOR_TABLE = 0x000080d1;
        public const int GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x000080d1;
        public const int GL_POST_CONVOLUTION_GREEN_BIAS = 0x00008021;
        public const int GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x00008021;
        public const int GL_POST_CONVOLUTION_GREEN_SCALE = 0x0000801d;
        public const int GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x0000801d;
        public const int GL_POST_CONVOLUTION_RED_BIAS = 0x00008020;
        public const int GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x00008020;
        public const int GL_POST_CONVOLUTION_RED_SCALE = 0x0000801c;
        public const int GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x0000801c;
        public const int GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x00008162;
        public const int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x0000817b;
        public const int GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x00008179;
        public const int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x0000817c;
        public const int GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x0000817a;
        public const int GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x0001a1f8;
        public const int GL_PRESERVE_ATI = 0x00008762;
        public const int GL_PREVIOUS = 0x00008578;
        public const int GL_PREVIOUS_ARB = 0x00008578;
        public const int GL_PREVIOUS_EXT = 0x00008578;
        public const int GL_PREVIOUS_TEXTURE_INPUT_NV = 0x000086e4;
        public const int GL_PRIMARY_COLOR = 0x00008577;
        public const int GL_PRIMARY_COLOR_ARB = 0x00008577;
        public const int GL_PRIMARY_COLOR_EXT = 0x00008577;
        public const int GL_PRIMARY_COLOR_NV = 0x0000852c;
        public const int GL_PRIMITIVE_RESTART_INDEX_NV = 0x00008559;
        public const int GL_PRIMITIVE_RESTART_NV = 0x00008558;
        public const int GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x000088b0;
        public const int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x00008805;
        public const int GL_PROGRAM_ATTRIBS_ARB = 0x000088ac;
        public const int GL_PROGRAM_BINDING_ARB = 0x00008677;
        public const int GL_PROGRAM_ERROR_POSITION_ARB = 0x0000864b;
        public const int GL_PROGRAM_ERROR_POSITION_NV = 0x0000864b;
        public const int GL_PROGRAM_ERROR_STRING_ARB = 0x00008874;
        public const int GL_PROGRAM_ERROR_STRING_NV = 0x00008874;
        public const int GL_PROGRAM_FORMAT_ARB = 0x00008876;
        public const int GL_PROGRAM_FORMAT_ASCII_ARB = 0x00008875;
        public const int GL_PROGRAM_INSTRUCTIONS_ARB = 0x000088a0;
        public const int GL_PROGRAM_LENGTH_ARB = 0x00008627;
        public const int GL_PROGRAM_LENGTH_NV = 0x00008627;
        public const int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x000088b2;
        public const int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x00008808;
        public const int GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x000088ae;
        public const int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x000088a2;
        public const int GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x000088aa;
        public const int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x000088a6;
        public const int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x0000880a;
        public const int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x00008809;
        public const int GL_PROGRAM_OBJECT_ARB = 0x00008b40;
        public const int GL_PROGRAM_PARAMETER_NV = 0x00008644;
        public const int GL_PROGRAM_PARAMETERS_ARB = 0x000088a8;
        public const int GL_PROGRAM_RESIDENT_NV = 0x00008647;
        public const int GL_PROGRAM_STRING_ARB = 0x00008628;
        public const int GL_PROGRAM_STRING_NV = 0x00008628;
        public const int GL_PROGRAM_TARGET_NV = 0x00008646;
        public const int GL_PROGRAM_TEMPORARIES_ARB = 0x000088a4;
        public const int GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x00008807;
        public const int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x00008806;
        public const int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x000088b6;
        public const int GL_PROJECTION = 0x00001701;
        public const int GL_PROJECTION_MATRIX = 0x00000ba7;
        public const int GL_PROJECTION_STACK_DEPTH = 0x00000ba4;
        public const int GL_PROXY_COLOR_TABLE = 0x000080d3;
        public const int GL_PROXY_COLOR_TABLE_SGI = 0x000080d3;
        public const int GL_PROXY_HISTOGRAM = 0x00008025;
        public const int GL_PROXY_HISTOGRAM_EXT = 0x00008025;
        public const int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x000080d5;
        public const int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x000080d5;
        public const int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x000080d4;
        public const int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x000080d4;
        public const int GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x00008163;
        public const int GL_PROXY_TEXTURE_1D = 0x00008063;
        public const int GL_PROXY_TEXTURE_1D_EXT = 0x00008063;
        public const int GL_PROXY_TEXTURE_2D = 0x00008064;
        public const int GL_PROXY_TEXTURE_2D_EXT = 0x00008064;
        public const int GL_PROXY_TEXTURE_3D = 0x00008070;
        public const int GL_PROXY_TEXTURE_3D_EXT = 0x00008070;
        public const int GL_PROXY_TEXTURE_4D_SGIS = 0x00008135;
        public const int GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x000080bd;
        public const int GL_PROXY_TEXTURE_CUBE_MAP = 0x0000851b;
        public const int GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x0000851b;
        public const int GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x0000851b;
        public const int GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x000084f7;
        public const int GL_PROXY_TEXTURE_RECTANGLE_NV = 0x000084f7;
        public const int GL_Q = 0x00002003;
        public const int GL_QUAD_ALPHA4_SGIS = 0x0000811e;
        public const int GL_QUAD_ALPHA8_SGIS = 0x0000811f;
        public const int GL_QUAD_INTENSITY4_SGIS = 0x00008122;
        public const int GL_QUAD_INTENSITY8_SGIS = 0x00008123;
        public const int GL_QUAD_LUMINANCE4_SGIS = 0x00008120;
        public const int GL_QUAD_LUMINANCE8_SGIS = 0x00008121;
        public const int GL_QUAD_MESH_SUN = 0x00008614;
        public const int GL_QUAD_STRIP = 0x00000008;
        public const int GL_QUAD_TEXTURE_SELECT_SGIS = 0x00008125;
        public const int GL_QUADRATIC_ATTENUATION = 0x00001209;
        public const int GL_QUADS = 0x00000007;
        public const int GL_QUARTER_BIT_ATI = 0x00000010;
        public const int GL_QUERY_COUNTER_BITS = 0x00008864;
        public const int GL_QUERY_COUNTER_BITS_ARB = 0x00008864;
        public const int GL_QUERY_RESULT = 0x00008866;
        public const int GL_QUERY_RESULT_ARB = 0x00008866;
        public const int GL_QUERY_RESULT_AVAILABLE = 0x00008867;
        public const int GL_QUERY_RESULT_AVAILABLE_ARB = 0x00008867;
        public const int GL_R = 0x00002002;
        public const int GL_R1UI_C3F_V3F_SUN = 0x000085c6;
        public const int GL_R1UI_C4F_N3F_V3F_SUN = 0x000085c8;
        public const int GL_R1UI_C4UB_V3F_SUN = 0x000085c5;
        public const int GL_R1UI_N3F_V3F_SUN = 0x000085c7;
        public const int GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x000085cb;
        public const int GL_R1UI_T2F_N3F_V3F_SUN = 0x000085ca;
        public const int GL_R1UI_T2F_V3F_SUN = 0x000085c9;
        public const int GL_R1UI_V3F_SUN = 0x000085c4;
        public const int GL_R3_G3_B2 = 0x00002a10;
        public const int GL_RASTER_POSITION_UNCLIPPED_IBM = 0x00019262;
        public const int GL_READ_BUFFER = 0x00000c02;
        public const int GL_READ_ONLY = 0x000088b8;
        public const int GL_READ_ONLY_ARB = 0x000088b8;
        public const int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x0000887b;
        public const int GL_READ_PIXEL_DATA_RANGE_NV = 0x00008879;
        public const int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x0000887d;
        public const int GL_READ_WRITE = 0x000088ba;
        public const int GL_READ_WRITE_ARB = 0x000088ba;
        public const int GL_RECLAIM_MEMORY_HINT_PGI = 0x0001a1fe;
        public const int GL_RED = 0x00001903;
        public const int GL_RED_BIAS = 0x00000d15;
        public const int GL_RED_BIT_ATI = 0x00000001;
        public const int GL_RED_BITS = 0x00000d52;
        public const int GL_RED_MAX_CLAMP_INGR = 0x00008564;
        public const int GL_RED_MIN_CLAMP_INGR = 0x00008560;
        public const int GL_RED_SCALE = 0x00000d14;
        public const int GL_REDUCE = 0x00008016;
        public const int GL_REDUCE_EXT = 0x00008016;
        public const int GL_REFERENCE_PLANE_EQUATION_SGIX = 0x0000817e;
        public const int GL_REFERENCE_PLANE_SGIX = 0x0000817d;
        public const int GL_REFLECTION_MAP = 0x00008512;
        public const int GL_REFLECTION_MAP_ARB = 0x00008512;
        public const int GL_REFLECTION_MAP_EXT = 0x00008512;
        public const int GL_REFLECTION_MAP_NV = 0x00008512;
        public const int GL_REG_0_ATI = 0x00008921;
        public const int GL_REG_1_ATI = 0x00008922;
        public const int GL_REG_10_ATI = 0x0000892b;
        public const int GL_REG_11_ATI = 0x0000892c;
        public const int GL_REG_12_ATI = 0x0000892d;
        public const int GL_REG_13_ATI = 0x0000892e;
        public const int GL_REG_14_ATI = 0x0000892f;
        public const int GL_REG_15_ATI = 0x00008930;
        public const int GL_REG_16_ATI = 0x00008931;
        public const int GL_REG_17_ATI = 0x00008932;
        public const int GL_REG_18_ATI = 0x00008933;
        public const int GL_REG_19_ATI = 0x00008934;
        public const int GL_REG_2_ATI = 0x00008923;
        public const int GL_REG_20_ATI = 0x00008935;
        public const int GL_REG_21_ATI = 0x00008936;
        public const int GL_REG_22_ATI = 0x00008937;
        public const int GL_REG_23_ATI = 0x00008938;
        public const int GL_REG_24_ATI = 0x00008939;
        public const int GL_REG_25_ATI = 0x0000893a;
        public const int GL_REG_26_ATI = 0x0000893b;
        public const int GL_REG_27_ATI = 0x0000893c;
        public const int GL_REG_28_ATI = 0x0000893d;
        public const int GL_REG_29_ATI = 0x0000893e;
        public const int GL_REG_3_ATI = 0x00008924;
        public const int GL_REG_30_ATI = 0x0000893f;
        public const int GL_REG_31_ATI = 0x00008940;
        public const int GL_REG_4_ATI = 0x00008925;
        public const int GL_REG_5_ATI = 0x00008926;
        public const int GL_REG_6_ATI = 0x00008927;
        public const int GL_REG_7_ATI = 0x00008928;
        public const int GL_REG_8_ATI = 0x00008929;
        public const int GL_REG_9_ATI = 0x0000892a;
        public const int GL_REGISTER_COMBINERS_NV = 0x00008522;
        public const int GL_RENDER = 0x00001c00;
        public const int GL_RENDER_MODE = 0x00000c40;
        public const int GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x00008d53;
        public const int GL_RENDERBUFFER_BINDING_EXT = 0x00008ca7;
        public const int GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x00008d52;
        public const int GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x00008d54;
        public const int GL_RENDERBUFFER_EXT = 0x00008d41;
        public const int GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x00008d51;
        public const int GL_RENDERBUFFER_HEIGHT_EXT = 0x00008d43;
        public const int GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x00008d44;
        public const int GL_RENDERBUFFER_RED_SIZE_EXT = 0x00008d50;
        public const int GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x00008d55;
        public const int GL_RENDERBUFFER_WIDTH_EXT = 0x00008d42;
        public const int GL_RENDERER = 0x00001f01;
        public const int GL_REPEAT = 0x00002901;
        public const int GL_REPLACE = 0x00001e01;
        public const int GL_REPLACE_EXT = 0x00008062;
        public const int GL_REPLACE_MIDDLE_SUN = 0x00000002;
        public const int GL_REPLACE_OLDEST_SUN = 0x00000003;
        public const int GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x000085c3;
        public const int GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x000085c2;
        public const int GL_REPLACEMENT_CODE_ARRAY_SUN = 0x000085c0;
        public const int GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x000085c1;
        public const int GL_REPLACEMENT_CODE_SUN = 0x000081d8;
        public const int GL_REPLICATE_BORDER = 0x00008153;
        public const int GL_REPLICATE_BORDER_HP = 0x00008153;
        public const int GL_RESAMPLE_AVERAGE_OML = 0x00008988;
        public const int GL_RESAMPLE_DECIMATE_OML = 0x00008989;
        public const int GL_RESAMPLE_DECIMATE_SGIX = 0x00008430;
        public const int GL_RESAMPLE_REPLICATE_OML = 0x00008986;
        public const int GL_RESAMPLE_REPLICATE_SGIX = 0x0000842e;
        public const int GL_RESAMPLE_ZERO_FILL_OML = 0x00008987;
        public const int GL_RESAMPLE_ZERO_FILL_SGIX = 0x0000842f;
        public const int GL_RESCALE_NORMAL = 0x0000803a;
        public const int GL_RESCALE_NORMAL_EXT = 0x0000803a;
        public const int GL_RESTART_SUN = 0x00000001;
        public const int GL_RETURN = 0x00000102;
        public const int GL_RGB = 0x00001907;
        public const int GL_RGB_FLOAT16_ATI = 0x0000881b;
        public const int GL_RGB_FLOAT32_ATI = 0x00008815;
        public const int GL_RGB_S3TC = 0x000083a0;
        public const int GL_RGB_SCALE = 0x00008573;
        public const int GL_RGB_SCALE_ARB = 0x00008573;
        public const int GL_RGB_SCALE_EXT = 0x00008573;
        public const int GL_RGB10 = 0x00008052;
        public const int GL_RGB10_A2 = 0x00008059;
        public const int GL_RGB10_A2_EXT = 0x00008059;
        public const int GL_RGB10_EXT = 0x00008052;
        public const int GL_RGB12 = 0x00008053;
        public const int GL_RGB12_EXT = 0x00008053;
        public const int GL_RGB16 = 0x00008054;
        public const int GL_RGB16_EXT = 0x00008054;
        public const int GL_RGB16F_ARB = 0x0000881b;
        public const int GL_RGB2_EXT = 0x0000804e;
        public const int GL_RGB32F_ARB = 0x00008815;
        public const int GL_RGB4 = 0x0000804f;
        public const int GL_RGB4_EXT = 0x0000804f;
        public const int GL_RGB4_S3TC = 0x000083a1;
        public const int GL_RGB5 = 0x00008050;
        public const int GL_RGB5_A1 = 0x00008057;
        public const int GL_RGB5_A1_EXT = 0x00008057;
        public const int GL_RGB5_EXT = 0x00008050;
        public const int GL_RGB8 = 0x00008051;
        public const int GL_RGB8_EXT = 0x00008051;
        public const int GL_RGBA = 0x00001908;
        public const int GL_RGBA_FLOAT_MODE_ARB = 0x00008820;
        public const int GL_RGBA_FLOAT16_ATI = 0x0000881a;
        public const int GL_RGBA_FLOAT32_ATI = 0x00008814;
        public const int GL_RGBA_MODE = 0x00000c31;
        public const int GL_RGBA_S3TC = 0x000083a2;
        public const int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x000086d9;
        public const int GL_RGBA12 = 0x0000805a;
        public const int GL_RGBA12_EXT = 0x0000805a;
        public const int GL_RGBA16 = 0x0000805b;
        public const int GL_RGBA16_EXT = 0x0000805b;
        public const int GL_RGBA16F_ARB = 0x0000881a;
        public const int GL_RGBA2 = 0x00008055;
        public const int GL_RGBA2_EXT = 0x00008055;
        public const int GL_RGBA32F_ARB = 0x00008814;
        public const int GL_RGBA4 = 0x00008056;
        public const int GL_RGBA4_EXT = 0x00008056;
        public const int GL_RGBA4_S3TC = 0x000083a3;
        public const int GL_RGBA8 = 0x00008058;
        public const int GL_RGBA8_EXT = 0x00008058;
        public const int GL_RIGHT = 0x00000407;
        public const int GL_S = 0x00002000;
        public const int GL_SAMPLE_ALPHA_TO_COVERAGE = 0x0000809e;
        public const int GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x0000809e;
        public const int GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x0000809e;
        public const int GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x0000809e;
        public const int GL_SAMPLE_ALPHA_TO_ONE = 0x0000809f;
        public const int GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x0000809f;
        public const int GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x0000809f;
        public const int GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x0000809f;
        public const int GL_SAMPLE_BUFFERS = 0x000080a8;
        public const int GL_SAMPLE_BUFFERS_3DFX = 0x000086b3;
        public const int GL_SAMPLE_BUFFERS_ARB = 0x000080a8;
        public const int GL_SAMPLE_BUFFERS_EXT = 0x000080a8;
        public const int GL_SAMPLE_BUFFERS_SGIS = 0x000080a8;
        public const int GL_SAMPLE_COVERAGE = 0x000080a0;
        public const int GL_SAMPLE_COVERAGE_ARB = 0x000080a0;
        public const int GL_SAMPLE_COVERAGE_INVERT = 0x000080ab;
        public const int GL_SAMPLE_COVERAGE_INVERT_ARB = 0x000080ab;
        public const int GL_SAMPLE_COVERAGE_VALUE = 0x000080aa;
        public const int GL_SAMPLE_COVERAGE_VALUE_ARB = 0x000080aa;
        public const int GL_SAMPLE_MASK_EXT = 0x000080a0;
        public const int GL_SAMPLE_MASK_INVERT_EXT = 0x000080ab;
        public const int GL_SAMPLE_MASK_INVERT_SGIS = 0x000080ab;
        public const int GL_SAMPLE_MASK_SGIS = 0x000080a0;
        public const int GL_SAMPLE_MASK_VALUE_EXT = 0x000080aa;
        public const int GL_SAMPLE_MASK_VALUE_SGIS = 0x000080aa;
        public const int GL_SAMPLE_PATTERN_EXT = 0x000080ac;
        public const int GL_SAMPLE_PATTERN_SGIS = 0x000080ac;
        public const int GL_SAMPLER_1D = 0x00008b5d;
        public const int GL_SAMPLER_1D_ARB = 0x00008b5d;
        public const int GL_SAMPLER_1D_SHADOW = 0x00008b61;
        public const int GL_SAMPLER_1D_SHADOW_ARB = 0x00008b61;
        public const int GL_SAMPLER_2D = 0x00008b5e;
        public const int GL_SAMPLER_2D_ARB = 0x00008b5e;
        public const int GL_SAMPLER_2D_RECT_ARB = 0x00008b63;
        public const int GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x00008b64;
        public const int GL_SAMPLER_2D_SHADOW = 0x00008b62;
        public const int GL_SAMPLER_2D_SHADOW_ARB = 0x00008b62;
        public const int GL_SAMPLER_3D = 0x00008b5f;
        public const int GL_SAMPLER_3D_ARB = 0x00008b5f;
        public const int GL_SAMPLER_CUBE = 0x00008b60;
        public const int GL_SAMPLER_CUBE_ARB = 0x00008b60;
        public const int GL_SAMPLES = 0x000080a9;
        public const int GL_SAMPLES_3DFX = 0x000086b4;
        public const int GL_SAMPLES_ARB = 0x000080a9;
        public const int GL_SAMPLES_EXT = 0x000080a9;
        public const int GL_SAMPLES_PASSED = 0x00008914;
        public const int GL_SAMPLES_PASSED_ARB = 0x00008914;
        public const int GL_SAMPLES_SGIS = 0x000080a9;
        public const int GL_SATURATE_BIT_ATI = 0x00000040;
        public const int GL_SCALAR_EXT = 0x000087be;
        public const int GL_SCALE_BY_FOUR_NV = 0x0000853f;
        public const int GL_SCALE_BY_ONE_HALF_NV = 0x00008540;
        public const int GL_SCALE_BY_TWO_NV = 0x0000853e;
        public const int GL_SCALEBIAS_HINT_SGIX = 0x00008322;
        public const int GL_SCISSOR_BIT = 0x00080000;
        public const int GL_SCISSOR_BOX = 0x00000c10;
        public const int GL_SCISSOR_TEST = 0x00000c11;
        public const int GL_SCREEN_COORDINATES_REND = 0x00008490;
        public const int GL_SECONDARY_COLOR_ARRAY = 0x0000845e;
        public const int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x0000889c;
        public const int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x0000889c;
        public const int GL_SECONDARY_COLOR_ARRAY_EXT = 0x0000845e;
        public const int GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 0x000192a5;
        public const int GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 0x000192af;
        public const int GL_SECONDARY_COLOR_ARRAY_POINTER = 0x0000845d;
        public const int GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x0000845d;
        public const int GL_SECONDARY_COLOR_ARRAY_SIZE = 0x0000845a;
        public const int GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x0000845a;
        public const int GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x0000845c;
        public const int GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x0000845c;
        public const int GL_SECONDARY_COLOR_ARRAY_TYPE = 0x0000845b;
        public const int GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x0000845b;
        public const int GL_SECONDARY_COLOR_NV = 0x0000852d;
        public const int GL_SECONDARY_INTERPOLATOR_ATI = 0x0000896d;
        public const int GL_SELECT = 0x00001c02;
        public const int GL_SELECTION_BUFFER_POINTER = 0x00000df3;
        public const int GL_SELECTION_BUFFER_SIZE = 0x00000df4;
        public const int GL_SEPARABLE_2D = 0x00008012;
        public const int GL_SEPARABLE_2D_EXT = 0x00008012;
        public const int GL_SEPARATE_SPECULAR_COLOR = 0x000081fa;
        public const int GL_SEPARATE_SPECULAR_COLOR_EXT = 0x000081fa;
        public const int GL_SET = 0x0000150f;
        public const int GL_SHADE_MODEL = 0x00000b54;
        public const int GL_SHADER_CONSISTENT_NV = 0x000086dd;
        public const int GL_SHADER_OBJECT_ARB = 0x00008b48;
        public const int GL_SHADER_OPERATION_NV = 0x000086df;
        public const int GL_SHADER_SOURCE_LENGTH = 0x00008b88;
        public const int GL_SHADER_TYPE = 0x00008b4f;
        public const int GL_SHADING_LANGUAGE_VERSION = 0x00008b8c;
        public const int GL_SHADING_LANGUAGE_VERSION_ARB = 0x00008b8c;
        public const int GL_SHADOW_AMBIENT_SGIX = 0x000080bf;
        public const int GL_SHADOW_ATTENUATION_EXT = 0x0000834e;
        public const int GL_SHARED_TEXTURE_PALETTE_EXT = 0x000081fb;
        public const int GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x000080b0;
        public const int GL_SHININESS = 0x00001601;
        public const int GL_SHORT = 0x00001402;
        public const int GL_SIGNED_ALPHA_NV = 0x00008705;
        public const int GL_SIGNED_ALPHA8_NV = 0x00008706;
        public const int GL_SIGNED_HILO_NV = 0x000086f9;
        public const int GL_SIGNED_HILO16_NV = 0x000086fa;
        public const int GL_SIGNED_HILO8_NV = 0x0000885f;
        public const int GL_SIGNED_IDENTITY_NV = 0x0000853c;
        public const int GL_SIGNED_INTENSITY_NV = 0x00008707;
        public const int GL_SIGNED_INTENSITY8_NV = 0x00008708;
        public const int GL_SIGNED_LUMINANCE_ALPHA_NV = 0x00008703;
        public const int GL_SIGNED_LUMINANCE_NV = 0x00008701;
        public const int GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x00008704;
        public const int GL_SIGNED_LUMINANCE8_NV = 0x00008702;
        public const int GL_SIGNED_NEGATE_NV = 0x0000853d;
        public const int GL_SIGNED_RGB_NV = 0x000086fe;
        public const int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x0000870c;
        public const int GL_SIGNED_RGB8_NV = 0x000086ff;
        public const int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x0000870d;
        public const int GL_SIGNED_RGBA_NV = 0x000086fb;
        public const int GL_SIGNED_RGBA8_NV = 0x000086fc;
        public const int GL_SINGLE_COLOR = 0x000081f9;
        public const int GL_SINGLE_COLOR_EXT = 0x000081f9;
        public const int GL_SLICE_ACCUM_SUN = 0x000085cc;
        public const int GL_SMOOTH = 0x00001d01;
        public const int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x00000b23;
        public const int GL_SMOOTH_LINE_WIDTH_RANGE = 0x00000b22;
        public const int GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x00000b13;
        public const int GL_SMOOTH_POINT_SIZE_RANGE = 0x00000b12;
        public const int GL_SOURCE0_ALPHA = 0x00008588;
        public const int GL_SOURCE0_ALPHA_ARB = 0x00008588;
        public const int GL_SOURCE0_ALPHA_EXT = 0x00008588;
        public const int GL_SOURCE0_RGB = 0x00008580;
        public const int GL_SOURCE0_RGB_ARB = 0x00008580;
        public const int GL_SOURCE0_RGB_EXT = 0x00008580;
        public const int GL_SOURCE1_ALPHA = 0x00008589;
        public const int GL_SOURCE1_ALPHA_ARB = 0x00008589;
        public const int GL_SOURCE1_ALPHA_EXT = 0x00008589;
        public const int GL_SOURCE1_RGB = 0x00008581;
        public const int GL_SOURCE1_RGB_ARB = 0x00008581;
        public const int GL_SOURCE1_RGB_EXT = 0x00008581;
        public const int GL_SOURCE2_ALPHA = 0x0000858a;
        public const int GL_SOURCE2_ALPHA_ARB = 0x0000858a;
        public const int GL_SOURCE2_ALPHA_EXT = 0x0000858a;
        public const int GL_SOURCE2_RGB = 0x00008582;
        public const int GL_SOURCE2_RGB_ARB = 0x00008582;
        public const int GL_SOURCE2_RGB_EXT = 0x00008582;
        public const int GL_SOURCE3_ALPHA_NV = 0x0000858b;
        public const int GL_SOURCE3_RGB_NV = 0x00008583;
        public const int GL_SPARE0_NV = 0x0000852e;
        public const int GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x00008532;
        public const int GL_SPARE1_NV = 0x0000852f;
        public const int GL_SPECULAR = 0x00001202;
        public const int GL_SPHERE_MAP = 0x00002402;
        public const int GL_SPOT_CUTOFF = 0x00001206;
        public const int GL_SPOT_DIRECTION = 0x00001204;
        public const int GL_SPOT_EXPONENT = 0x00001205;
        public const int GL_SPRITE_AXIAL_SGIX = 0x0000814c;
        public const int GL_SPRITE_AXIS_SGIX = 0x0000814a;
        public const int GL_SPRITE_EYE_ALIGNED_SGIX = 0x0000814e;
        public const int GL_SPRITE_MODE_SGIX = 0x00008149;
        public const int GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x0000814d;
        public const int GL_SPRITE_SGIX = 0x00008148;
        public const int GL_SPRITE_TRANSLATION_SGIX = 0x0000814b;
        public const int GL_SRC_ALPHA = 0x00000302;
        public const int GL_SRC_ALPHA_SATURATE = 0x00000308;
        public const int GL_SRC_COLOR = 0x00000300;
        public const int GL_SRC0_ALPHA = 0x00008588;
        public const int GL_SRC0_RGB = 0x00008580;
        public const int GL_SRC1_ALPHA = 0x00008589;
        public const int GL_SRC1_RGB = 0x00008581;
        public const int GL_SRC2_ALPHA = 0x0000858a;
        public const int GL_SRC2_RGB = 0x00008582;
        public const int GL_STACK_OVERFLOW = 0x00000503;
        public const int GL_STACK_UNDERFLOW = 0x00000504;
        public const int GL_STATIC_ATI = 0x00008760;
        public const int GL_STATIC_COPY = 0x000088e6;
        public const int GL_STATIC_COPY_ARB = 0x000088e6;
        public const int GL_STATIC_DRAW = 0x000088e4;
        public const int GL_STATIC_DRAW_ARB = 0x000088e4;
        public const int GL_STATIC_READ = 0x000088e5;
        public const int GL_STATIC_READ_ARB = 0x000088e5;
        public const int GL_STENCIL = 0x00001802;
        public const int GL_STENCIL_ATTACHMENT_EXT = 0x00008d20;
        public const int GL_STENCIL_BACK_FAIL = 0x00008801;
        public const int GL_STENCIL_BACK_FAIL_ATI = 0x00008801;
        public const int GL_STENCIL_BACK_FUNC = 0x00008800;
        public const int GL_STENCIL_BACK_FUNC_ATI = 0x00008800;
        public const int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x00008802;
        public const int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x00008802;
        public const int GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x00008803;
        public const int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x00008803;
        public const int GL_STENCIL_BACK_REF = 0x00008ca3;
        public const int GL_STENCIL_BACK_VALUE_MASK = 0x00008ca4;
        public const int GL_STENCIL_BACK_WRITEMASK = 0x00008ca5;
        public const int GL_STENCIL_BITS = 0x00000d57;
        public const int GL_STENCIL_BUFFER_BIT = 0x00000400;
        public const int GL_STENCIL_CLEAR_VALUE = 0x00000b91;
        public const int GL_STENCIL_FAIL = 0x00000b94;
        public const int GL_STENCIL_FUNC = 0x00000b92;
        public const int GL_STENCIL_INDEX = 0x00001901;
        public const int GL_STENCIL_INDEX1_EXT = 0x00008d46;
        public const int GL_STENCIL_INDEX16_EXT = 0x00008d49;
        public const int GL_STENCIL_INDEX4_EXT = 0x00008d47;
        public const int GL_STENCIL_INDEX8_EXT = 0x00008d48;
        public const int GL_STENCIL_PASS_DEPTH_FAIL = 0x00000b95;
        public const int GL_STENCIL_PASS_DEPTH_PASS = 0x00000b96;
        public const int GL_STENCIL_REF = 0x00000b97;
        public const int GL_STENCIL_TEST = 0x00000b90;
        public const int GL_STENCIL_TEST_TWO_SIDE_EXT = 0x00008910;
        public const int GL_STENCIL_VALUE_MASK = 0x00000b93;
        public const int GL_STENCIL_WRITEMASK = 0x00000b98;
        public const int GL_STEREO = 0x00000c33;
        public const int GL_STORAGE_CACHED_APPLE = 0x000085be;
        public const int GL_STORAGE_SHARED_APPLE = 0x000085bf;
        public const int GL_STREAM_COPY = 0x000088e2;
        public const int GL_STREAM_COPY_ARB = 0x000088e2;
        public const int GL_STREAM_DRAW = 0x000088e0;
        public const int GL_STREAM_DRAW_ARB = 0x000088e0;
        public const int GL_STREAM_READ = 0x000088e1;
        public const int GL_STREAM_READ_ARB = 0x000088e1;
        public const int GL_STRICT_DEPTHFUNC_HINT_PGI = 0x0001a216;
        public const int GL_STRICT_LIGHTING_HINT_PGI = 0x0001a217;
        public const int GL_STRICT_SCISSOR_HINT_PGI = 0x0001a218;
        public const int GL_SUB_ATI = 0x00008965;
        public const int GL_SUBPIXEL_BITS = 0x00000d50;
        public const int GL_SUBTRACT = 0x000084e7;
        public const int GL_SUBTRACT_ARB = 0x000084e7;
        public const int GL_SWIZZLE_STQ_ATI = 0x00008977;
        public const int GL_SWIZZLE_STQ_DQ_ATI = 0x00008979;
        public const int GL_SWIZZLE_STR_ATI = 0x00008976;
        public const int GL_SWIZZLE_STR_DR_ATI = 0x00008978;
        public const int GL_SWIZZLE_STRQ_ATI = 0x0000897a;
        public const int GL_SWIZZLE_STRQ_DQ_ATI = 0x0000897b;
        public const int GL_T = 0x00002001;
        public const int GL_T2F_C3F_V3F = 0x00002a2a;
        public const int GL_T2F_C4F_N3F_V3F = 0x00002a2c;
        public const int GL_T2F_C4UB_V3F = 0x00002a29;
        public const int GL_T2F_IUI_N3F_V2F_EXT = 0x000081b3;
        public const int GL_T2F_IUI_N3F_V3F_EXT = 0x000081b4;
        public const int GL_T2F_IUI_V2F_EXT = 0x000081b1;
        public const int GL_T2F_IUI_V3F_EXT = 0x000081b2;
        public const int GL_T2F_N3F_V3F = 0x00002a2b;
        public const int GL_T2F_V3F = 0x00002a27;
        public const int GL_T4F_C4F_N3F_V4F = 0x00002a2d;
        public const int GL_T4F_V4F = 0x00002a28;
        public const int GL_TABLE_TOO_LARGE = 0x00008031;
        public const int GL_TABLE_TOO_LARGE_EXT = 0x00008031;
        public const int GL_TANGENT_ARRAY_EXT = 0x00008439;
        public const int GL_TANGENT_ARRAY_POINTER_EXT = 0x00008442;
        public const int GL_TANGENT_ARRAY_STRIDE_EXT = 0x0000843f;
        public const int GL_TANGENT_ARRAY_TYPE_EXT = 0x0000843e;
        public const int GL_TEXCOORD1_BIT_PGI = 0x10000000;
        public const int GL_TEXCOORD2_BIT_PGI = 0x20000000;
        public const int GL_TEXCOORD3_BIT_PGI = 0x40000000;
        public const int GL_TEXCOORD4_BIT_PGI = unchecked( (int)0x80000000 );
        public const int GL_TEXT_FRAGMENT_SHADER_ATI = 0x00008200;
        public const int GL_TEXTURE = 0x00001702;
        public const int GL_TEXTURE_1D = 0x00000de0;
        public const int GL_TEXTURE_1D_BINDING_EXT = 0x00008068;
        public const int GL_TEXTURE_2D = 0x00000de1;
        public const int GL_TEXTURE_2D_BINDING_EXT = 0x00008069;
        public const int GL_TEXTURE_3D = 0x0000806f;
        public const int GL_TEXTURE_3D_BINDING_EXT = 0x0000806a;
        public const int GL_TEXTURE_3D_EXT = 0x0000806f;
        public const int GL_TEXTURE_4D_BINDING_SGIS = 0x0000814f;
        public const int GL_TEXTURE_4D_SGIS = 0x00008134;
        public const int GL_TEXTURE_4DSIZE_SGIS = 0x00008136;
        public const int GL_TEXTURE_ALPHA_SIZE = 0x0000805f;
        public const int GL_TEXTURE_ALPHA_SIZE_EXT = 0x0000805f;
        public const int GL_TEXTURE_ALPHA_TYPE_ARB = 0x00008c13;
        public const int GL_TEXTURE_APPLICATION_MODE_EXT = 0x0000834f;
        public const int GL_TEXTURE_BASE_LEVEL = 0x0000813c;
        public const int GL_TEXTURE_BASE_LEVEL_SGIS = 0x0000813c;
        public const int GL_TEXTURE_BINDING_1D = 0x00008068;
        public const int GL_TEXTURE_BINDING_2D = 0x00008069;
        public const int GL_TEXTURE_BINDING_3D = 0x0000806a;
        public const int GL_TEXTURE_BINDING_CUBE_MAP = 0x00008514;
        public const int GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x00008514;
        public const int GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x00008514;
        public const int GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x000084f6;
        public const int GL_TEXTURE_BINDING_RECTANGLE_NV = 0x000084f6;
        public const int GL_TEXTURE_BIT = 0x00040000;
        public const int GL_TEXTURE_BLUE_SIZE = 0x0000805e;
        public const int GL_TEXTURE_BLUE_SIZE_EXT = 0x0000805e;
        public const int GL_TEXTURE_BLUE_TYPE_ARB = 0x00008c12;
        public const int GL_TEXTURE_BORDER = 0x00001005;
        public const int GL_TEXTURE_BORDER_COLOR = 0x00001004;
        public const int GL_TEXTURE_BORDER_VALUES_NV = 0x0000871a;
        public const int GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x00008171;
        public const int GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x00008176;
        public const int GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x00008172;
        public const int GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x00008175;
        public const int GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x00008173;
        public const int GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x00008174;
        public const int GL_TEXTURE_COLOR_TABLE_SGI = 0x000080bc;
        public const int GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x000081ef;
        public const int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x000080bf;
        public const int GL_TEXTURE_COMPARE_FUNC = 0x0000884d;
        public const int GL_TEXTURE_COMPARE_FUNC_ARB = 0x0000884d;
        public const int GL_TEXTURE_COMPARE_MODE = 0x0000884c;
        public const int GL_TEXTURE_COMPARE_MODE_ARB = 0x0000884c;
        public const int GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x0000819b;
        public const int GL_TEXTURE_COMPARE_SGIX = 0x0000819a;
        public const int GL_TEXTURE_COMPONENTS = 0x00001003;
        public const int GL_TEXTURE_COMPRESSED = 0x000086a1;
        public const int GL_TEXTURE_COMPRESSED_ARB = 0x000086a1;
        public const int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x000086a0;
        public const int GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x000086a0;
        public const int GL_TEXTURE_COMPRESSION_HINT = 0x000084ef;
        public const int GL_TEXTURE_COMPRESSION_HINT_ARB = 0x000084ef;
        public const int GL_TEXTURE_CONSTANT_DATA_SUNX = 0x000081d6;
        public const int GL_TEXTURE_COORD_ARRAY = 0x00008078;
        public const int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x0000889a;
        public const int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x0000889a;
        public const int GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x0000808b;
        public const int GL_TEXTURE_COORD_ARRAY_EXT = 0x00008078;
        public const int GL_TEXTURE_COORD_ARRAY_LIST_IBM = 0x000192a2;
        public const int GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 0x000192ac;
        public const int GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x000083f8;
        public const int GL_TEXTURE_COORD_ARRAY_POINTER = 0x00008092;
        public const int GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x00008092;
        public const int GL_TEXTURE_COORD_ARRAY_SIZE = 0x00008088;
        public const int GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x00008088;
        public const int GL_TEXTURE_COORD_ARRAY_STRIDE = 0x0000808a;
        public const int GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x0000808a;
        public const int GL_TEXTURE_COORD_ARRAY_TYPE = 0x00008089;
        public const int GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x00008089;
        public const int GL_TEXTURE_CUBE_MAP = 0x00008513;
        public const int GL_TEXTURE_CUBE_MAP_ARB = 0x00008513;
        public const int GL_TEXTURE_CUBE_MAP_EXT = 0x00008513;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x00008516;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x00008516;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x00008516;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x00008518;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x00008518;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x00008518;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x0000851a;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x0000851a;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x0000851a;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x00008515;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x00008515;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x00008515;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x00008517;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x00008517;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x00008517;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x00008519;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x00008519;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x00008519;
        public const int GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
        public const int GL_TEXTURE_DEFORMATION_SGIX = 0x00008195;
        public const int GL_TEXTURE_DEPTH = 0x00008071;
        public const int GL_TEXTURE_DEPTH_EXT = 0x00008071;
        public const int GL_TEXTURE_DEPTH_SIZE = 0x0000884a;
        public const int GL_TEXTURE_DEPTH_SIZE_ARB = 0x0000884a;
        public const int GL_TEXTURE_DEPTH_TYPE_ARB = 0x00008c16;
        public const int GL_TEXTURE_DS_SIZE_NV = 0x0000871d;
        public const int GL_TEXTURE_DT_SIZE_NV = 0x0000871e;
        public const int GL_TEXTURE_ENV = 0x00002300;
        public const int GL_TEXTURE_ENV_BIAS_SGIX = 0x000080be;
        public const int GL_TEXTURE_ENV_COLOR = 0x00002201;
        public const int GL_TEXTURE_ENV_MODE = 0x00002200;
        public const int GL_TEXTURE_FILTER_CONTROL = 0x00008500;
        public const int GL_TEXTURE_FILTER_CONTROL_EXT = 0x00008500;
        public const int GL_TEXTURE_FILTER4_SIZE_SGIS = 0x00008147;
        public const int GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x0000888c;
        public const int GL_TEXTURE_GEN_MODE = 0x00002500;
        public const int GL_TEXTURE_GEN_Q = 0x00000c63;
        public const int GL_TEXTURE_GEN_R = 0x00000c62;
        public const int GL_TEXTURE_GEN_S = 0x00000c60;
        public const int GL_TEXTURE_GEN_T = 0x00000c61;
        public const int GL_TEXTURE_GEQUAL_R_SGIX = 0x0000819d;
        public const int GL_TEXTURE_GREEN_SIZE = 0x0000805d;
        public const int GL_TEXTURE_GREEN_SIZE_EXT = 0x0000805d;
        public const int GL_TEXTURE_GREEN_TYPE_ARB = 0x00008c11;
        public const int GL_TEXTURE_HEIGHT = 0x00001001;
        public const int GL_TEXTURE_HI_SIZE_NV = 0x0000871b;
        public const int GL_TEXTURE_INDEX_SIZE_EXT = 0x000080ed;
        public const int GL_TEXTURE_INTENSITY_SIZE = 0x00008061;
        public const int GL_TEXTURE_INTENSITY_SIZE_EXT = 0x00008061;
        public const int GL_TEXTURE_INTENSITY_TYPE_ARB = 0x00008c15;
        public const int GL_TEXTURE_INTERNAL_FORMAT = 0x00001003;
        public const int GL_TEXTURE_LEQUAL_R_SGIX = 0x0000819c;
        public const int GL_TEXTURE_LIGHT_EXT = 0x00008350;
        public const int GL_TEXTURE_LIGHTING_MODE_HP = 0x00008167;
        public const int GL_TEXTURE_LO_SIZE_NV = 0x0000871c;
        public const int GL_TEXTURE_LOD_BIAS = 0x00008501;
        public const int GL_TEXTURE_LOD_BIAS_EXT = 0x00008501;
        public const int GL_TEXTURE_LOD_BIAS_R_SGIX = 0x00008190;
        public const int GL_TEXTURE_LOD_BIAS_S_SGIX = 0x0000818e;
        public const int GL_TEXTURE_LOD_BIAS_T_SGIX = 0x0000818f;
        public const int GL_TEXTURE_LUMINANCE_SIZE = 0x00008060;
        public const int GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x00008060;
        public const int GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x00008c14;
        public const int GL_TEXTURE_MAG_FILTER = 0x00002800;
        public const int GL_TEXTURE_MAG_SIZE_NV = 0x0000871f;
        public const int GL_TEXTURE_MATERIAL_FACE_EXT = 0x00008351;
        public const int GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x00008352;
        public const int GL_TEXTURE_MATRIX = 0x00000ba8;
        public const int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x000084fe;
        public const int GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x0000836b;
        public const int GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x00008369;
        public const int GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x0000836a;
        public const int GL_TEXTURE_MAX_LEVEL = 0x0000813d;
        public const int GL_TEXTURE_MAX_LEVEL_SGIS = 0x0000813d;
        public const int GL_TEXTURE_MAX_LOD = 0x0000813b;
        public const int GL_TEXTURE_MAX_LOD_SGIS = 0x0000813b;
        public const int GL_TEXTURE_MIN_FILTER = 0x00002801;
        public const int GL_TEXTURE_MIN_LOD = 0x0000813a;
        public const int GL_TEXTURE_MIN_LOD_SGIS = 0x0000813a;
        public const int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x0000812e;
        public const int GL_TEXTURE_NORMAL_EXT = 0x000085af;
        public const int GL_TEXTURE_POST_SPECULAR_HP = 0x00008168;
        public const int GL_TEXTURE_PRE_SPECULAR_HP = 0x00008169;
        public const int GL_TEXTURE_PRIORITY = 0x00008066;
        public const int GL_TEXTURE_PRIORITY_EXT = 0x00008066;
        public const int GL_TEXTURE_RECTANGLE_ARB = 0x000084f5;
        public const int GL_TEXTURE_RECTANGLE_NV = 0x000084f5;
        public const int GL_TEXTURE_RED_SIZE = 0x0000805c;
        public const int GL_TEXTURE_RED_SIZE_EXT = 0x0000805c;
        public const int GL_TEXTURE_RED_TYPE_ARB = 0x00008c10;
        public const int GL_TEXTURE_RESIDENT = 0x00008067;
        public const int GL_TEXTURE_RESIDENT_EXT = 0x00008067;
        public const int GL_TEXTURE_SHADER_NV = 0x000086de;
        public const int GL_TEXTURE_STACK_DEPTH = 0x00000ba5;
        public const int GL_TEXTURE_TOO_LARGE_EXT = 0x00008065;
        public const int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x0000888f;
        public const int GL_TEXTURE_WIDTH = 0x00001000;
        public const int GL_TEXTURE_WRAP_Q_SGIS = 0x00008137;
        public const int GL_TEXTURE_WRAP_R = 0x00008072;
        public const int GL_TEXTURE_WRAP_R_EXT = 0x00008072;
        public const int GL_TEXTURE_WRAP_S = 0x00002802;
        public const int GL_TEXTURE_WRAP_T = 0x00002803;
        public const int GL_TEXTURE0 = 0x000084c0;
        public const int GL_TEXTURE0_ARB = 0x000084c0;
        public const int GL_TEXTURE1 = 0x000084c1;
        public const int GL_TEXTURE1_ARB = 0x000084c1;
        public const int GL_TEXTURE10 = 0x000084ca;
        public const int GL_TEXTURE10_ARB = 0x000084ca;
        public const int GL_TEXTURE11 = 0x000084cb;
        public const int GL_TEXTURE11_ARB = 0x000084cb;
        public const int GL_TEXTURE12 = 0x000084cc;
        public const int GL_TEXTURE12_ARB = 0x000084cc;
        public const int GL_TEXTURE13 = 0x000084cd;
        public const int GL_TEXTURE13_ARB = 0x000084cd;
        public const int GL_TEXTURE14 = 0x000084ce;
        public const int GL_TEXTURE14_ARB = 0x000084ce;
        public const int GL_TEXTURE15 = 0x000084cf;
        public const int GL_TEXTURE15_ARB = 0x000084cf;
        public const int GL_TEXTURE16 = 0x000084d0;
        public const int GL_TEXTURE16_ARB = 0x000084d0;
        public const int GL_TEXTURE17 = 0x000084d1;
        public const int GL_TEXTURE17_ARB = 0x000084d1;
        public const int GL_TEXTURE18 = 0x000084d2;
        public const int GL_TEXTURE18_ARB = 0x000084d2;
        public const int GL_TEXTURE19 = 0x000084d3;
        public const int GL_TEXTURE19_ARB = 0x000084d3;
        public const int GL_TEXTURE2 = 0x000084c2;
        public const int GL_TEXTURE2_ARB = 0x000084c2;
        public const int GL_TEXTURE20 = 0x000084d4;
        public const int GL_TEXTURE20_ARB = 0x000084d4;
        public const int GL_TEXTURE21 = 0x000084d5;
        public const int GL_TEXTURE21_ARB = 0x000084d5;
        public const int GL_TEXTURE22 = 0x000084d6;
        public const int GL_TEXTURE22_ARB = 0x000084d6;
        public const int GL_TEXTURE23 = 0x000084d7;
        public const int GL_TEXTURE23_ARB = 0x000084d7;
        public const int GL_TEXTURE24 = 0x000084d8;
        public const int GL_TEXTURE24_ARB = 0x000084d8;
        public const int GL_TEXTURE25 = 0x000084d9;
        public const int GL_TEXTURE25_ARB = 0x000084d9;
        public const int GL_TEXTURE26 = 0x000084da;
        public const int GL_TEXTURE26_ARB = 0x000084da;
        public const int GL_TEXTURE27 = 0x000084db;
        public const int GL_TEXTURE27_ARB = 0x000084db;
        public const int GL_TEXTURE28 = 0x000084dc;
        public const int GL_TEXTURE28_ARB = 0x000084dc;
        public const int GL_TEXTURE29 = 0x000084dd;
        public const int GL_TEXTURE29_ARB = 0x000084dd;
        public const int GL_TEXTURE3 = 0x000084c3;
        public const int GL_TEXTURE3_ARB = 0x000084c3;
        public const int GL_TEXTURE30 = 0x000084de;
        public const int GL_TEXTURE30_ARB = 0x000084de;
        public const int GL_TEXTURE31 = 0x000084df;
        public const int GL_TEXTURE31_ARB = 0x000084df;
        public const int GL_TEXTURE4 = 0x000084c4;
        public const int GL_TEXTURE4_ARB = 0x000084c4;
        public const int GL_TEXTURE5 = 0x000084c5;
        public const int GL_TEXTURE5_ARB = 0x000084c5;
        public const int GL_TEXTURE6 = 0x000084c6;
        public const int GL_TEXTURE6_ARB = 0x000084c6;
        public const int GL_TEXTURE7 = 0x000084c7;
        public const int GL_TEXTURE7_ARB = 0x000084c7;
        public const int GL_TEXTURE8 = 0x000084c8;
        public const int GL_TEXTURE8_ARB = 0x000084c8;
        public const int GL_TEXTURE9 = 0x000084c9;
        public const int GL_TEXTURE9_ARB = 0x000084c9;
        public const int GL_TRACK_MATRIX_NV = 0x00008648;
        public const int GL_TRACK_MATRIX_TRANSFORM_NV = 0x00008649;
        public const int GL_TRANSFORM_BIT = 0x00001000;
        public const int GL_TRANSFORM_HINT_APPLE = 0x000085b1;
        public const int GL_TRANSPOSE_COLOR_MATRIX = 0x000084e6;
        public const int GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x000084e6;
        public const int GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x000088b7;
        public const int GL_TRANSPOSE_MODELVIEW_MATRIX = 0x000084e3;
        public const int GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x000084e3;
        public const int GL_TRANSPOSE_NV = 0x0000862c;
        public const int GL_TRANSPOSE_PROJECTION_MATRIX = 0x000084e4;
        public const int GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x000084e4;
        public const int GL_TRANSPOSE_TEXTURE_MATRIX = 0x000084e5;
        public const int GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x000084e5;
        public const int GL_TRIANGLE_FAN = 0x00000006;
        public const int GL_TRIANGLE_LIST_SUN = 0x000081d7;
        public const int GL_TRIANGLE_MESH_SUN = 0x00008615;
        public const int GL_TRIANGLE_STRIP = 0x00000005;
        public const int GL_TRIANGLES = 0x00000004;
        public const int GL_TRUE = 0x00000001;
        public const int GL_TYPE_RGBA_FLOAT_ATI = 0x00008820;
        public const int GL_UNPACK_ALIGNMENT = 0x00000cf5;
        public const int GL_UNPACK_CLIENT_STORAGE_APPLE = 0x000085b2;
        public const int GL_UNPACK_CMYK_HINT_EXT = 0x0000800f;
        public const int GL_UNPACK_CONSTANT_DATA_SUNX = 0x000081d5;
        public const int GL_UNPACK_IMAGE_DEPTH_SGIS = 0x00008133;
        public const int GL_UNPACK_IMAGE_HEIGHT = 0x0000806e;
        public const int GL_UNPACK_IMAGE_HEIGHT_EXT = 0x0000806e;
        public const int GL_UNPACK_LSB_FIRST = 0x00000cf1;
        public const int GL_UNPACK_RESAMPLE_OML = 0x00008985;
        public const int GL_UNPACK_RESAMPLE_SGIX = 0x0000842d;
        public const int GL_UNPACK_ROW_LENGTH = 0x00000cf2;
        public const int GL_UNPACK_SKIP_IMAGES = 0x0000806d;
        public const int GL_UNPACK_SKIP_IMAGES_EXT = 0x0000806d;
        public const int GL_UNPACK_SKIP_PIXELS = 0x00000cf4;
        public const int GL_UNPACK_SKIP_ROWS = 0x00000cf3;
        public const int GL_UNPACK_SKIP_VOLUMES_SGIS = 0x00008132;
        public const int GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x000085a1;
        public const int GL_UNPACK_SWAP_BYTES = 0x00000cf0;
        public const int GL_UNSIGNED_BYTE = 0x00001401;
        public const int GL_UNSIGNED_BYTE_2_3_3_REV = 0x00008362;
        public const int GL_UNSIGNED_BYTE_3_3_2 = 0x00008032;
        public const int GL_UNSIGNED_BYTE_3_3_2_EXT = 0x00008032;
        public const int GL_UNSIGNED_IDENTITY_NV = 0x00008536;
        public const int GL_UNSIGNED_INT = 0x00001405;
        public const int GL_UNSIGNED_INT_10_10_10_2 = 0x00008036;
        public const int GL_UNSIGNED_INT_10_10_10_2_EXT = 0x00008036;
        public const int GL_UNSIGNED_INT_2_10_10_10_REV = 0x00008368;
        public const int GL_UNSIGNED_INT_24_8_NV = 0x000084fa;
        public const int GL_UNSIGNED_INT_8_8_8_8 = 0x00008035;
        public const int GL_UNSIGNED_INT_8_8_8_8_EXT = 0x00008035;
        public const int GL_UNSIGNED_INT_8_8_8_8_REV = 0x00008367;
        public const int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x000086db;
        public const int GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x000086da;
        public const int GL_UNSIGNED_INVERT_NV = 0x00008537;
        public const int GL_UNSIGNED_NORMALIZED_ARB = 0x00008c17;
        public const int GL_UNSIGNED_SHORT = 0x00001403;
        public const int GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x00008366;
        public const int GL_UNSIGNED_SHORT_4_4_4_4 = 0x00008033;
        public const int GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x00008033;
        public const int GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x00008365;
        public const int GL_UNSIGNED_SHORT_5_5_5_1 = 0x00008034;
        public const int GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x00008034;
        public const int GL_UNSIGNED_SHORT_5_6_5 = 0x00008363;
        public const int GL_UNSIGNED_SHORT_5_6_5_REV = 0x00008364;
        public const int GL_UNSIGNED_SHORT_8_8_APPLE = 0x000085ba;
        public const int GL_UNSIGNED_SHORT_8_8_MESA = 0x000085ba;
        public const int GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x000085bb;
        public const int GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x000085bb;
        public const int GL_UPPER_LEFT = 0x00008ca2;
        public const int GL_V2F = 0x00002a20;
        public const int GL_V3F = 0x00002a21;
        public const int GL_VALIDATE_STATUS = 0x00008b83;
        public const int GL_VARIABLE_A_NV = 0x00008523;
        public const int GL_VARIABLE_B_NV = 0x00008524;
        public const int GL_VARIABLE_C_NV = 0x00008525;
        public const int GL_VARIABLE_D_NV = 0x00008526;
        public const int GL_VARIABLE_E_NV = 0x00008527;
        public const int GL_VARIABLE_F_NV = 0x00008528;
        public const int GL_VARIABLE_G_NV = 0x00008529;
        public const int GL_VARIANT_ARRAY_EXT = 0x000087e8;
        public const int GL_VARIANT_ARRAY_POINTER_EXT = 0x000087e9;
        public const int GL_VARIANT_ARRAY_STRIDE_EXT = 0x000087e6;
        public const int GL_VARIANT_ARRAY_TYPE_EXT = 0x000087e7;
        public const int GL_VARIANT_DATATYPE_EXT = 0x000087e5;
        public const int GL_VARIANT_EXT = 0x000087c1;
        public const int GL_VARIANT_VALUE_EXT = 0x000087e4;
        public const int GL_VECTOR_EXT = 0x000087bf;
        public const int GL_VENDOR = 0x00001f00;
        public const int GL_VERSION = 0x00001f02;
        public const int GL_VERTEX_ARRAY = 0x00008074;
        public const int GL_VERTEX_ARRAY_BINDING_APPLE = 0x000085b5;
        public const int GL_VERTEX_ARRAY_BUFFER_BINDING = 0x00008896;
        public const int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x00008896;
        public const int GL_VERTEX_ARRAY_COUNT_EXT = 0x0000807d;
        public const int GL_VERTEX_ARRAY_EXT = 0x00008074;
        public const int GL_VERTEX_ARRAY_LIST_IBM = 0x0001929e;
        public const int GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 0x000192a8;
        public const int GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x000083f5;
        public const int GL_VERTEX_ARRAY_POINTER = 0x0000808e;
        public const int GL_VERTEX_ARRAY_POINTER_EXT = 0x0000808e;
        public const int GL_VERTEX_ARRAY_RANGE_APPLE = 0x0000851d;
        public const int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x0000851e;
        public const int GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x0000851e;
        public const int GL_VERTEX_ARRAY_RANGE_NV = 0x0000851d;
        public const int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x00008521;
        public const int GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x00008521;
        public const int GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x0000851f;
        public const int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x00008533;
        public const int GL_VERTEX_ARRAY_SIZE = 0x0000807a;
        public const int GL_VERTEX_ARRAY_SIZE_EXT = 0x0000807a;
        public const int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x0000851f;
        public const int GL_VERTEX_ARRAY_STRIDE = 0x0000807c;
        public const int GL_VERTEX_ARRAY_STRIDE_EXT = 0x0000807c;
        public const int GL_VERTEX_ARRAY_TYPE = 0x0000807b;
        public const int GL_VERTEX_ARRAY_TYPE_EXT = 0x0000807b;
        public const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x0000889f;
        public const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x0000889f;
        public const int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x00008622;
        public const int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x00008622;
        public const int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x0000886a;
        public const int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x0000886a;
        public const int GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x00008645;
        public const int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x00008645;
        public const int GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x00008623;
        public const int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x00008623;
        public const int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x00008624;
        public const int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x00008624;
        public const int GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x00008625;
        public const int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x00008625;
        public const int GL_VERTEX_ATTRIB_ARRAY0_NV = 0x00008650;
        public const int GL_VERTEX_ATTRIB_ARRAY1_NV = 0x00008651;
        public const int GL_VERTEX_ATTRIB_ARRAY10_NV = 0x0000865a;
        public const int GL_VERTEX_ATTRIB_ARRAY11_NV = 0x0000865b;
        public const int GL_VERTEX_ATTRIB_ARRAY12_NV = 0x0000865c;
        public const int GL_VERTEX_ATTRIB_ARRAY13_NV = 0x0000865d;
        public const int GL_VERTEX_ATTRIB_ARRAY14_NV = 0x0000865e;
        public const int GL_VERTEX_ATTRIB_ARRAY15_NV = 0x0000865f;
        public const int GL_VERTEX_ATTRIB_ARRAY2_NV = 0x00008652;
        public const int GL_VERTEX_ATTRIB_ARRAY3_NV = 0x00008653;
        public const int GL_VERTEX_ATTRIB_ARRAY4_NV = 0x00008654;
        public const int GL_VERTEX_ATTRIB_ARRAY5_NV = 0x00008655;
        public const int GL_VERTEX_ATTRIB_ARRAY6_NV = 0x00008656;
        public const int GL_VERTEX_ATTRIB_ARRAY7_NV = 0x00008657;
        public const int GL_VERTEX_ATTRIB_ARRAY8_NV = 0x00008658;
        public const int GL_VERTEX_ATTRIB_ARRAY9_NV = 0x00008659;
        public const int GL_VERTEX_BLEND_ARB = 0x000086a7;
        public const int GL_VERTEX_CONSISTENT_HINT_PGI = 0x0001a22b;
        public const int GL_VERTEX_DATA_HINT_PGI = 0x0001a22a;
        public const int GL_VERTEX_PRECLIP_HINT_SGIX = 0x000083ef;
        public const int GL_VERTEX_PRECLIP_SGIX = 0x000083ee;
        public const int GL_VERTEX_PROGRAM_ARB = 0x00008620;
        public const int GL_VERTEX_PROGRAM_BINDING_NV = 0x0000864a;
        public const int GL_VERTEX_PROGRAM_NV = 0x00008620;
        public const int GL_VERTEX_PROGRAM_POINT_SIZE = 0x00008642;
        public const int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x00008642;
        public const int GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x00008642;
        public const int GL_VERTEX_PROGRAM_TWO_SIDE = 0x00008643;
        public const int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x00008643;
        public const int GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x00008643;
        public const int GL_VERTEX_SHADER = 0x00008b31;
        public const int GL_VERTEX_SHADER_ARB = 0x00008b31;
        public const int GL_VERTEX_SHADER_BINDING_EXT = 0x00008781;
        public const int GL_VERTEX_SHADER_EXT = 0x00008780;
        public const int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x000087cf;
        public const int GL_VERTEX_SHADER_INVARIANTS_EXT = 0x000087d1;
        public const int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x000087d2;
        public const int GL_VERTEX_SHADER_LOCALS_EXT = 0x000087d3;
        public const int GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x000087d4;
        public const int GL_VERTEX_SHADER_VARIANTS_EXT = 0x000087d0;
        public const int GL_VERTEX_SOURCE_ATI = 0x00008774;
        public const int GL_VERTEX_STATE_PROGRAM_NV = 0x00008621;
        public const int GL_VERTEX_STREAM0_ATI = 0x0000876c;
        public const int GL_VERTEX_STREAM1_ATI = 0x0000876d;
        public const int GL_VERTEX_STREAM2_ATI = 0x0000876e;
        public const int GL_VERTEX_STREAM3_ATI = 0x0000876f;
        public const int GL_VERTEX_STREAM4_ATI = 0x00008770;
        public const int GL_VERTEX_STREAM5_ATI = 0x00008771;
        public const int GL_VERTEX_STREAM6_ATI = 0x00008772;
        public const int GL_VERTEX_STREAM7_ATI = 0x00008773;
        public const int GL_VERTEX_WEIGHT_ARRAY_EXT = 0x0000850c;
        public const int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x00008510;
        public const int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x0000850d;
        public const int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x0000850f;
        public const int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x0000850e;
        public const int GL_VERTEX_WEIGHTING_EXT = 0x00008509;
        public const int GL_VERTEX23_BIT_PGI = 0x00000004;
        public const int GL_VERTEX4_BIT_PGI = 0x00000008;
        public const int GL_VIBRANCE_BIAS_NV = 0x00008719;
        public const int GL_VIBRANCE_SCALE_NV = 0x00008713;
        public const int GL_VIEWPORT = 0x00000ba2;
        public const int GL_VIEWPORT_BIT = 0x00000800;
        public const int GL_W_EXT = 0x000087d8;
        public const int GL_WEIGHT_ARRAY_ARB = 0x000086ad;
        public const int GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x0000889e;
        public const int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x0000889e;
        public const int GL_WEIGHT_ARRAY_POINTER_ARB = 0x000086ac;
        public const int GL_WEIGHT_ARRAY_SIZE_ARB = 0x000086ab;
        public const int GL_WEIGHT_ARRAY_STRIDE_ARB = 0x000086aa;
        public const int GL_WEIGHT_ARRAY_TYPE_ARB = 0x000086a9;
        public const int GL_WEIGHT_SUM_UNITY_ARB = 0x000086a6;
        public const int GL_WIDE_LINE_HINT_PGI = 0x0001a222;
        public const int GL_WRAP_BORDER_SUN = 0x000081d4;
        public const int GL_WRITE_ONLY = 0x000088b9;
        public const int GL_WRITE_ONLY_ARB = 0x000088b9;
        public const int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x0000887a;
        public const int GL_WRITE_PIXEL_DATA_RANGE_NV = 0x00008878;
        public const int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x0000887c;
        public const int GL_X_EXT = 0x000087d5;
        public const int GL_XOR = 0x00001506;
        public const int GL_Y_EXT = 0x000087d6;
        public const int GL_YCBCR_422_APPLE = 0x000085b9;
        public const int GL_YCBCR_MESA = 0x00008757;
        public const int GL_YCRCB_422_SGIX = 0x000081bb;
        public const int GL_YCRCB_444_SGIX = 0x000081bc;
        public const int GL_YCRCB_SGIX = 0x00008318;
        public const int GL_YCRCBA_SGIX = 0x00008319;
        public const int GL_Z_EXT = 0x000087d7;
        public const int GL_ZERO = 0x00000000;
        public const int GL_ZERO_EXT = 0x000087dd;
        public const int GL_ZOOM_X = 0x00000d16;
        public const int GL_ZOOM_Y = 0x00000d17;




        public const int GLU_AUTO_LOAD_MATRIX = 0x00018768;
        public const int GLU_BEGIN = 0x00018704;
        public const int GLU_CCW = 0x00018719;
        public const int GLU_CULLING = 0x00018769;
        public const int GLU_CW = 0x00018718;
        public const int GLU_DISPLAY_MODE = 0x0001876c;
        public const int GLU_DOMAIN_DISTANCE = 0x00018779;
        public const int GLU_EDGE_FLAG = 0x00018708;
        public const int GLU_END = 0x00018706;
        public const int GLU_ERROR = 0x00018707;
        public const int GLU_EXTENSIONS = 0x000189c1;
        public const int GLU_EXTERIOR = 0x0001871b;
        public const int GLU_FALSE = 0x00000000;
        public const int GLU_FILL = 0x000186ac;
        public const int GLU_FLAT = 0x000186a1;
        public const int GLU_INCOMPATIBLE_GL_VERSION = 0x00018a27;
        public const int GLU_INSIDE = 0x000186b5;
        public const int GLU_INTERIOR = 0x0001871a;
        public const int GLU_INVALID_ENUM = 0x00018a24;
        public const int GLU_INVALID_VALUE = 0x00018a25;
        public const int GLU_LINE = 0x000186ab;
        public const int GLU_MAP1_TRIM_2 = 0x00018772;
        public const int GLU_MAP1_TRIM_3 = 0x00018773;
        public const int GLU_NONE = 0x000186a2;
        public const int GLU_NURBS_ERROR1 = 0x0001879b;
        public const int GLU_NURBS_ERROR10 = 0x000187a4;
        public const int GLU_NURBS_ERROR11 = 0x000187a5;
        public const int GLU_NURBS_ERROR12 = 0x000187a6;
        public const int GLU_NURBS_ERROR13 = 0x000187a7;
        public const int GLU_NURBS_ERROR14 = 0x000187a8;
        public const int GLU_NURBS_ERROR15 = 0x000187a9;
        public const int GLU_NURBS_ERROR16 = 0x000187aa;
        public const int GLU_NURBS_ERROR17 = 0x000187ab;
        public const int GLU_NURBS_ERROR18 = 0x000187ac;
        public const int GLU_NURBS_ERROR19 = 0x000187ad;
        public const int GLU_NURBS_ERROR2 = 0x0001879c;
        public const int GLU_NURBS_ERROR20 = 0x000187ae;
        public const int GLU_NURBS_ERROR21 = 0x000187af;
        public const int GLU_NURBS_ERROR22 = 0x000187b0;
        public const int GLU_NURBS_ERROR23 = 0x000187b1;
        public const int GLU_NURBS_ERROR24 = 0x000187b2;
        public const int GLU_NURBS_ERROR25 = 0x000187b3;
        public const int GLU_NURBS_ERROR26 = 0x000187b4;
        public const int GLU_NURBS_ERROR27 = 0x000187b5;
        public const int GLU_NURBS_ERROR28 = 0x000187b6;
        public const int GLU_NURBS_ERROR29 = 0x000187b7;
        public const int GLU_NURBS_ERROR3 = 0x0001879d;
        public const int GLU_NURBS_ERROR30 = 0x000187b8;
        public const int GLU_NURBS_ERROR31 = 0x000187b9;
        public const int GLU_NURBS_ERROR32 = 0x000187ba;
        public const int GLU_NURBS_ERROR33 = 0x000187bb;
        public const int GLU_NURBS_ERROR34 = 0x000187bc;
        public const int GLU_NURBS_ERROR35 = 0x000187bd;
        public const int GLU_NURBS_ERROR36 = 0x000187be;
        public const int GLU_NURBS_ERROR37 = 0x000187bf;
        public const int GLU_NURBS_ERROR4 = 0x0001879e;
        public const int GLU_NURBS_ERROR5 = 0x0001879f;
        public const int GLU_NURBS_ERROR6 = 0x000187a0;
        public const int GLU_NURBS_ERROR7 = 0x000187a1;
        public const int GLU_NURBS_ERROR8 = 0x000187a2;
        public const int GLU_NURBS_ERROR9 = 0x000187a3;
        public const int GLU_OUT_OF_MEMORY = 0x00018a26;
        public const int GLU_OUTLINE_PATCH = 0x00018791;
        public const int GLU_OUTLINE_POLYGON = 0x00018790;
        public const int GLU_OUTSIDE = 0x000186b4;
        public const int GLU_PARAMETRIC_ERROR = 0x00018778;
        public const int GLU_PARAMETRIC_TOLERANCE = 0x0001876a;
        public const int GLU_PATH_LENGTH = 0x00018777;
        public const int GLU_POINT = 0x000186aa;
        public const int GLU_SAMPLING_METHOD = 0x0001876d;
        public const int GLU_SAMPLING_TOLERANCE = 0x0001876b;
        public const int GLU_SILHOUETTE = 0x000186ad;
        public const int GLU_SMOOTH = 0x000186a0;
        public const int GLU_TESS_BEGIN = 0x00018704;
        public const int GLU_TESS_BEGIN_DATA = 0x0001870a;
        public const int GLU_TESS_BOUNDARY_ONLY = 0x0001872d;
        public const int GLU_TESS_COMBINE = 0x00018709;
        public const int GLU_TESS_COMBINE_DATA = 0x0001870f;
        public const int GLU_TESS_COORD_TOO_LARGE = 0x0001873b;
        public const int GLU_TESS_EDGE_FLAG = 0x00018708;
        public const int GLU_TESS_EDGE_FLAG_DATA = 0x0001870e;
        public const int GLU_TESS_END = 0x00018706;
        public const int GLU_TESS_END_DATA = 0x0001870c;
        public const int GLU_TESS_ERROR = 0x00018707;
        public const int GLU_TESS_ERROR_DATA = 0x0001870d;
        public const int GLU_TESS_ERROR1 = 0x00018737;
        public const int GLU_TESS_ERROR2 = 0x00018738;
        public const int GLU_TESS_ERROR3 = 0x00018739;
        public const int GLU_TESS_ERROR4 = 0x0001873a;
        public const int GLU_TESS_ERROR5 = 0x0001873b;
        public const int GLU_TESS_ERROR6 = 0x0001873c;
        public const int GLU_TESS_ERROR7 = 0x0001873d;
        public const int GLU_TESS_ERROR8 = 0x0001873e;
        public const double GLU_TESS_MAX_COORD = 1.0e150;
        public const int GLU_TESS_MISSING_BEGIN_CONTOUR = 0x00018738;
        public const int GLU_TESS_MISSING_BEGIN_POLYGON = 0x00018737;
        public const int GLU_TESS_MISSING_END_CONTOUR = 0x0001873a;
        public const int GLU_TESS_MISSING_END_POLYGON = 0x00018739;
        public const int GLU_TESS_NEED_COMBINE_CALLBACK = 0x0001873c;
        public const int GLU_TESS_TOLERANCE = 0x0001872e;
        public const int GLU_TESS_VERTEX = 0x00018705;
        public const int GLU_TESS_VERTEX_DATA = 0x0001870b;
        public const int GLU_TESS_WINDING_ABS_GEQ_TWO = 0x00018726;
        public const int GLU_TESS_WINDING_NEGATIVE = 0x00018725;
        public const int GLU_TESS_WINDING_NONZERO = 0x00018723;
        public const int GLU_TESS_WINDING_ODD = 0x00018722;
        public const int GLU_TESS_WINDING_POSITIVE = 0x00018724;
        public const int GLU_TESS_WINDING_RULE = 0x0001872c;
        public const int GLU_TRUE = 0x00000001;
        public const int GLU_U_STEP = 0x0001876e;
        public const int GLU_UNKNOWN = 0x0001871c;
        public const int GLU_V_STEP = 0x0001876f;
        public const int GLU_VERSION = 0x000189c0;
        public const int GLU_VERTEX = 0x00018705;




        public const int GLX_3DFX_FULLSCREEN_MODE_MESA = 0x00000002;
        public const int GLX_3DFX_WINDOW_MODE_MESA = 0x00000001;
        public const int GLX_ACCUM_BUFFER_BIT = 0x00000080;
        public const int GLX_ACCUM_BUFFER_BIT_SGIX = 0x00000080;
        public const int GLX_AUX_BUFFERS_BIT = 0x00000010;
        public const int GLX_AUX_BUFFERS_BIT_SGIX = 0x00000010;
        public const int GLX_BACK_LEFT_BUFFER_BIT = 0x00000004;
        public const int GLX_BACK_LEFT_BUFFER_BIT_SGIX = 0x00000004;
        public const int GLX_BACK_RIGHT_BUFFER_BIT = 0x00000008;
        public const int GLX_BACK_RIGHT_BUFFER_BIT_SGIX = 0x00000008;
        public const int GLX_BAD_HYPERPIPE_CONFIG_SGIX = 0x0000005b;
        public const int GLX_BAD_HYPERPIPE_SGIX = 0x0000005c;
        public const int GLX_BLENDED_RGBA_SGIS = 0x00008025;
        public const int GLX_BUFFER_CLOBBER_MASK_SGIX = 0x08000000;
        public const int GLX_COLOR_INDEX_BIT = 0x00000002;
        public const int GLX_COLOR_INDEX_BIT_SGIX = 0x00000002;
        public const int GLX_COLOR_INDEX_TYPE = 0x00008015;
        public const int GLX_COLOR_INDEX_TYPE_SGIX = 0x00008015;
        public const int GLX_CONFIG_CAVEAT = 0x00000020;
        public const int GLX_DAMAGED = 0x00008020;
        public const int GLX_DAMAGED_SGIX = 0x00008020;
        public const int GLX_DEPTH_BUFFER_BIT = 0x00000020;
        public const int GLX_DEPTH_BUFFER_BIT_SGIX = 0x00000020;
        public const int GLX_DIGITAL_MEDIA_PBUFFER_SGIX = 0x00008024;
        public const int GLX_DIRECT_COLOR = 0x00008003;
        public const int GLX_DIRECT_COLOR_EXT = 0x00008003;
        public const int GLX_DONT_CARE = unchecked( (int)0xffffffff );
        public const int GLX_DRAWABLE_TYPE = 0x00008010;
        public const int GLX_DRAWABLE_TYPE_SGIX = 0x00008010;
        public const int GLX_EVENT_MASK = 0x0000801f;
        public const int GLX_EVENT_MASK_SGIX = 0x0000801f;
        public const int GLX_FBCONFIG_ID = 0x00008013;
        public const int GLX_FBCONFIG_ID_SGIX = 0x00008013;
        public const int GLX_FLOAT_COMPONENTS_NV = 0x000020b0;
        public const int GLX_FRONT_LEFT_BUFFER_BIT = 0x00000001;
        public const int GLX_FRONT_LEFT_BUFFER_BIT_SGIX = 0x00000001;
        public const int GLX_FRONT_RIGHT_BUFFER_BIT = 0x00000002;
        public const int GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = 0x00000002;
        public const int GLX_GLXEXT_VERSION = 0x0000000b;
        public const int GLX_GRAY_SCALE = 0x00008006;
        public const int GLX_GRAY_SCALE_EXT = 0x00008006;
        public const int GLX_HEIGHT = 0x0000801e;
        public const int GLX_HEIGHT_SGIX = 0x0000801e;
        public const int GLX_HYPERPIPE_DISPLAY_PIPE_SGIX = 0x00000001;
        public const int GLX_HYPERPIPE_ID_SGIX = 0x00008030;
        public const int GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX = 0x00000050;
        public const int GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX = 0x00000004;
        public const int GLX_HYPERPIPE_RENDER_PIPE_SGIX = 0x00000002;
        public const int GLX_HYPERPIPE_STEREO_SGIX = 0x00000003;
        public const int GLX_LARGEST_PBUFFER = 0x0000801c;
        public const int GLX_LARGEST_PBUFFER_SGIX = 0x0000801c;
        public const int GLX_MAX_PBUFFER_HEIGHT = 0x00008017;
        public const int GLX_MAX_PBUFFER_HEIGHT_SGIX = 0x00008017;
        public const int GLX_MAX_PBUFFER_PIXELS = 0x00008018;
        public const int GLX_MAX_PBUFFER_PIXELS_SGIX = 0x00008018;
        public const int GLX_MAX_PBUFFER_WIDTH = 0x00008016;
        public const int GLX_MAX_PBUFFER_WIDTH_SGIX = 0x00008016;
        public const int GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 0x00008027;
        public const int GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 0x00008026;
        public const int GLX_NON_CONFORMANT_CONFIG = 0x0000800d;
        public const int GLX_NON_CONFORMANT_VISUAL_EXT = 0x0000800d;
        public const int GLX_NONE = 0x00008000;
        public const int GLX_NONE_EXT = 0x00008000;
        public const int GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = 0x0000801a;
        public const int GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = 0x00008019;
        public const int GLX_PBUFFER = 0x00008023;
        public const int GLX_PBUFFER_BIT = 0x00000004;
        public const int GLX_PBUFFER_BIT_SGIX = 0x00000004;
        public const int GLX_PBUFFER_CLOBBER_MASK = 0x08000000;
        public const int GLX_PBUFFER_HEIGHT = 0x00008040;
        public const int GLX_PBUFFER_SGIX = 0x00008023;
        public const int GLX_PBUFFER_WIDTH = 0x00008041;
        public const int GLX_PIPE_RECT_LIMITS_SGIX = 0x00000002;
        public const int GLX_PIPE_RECT_SGIX = 0x00000001;
        public const int GLX_PIXMAP_BIT = 0x00000002;
        public const int GLX_PIXMAP_BIT_SGIX = 0x00000002;
        public const int GLX_PRESERVED_CONTENTS = 0x0000801b;
        public const int GLX_PRESERVED_CONTENTS_SGIX = 0x0000801b;
        public const int GLX_PSEUDO_COLOR = 0x00008004;
        public const int GLX_PSEUDO_COLOR_EXT = 0x00008004;
        public const int GLX_RENDER_TYPE = 0x00008011;
        public const int GLX_RENDER_TYPE_SGIX = 0x00008011;
        public const int GLX_RGBA_BIT = 0x00000001;
        public const int GLX_RGBA_BIT_SGIX = 0x00000001;
        public const int GLX_RGBA_FLOAT_BIT_ARB = 0x00000004;
        public const int GLX_RGBA_FLOAT_TYPE_ARB = 0x000020b9;
        public const int GLX_RGBA_TYPE = 0x00008014;
        public const int GLX_RGBA_TYPE_SGIX = 0x00008014;
        public const int GLX_SAMPLE_BUFFERS = 0x000186a0;
        public const int GLX_SAMPLE_BUFFERS_3DFX = 0x00008050;
        public const int GLX_SAMPLE_BUFFERS_ARB = 0x000186a0;
        public const int GLX_SAMPLE_BUFFERS_BIT_SGIX = 0x00000100;
        public const int GLX_SAMPLE_BUFFERS_SGIS = 0x000186a0;
        public const int GLX_SAMPLES = 0x000186a1;
        public const int GLX_SAMPLES_3DFX = 0x00008051;
        public const int GLX_SAMPLES_ARB = 0x000186a1;
        public const int GLX_SAMPLES_SGIS = 0x000186a1;
        public const int GLX_SAVED = 0x00008021;
        public const int GLX_SAVED_SGIX = 0x00008021;
        public const int GLX_SCREEN = 0x0000800c;
        public const int GLX_SCREEN_EXT = 0x0000800c;
        public const int GLX_SHARE_CONTEXT_EXT = 0x0000800a;
        public const int GLX_SLOW_CONFIG = 0x00008001;
        public const int GLX_SLOW_VISUAL_EXT = 0x00008001;
        public const int GLX_STATIC_COLOR = 0x00008005;
        public const int GLX_STATIC_COLOR_EXT = 0x00008005;
        public const int GLX_STATIC_GRAY = 0x00008007;
        public const int GLX_STATIC_GRAY_EXT = 0x00008007;
        public const int GLX_STENCIL_BUFFER_BIT = 0x00000040;
        public const int GLX_STENCIL_BUFFER_BIT_SGIX = 0x00000040;
        public const int GLX_SWAP_COPY_OML = 0x00008062;
        public const int GLX_SWAP_EXCHANGE_OML = 0x00008061;
        public const int GLX_SWAP_METHOD_OML = 0x00008060;
        public const int GLX_SWAP_UNDEFINED_OML = 0x00008063;
        public const int GLX_SYNC_FRAME_SGIX = 0x00000000;
        public const int GLX_SYNC_SWAP_SGIX = 0x00000001;
        public const int GLX_TRANSPARENT_ALPHA_VALUE = 0x00000028;
        public const int GLX_TRANSPARENT_ALPHA_VALUE_EXT = 0x00000028;
        public const int GLX_TRANSPARENT_BLUE_VALUE = 0x00000027;
        public const int GLX_TRANSPARENT_BLUE_VALUE_EXT = 0x00000027;
        public const int GLX_TRANSPARENT_GREEN_VALUE = 0x00000026;
        public const int GLX_TRANSPARENT_GREEN_VALUE_EXT = 0x00000026;
        public const int GLX_TRANSPARENT_INDEX = 0x00008009;
        public const int GLX_TRANSPARENT_INDEX_EXT = 0x00008009;
        public const int GLX_TRANSPARENT_INDEX_VALUE = 0x00000024;
        public const int GLX_TRANSPARENT_INDEX_VALUE_EXT = 0x00000024;
        public const int GLX_TRANSPARENT_RED_VALUE = 0x00000025;
        public const int GLX_TRANSPARENT_RED_VALUE_EXT = 0x00000025;
        public const int GLX_TRANSPARENT_RGB = 0x00008008;
        public const int GLX_TRANSPARENT_RGB_EXT = 0x00008008;
        public const int GLX_TRANSPARENT_TYPE = 0x00000023;
        public const int GLX_TRANSPARENT_TYPE_EXT = 0x00000023;
        public const int GLX_TRUE_COLOR = 0x00008002;
        public const int GLX_TRUE_COLOR_EXT = 0x00008002;
        public const int GLX_VISUAL_CAVEAT_EXT = 0x00000020;
        public const int GLX_VISUAL_ID = 0x0000800b;
        public const int GLX_VISUAL_ID_EXT = 0x0000800b;
        public const int GLX_VISUAL_SELECT_GROUP_SGIX = 0x00008028;
        public const int GLX_WIDTH = 0x0000801d;
        public const int GLX_WIDTH_SGIX = 0x0000801d;
        public const int GLX_WINDOW = 0x00008022;
        public const int GLX_WINDOW_BIT = 0x00000001;
        public const int GLX_WINDOW_BIT_SGIX = 0x00000001;
        public const int GLX_WINDOW_SGIX = 0x00008022;
        public const int GLX_X_RENDERABLE = 0x00008012;
        public const int GLX_X_RENDERABLE_SGIX = 0x00008012;
        public const int GLX_X_VISUAL_TYPE = 0x00000022;
        public const int GLX_X_VISUAL_TYPE_EXT = 0x00000022;




        public const int LPD_DOUBLEBUFFER = 0x00000001;
        public const int LPD_SHARE_ACCUM = 0x00000100;
        public const int LPD_SHARE_DEPTH = 0x00000040;
        public const int LPD_SHARE_STENCIL = 0x00000080;
        public const int LPD_STEREO = 0x00000002;
        public const int LPD_SUPPORT_GDI = 0x00000010;
        public const int LPD_SUPPORT_OPENGL = 0x00000020;
        public const int LPD_SWAP_COPY = 0x00000400;
        public const int LPD_SWAP_EXCHANGE = 0x00000200;
        public const int LPD_TRANSPARENT = 0x00001000;
        public const int LPD_TYPE_COLORINDEX = 0x00000001;
        public const int LPD_TYPE_RGBA = 0x00000000;




        public const int WGL_ACCELERATION_ARB = 0x00002003;
        public const int WGL_ACCELERATION_EXT = 0x00002003;
        public const int WGL_ACCUM_ALPHA_BITS_ARB = 0x00002021;
        public const int WGL_ACCUM_ALPHA_BITS_EXT = 0x00002021;
        public const int WGL_ACCUM_BITS_ARB = 0x0000201d;
        public const int WGL_ACCUM_BITS_EXT = 0x0000201d;
        public const int WGL_ACCUM_BLUE_BITS_ARB = 0x00002020;
        public const int WGL_ACCUM_BLUE_BITS_EXT = 0x00002020;
        public const int WGL_ACCUM_GREEN_BITS_ARB = 0x0000201f;
        public const int WGL_ACCUM_GREEN_BITS_EXT = 0x0000201f;
        public const int WGL_ACCUM_RED_BITS_ARB = 0x0000201e;
        public const int WGL_ACCUM_RED_BITS_EXT = 0x0000201e;
        public const int WGL_ALPHA_BITS_ARB = 0x0000201b;
        public const int WGL_ALPHA_BITS_EXT = 0x0000201b;
        public const int WGL_ALPHA_SHIFT_ARB = 0x0000201c;
        public const int WGL_ALPHA_SHIFT_EXT = 0x0000201c;
        public const int WGL_AUX_BUFFERS_ARB = 0x00002024;
        public const int WGL_AUX_BUFFERS_EXT = 0x00002024;
        public const int WGL_AUX0_ARB = 0x00002087;
        public const int WGL_AUX1_ARB = 0x00002088;
        public const int WGL_AUX2_ARB = 0x00002089;
        public const int WGL_AUX3_ARB = 0x0000208a;
        public const int WGL_AUX4_ARB = 0x0000208b;
        public const int WGL_AUX5_ARB = 0x0000208c;
        public const int WGL_AUX6_ARB = 0x0000208d;
        public const int WGL_AUX7_ARB = 0x0000208e;
        public const int WGL_AUX8_ARB = 0x0000208f;
        public const int WGL_AUX9_ARB = 0x00002090;
        public const int WGL_BACK_COLOR_BUFFER_BIT_ARB = 0x00000002;
        public const int WGL_BACK_LEFT_ARB = 0x00002085;
        public const int WGL_BACK_RIGHT_ARB = 0x00002086;
        public const int WGL_BIND_TO_TEXTURE_DEPTH_NV = 0x000020a3;
        public const int WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV = 0x000020a4;
        public const int WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV = 0x000020b1;
        public const int WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV = 0x000020b2;
        public const int WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV = 0x000020b3;
        public const int WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV = 0x000020b4;
        public const int WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV = 0x000020a0;
        public const int WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV = 0x000020a1;
        public const int WGL_BIND_TO_TEXTURE_RGB_ARB = 0x00002070;
        public const int WGL_BIND_TO_TEXTURE_RGBA_ARB = 0x00002071;
        public const int WGL_BLUE_BITS_ARB = 0x00002019;
        public const int WGL_BLUE_BITS_EXT = 0x00002019;
        public const int WGL_BLUE_SHIFT_ARB = 0x0000201a;
        public const int WGL_BLUE_SHIFT_EXT = 0x0000201a;
        public const int WGL_COLOR_BITS_ARB = 0x00002014;
        public const int WGL_COLOR_BITS_EXT = 0x00002014;
        public const int WGL_CUBE_MAP_FACE_ARB = 0x0000207c;
        public const int WGL_DEPTH_BITS_ARB = 0x00002022;
        public const int WGL_DEPTH_BITS_EXT = 0x00002022;
        public const int WGL_DEPTH_BUFFER_BIT_ARB = 0x00000004;
        public const int WGL_DEPTH_COMPONENT_NV = 0x000020a7;
        public const int WGL_DEPTH_FLOAT_EXT = 0x00002040;
        public const int WGL_DEPTH_TEXTURE_FORMAT_NV = 0x000020a5;
        public const int WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D = 0x00002050;
        public const int WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D = 0x00002051;
        public const int WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D = 0x00002052;
        public const int WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D = 0x00002053;
        public const int WGL_DOUBLE_BUFFER_ARB = 0x00002011;
        public const int WGL_DOUBLE_BUFFER_EXT = 0x00002011;
        public const int WGL_DRAW_TO_BITMAP_ARB = 0x00002002;
        public const int WGL_DRAW_TO_BITMAP_EXT = 0x00002002;
        public const int WGL_DRAW_TO_PBUFFER_ARB = 0x0000202d;
        public const int WGL_DRAW_TO_PBUFFER_EXT = 0x0000202d;
        public const int WGL_DRAW_TO_WINDOW_ARB = 0x00002001;
        public const int WGL_DRAW_TO_WINDOW_EXT = 0x00002001;
        public const int WGL_FLOAT_COMPONENTS_NV = 0x000020b0;
        public const int WGL_FONT_LINES = 0x00000000;
        public const int WGL_FONT_POLYGONS = 0x00000001;
        public const int WGL_FRONT_COLOR_BUFFER_BIT_ARB = 0x00000001;
        public const int WGL_FRONT_LEFT_ARB = 0x00002083;
        public const int WGL_FRONT_RIGHT_ARB = 0x00002084;
        public const int WGL_FULL_ACCELERATION_ARB = 0x00002027;
        public const int WGL_FULL_ACCELERATION_EXT = 0x00002027;
        public const int WGL_GAMMA_EXCLUDE_DESKTOP_I3D = 0x0000204f;
        public const int WGL_GAMMA_TABLE_SIZE_I3D = 0x0000204e;
        public const int WGL_GENERIC_ACCELERATION_ARB = 0x00002026;
        public const int WGL_GENERIC_ACCELERATION_EXT = 0x00002026;
        public const int WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D = 0x00002049;
        public const int WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D = 0x00002048;
        public const int WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D = 0x0000204c;
        public const int WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D = 0x0000204a;
        public const int WGL_GENLOCK_SOURCE_EDGE_RISING_I3D = 0x0000204b;
        public const int WGL_GENLOCK_SOURCE_EXTENAL_FIELD_I3D = 0x00002046;
        public const int WGL_GENLOCK_SOURCE_EXTENAL_SYNC_I3D = 0x00002045;
        public const int WGL_GENLOCK_SOURCE_EXTENAL_TTL_I3D = 0x00002047;
        public const int WGL_GENLOCK_SOURCE_MULTIVIEW_I3D = 0x00002044;
        public const int WGL_GREEN_BITS_ARB = 0x00002017;
        public const int WGL_GREEN_BITS_EXT = 0x00002017;
        public const int WGL_GREEN_SHIFT_ARB = 0x00002018;
        public const int WGL_GREEN_SHIFT_EXT = 0x00002018;
        public const int WGL_IMAGE_BUFFER_LOCK_I3D = 0x00000002;
        public const int WGL_IMAGE_BUFFER_MIN_ACCESS_I3D = 0x00000001;
        public const int WGL_MAX_PBUFFER_HEIGHT_ARB = 0x00002030;
        public const int WGL_MAX_PBUFFER_HEIGHT_EXT = 0x00002030;
        public const int WGL_MAX_PBUFFER_PIXELS_ARB = 0x0000202e;
        public const int WGL_MAX_PBUFFER_PIXELS_EXT = 0x0000202e;
        public const int WGL_MAX_PBUFFER_WIDTH_ARB = 0x0000202f;
        public const int WGL_MAX_PBUFFER_WIDTH_EXT = 0x0000202f;
        public const int WGL_MIPMAP_LEVEL_ARB = 0x0000207b;
        public const int WGL_MIPMAP_TEXTURE_ARB = 0x00002074;
        public const int WGL_NEED_PALETTE_ARB = 0x00002004;
        public const int WGL_NEED_PALETTE_EXT = 0x00002004;
        public const int WGL_NEED_SYSTEM_PALETTE_ARB = 0x00002005;
        public const int WGL_NEED_SYSTEM_PALETTE_EXT = 0x00002005;
        public const int WGL_NO_ACCELERATION_ARB = 0x00002025;
        public const int WGL_NO_ACCELERATION_EXT = 0x00002025;
        public const int WGL_NO_TEXTURE_ARB = 0x00002077;
        public const int WGL_NUMBER_OVERLAYS_ARB = 0x00002008;
        public const int WGL_NUMBER_OVERLAYS_EXT = 0x00002008;
        public const int WGL_NUMBER_PIXEL_FORMATS_ARB = 0x00002000;
        public const int WGL_NUMBER_PIXEL_FORMATS_EXT = 0x00002000;
        public const int WGL_NUMBER_UNDERLAYS_ARB = 0x00002009;
        public const int WGL_NUMBER_UNDERLAYS_EXT = 0x00002009;
        public const int WGL_OPTIMAL_PBUFFER_HEIGHT_EXT = 0x00002032;
        public const int WGL_OPTIMAL_PBUFFER_WIDTH_EXT = 0x00002031;
        public const int WGL_PBUFFER_HEIGHT_ARB = 0x00002035;
        public const int WGL_PBUFFER_HEIGHT_EXT = 0x00002035;
        public const int WGL_PBUFFER_LARGEST_ARB = 0x00002033;
        public const int WGL_PBUFFER_LARGEST_EXT = 0x00002033;
        public const int WGL_PBUFFER_LOST_ARB = 0x00002036;
        public const int WGL_PBUFFER_WIDTH_ARB = 0x00002034;
        public const int WGL_PBUFFER_WIDTH_EXT = 0x00002034;
        public const int WGL_PIXEL_TYPE_ARB = 0x00002013;
        public const int WGL_PIXEL_TYPE_EXT = 0x00002013;
        public const int WGL_RED_BITS_ARB = 0x00002015;
        public const int WGL_RED_BITS_EXT = 0x00002015;
        public const int WGL_RED_SHIFT_ARB = 0x00002016;
        public const int WGL_RED_SHIFT_EXT = 0x00002016;
        public const int WGL_SAMPLE_BUFFERS_3DFX = 0x00002060;
        public const int WGL_SAMPLE_BUFFERS_ARB = 0x00002041;
        public const int WGL_SAMPLE_BUFFERS_EXT = 0x00002041;
        public const int WGL_SAMPLES_3DFX = 0x00002061;
        public const int WGL_SAMPLES_ARB = 0x00002042;
        public const int WGL_SAMPLES_EXT = 0x00002042;
        public const int WGL_SHARE_ACCUM_ARB = 0x0000200e;
        public const int WGL_SHARE_ACCUM_EXT = 0x0000200e;
        public const int WGL_SHARE_DEPTH_ARB = 0x0000200c;
        public const int WGL_SHARE_DEPTH_EXT = 0x0000200c;
        public const int WGL_SHARE_STENCIL_ARB = 0x0000200d;
        public const int WGL_SHARE_STENCIL_EXT = 0x0000200d;
        public const int WGL_STENCIL_BITS_ARB = 0x00002023;
        public const int WGL_STENCIL_BITS_EXT = 0x00002023;
        public const int WGL_STENCIL_BUFFER_BIT_ARB = 0x00000008;
        public const int WGL_STEREO_ARB = 0x00002012;
        public const int WGL_STEREO_EXT = 0x00002012;
        public const int WGL_SUPPORT_GDI_ARB = 0x0000200f;
        public const int WGL_SUPPORT_GDI_EXT = 0x0000200f;
        public const int WGL_SUPPORT_OPENGL_ARB = 0x00002010;
        public const int WGL_SUPPORT_OPENGL_EXT = 0x00002010;
        public const int WGL_SWAP_COPY_ARB = 0x00002029;
        public const int WGL_SWAP_COPY_EXT = 0x00002029;
        public const int WGL_SWAP_EXCHANGE_ARB = 0x00002028;
        public const int WGL_SWAP_EXCHANGE_EXT = 0x00002028;
        public const int WGL_SWAP_LAYER_BUFFERS_ARB = 0x00002006;
        public const int WGL_SWAP_LAYER_BUFFERS_EXT = 0x00002006;
        public const int WGL_SWAP_MAIN_PLANE = 0x00000001;
        public const int WGL_SWAP_METHOD_ARB = 0x00002007;
        public const int WGL_SWAP_METHOD_EXT = 0x00002007;
        public const int WGL_SWAP_OVERLAY1 = 0x00000002;
        public const int WGL_SWAP_OVERLAY10 = 0x00000400;
        public const int WGL_SWAP_OVERLAY11 = 0x00000800;
        public const int WGL_SWAP_OVERLAY12 = 0x00001000;
        public const int WGL_SWAP_OVERLAY13 = 0x00002000;
        public const int WGL_SWAP_OVERLAY14 = 0x00004000;
        public const int WGL_SWAP_OVERLAY15 = 0x00008000;
        public const int WGL_SWAP_OVERLAY2 = 0x00000004;
        public const int WGL_SWAP_OVERLAY3 = 0x00000008;
        public const int WGL_SWAP_OVERLAY4 = 0x00000010;
        public const int WGL_SWAP_OVERLAY5 = 0x00000020;
        public const int WGL_SWAP_OVERLAY6 = 0x00000040;
        public const int WGL_SWAP_OVERLAY7 = 0x00000080;
        public const int WGL_SWAP_OVERLAY8 = 0x00000100;
        public const int WGL_SWAP_OVERLAY9 = 0x00000200;
        public const int WGL_SWAP_UNDEFINED_ARB = 0x0000202a;
        public const int WGL_SWAP_UNDEFINED_EXT = 0x0000202a;
        public const int WGL_SWAP_UNDERLAY1 = 0x00010000;
        public const int WGL_SWAP_UNDERLAY10 = 0x02000000;
        public const int WGL_SWAP_UNDERLAY11 = 0x04000000;
        public const int WGL_SWAP_UNDERLAY12 = 0x08000000;
        public const int WGL_SWAP_UNDERLAY13 = 0x10000000;
        public const int WGL_SWAP_UNDERLAY14 = 0x20000000;
        public const int WGL_SWAP_UNDERLAY15 = 0x40000000;
        public const int WGL_SWAP_UNDERLAY2 = 0x00020000;
        public const int WGL_SWAP_UNDERLAY3 = 0x00040000;
        public const int WGL_SWAP_UNDERLAY4 = 0x00080000;
        public const int WGL_SWAP_UNDERLAY5 = 0x00100000;
        public const int WGL_SWAP_UNDERLAY6 = 0x00200000;
        public const int WGL_SWAP_UNDERLAY7 = 0x00400000;
        public const int WGL_SWAP_UNDERLAY8 = 0x00800000;
        public const int WGL_SWAP_UNDERLAY9 = 0x01000000;
        public const int WGL_SWAPMULTIPLE_MAX = 0x00000010;
        public const int WGL_TEXTURE_1D_ARB = 0x00002079;
        public const int WGL_TEXTURE_2D_ARB = 0x0000207a;
        public const int WGL_TEXTURE_CUBE_MAP_ARB = 0x00002078;
        public const int WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x0000207e;
        public const int WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x00002080;
        public const int WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x00002082;
        public const int WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x0000207d;
        public const int WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x0000207f;
        public const int WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x00002081;
        public const int WGL_TEXTURE_DEPTH_COMPONENT_NV = 0x000020a6;
        public const int WGL_TEXTURE_FLOAT_R_NV = 0x000020b5;
        public const int WGL_TEXTURE_FLOAT_RG_NV = 0x000020b6;
        public const int WGL_TEXTURE_FLOAT_RGB_NV = 0x000020b7;
        public const int WGL_TEXTURE_FLOAT_RGBA_NV = 0x000020b8;
        public const int WGL_TEXTURE_FORMAT_ARB = 0x00002072;
        public const int WGL_TEXTURE_RECTANGLE_NV = 0x000020a2;
        public const int WGL_TEXTURE_RGB_ARB = 0x00002075;
        public const int WGL_TEXTURE_RGBA_ARB = 0x00002076;
        public const int WGL_TEXTURE_TARGET_ARB = 0x00002073;
        public const int WGL_TRANSPARENT_ALPHA_VALUE_ARB = 0x0000203a;
        public const int WGL_TRANSPARENT_ARB = 0x0000200a;
        public const int WGL_TRANSPARENT_BLUE_VALUE_ARB = 0x00002039;
        public const int WGL_TRANSPARENT_EXT = 0x0000200a;
        public const int WGL_TRANSPARENT_GREEN_VALUE_ARB = 0x00002038;
        public const int WGL_TRANSPARENT_INDEX_VALUE_ARB = 0x0000203b;
        public const int WGL_TRANSPARENT_RED_VALUE_ARB = 0x00002037;
        public const int WGL_TRANSPARENT_VALUE_EXT = 0x0000200b;
        public const int WGL_TYPE_COLORINDEX_ARB = 0x0000202c;
        public const int WGL_TYPE_COLORINDEX_EXT = 0x0000202c;
        public const int WGL_TYPE_RGBA_ARB = 0x0000202b;
        public const int WGL_TYPE_RGBA_EXT = 0x0000202b;
        public const int WGL_TYPE_RGBA_FLOAT_ARB = 0x000021a0;
        public const int WGL_TYPE_RGBA_FLOAT_ATI = 0x000021a0;
        public const int WGL_WGLEXT_VERSION = 0x00000006;
















        private delegate void DglAccum_IF( int op, float value );
        private delegate void DglActiveStencilFaceEXT_I( int face );
        private delegate void DglActiveTexture_I( int texture );
        private delegate void DglActiveTextureARB_I( int texture );
        private delegate void DglAddSwapHintRectWIN_IIII( int x, int y, int width, int height );
        private delegate void DglAlphaFragmentOp1ATI_IIIIII( int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod );
        private delegate void DglAlphaFragmentOp2ATI_IIIIIIIII( int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod );
        private delegate void DglAlphaFragmentOp3ATI_IIIIIIIIIIII( int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod );
        private delegate void DglAlphaFunc_IF( int func, float fref );
        private delegate void DglApplyTextureEXT_I( int mode );
        private delegate byte DglAreProgramsResidentNV_IaIaB( int n, int[] programs, byte[] residences );
        private delegate byte DglAreProgramsResidentNV_IPP( int n, IntPtr programs, IntPtr residences );
        private delegate byte DglAreTexturesResident_IaIaB( int n, int[] textures, byte[] residences );
        private delegate byte DglAreTexturesResident_IPP( int n, IntPtr textures, IntPtr residences );
        private delegate byte DglAreTexturesResidentEXT_IaIaB( int n, int[] textures, byte[] residences );
        private delegate byte DglAreTexturesResidentEXT_IPP( int n, IntPtr textures, IntPtr residences );
        private delegate void DglArrayElement_I( int i );
        private delegate void DglArrayElementArrayEXT_IIaB( int mode, int count, byte[] pi );
        private delegate void DglArrayElementArrayEXT_IIP( int mode, int count, IntPtr pi );
        private delegate void DglArrayElementEXT_I( int i );
        private delegate void DglArrayObjectATI_IIIIII( int array, int size, int itype, int stride, int buffer, int offset );
        private delegate void DglAsyncMarkerSGIX_I( int marker );
        private delegate void DglAttachObjectARB_II( int containerObj, int obj );
        private delegate void DglAttachShader_II( int program, int shader );
        private delegate void DglBegin_I( int mode );
        private delegate void DglBeginFragmentShaderATI_V();
        private delegate void DglBeginOcclusionQueryNV_I( int id );
        private delegate void DglBeginQuery_II( int target, int id );
        private delegate void DglBeginQueryARB_II( int target, int id );
        private delegate void DglBeginVertexShaderEXT_V();
        private delegate void DglBindAttribLocation_IIS( int program, int index, String name );
        private delegate void DglBindAttribLocationARB_IIS( int programObj, int index, String name );
        private delegate void DglBindBuffer_II( int target, int buffer );
        private delegate void DglBindBufferARB_II( int target, int buffer );
        private delegate void DglBindFragmentShaderATI_I( int id );
        private delegate void DglBindFramebufferEXT_II( int target, int framebuffer );
        private delegate int DglBindLightParameterEXT_II( int light, int value );
        private delegate int DglBindMaterialParameterEXT_II( int face, int value );
        private delegate int DglBindParameterEXT_I( int value );
        private delegate void DglBindProgramARB_II( int target, int program );
        private delegate void DglBindProgramNV_II( int target, int id );
        private delegate void DglBindRenderbufferEXT_II( int target, int renderbuffer );
        private delegate int DglBindTexGenParameterEXT_III( int unit, int coord, int value );
        private delegate void DglBindTexture_II( int target, int texture );
        private delegate void DglBindTextureEXT_II( int target, int texture );
        private delegate int DglBindTextureUnitParameterEXT_II( int unit, int value );
        private delegate void DglBindVertexArrayAPPLE_I( int array );
        private delegate void DglBindVertexShaderEXT_I( int id );
        private delegate void DglBinormal3bEXT_BBB( byte bx, byte by, byte bz );
        private delegate void DglBinormal3bvEXT_aB( byte[] v );
        private delegate void DglBinormal3bvEXT_P( IntPtr v );
        private delegate void DglBinormal3dEXT_DDD( double bx, double by, double bz );
        private delegate void DglBinormal3dvEXT_aD( double[] v );
        private delegate void DglBinormal3dvEXT_P( IntPtr v );
        private delegate void DglBinormal3fEXT_FFF( float bx, float by, float bz );
        private delegate void DglBinormal3fvEXT_aF( float[] v );
        private delegate void DglBinormal3fvEXT_P( IntPtr v );
        private delegate void DglBinormal3iEXT_III( int bx, int by, int bz );
        private delegate void DglBinormal3ivEXT_aI( int[] v );
        private delegate void DglBinormal3ivEXT_P( IntPtr v );
        private delegate void DglBinormal3sEXT_HHH( short bx, short by, short bz );
        private delegate void DglBinormal3svEXT_aH( short[] v );
        private delegate void DglBinormal3svEXT_P( IntPtr v );
        private delegate void DglBinormalPointerEXT_IIaF( int itype, int stride, float[] pointer );
        private delegate void DglBinormalPointerEXT_IIP( int itype, int stride, IntPtr pointer );
        private delegate void DglBitmap_IIFFFFaB( int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap );
        private delegate void DglBitmap_IIFFFFP( int width, int height, float xorig, float yorig, float xmove, float ymove, IntPtr bitmap );
        private delegate void DglBlendColor_FFFF( float red, float green, float blue, float alpha );
        private delegate void DglBlendColorEXT_FFFF( float red, float green, float blue, float alpha );
        private delegate void DglBlendEquation_I( int mode );
        private delegate void DglBlendEquationEXT_I( int mode );
        private delegate void DglBlendEquationSeparate_II( int modeRGB, int modeAlpha );
        private delegate void DglBlendEquationSeparateEXT_II( int modeRGB, int modeAlpha );
        private delegate void DglBlendFunc_II( int sfactor, int dfactor );
        private delegate void DglBlendFuncSeparate_IIII( int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha );
        private delegate void DglBlendFuncSeparateEXT_IIII( int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha );
        private delegate void DglBlendFuncSeparateINGR_IIII( int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha );
        private delegate void DglBufferData_IIaBI( int target, int size, byte[] data, int usage );
        private delegate void DglBufferData_IIPI( int target, int size, IntPtr data, int usage );
        private delegate void DglBufferDataARB_IIaBI( int target, int size, byte[] data, int usage );
        private delegate void DglBufferDataARB_IIPI( int target, int size, IntPtr data, int usage );
        private delegate void DglBufferSubData_IIIaB( int target, int offset, int size, byte[] data );
        private delegate void DglBufferSubData_IIIP( int target, int offset, int size, IntPtr data );
        private delegate void DglBufferSubDataARB_IIIaB( int target, int offset, int size, byte[] data );
        private delegate void DglBufferSubDataARB_IIIP( int target, int offset, int size, IntPtr data );
        private delegate void DglCallList_I( int list );
        private delegate void DglCallLists_IIaB( int n, int itype, byte[] lists );
        private delegate void DglCallLists_IIaH( int n, int itype, short[] lists );
        private delegate void DglCallLists_IIaI( int n, int itype, int[] lists );
        private delegate void DglCallLists_IIaF( int n, int itype, float[] lists );
        private delegate void DglCallLists_IIP( int n, int itype, IntPtr lists );
        private delegate int DglCheckFramebufferStatusEXT_I( int target );
        private delegate void DglClampColorARB_II( int target, int clamp );
        private delegate void DglClear_I( int mask );
        private delegate void DglClearAccum_FFFF( float red, float green, float blue, float alpha );
        private delegate void DglClearColor_FFFF( float red, float green, float blue, float alpha );
        private delegate void DglClearDepth_D( double depth );
        private delegate void DglClearIndex_F( float c );
        private delegate void DglClearStencil_I( int s );
        private delegate void DglClientActiveTexture_I( int texture );
        private delegate void DglClientActiveTextureARB_I( int texture );
        private delegate void DglClientActiveVertexStreamATI_I( int stream );
        private delegate void DglClipPlane_IaD( int plane, double[] equation );
        private delegate void DglClipPlane_IP( int plane, IntPtr equation );
        private delegate void DglColor3b_BBB( byte red, byte green, byte blue );
        private delegate void DglColor3bv_aB( byte[] v );
        private delegate void DglColor3bv_P( IntPtr v );
        private delegate void DglColor3d_DDD( double red, double green, double blue );
        private delegate void DglColor3dv_aD( double[] v );
        private delegate void DglColor3dv_P( IntPtr v );
        private delegate void DglColor3f_FFF( float red, float green, float blue );
        private delegate void DglColor3fv_aF( float[] v );
        private delegate void DglColor3fv_P( IntPtr v );
        private delegate void DglColor3fVertex3fSUN_FFFFFF( float r, float g, float b, float x, float y, float z );
        private delegate void DglColor3fVertex3fvSUN_aFaF( float[] c, float[] v );
        private delegate void DglColor3fVertex3fvSUN_aFP( float[] c, IntPtr v );
        private delegate void DglColor3fVertex3fvSUN_PaF( IntPtr c, float[] v );
        private delegate void DglColor3fVertex3fvSUN_PP( IntPtr c, IntPtr v );
        private delegate void DglColor3hNV_HHH( short red, short green, short blue );
        private delegate void DglColor3hvNV_aH( short[] v );
        private delegate void DglColor3hvNV_P( IntPtr v );
        private delegate void DglColor3i_III( int red, int green, int blue );
        private delegate void DglColor3iv_aI( int[] v );
        private delegate void DglColor3iv_P( IntPtr v );
        private delegate void DglColor3s_HHH( short red, short green, short blue );
        private delegate void DglColor3sv_aH( short[] v );
        private delegate void DglColor3sv_P( IntPtr v );
        private delegate void DglColor3ub_BBB( byte red, byte green, byte blue );
        private delegate void DglColor3ubv_aB( byte[] v );
        private delegate void DglColor3ubv_P( IntPtr v );
        private delegate void DglColor3ui_III( int red, int green, int blue );
        private delegate void DglColor3uiv_aI( int[] v );
        private delegate void DglColor3uiv_P( IntPtr v );
        private delegate void DglColor3us_HHH( short red, short green, short blue );
        private delegate void DglColor3usv_aH( short[] v );
        private delegate void DglColor3usv_P( IntPtr v );
        private delegate void DglColor4b_BBBB( byte red, byte green, byte blue, byte alpha );
        private delegate void DglColor4bv_aB( byte[] v );
        private delegate void DglColor4bv_P( IntPtr v );
        private delegate void DglColor4d_DDDD( double red, double green, double blue, double alpha );
        private delegate void DglColor4dv_aD( double[] v );
        private delegate void DglColor4dv_P( IntPtr v );
        private delegate void DglColor4f_FFFF( float red, float green, float blue, float alpha );
        private delegate void DglColor4fNormal3fVertex3fSUN_FFFFFFFFFF( float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z );
        private delegate void DglColor4fNormal3fVertex3fvSUN_aFaFaF( float[] c, float[] n, float[] v );
        private delegate void DglColor4fNormal3fVertex3fvSUN_PPP( IntPtr c, IntPtr n, IntPtr v );
        private delegate void DglColor4fv_aF( float[] v );
        private delegate void DglColor4fv_P( IntPtr v );
        private delegate void DglColor4hNV_HHHH( short red, short green, short blue, short alpha );
        private delegate void DglColor4hvNV_aH( short[] v );
        private delegate void DglColor4hvNV_P( IntPtr v );
        private delegate void DglColor4i_IIII( int red, int green, int blue, int alpha );
        private delegate void DglColor4iv_aI( int[] v );
        private delegate void DglColor4iv_P( IntPtr v );
        private delegate void DglColor4s_HHHH( short red, short green, short blue, short alpha );
        private delegate void DglColor4sv_aH( short[] v );
        private delegate void DglColor4sv_P( IntPtr v );
        private delegate void DglColor4ub_BBBB( byte red, byte green, byte blue, byte alpha );
        private delegate void DglColor4ubv_aB( byte[] v );
        private delegate void DglColor4ubv_P( IntPtr v );
        private delegate void DglColor4ubVertex2fSUN_BBBBFF( byte r, byte g, byte b, byte a, float x, float y );
        private delegate void DglColor4ubVertex2fvSUN_aBaF( byte[] c, float[] v );
        private delegate void DglColor4ubVertex2fvSUN_aBP( byte[] c, IntPtr v );
        private delegate void DglColor4ubVertex2fvSUN_PaF( IntPtr c, float[] v );
        private delegate void DglColor4ubVertex2fvSUN_PP( IntPtr c, IntPtr v );
        private delegate void DglColor4ubVertex3fSUN_BBBBFFF( byte r, byte g, byte b, byte a, float x, float y, float z );
        private delegate void DglColor4ubVertex3fvSUN_aBaF( byte[] c, float[] v );
        private delegate void DglColor4ubVertex3fvSUN_aBP( byte[] c, IntPtr v );
        private delegate void DglColor4ubVertex3fvSUN_PaF( IntPtr c, float[] v );
        private delegate void DglColor4ubVertex3fvSUN_PP( IntPtr c, IntPtr v );
        private delegate void DglColor4ui_IIII( int red, int green, int blue, int alpha );
        private delegate void DglColor4uiv_aI( int[] v );
        private delegate void DglColor4uiv_P( IntPtr v );
        private delegate void DglColor4us_HHHH( short red, short green, short blue, short alpha );
        private delegate void DglColor4usv_aH( short[] v );
        private delegate void DglColor4usv_P( IntPtr v );
        private delegate void DglColorFragmentOp1ATI_IIIIIII( int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod );
        private delegate void DglColorFragmentOp2ATI_IIIIIIIIII( int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod );
        private delegate void DglColorFragmentOp3ATI_IIIIIIIIIIIII( int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod );
        private delegate void DglColorMask_BBBB( byte red, byte green, byte blue, byte alpha );
        private delegate void DglColorMaterial_II( int face, int mode );
        private delegate void DglColorPointer_IIIaB( int size, int itype, int stride, byte[] pointer );
        private delegate void DglColorPointer_IIIaH( int size, int itype, int stride, short[] pointer );
        private delegate void DglColorPointer_IIIaI( int size, int itype, int stride, int[] pointer );
        private delegate void DglColorPointer_IIIaF( int size, int itype, int stride, float[] pointer );
        private delegate void DglColorPointer_IIIaD( int size, int itype, int stride, double[] pointer );
        private delegate void DglColorPointer_IIIP( int size, int itype, int stride, IntPtr pointer );
        private delegate void DglColorPointerEXT_IIIIaB( int size, int itype, int stride, int count, byte[] pointer );
        private delegate void DglColorPointerEXT_IIIIaH( int size, int itype, int stride, int count, short[] pointer );
        private delegate void DglColorPointerEXT_IIIIaI( int size, int itype, int stride, int count, int[] pointer );
        private delegate void DglColorPointerEXT_IIIIaF( int size, int itype, int stride, int count, float[] pointer );
        private delegate void DglColorPointerEXT_IIIIaD( int size, int itype, int stride, int count, double[] pointer );
        private delegate void DglColorPointerEXT_IIIIP( int size, int itype, int stride, int count, IntPtr pointer );
        private delegate void DglColorPointerListIBM_IIIrPI( int size, int itype, int stride, ref IntPtr pointer, int ptrstride );
        private delegate void DglColorPointervINTEL_IIrP( int size, int itype, ref IntPtr pointer );
        private delegate void DglColorSubTable_IIIIIaB( int target, int start, int count, int format, int itype, byte[] data );
        private delegate void DglColorSubTable_IIIIIaH( int target, int start, int count, int format, int itype, short[] data );
        private delegate void DglColorSubTable_IIIIIaI( int target, int start, int count, int format, int itype, int[] data );
        private delegate void DglColorSubTable_IIIIIaF( int target, int start, int count, int format, int itype, float[] data );
        private delegate void DglColorSubTable_IIIIIP( int target, int start, int count, int format, int itype, IntPtr data );
        private delegate void DglColorSubTableEXT_IIIIIaB( int target, int start, int count, int format, int itype, byte[] data );
        private delegate void DglColorSubTableEXT_IIIIIaH( int target, int start, int count, int format, int itype, short[] data );
        private delegate void DglColorSubTableEXT_IIIIIaI( int target, int start, int count, int format, int itype, int[] data );
        private delegate void DglColorSubTableEXT_IIIIIaF( int target, int start, int count, int format, int itype, float[] data );
        private delegate void DglColorSubTableEXT_IIIIIP( int target, int start, int count, int format, int itype, IntPtr data );
        private delegate void DglColorTable_IIIIIaB( int target, int internalformat, int width, int format, int itype, byte[] table );
        private delegate void DglColorTable_IIIIIaH( int target, int internalformat, int width, int format, int itype, short[] table );
        private delegate void DglColorTable_IIIIIaI( int target, int internalformat, int width, int format, int itype, int[] table );
        private delegate void DglColorTable_IIIIIaF( int target, int internalformat, int width, int format, int itype, float[] table );
        private delegate void DglColorTable_IIIIIP( int target, int internalformat, int width, int format, int itype, IntPtr table );
        private delegate void DglColorTableEXT_IIIIIaB( int target, int internalFormat, int width, int format, int itype, byte[] table );
        private delegate void DglColorTableEXT_IIIIIaH( int target, int internalFormat, int width, int format, int itype, short[] table );
        private delegate void DglColorTableEXT_IIIIIaI( int target, int internalFormat, int width, int format, int itype, int[] table );
        private delegate void DglColorTableEXT_IIIIIaF( int target, int internalFormat, int width, int format, int itype, float[] table );
        private delegate void DglColorTableEXT_IIIIIP( int target, int internalFormat, int width, int format, int itype, IntPtr table );
        private delegate void DglColorTableParameterfv_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglColorTableParameterfv_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglColorTableParameterfvSGI_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglColorTableParameterfvSGI_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglColorTableParameteriv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglColorTableParameteriv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglColorTableParameterivSGI_IIaI( int target, int pname, int[] riparams );
        private delegate void DglColorTableParameterivSGI_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglColorTableSGI_IIIIIaB( int target, int internalformat, int width, int format, int itype, byte[] table );
        private delegate void DglColorTableSGI_IIIIIaH( int target, int internalformat, int width, int format, int itype, short[] table );
        private delegate void DglColorTableSGI_IIIIIaI( int target, int internalformat, int width, int format, int itype, int[] table );
        private delegate void DglColorTableSGI_IIIIIaF( int target, int internalformat, int width, int format, int itype, float[] table );
        private delegate void DglColorTableSGI_IIIIIP( int target, int internalformat, int width, int format, int itype, IntPtr table );
        private delegate void DglCombinerInputNV_IIIIII( int stage, int portion, int variable, int input, int mapping, int componentUsage );
        private delegate void DglCombinerOutputNV_IIIIIIIBBB( int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, byte abDotProduct, byte cdDotProduct, byte muxSum );
        private delegate void DglCombinerParameterfNV_IF( int pname, float fparam );
        private delegate void DglCombinerParameterfvNV_IaF( int pname, float[] rfparams );
        private delegate void DglCombinerParameterfvNV_IP( int pname, IntPtr rfparams );
        private delegate void DglCombinerParameteriNV_II( int pname, int iparam );
        private delegate void DglCombinerParameterivNV_IaI( int pname, int[] riparams );
        private delegate void DglCombinerParameterivNV_IP( int pname, IntPtr riparams );
        private delegate void DglCombinerStageParameterfvNV_IIaF( int stage, int pname, float[] rfparams );
        private delegate void DglCombinerStageParameterfvNV_IIP( int stage, int pname, IntPtr rfparams );
        private delegate void DglCompileShader_I( int shader );
        private delegate void DglCompileShaderARB_I( int shaderObj );
        private delegate void DglCompressedTexImage1D_IIIIIIaB( int target, int level, int internalformat, int width, int border, int imageSize, byte[] data );
        private delegate void DglCompressedTexImage1D_IIIIIIP( int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data );
        private delegate void DglCompressedTexImage1DARB_IIIIIIaB( int target, int level, int internalformat, int width, int border, int imageSize, byte[] data );
        private delegate void DglCompressedTexImage1DARB_IIIIIIP( int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data );
        private delegate void DglCompressedTexImage2D_IIIIIIIaB( int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[] data );
        private delegate void DglCompressedTexImage2D_IIIIIIIP( int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data );
        private delegate void DglCompressedTexImage2DARB_IIIIIIIaB( int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[] data );
        private delegate void DglCompressedTexImage2DARB_IIIIIIIP( int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data );
        private delegate void DglCompressedTexImage3D_IIIIIIIIaB( int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[] data );
        private delegate void DglCompressedTexImage3D_IIIIIIIIP( int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data );
        private delegate void DglCompressedTexImage3DARB_IIIIIIIIaB( int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[] data );
        private delegate void DglCompressedTexImage3DARB_IIIIIIIIP( int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data );
        private delegate void DglCompressedTexSubImage1D_IIIIIIaB( int target, int level, int xoffset, int width, int format, int imageSize, byte[] data );
        private delegate void DglCompressedTexSubImage1D_IIIIIIP( int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data );
        private delegate void DglCompressedTexSubImage1DARB_IIIIIIaB( int target, int level, int xoffset, int width, int format, int imageSize, byte[] data );
        private delegate void DglCompressedTexSubImage1DARB_IIIIIIP( int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data );
        private delegate void DglCompressedTexSubImage2D_IIIIIIIIaB( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[] data );
        private delegate void DglCompressedTexSubImage2D_IIIIIIIIP( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data );
        private delegate void DglCompressedTexSubImage2DARB_IIIIIIIIaB( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[] data );
        private delegate void DglCompressedTexSubImage2DARB_IIIIIIIIP( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data );
        private delegate void DglCompressedTexSubImage3D_IIIIIIIIIIaB( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[] data );
        private delegate void DglCompressedTexSubImage3D_IIIIIIIIIIP( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data );
        private delegate void DglCompressedTexSubImage3DARB_IIIIIIIIIIaB( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[] data );
        private delegate void DglCompressedTexSubImage3DARB_IIIIIIIIIIP( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data );
        private delegate void DglConvolutionFilter1D_IIIIIaB( int target, int internalformat, int width, int format, int itype, byte[] image );
        private delegate void DglConvolutionFilter1D_IIIIIaH( int target, int internalformat, int width, int format, int itype, short[] image );
        private delegate void DglConvolutionFilter1D_IIIIIaI( int target, int internalformat, int width, int format, int itype, int[] image );
        private delegate void DglConvolutionFilter1D_IIIIIaF( int target, int internalformat, int width, int format, int itype, float[] image );
        private delegate void DglConvolutionFilter1D_IIIIIP( int target, int internalformat, int width, int format, int itype, IntPtr image );
        private delegate void DglConvolutionFilter1DEXT_IIIIIaB( int target, int internalformat, int width, int format, int itype, byte[] image );
        private delegate void DglConvolutionFilter1DEXT_IIIIIaH( int target, int internalformat, int width, int format, int itype, short[] image );
        private delegate void DglConvolutionFilter1DEXT_IIIIIaI( int target, int internalformat, int width, int format, int itype, int[] image );
        private delegate void DglConvolutionFilter1DEXT_IIIIIaF( int target, int internalformat, int width, int format, int itype, float[] image );
        private delegate void DglConvolutionFilter1DEXT_IIIIIP( int target, int internalformat, int width, int format, int itype, IntPtr image );
        private delegate void DglConvolutionFilter2D_IIIIIIaB( int target, int internalformat, int width, int height, int format, int itype, byte[] image );
        private delegate void DglConvolutionFilter2D_IIIIIIaH( int target, int internalformat, int width, int height, int format, int itype, short[] image );
        private delegate void DglConvolutionFilter2D_IIIIIIaI( int target, int internalformat, int width, int height, int format, int itype, int[] image );
        private delegate void DglConvolutionFilter2D_IIIIIIaF( int target, int internalformat, int width, int height, int format, int itype, float[] image );
        private delegate void DglConvolutionFilter2D_IIIIIIP( int target, int internalformat, int width, int height, int format, int itype, IntPtr image );
        private delegate void DglConvolutionFilter2DEXT_IIIIIIaB( int target, int internalformat, int width, int height, int format, int itype, byte[] image );
        private delegate void DglConvolutionFilter2DEXT_IIIIIIaH( int target, int internalformat, int width, int height, int format, int itype, short[] image );
        private delegate void DglConvolutionFilter2DEXT_IIIIIIaI( int target, int internalformat, int width, int height, int format, int itype, int[] image );
        private delegate void DglConvolutionFilter2DEXT_IIIIIIaF( int target, int internalformat, int width, int height, int format, int itype, float[] image );
        private delegate void DglConvolutionFilter2DEXT_IIIIIIP( int target, int internalformat, int width, int height, int format, int itype, IntPtr image );
        private delegate void DglConvolutionParameterf_IIF( int target, int pname, float fparams );
        private delegate void DglConvolutionParameterfEXT_IIF( int target, int pname, float fparams );
        private delegate void DglConvolutionParameterfv_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglConvolutionParameterfv_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglConvolutionParameterfvEXT_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglConvolutionParameterfvEXT_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglConvolutionParameteri_III( int target, int pname, int iparams );
        private delegate void DglConvolutionParameteriEXT_III( int target, int pname, int iparams );
        private delegate void DglConvolutionParameteriv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglConvolutionParameteriv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglConvolutionParameterivEXT_IIaI( int target, int pname, int[] riparams );
        private delegate void DglConvolutionParameterivEXT_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglCopyColorSubTable_IIIII( int target, int start, int x, int y, int width );
        private delegate void DglCopyColorSubTableEXT_IIIII( int target, int start, int x, int y, int width );
        private delegate void DglCopyColorTable_IIIII( int target, int internalformat, int x, int y, int width );
        private delegate void DglCopyColorTableSGI_IIIII( int target, int internalformat, int x, int y, int width );
        private delegate void DglCopyConvolutionFilter1D_IIIII( int target, int internalformat, int x, int y, int width );
        private delegate void DglCopyConvolutionFilter1DEXT_IIIII( int target, int internalformat, int x, int y, int width );
        private delegate void DglCopyConvolutionFilter2D_IIIIII( int target, int internalformat, int x, int y, int width, int height );
        private delegate void DglCopyConvolutionFilter2DEXT_IIIIII( int target, int internalformat, int x, int y, int width, int height );
        private delegate void DglCopyPixels_IIIII( int x, int y, int width, int height, int itype );
        private delegate void DglCopyTexImage1D_IIIIIII( int target, int level, int internalFormat, int x, int y, int width, int border );
        private delegate void DglCopyTexImage1DEXT_IIIIIII( int target, int level, int internalformat, int x, int y, int width, int border );
        private delegate void DglCopyTexImage2D_IIIIIIII( int target, int level, int internalFormat, int x, int y, int width, int height, int border );
        private delegate void DglCopyTexImage2DEXT_IIIIIIII( int target, int level, int internalformat, int x, int y, int width, int height, int border );
        private delegate void DglCopyTexSubImage1D_IIIIII( int target, int level, int xoffset, int x, int y, int width );
        private delegate void DglCopyTexSubImage1DEXT_IIIIII( int target, int level, int xoffset, int x, int y, int width );
        private delegate void DglCopyTexSubImage2D_IIIIIIII( int target, int level, int xoffset, int yoffset, int x, int y, int width, int height );
        private delegate void DglCopyTexSubImage2DEXT_IIIIIIII( int target, int level, int xoffset, int yoffset, int x, int y, int width, int height );
        private delegate void DglCopyTexSubImage3D_IIIIIIIII( int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height );
        private delegate void DglCopyTexSubImage3DEXT_IIIIIIIII( int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height );
        private delegate int DglCreateProgram_V();
        private delegate int DglCreateProgramObjectARB_V();
        private delegate int DglCreateShader_I( int itype );
        private delegate int DglCreateShaderObjectARB_I( int shaderType );
        private delegate void DglCullFace_I( int mode );
        private delegate void DglCullParameterdvEXT_IaD( int pname, double[] rdparams );
        private delegate void DglCullParameterdvEXT_IP( int pname, IntPtr rdparams );
        private delegate void DglCullParameterfvEXT_IaF( int pname, float[] rfparams );
        private delegate void DglCullParameterfvEXT_IP( int pname, IntPtr rfparams );
        private delegate void DglCurrentPaletteMatrixARB_I( int index );
        private delegate void DglDeformationMap3dSGIX_IDDIIDDIIDDIIaD( int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points );
        private delegate void DglDeformationMap3dSGIX_IDDIIDDIIDDIIP( int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, IntPtr points );
        private delegate void DglDeformationMap3fSGIX_IFFIIFFIIFFIIaF( int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points );
        private delegate void DglDeformationMap3fSGIX_IFFIIFFIIFFIIP( int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, IntPtr points );
        private delegate void DglDeformSGIX_I( int mask );
        private delegate void DglDeleteAsyncMarkersSGIX_II( int marker, int range );
        private delegate void DglDeleteBuffers_IaI( int n, int[] buffers );
        private delegate void DglDeleteBuffers_IP( int n, IntPtr buffers );
        private delegate void DglDeleteBuffersARB_IaI( int n, int[] buffers );
        private delegate void DglDeleteBuffersARB_IP( int n, IntPtr buffers );
        private delegate void DglDeleteFencesAPPLE_IaI( int n, int[] fences );
        private delegate void DglDeleteFencesAPPLE_IP( int n, IntPtr fences );
        private delegate void DglDeleteFencesNV_IaI( int n, int[] fences );
        private delegate void DglDeleteFencesNV_IP( int n, IntPtr fences );
        private delegate void DglDeleteFragmentShaderATI_I( int id );
        private delegate void DglDeleteFramebuffersEXT_IaI( int n, int[] framebuffers );
        private delegate void DglDeleteFramebuffersEXT_IP( int n, IntPtr framebuffers );
        private delegate void DglDeleteLists_II( int list, int range );
        private delegate void DglDeleteObjectARB_I( int obj );
        private delegate void DglDeleteOcclusionQueriesNV_IaI( int n, int[] ids );
        private delegate void DglDeleteOcclusionQueriesNV_IP( int n, IntPtr ids );
        private delegate void DglDeleteProgram_I( int program );
        private delegate void DglDeleteProgramsARB_IaI( int n, int[] programs );
        private delegate void DglDeleteProgramsARB_IP( int n, IntPtr programs );
        private delegate void DglDeleteProgramsNV_IaI( int n, int[] programs );
        private delegate void DglDeleteProgramsNV_IP( int n, IntPtr programs );
        private delegate void DglDeleteQueries_IaI( int n, int[] ids );
        private delegate void DglDeleteQueries_IP( int n, IntPtr ids );
        private delegate void DglDeleteQueriesARB_IaI( int n, int[] ids );
        private delegate void DglDeleteQueriesARB_IP( int n, IntPtr ids );
        private delegate void DglDeleteRenderbuffersEXT_IaI( int n, int[] renderbuffers );
        private delegate void DglDeleteRenderbuffersEXT_IP( int n, IntPtr renderbuffers );
        private delegate void DglDeleteShader_I( int shader );
        private delegate void DglDeleteTextures_IaI( int n, int[] textures );
        private delegate void DglDeleteTextures_IP( int n, IntPtr textures );
        private delegate void DglDeleteTexturesEXT_IaI( int n, int[] textures );
        private delegate void DglDeleteTexturesEXT_IP( int n, IntPtr textures );
        private delegate void DglDeleteVertexArraysAPPLE_IaI( int n, int[] arrays );
        private delegate void DglDeleteVertexArraysAPPLE_IP( int n, IntPtr arrays );
        private delegate void DglDeleteVertexShaderEXT_I( int id );
        private delegate void DglDepthBoundsEXT_DD( double zmin, double zmax );
        private delegate void DglDepthFunc_I( int func );
        private delegate void DglDepthMask_B( byte flag );
        private delegate void DglDepthRange_DD( double zNear, double zFar );
        private delegate void DglDetachObjectARB_II( int containerObj, int attachedObj );
        private delegate void DglDetachShader_II( int program, int shader );
        private delegate void DglDetailTexFuncSGIS_IIaF( int target, int n, float[] points );
        private delegate void DglDetailTexFuncSGIS_IIP( int target, int n, IntPtr points );
        private delegate void DglDisable_I( int cap );
        private delegate void DglDisableClientState_I( int array );
        private delegate void DglDisableVariantClientStateEXT_I( int id );
        private delegate void DglDisableVertexAttribArray_I( int index );
        private delegate void DglDisableVertexAttribArrayARB_I( int index );
        private delegate void DglDrawArrays_III( int mode, int first, int count );
        private delegate void DglDrawArraysEXT_III( int mode, int first, int count );
        private delegate void DglDrawBuffer_I( int mode );
        private delegate void DglDrawBuffers_IaI( int n, int[] bufs );
        private delegate void DglDrawBuffers_IP( int n, IntPtr bufs );
        private delegate void DglDrawBuffersARB_IaI( int n, int[] bufs );
        private delegate void DglDrawBuffersARB_IP( int n, IntPtr bufs );
        private delegate void DglDrawBuffersATI_IaI( int n, int[] bufs );
        private delegate void DglDrawBuffersATI_IP( int n, IntPtr bufs );
        private delegate void DglDrawElementArrayAPPLE_III( int mode, int first, int count );
        private delegate void DglDrawElementArrayATI_II( int mode, int count );
        private delegate void DglDrawElements_IIIaB( int mode, int count, int itype, byte[] indices );
        private delegate void DglDrawElements_IIIaH( int mode, int count, int itype, short[] indices );
        private delegate void DglDrawElements_IIIaI( int mode, int count, int itype, int[] indices );
        private delegate void DglDrawElements_IIIP( int mode, int count, int itype, IntPtr indices );
        private delegate void DglDrawMeshArraysSUN_IIII( int mode, int first, int count, int width );
        private delegate void DglDrawPixels_IIIIaB( int width, int height, int format, int itype, byte[] pixels );
        private delegate void DglDrawPixels_IIIIaH( int width, int height, int format, int itype, short[] pixels );
        private delegate void DglDrawPixels_IIIIaI( int width, int height, int format, int itype, int[] pixels );
        private delegate void DglDrawPixels_IIIIaF( int width, int height, int format, int itype, float[] pixels );
        private delegate void DglDrawPixels_IIIIP( int width, int height, int format, int itype, IntPtr pixels );
        private delegate void DglDrawRangeElementArrayAPPLE_IIIII( int mode, int start, int end, int first, int count );
        private delegate void DglDrawRangeElementArrayATI_IIII( int mode, int start, int end, int count );
        private delegate void DglDrawRangeElements_IIIIIaB( int mode, int start, int end, int count, int itype, byte[] indices );
        private delegate void DglDrawRangeElements_IIIIIaH( int mode, int start, int end, int count, int itype, short[] indices );
        private delegate void DglDrawRangeElements_IIIIIaI( int mode, int start, int end, int count, int itype, int[] indices );
        private delegate void DglDrawRangeElements_IIIIIP( int mode, int start, int end, int count, int itype, IntPtr indices );
        private delegate void DglDrawRangeElementsEXT_IIIIIaB( int mode, int start, int end, int count, int itype, byte[] indices );
        private delegate void DglDrawRangeElementsEXT_IIIIIaH( int mode, int start, int end, int count, int itype, short[] indices );
        private delegate void DglDrawRangeElementsEXT_IIIIIaI( int mode, int start, int end, int count, int itype, int[] indices );
        private delegate void DglDrawRangeElementsEXT_IIIIIP( int mode, int start, int end, int count, int itype, IntPtr indices );
        private delegate void DglDrawRangeElementsWIN_IIIIIaB( int mode, int start, int end, int count, int itype, byte[] indices );
        private delegate void DglDrawRangeElementsWIN_IIIIIaH( int mode, int start, int end, int count, int itype, short[] indices );
        private delegate void DglDrawRangeElementsWIN_IIIIIaI( int mode, int start, int end, int count, int itype, int[] indices );
        private delegate void DglDrawRangeElementsWIN_IIIIIP( int mode, int start, int end, int count, int itype, IntPtr indices );
        private delegate void DglEdgeFlag_B( byte flag );
        private delegate void DglEdgeFlagPointer_IaB( int stride, byte[] pointer );
        private delegate void DglEdgeFlagPointer_IP( int stride, IntPtr pointer );
        private delegate void DglEdgeFlagPointerEXT_IIaB( int stride, int count, byte[] pointer );
        private delegate void DglEdgeFlagPointerEXT_IIP( int stride, int count, IntPtr pointer );
        private delegate void DglEdgeFlagPointerListIBM_IrPI( int stride, ref IntPtr pointer, int ptrstride );
        private delegate void DglEdgeFlagv_aB( byte[] flag );
        private delegate void DglEdgeFlagv_P( IntPtr flag );
        private delegate void DglElementPointerAPPLE_IaB( int itype, byte[] pointer );
        private delegate void DglElementPointerAPPLE_IP( int itype, IntPtr pointer );
        private delegate void DglElementPointerATI_IaB( int itype, byte[] pointer );
        private delegate void DglElementPointerATI_IP( int itype, IntPtr pointer );
        private delegate void DglEnable_I( int cap );
        private delegate void DglEnableClientState_I( int array );
        private delegate void DglEnableVariantClientStateEXT_I( int id );
        private delegate void DglEnableVertexAttribArray_I( int index );
        private delegate void DglEnableVertexAttribArrayARB_I( int index );
        private delegate void DglEnd_V();
        private delegate void DglEndFragmentShaderATI_V();
        private delegate void DglEndList_V();
        private delegate void DglEndOcclusionQueryNV_V();
        private delegate void DglEndQuery_I( int target );
        private delegate void DglEndQueryARB_I( int target );
        private delegate void DglEndVertexShaderEXT_V();
        private delegate void DglEvalCoord1d_D( double u );
        private delegate void DglEvalCoord1dv_aD( double[] u );
        private delegate void DglEvalCoord1dv_P( IntPtr u );
        private delegate void DglEvalCoord1f_F( float u );
        private delegate void DglEvalCoord1fv_aF( float[] u );
        private delegate void DglEvalCoord1fv_P( IntPtr u );
        private delegate void DglEvalCoord2d_DD( double u, double v );
        private delegate void DglEvalCoord2dv_aD( double[] u );
        private delegate void DglEvalCoord2dv_P( IntPtr u );
        private delegate void DglEvalCoord2f_FF( float u, float v );
        private delegate void DglEvalCoord2fv_aF( float[] u );
        private delegate void DglEvalCoord2fv_P( IntPtr u );
        private delegate void DglEvalMapsNV_II( int target, int mode );
        private delegate void DglEvalMesh1_III( int mode, int i1, int i2 );
        private delegate void DglEvalMesh2_IIIII( int mode, int i1, int i2, int j1, int j2 );
        private delegate void DglEvalPoint1_I( int i );
        private delegate void DglEvalPoint2_II( int i, int j );
        private delegate void DglExecuteProgramNV_IIaF( int target, int id, float[] rfparams );
        private delegate void DglExecuteProgramNV_IIP( int target, int id, IntPtr rfparams );
        private delegate void DglExtractComponentEXT_III( int res, int src, int num );
        private delegate void DglFeedbackBuffer_IIaF( int size, int itype, float[] buffer );
        private delegate void DglFeedbackBuffer_IIP( int size, int itype, IntPtr buffer );
        private delegate void DglFinalCombinerInputNV_IIII( int variable, int input, int mapping, int componentUsage );
        private delegate void DglFinish_V();
        private delegate int DglFinishAsyncSGIX_rI( ref int markerp );
        private delegate void DglFinishFenceAPPLE_I( int fence );
        private delegate void DglFinishFenceNV_I( int fence );
        private delegate void DglFinishObjectAPPLE_II( int iobject, int name );
        private delegate void DglFinishTextureSUNX_V();
        private delegate void DglFlush_V();
        private delegate void DglFlushPixelDataRangeNV_I( int target );
        private delegate void DglFlushRasterSGIX_V();
        private delegate void DglFlushVertexArrayRangeAPPLE_IaB( int length, byte[] pointer );
        private delegate void DglFlushVertexArrayRangeAPPLE_IP( int length, IntPtr pointer );
        private delegate void DglFlushVertexArrayRangeNV_V();
        private delegate void DglFogCoordd_D( double coord );
        private delegate void DglFogCoorddEXT_D( double coord );
        private delegate void DglFogCoorddv_aD( double[] coord );
        private delegate void DglFogCoorddv_P( IntPtr coord );
        private delegate void DglFogCoorddvEXT_aD( double[] coord );
        private delegate void DglFogCoorddvEXT_P( IntPtr coord );
        private delegate void DglFogCoordf_F( float coord );
        private delegate void DglFogCoordfEXT_F( float coord );
        private delegate void DglFogCoordfv_aF( float[] coord );
        private delegate void DglFogCoordfv_P( IntPtr coord );
        private delegate void DglFogCoordfvEXT_aF( float[] coord );
        private delegate void DglFogCoordfvEXT_P( IntPtr coord );
        private delegate void DglFogCoordhNV_H( short fog );
        private delegate void DglFogCoordhvNV_aH( short[] fog );
        private delegate void DglFogCoordhvNV_P( IntPtr fog );
        private delegate void DglFogCoordPointer_IIaF( int itype, int stride, float[] pointer );
        private delegate void DglFogCoordPointer_IIaD( int itype, int stride, double[] pointer );
        private delegate void DglFogCoordPointer_IIP( int itype, int stride, IntPtr pointer );
        private delegate void DglFogCoordPointerEXT_IIaF( int itype, int stride, float[] pointer );
        private delegate void DglFogCoordPointerEXT_IIaD( int itype, int stride, double[] pointer );
        private delegate void DglFogCoordPointerEXT_IIP( int itype, int stride, IntPtr pointer );
        private delegate void DglFogCoordPointerListIBM_IIrPI( int itype, int stride, ref IntPtr pointer, int ptrstride );
        private delegate void DglFogf_IF( int pname, float fparam );
        private delegate void DglFogFuncSGIS_IaF( int n, float[] points );
        private delegate void DglFogFuncSGIS_IP( int n, IntPtr points );
        private delegate void DglFogfv_IaF( int pname, float[] rfparams );
        private delegate void DglFogfv_IP( int pname, IntPtr rfparams );
        private delegate void DglFogi_II( int pname, int iparam );
        private delegate void DglFogiv_IaI( int pname, int[] riparams );
        private delegate void DglFogiv_IP( int pname, IntPtr riparams );
        private delegate void DglFragmentColorMaterialSGIX_II( int face, int mode );
        private delegate void DglFragmentLightfSGIX_IIF( int light, int pname, float fparam );
        private delegate void DglFragmentLightfvSGIX_IIaF( int light, int pname, float[] rfparams );
        private delegate void DglFragmentLightfvSGIX_IIP( int light, int pname, IntPtr rfparams );
        private delegate void DglFragmentLightiSGIX_III( int light, int pname, int iparam );
        private delegate void DglFragmentLightivSGIX_IIaI( int light, int pname, int[] riparams );
        private delegate void DglFragmentLightivSGIX_IIP( int light, int pname, IntPtr riparams );
        private delegate void DglFragmentLightModelfSGIX_IF( int pname, float fparam );
        private delegate void DglFragmentLightModelfvSGIX_IaF( int pname, float[] rfparams );
        private delegate void DglFragmentLightModelfvSGIX_IP( int pname, IntPtr rfparams );
        private delegate void DglFragmentLightModeliSGIX_II( int pname, int iparam );
        private delegate void DglFragmentLightModelivSGIX_IaI( int pname, int[] riparams );
        private delegate void DglFragmentLightModelivSGIX_IP( int pname, IntPtr riparams );
        private delegate void DglFragmentMaterialfSGIX_IIF( int face, int pname, float fparam );
        private delegate void DglFragmentMaterialfvSGIX_IIaF( int face, int pname, float[] rfparams );
        private delegate void DglFragmentMaterialfvSGIX_IIP( int face, int pname, IntPtr rfparams );
        private delegate void DglFragmentMaterialiSGIX_III( int face, int pname, int iparam );
        private delegate void DglFragmentMaterialivSGIX_IIaI( int face, int pname, int[] riparams );
        private delegate void DglFragmentMaterialivSGIX_IIP( int face, int pname, IntPtr riparams );
        private delegate void DglFramebufferRenderbufferEXT_IIII( int target, int attachment, int renderbuffertarget, int renderbuffer );
        private delegate void DglFramebufferTexture1DEXT_IIIII( int target, int attachment, int textarget, int texture, int level );
        private delegate void DglFramebufferTexture2DEXT_IIIII( int target, int attachment, int textarget, int texture, int level );
        private delegate void DglFramebufferTexture3DEXT_IIIIII( int target, int attachment, int textarget, int texture, int level, int zoffset );
        private delegate void DglFrameZoomSGIX_I( int factor );
        private delegate void DglFreeObjectBufferATI_I( int buffer );
        private delegate void DglFrontFace_I( int mode );
        private delegate void DglFrustum_DDDDDD( double left, double right, double bottom, double top, double zNear, double zFar );
        private delegate int DglGenAsyncMarkersSGIX_I( int range );
        private delegate void DglGenBuffers_IaI( int n, int[] buffers );
        private delegate void DglGenBuffers_IP( int n, IntPtr buffers );
        private delegate void DglGenBuffersARB_IaI( int n, int[] buffers );
        private delegate void DglGenBuffersARB_IP( int n, IntPtr buffers );
        private delegate void DglGenerateMipmapEXT_I( int target );
        private delegate void DglGenFencesAPPLE_IaI( int n, int[] fences );
        private delegate void DglGenFencesAPPLE_IP( int n, IntPtr fences );
        private delegate void DglGenFencesNV_IaI( int n, int[] fences );
        private delegate void DglGenFencesNV_IP( int n, IntPtr fences );
        private delegate int DglGenFragmentShadersATI_I( int range );
        private delegate void DglGenFramebuffersEXT_IaI( int n, int[] framebuffers );
        private delegate void DglGenFramebuffersEXT_IP( int n, IntPtr framebuffers );
        private delegate int DglGenLists_I( int range );
        private delegate void DglGenOcclusionQueriesNV_IaI( int n, int[] ids );
        private delegate void DglGenOcclusionQueriesNV_IP( int n, IntPtr ids );
        private delegate void DglGenProgramsARB_IaI( int n, int[] programs );
        private delegate void DglGenProgramsARB_IP( int n, IntPtr programs );
        private delegate void DglGenProgramsNV_IaI( int n, int[] programs );
        private delegate void DglGenProgramsNV_IP( int n, IntPtr programs );
        private delegate void DglGenQueries_IaI( int n, int[] ids );
        private delegate void DglGenQueries_IP( int n, IntPtr ids );
        private delegate void DglGenQueriesARB_IaI( int n, int[] ids );
        private delegate void DglGenQueriesARB_IP( int n, IntPtr ids );
        private delegate void DglGenRenderbuffersEXT_IaI( int n, int[] renderbuffers );
        private delegate void DglGenRenderbuffersEXT_IP( int n, IntPtr renderbuffers );
        private delegate int DglGenSymbolsEXT_IIII( int datatype, int storagetype, int range, int components );
        private delegate void DglGenTextures_IaI( int n, int[] textures );
        private delegate void DglGenTextures_IP( int n, IntPtr textures );
        private delegate void DglGenTexturesEXT_IaI( int n, int[] textures );
        private delegate void DglGenTexturesEXT_IP( int n, IntPtr textures );
        private delegate void DglGenVertexArraysAPPLE_IaI( int n, int[] arrays );
        private delegate void DglGenVertexArraysAPPLE_IP( int n, IntPtr arrays );
        private delegate int DglGenVertexShadersEXT_I( int range );
        private delegate void DglGetActiveAttrib_IIIrIrIrIS( int program, int index, int bufSize, ref int length, ref int size, ref int ritype, String name );
        private delegate void DglGetActiveAttribARB_IIIrIrIrIS( int programObj, int index, int maxLength, ref int length, ref int size, ref int ritype, String name );
        private delegate void DglGetActiveUniform_IIIrIrIrIS( int program, int index, int bufSize, ref int length, ref int size, ref int ritype, String name );
        private delegate void DglGetActiveUniformARB_IIIrIrIrIS( int programObj, int index, int maxLength, ref int length, ref int size, ref int ritype, String name );
        private delegate void DglGetArrayObjectfvATI_IIaF( int array, int pname, float[] rfparams );
        private delegate void DglGetArrayObjectfvATI_IIP( int array, int pname, IntPtr rfparams );
        private delegate void DglGetArrayObjectivATI_IIaI( int array, int pname, int[] riparams );
        private delegate void DglGetArrayObjectivATI_IIP( int array, int pname, IntPtr riparams );
        private delegate void DglGetAttachedObjectsARB_IIrIrI( int containerObj, int maxCount, ref int count, ref int obj );
        private delegate void DglGetAttachedShaders_IIrIrI( int program, int maxCount, ref int count, ref int obj );
        private delegate int DglGetAttribLocation_IS( int program, String name );
        private delegate int DglGetAttribLocationARB_IS( int programObj, String name );
        private delegate void DglGetBooleanv_IaB( int pname, byte[] rbparams );
        private delegate void DglGetBooleanv_IP( int pname, IntPtr rbparams );
        private delegate void DglGetBufferParameteriv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetBufferParameteriv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetBufferParameterivARB_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetBufferParameterivARB_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetBufferPointerv_IIrP( int target, int pname, ref IntPtr rvparams );
        private delegate void DglGetBufferPointervARB_IIrP( int target, int pname, ref IntPtr rvparams );
        private delegate void DglGetBufferSubData_IIIaB( int target, int offset, int size, byte[] data );
        private delegate void DglGetBufferSubData_IIIP( int target, int offset, int size, IntPtr data );
        private delegate void DglGetBufferSubDataARB_IIIaB( int target, int offset, int size, byte[] data );
        private delegate void DglGetBufferSubDataARB_IIIP( int target, int offset, int size, IntPtr data );
        private delegate void DglGetClipPlane_IaD( int plane, double[] equation );
        private delegate void DglGetClipPlane_IP( int plane, IntPtr equation );
        private delegate void DglGetColorTable_IIIaB( int target, int format, int itype, byte[] table );
        private delegate void DglGetColorTable_IIIaH( int target, int format, int itype, short[] table );
        private delegate void DglGetColorTable_IIIaI( int target, int format, int itype, int[] table );
        private delegate void DglGetColorTable_IIIaF( int target, int format, int itype, float[] table );
        private delegate void DglGetColorTable_IIIP( int target, int format, int itype, IntPtr table );
        private delegate void DglGetColorTableEXT_IIIaB( int target, int format, int itype, byte[] data );
        private delegate void DglGetColorTableEXT_IIIaH( int target, int format, int itype, short[] data );
        private delegate void DglGetColorTableEXT_IIIaI( int target, int format, int itype, int[] data );
        private delegate void DglGetColorTableEXT_IIIaF( int target, int format, int itype, float[] data );
        private delegate void DglGetColorTableEXT_IIIP( int target, int format, int itype, IntPtr data );
        private delegate void DglGetColorTableParameterfv_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetColorTableParameterfv_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetColorTableParameterfvEXT_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetColorTableParameterfvEXT_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetColorTableParameterfvSGI_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetColorTableParameterfvSGI_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetColorTableParameteriv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetColorTableParameteriv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetColorTableParameterivEXT_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetColorTableParameterivEXT_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetColorTableParameterivSGI_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetColorTableParameterivSGI_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetColorTableSGI_IIIaB( int target, int format, int itype, byte[] table );
        private delegate void DglGetColorTableSGI_IIIaH( int target, int format, int itype, short[] table );
        private delegate void DglGetColorTableSGI_IIIaI( int target, int format, int itype, int[] table );
        private delegate void DglGetColorTableSGI_IIIaF( int target, int format, int itype, float[] table );
        private delegate void DglGetColorTableSGI_IIIP( int target, int format, int itype, IntPtr table );
        private delegate void DglGetCombinerInputParameterfvNV_IIIIaF( int stage, int portion, int variable, int pname, float[] rfparams );
        private delegate void DglGetCombinerInputParameterfvNV_IIIIP( int stage, int portion, int variable, int pname, IntPtr rfparams );
        private delegate void DglGetCombinerInputParameterivNV_IIIIaI( int stage, int portion, int variable, int pname, int[] riparams );
        private delegate void DglGetCombinerInputParameterivNV_IIIIP( int stage, int portion, int variable, int pname, IntPtr riparams );
        private delegate void DglGetCombinerOutputParameterfvNV_IIIaF( int stage, int portion, int pname, float[] rfparams );
        private delegate void DglGetCombinerOutputParameterfvNV_IIIP( int stage, int portion, int pname, IntPtr rfparams );
        private delegate void DglGetCombinerOutputParameterivNV_IIIaI( int stage, int portion, int pname, int[] riparams );
        private delegate void DglGetCombinerOutputParameterivNV_IIIP( int stage, int portion, int pname, IntPtr riparams );
        private delegate void DglGetCombinerStageParameterfvNV_IIaF( int stage, int pname, float[] rfparams );
        private delegate void DglGetCombinerStageParameterfvNV_IIP( int stage, int pname, IntPtr rfparams );
        private delegate void DglGetCompressedTexImage_IIaB( int target, int level, byte[] img );
        private delegate void DglGetCompressedTexImage_IIP( int target, int level, IntPtr img );
        private delegate void DglGetCompressedTexImageARB_IIaB( int target, int level, byte[] img );
        private delegate void DglGetCompressedTexImageARB_IIP( int target, int level, IntPtr img );
        private delegate void DglGetConvolutionFilter_IIIaB( int target, int format, int itype, byte[] image );
        private delegate void DglGetConvolutionFilter_IIIaH( int target, int format, int itype, short[] image );
        private delegate void DglGetConvolutionFilter_IIIaI( int target, int format, int itype, int[] image );
        private delegate void DglGetConvolutionFilter_IIIaF( int target, int format, int itype, float[] image );
        private delegate void DglGetConvolutionFilter_IIIP( int target, int format, int itype, IntPtr image );
        private delegate void DglGetConvolutionFilterEXT_IIIaB( int target, int format, int itype, byte[] image );
        private delegate void DglGetConvolutionFilterEXT_IIIaH( int target, int format, int itype, short[] image );
        private delegate void DglGetConvolutionFilterEXT_IIIaI( int target, int format, int itype, int[] image );
        private delegate void DglGetConvolutionFilterEXT_IIIaF( int target, int format, int itype, float[] image );
        private delegate void DglGetConvolutionFilterEXT_IIIP( int target, int format, int itype, IntPtr image );
        private delegate void DglGetConvolutionParameterfv_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetConvolutionParameterfv_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetConvolutionParameterfvEXT_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetConvolutionParameterfvEXT_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetConvolutionParameteriv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetConvolutionParameteriv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetConvolutionParameterivEXT_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetConvolutionParameterivEXT_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetDetailTexFuncSGIS_IaF( int target, float[] points );
        private delegate void DglGetDetailTexFuncSGIS_IP( int target, IntPtr points );
        private delegate void DglGetDoublev_IaD( int pname, double[] rdparams );
        private delegate void DglGetDoublev_IP( int pname, IntPtr rdparams );
        private delegate int DglGetError_V();
        private delegate void DglGetFenceivNV_IIaI( int fence, int pname, int[] riparams );
        private delegate void DglGetFenceivNV_IIP( int fence, int pname, IntPtr riparams );
        private delegate void DglGetFinalCombinerInputParameterfvNV_IIaF( int variable, int pname, float[] rfparams );
        private delegate void DglGetFinalCombinerInputParameterfvNV_IIP( int variable, int pname, IntPtr rfparams );
        private delegate void DglGetFinalCombinerInputParameterivNV_IIaI( int variable, int pname, int[] riparams );
        private delegate void DglGetFinalCombinerInputParameterivNV_IIP( int variable, int pname, IntPtr riparams );
        private delegate void DglGetFloatv_IaF( int pname, float[] rfparams );
        private delegate void DglGetFloatv_IP( int pname, IntPtr rfparams );
        private delegate void DglGetFogFuncSGIS_aF( float[] points );
        private delegate void DglGetFogFuncSGIS_P( IntPtr points );
        private delegate void DglGetFragmentLightfvSGIX_IIaF( int light, int pname, float[] rfparams );
        private delegate void DglGetFragmentLightfvSGIX_IIP( int light, int pname, IntPtr rfparams );
        private delegate void DglGetFragmentLightivSGIX_IIaI( int light, int pname, int[] riparams );
        private delegate void DglGetFragmentLightivSGIX_IIP( int light, int pname, IntPtr riparams );
        private delegate void DglGetFragmentMaterialfvSGIX_IIaF( int face, int pname, float[] rfparams );
        private delegate void DglGetFragmentMaterialfvSGIX_IIP( int face, int pname, IntPtr rfparams );
        private delegate void DglGetFragmentMaterialivSGIX_IIaI( int face, int pname, int[] riparams );
        private delegate void DglGetFragmentMaterialivSGIX_IIP( int face, int pname, IntPtr riparams );
        private delegate void DglGetFramebufferAttachmentParameterivEXT_IIIaI( int target, int attachment, int pname, int[] riparams );
        private delegate void DglGetFramebufferAttachmentParameterivEXT_IIIP( int target, int attachment, int pname, IntPtr riparams );
        private delegate int DglGetHandleARB_I( int pname );
        private delegate void DglGetHistogram_IBIIaB( int target, byte reset, int format, int itype, byte[] values );
        private delegate void DglGetHistogram_IBIIaH( int target, byte reset, int format, int itype, short[] values );
        private delegate void DglGetHistogram_IBIIaI( int target, byte reset, int format, int itype, int[] values );
        private delegate void DglGetHistogram_IBIIaF( int target, byte reset, int format, int itype, float[] values );
        private delegate void DglGetHistogram_IBIIP( int target, byte reset, int format, int itype, IntPtr values );
        private delegate void DglGetHistogramEXT_IBIIaB( int target, byte reset, int format, int itype, byte[] values );
        private delegate void DglGetHistogramEXT_IBIIaH( int target, byte reset, int format, int itype, short[] values );
        private delegate void DglGetHistogramEXT_IBIIaI( int target, byte reset, int format, int itype, int[] values );
        private delegate void DglGetHistogramEXT_IBIIaF( int target, byte reset, int format, int itype, float[] values );
        private delegate void DglGetHistogramEXT_IBIIP( int target, byte reset, int format, int itype, IntPtr values );
        private delegate void DglGetHistogramParameterfv_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetHistogramParameterfv_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetHistogramParameterfvEXT_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetHistogramParameterfvEXT_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetHistogramParameteriv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetHistogramParameteriv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetHistogramParameterivEXT_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetHistogramParameterivEXT_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetImageTransformParameterfvHP_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetImageTransformParameterfvHP_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetImageTransformParameterivHP_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetImageTransformParameterivHP_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetInfoLogARB_IIrIS( int obj, int maxLength, ref int length, String infoLog );
        private delegate int DglGetInstrumentsSGIX_V();
        private delegate void DglGetIntegerv_IaI( int pname, int[] riparams );
        private delegate void DglGetIntegerv_IP( int pname, IntPtr riparams );
        private delegate void DglGetInvariantBooleanvEXT_IIaB( int id, int value, byte[] data );
        private delegate void DglGetInvariantBooleanvEXT_IIP( int id, int value, IntPtr data );
        private delegate void DglGetInvariantFloatvEXT_IIaF( int id, int value, float[] data );
        private delegate void DglGetInvariantFloatvEXT_IIP( int id, int value, IntPtr data );
        private delegate void DglGetInvariantIntegervEXT_IIaI( int id, int value, int[] data );
        private delegate void DglGetInvariantIntegervEXT_IIP( int id, int value, IntPtr data );
        private delegate void DglGetLightfv_IIaF( int light, int pname, float[] rfparams );
        private delegate void DglGetLightfv_IIP( int light, int pname, IntPtr rfparams );
        private delegate void DglGetLightiv_IIaI( int light, int pname, int[] riparams );
        private delegate void DglGetLightiv_IIP( int light, int pname, IntPtr riparams );
        private delegate void DglGetListParameterfvSGIX_IIaF( int list, int pname, float[] rfparams );
        private delegate void DglGetListParameterfvSGIX_IIP( int list, int pname, IntPtr rfparams );
        private delegate void DglGetListParameterivSGIX_IIaI( int list, int pname, int[] riparams );
        private delegate void DglGetListParameterivSGIX_IIP( int list, int pname, IntPtr riparams );
        private delegate void DglGetLocalConstantBooleanvEXT_IIaB( int id, int value, byte[] data );
        private delegate void DglGetLocalConstantBooleanvEXT_IIP( int id, int value, IntPtr data );
        private delegate void DglGetLocalConstantFloatvEXT_IIaF( int id, int value, float[] data );
        private delegate void DglGetLocalConstantFloatvEXT_IIP( int id, int value, IntPtr data );
        private delegate void DglGetLocalConstantIntegervEXT_IIaI( int id, int value, int[] data );
        private delegate void DglGetLocalConstantIntegervEXT_IIP( int id, int value, IntPtr data );
        private delegate void DglGetMapAttribParameterfvNV_IIIaF( int target, int index, int pname, float[] rfparams );
        private delegate void DglGetMapAttribParameterfvNV_IIIP( int target, int index, int pname, IntPtr rfparams );
        private delegate void DglGetMapAttribParameterivNV_IIIaI( int target, int index, int pname, int[] riparams );
        private delegate void DglGetMapAttribParameterivNV_IIIP( int target, int index, int pname, IntPtr riparams );
        private delegate void DglGetMapControlPointsNV_IIIIIBaB( int target, int index, int itype, int ustride, int vstride, byte packed, byte[] points );
        private delegate void DglGetMapControlPointsNV_IIIIIBP( int target, int index, int itype, int ustride, int vstride, byte packed, IntPtr points );
        private delegate void DglGetMapdv_IIaD( int target, int query, double[] v );
        private delegate void DglGetMapdv_IIP( int target, int query, IntPtr v );
        private delegate void DglGetMapfv_IIaF( int target, int query, float[] v );
        private delegate void DglGetMapfv_IIP( int target, int query, IntPtr v );
        private delegate void DglGetMapiv_IIaI( int target, int query, int[] v );
        private delegate void DglGetMapiv_IIP( int target, int query, IntPtr v );
        private delegate void DglGetMapParameterfvNV_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetMapParameterfvNV_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetMapParameterivNV_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetMapParameterivNV_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetMaterialfv_IIaF( int face, int pname, float[] rfparams );
        private delegate void DglGetMaterialfv_IIP( int face, int pname, IntPtr rfparams );
        private delegate void DglGetMaterialiv_IIaI( int face, int pname, int[] riparams );
        private delegate void DglGetMaterialiv_IIP( int face, int pname, IntPtr riparams );
        private delegate void DglGetMinmax_IBIIaB( int target, byte reset, int format, int itype, byte[] values );
        private delegate void DglGetMinmax_IBIIaH( int target, byte reset, int format, int itype, short[] values );
        private delegate void DglGetMinmax_IBIIaI( int target, byte reset, int format, int itype, int[] values );
        private delegate void DglGetMinmax_IBIIaF( int target, byte reset, int format, int itype, float[] values );
        private delegate void DglGetMinmax_IBIIP( int target, byte reset, int format, int itype, IntPtr values );
        private delegate void DglGetMinmaxEXT_IBIIaB( int target, byte reset, int format, int itype, byte[] values );
        private delegate void DglGetMinmaxEXT_IBIIaH( int target, byte reset, int format, int itype, short[] values );
        private delegate void DglGetMinmaxEXT_IBIIaI( int target, byte reset, int format, int itype, int[] values );
        private delegate void DglGetMinmaxEXT_IBIIaF( int target, byte reset, int format, int itype, float[] values );
        private delegate void DglGetMinmaxEXT_IBIIP( int target, byte reset, int format, int itype, IntPtr values );
        private delegate void DglGetMinmaxParameterfv_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetMinmaxParameterfv_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetMinmaxParameterfvEXT_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetMinmaxParameterfvEXT_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetMinmaxParameteriv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetMinmaxParameteriv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetMinmaxParameterivEXT_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetMinmaxParameterivEXT_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetObjectBufferfvATI_IIaF( int buffer, int pname, float[] rfparams );
        private delegate void DglGetObjectBufferfvATI_IIP( int buffer, int pname, IntPtr rfparams );
        private delegate void DglGetObjectBufferivATI_IIaI( int buffer, int pname, int[] riparams );
        private delegate void DglGetObjectBufferivATI_IIP( int buffer, int pname, IntPtr riparams );
        private delegate void DglGetObjectParameterfvARB_IIaF( int obj, int pname, float[] rfparams );
        private delegate void DglGetObjectParameterfvARB_IIP( int obj, int pname, IntPtr rfparams );
        private delegate void DglGetObjectParameterivARB_IIaI( int obj, int pname, int[] riparams );
        private delegate void DglGetObjectParameterivARB_IIP( int obj, int pname, IntPtr riparams );
        private delegate void DglGetOcclusionQueryivNV_IIaI( int id, int pname, int[] riparams );
        private delegate void DglGetOcclusionQueryivNV_IIP( int id, int pname, IntPtr riparams );
        private delegate void DglGetOcclusionQueryuivNV_IIaI( int id, int pname, int[] riparams );
        private delegate void DglGetOcclusionQueryuivNV_IIP( int id, int pname, IntPtr riparams );
        private delegate void DglGetPixelMapfv_IaF( int map, float[] values );
        private delegate void DglGetPixelMapfv_IP( int map, IntPtr values );
        private delegate void DglGetPixelMapuiv_IaI( int map, int[] values );
        private delegate void DglGetPixelMapuiv_IP( int map, IntPtr values );
        private delegate void DglGetPixelMapusv_IaH( int map, short[] values );
        private delegate void DglGetPixelMapusv_IP( int map, IntPtr values );
        private delegate void DglGetPixelTexGenParameterfvSGIS_IaF( int pname, float[] rfparams );
        private delegate void DglGetPixelTexGenParameterfvSGIS_IP( int pname, IntPtr rfparams );
        private delegate void DglGetPixelTexGenParameterivSGIS_IaI( int pname, int[] riparams );
        private delegate void DglGetPixelTexGenParameterivSGIS_IP( int pname, IntPtr riparams );
        private delegate void DglGetPointerv_IrP( int pname, ref IntPtr rvparams );
        private delegate void DglGetPointervEXT_IrP( int pname, ref IntPtr rvparams );
        private delegate void DglGetPolygonStipple_aB( byte[] mask );
        private delegate void DglGetPolygonStipple_P( IntPtr mask );
        private delegate void DglGetProgramEnvParameterdvARB_IIaD( int target, int index, double[] rdparams );
        private delegate void DglGetProgramEnvParameterdvARB_IIP( int target, int index, IntPtr rdparams );
        private delegate void DglGetProgramEnvParameterfvARB_IIaF( int target, int index, float[] rfparams );
        private delegate void DglGetProgramEnvParameterfvARB_IIP( int target, int index, IntPtr rfparams );
        private delegate void DglGetProgramInfoLog_IIrIS( int program, int bufSize, ref int length, System.Text.StringBuilder infoLog );
        private delegate void DglGetProgramiv_IIaI( int program, int pname, int[] riparams );
        private delegate void DglGetProgramiv_IIP( int program, int pname, IntPtr riparams );
        private delegate void DglGetProgramivARB_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetProgramivARB_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetProgramivNV_IIaI( int id, int pname, int[] riparams );
        private delegate void DglGetProgramivNV_IIP( int id, int pname, IntPtr riparams );
        private delegate void DglGetProgramLocalParameterdvARB_IIaD( int target, int index, double[] rdparams );
        private delegate void DglGetProgramLocalParameterdvARB_IIP( int target, int index, IntPtr rdparams );
        private delegate void DglGetProgramLocalParameterfvARB_IIaF( int target, int index, float[] rfparams );
        private delegate void DglGetProgramLocalParameterfvARB_IIP( int target, int index, IntPtr rfparams );
        private delegate void DglGetProgramNamedParameterdvNV_IISaD( int id, int len, String name, double[] rdparams );
        private delegate void DglGetProgramNamedParameterdvNV_IISP( int id, int len, String name, IntPtr rdparams );
        private delegate void DglGetProgramNamedParameterfvNV_IISaF( int id, int len, String name, float[] rfparams );
        private delegate void DglGetProgramNamedParameterfvNV_IISP( int id, int len, String name, IntPtr rfparams );
        private delegate void DglGetProgramParameterdvNV_IIIaD( int target, int index, int pname, double[] rdparams );
        private delegate void DglGetProgramParameterdvNV_IIIP( int target, int index, int pname, IntPtr rdparams );
        private delegate void DglGetProgramParameterfvNV_IIIaF( int target, int index, int pname, float[] rfparams );
        private delegate void DglGetProgramParameterfvNV_IIIP( int target, int index, int pname, IntPtr rfparams );
        private delegate void DglGetProgramStringARB_IIaB( int target, int pname, byte[] rvstring );
        private delegate void DglGetProgramStringARB_IIP( int target, int pname, IntPtr rvstring );
        private delegate void DglGetProgramStringNV_IIaB( int id, int pname, byte[] program );
        private delegate void DglGetProgramStringNV_IIP( int id, int pname, IntPtr program );
        private delegate void DglGetQueryiv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetQueryiv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetQueryivARB_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetQueryivARB_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetQueryObjectiv_IIaI( int id, int pname, int[] riparams );
        private delegate void DglGetQueryObjectiv_IIP( int id, int pname, IntPtr riparams );
        private delegate void DglGetQueryObjectivARB_IIaI( int id, int pname, int[] riparams );
        private delegate void DglGetQueryObjectivARB_IIP( int id, int pname, IntPtr riparams );
        private delegate void DglGetQueryObjectuiv_IIaI( int id, int pname, int[] riparams );
        private delegate void DglGetQueryObjectuiv_IIP( int id, int pname, IntPtr riparams );
        private delegate void DglGetQueryObjectuivARB_IIaI( int id, int pname, int[] riparams );
        private delegate void DglGetQueryObjectuivARB_IIP( int id, int pname, IntPtr riparams );
        private delegate void DglGetRenderbufferParameterivEXT_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetRenderbufferParameterivEXT_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetSeparableFilter_IIIaBaBaB( int target, int format, int itype, byte[] row, byte[] column, byte[] span );
        private delegate void DglGetSeparableFilter_IIIaHaHaH( int target, int format, int itype, short[] row, short[] column, short[] span );
        private delegate void DglGetSeparableFilter_IIIaIaIaI( int target, int format, int itype, int[] row, int[] column, int[] span );
        private delegate void DglGetSeparableFilter_IIIaFaFaF( int target, int format, int itype, float[] row, float[] column, float[] span );
        private delegate void DglGetSeparableFilter_IIIPPP( int target, int format, int itype, IntPtr row, IntPtr column, IntPtr span );
        private delegate void DglGetSeparableFilterEXT_IIIaBaBaB( int target, int format, int itype, byte[] row, byte[] column, byte[] span );
        private delegate void DglGetSeparableFilterEXT_IIIaHaHaH( int target, int format, int itype, short[] row, short[] column, short[] span );
        private delegate void DglGetSeparableFilterEXT_IIIaIaIaI( int target, int format, int itype, int[] row, int[] column, int[] span );
        private delegate void DglGetSeparableFilterEXT_IIIaFaFaF( int target, int format, int itype, float[] row, float[] column, float[] span );
        private delegate void DglGetSeparableFilterEXT_IIIPPP( int target, int format, int itype, IntPtr row, IntPtr column, IntPtr span );
        private delegate void DglGetShaderInfoLog_IIrIS( int shader, int bufSize, ref int length, System.Text.StringBuilder infoLog );
        private delegate void DglGetShaderiv_IIaI( int shader, int pname, int[] riparams );
        private delegate void DglGetShaderiv_IIP( int shader, int pname, IntPtr riparams );
        private delegate void DglGetShaderSource_IIrIS( int shader, int bufSize, ref int length, String source );
        private delegate void DglGetShaderSourceARB_IIrIS( int obj, int maxLength, ref int length, String source );
        private delegate void DglGetSharpenTexFuncSGIS_IaF( int target, float[] points );
        private delegate void DglGetSharpenTexFuncSGIS_IP( int target, IntPtr points );
        private delegate IntPtr DglGetString_I( int name );
        private delegate void DglGetTexBumpParameterfvATI_IaF( int pname, float[] rfparam );
        private delegate void DglGetTexBumpParameterfvATI_IP( int pname, IntPtr rfparam );
        private delegate void DglGetTexBumpParameterivATI_IaI( int pname, int[] riparam );
        private delegate void DglGetTexBumpParameterivATI_IP( int pname, IntPtr riparam );
        private delegate void DglGetTexEnvfv_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetTexEnvfv_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetTexEnviv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetTexEnviv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetTexFilterFuncSGIS_IIaF( int target, int filter, float[] weights );
        private delegate void DglGetTexFilterFuncSGIS_IIP( int target, int filter, IntPtr weights );
        private delegate void DglGetTexGendv_IIaD( int coord, int pname, double[] rdparams );
        private delegate void DglGetTexGendv_IIP( int coord, int pname, IntPtr rdparams );
        private delegate void DglGetTexGenfv_IIaF( int coord, int pname, float[] rfparams );
        private delegate void DglGetTexGenfv_IIP( int coord, int pname, IntPtr rfparams );
        private delegate void DglGetTexGeniv_IIaI( int coord, int pname, int[] riparams );
        private delegate void DglGetTexGeniv_IIP( int coord, int pname, IntPtr riparams );
        private delegate void DglGetTexImage_IIIIaB( int target, int level, int format, int itype, byte[] pixels );
        private delegate void DglGetTexImage_IIIIaH( int target, int level, int format, int itype, short[] pixels );
        private delegate void DglGetTexImage_IIIIaI( int target, int level, int format, int itype, int[] pixels );
        private delegate void DglGetTexImage_IIIIaF( int target, int level, int format, int itype, float[] pixels );
        private delegate void DglGetTexImage_IIIIP( int target, int level, int format, int itype, IntPtr pixels );
        private delegate void DglGetTexLevelParameterfv_IIIaF( int target, int level, int pname, float[] rfparams );
        private delegate void DglGetTexLevelParameterfv_IIIP( int target, int level, int pname, IntPtr rfparams );
        private delegate void DglGetTexLevelParameteriv_IIIaI( int target, int level, int pname, int[] riparams );
        private delegate void DglGetTexLevelParameteriv_IIIP( int target, int level, int pname, IntPtr riparams );
        private delegate void DglGetTexParameterfv_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglGetTexParameterfv_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglGetTexParameteriv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglGetTexParameteriv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglGetTrackMatrixivNV_IIIaI( int target, int address, int pname, int[] riparams );
        private delegate void DglGetTrackMatrixivNV_IIIP( int target, int address, int pname, IntPtr riparams );
        private delegate void DglGetUniformfv_IIaF( int program, int location, float[] rfparams );
        private delegate void DglGetUniformfv_IIP( int program, int location, IntPtr rfparams );
        private delegate void DglGetUniformfvARB_IIaF( int programObj, int location, float[] rfparams );
        private delegate void DglGetUniformfvARB_IIP( int programObj, int location, IntPtr rfparams );
        private delegate void DglGetUniformiv_IIaI( int program, int location, int[] riparams );
        private delegate void DglGetUniformiv_IIP( int program, int location, IntPtr riparams );
        private delegate void DglGetUniformivARB_IIaI( int programObj, int location, int[] riparams );
        private delegate void DglGetUniformivARB_IIP( int programObj, int location, IntPtr riparams );
        private delegate int DglGetUniformLocation_IS( int program, String name );
        private delegate int DglGetUniformLocationARB_IS( int programObj, String name );
        private delegate void DglGetVariantArrayObjectfvATI_IIaF( int id, int pname, float[] rfparams );
        private delegate void DglGetVariantArrayObjectfvATI_IIP( int id, int pname, IntPtr rfparams );
        private delegate void DglGetVariantArrayObjectivATI_IIaI( int id, int pname, int[] riparams );
        private delegate void DglGetVariantArrayObjectivATI_IIP( int id, int pname, IntPtr riparams );
        private delegate void DglGetVariantBooleanvEXT_IIaB( int id, int value, byte[] data );
        private delegate void DglGetVariantBooleanvEXT_IIP( int id, int value, IntPtr data );
        private delegate void DglGetVariantFloatvEXT_IIaF( int id, int value, float[] data );
        private delegate void DglGetVariantFloatvEXT_IIP( int id, int value, IntPtr data );
        private delegate void DglGetVariantIntegervEXT_IIaI( int id, int value, int[] data );
        private delegate void DglGetVariantIntegervEXT_IIP( int id, int value, IntPtr data );
        private delegate void DglGetVariantPointervEXT_IIrP( int id, int value, ref IntPtr data );
        private delegate void DglGetVertexAttribArrayObjectfvATI_IIaF( int index, int pname, float[] rfparams );
        private delegate void DglGetVertexAttribArrayObjectfvATI_IIP( int index, int pname, IntPtr rfparams );
        private delegate void DglGetVertexAttribArrayObjectivATI_IIaI( int index, int pname, int[] riparams );
        private delegate void DglGetVertexAttribArrayObjectivATI_IIP( int index, int pname, IntPtr riparams );
        private delegate void DglGetVertexAttribdv_IIaD( int index, int pname, double[] rdparams );
        private delegate void DglGetVertexAttribdv_IIP( int index, int pname, IntPtr rdparams );
        private delegate void DglGetVertexAttribdvARB_IIaD( int index, int pname, double[] rdparams );
        private delegate void DglGetVertexAttribdvARB_IIP( int index, int pname, IntPtr rdparams );
        private delegate void DglGetVertexAttribdvNV_IIaD( int index, int pname, double[] rdparams );
        private delegate void DglGetVertexAttribdvNV_IIP( int index, int pname, IntPtr rdparams );
        private delegate void DglGetVertexAttribfv_IIaF( int index, int pname, float[] rfparams );
        private delegate void DglGetVertexAttribfv_IIP( int index, int pname, IntPtr rfparams );
        private delegate void DglGetVertexAttribfvARB_IIaF( int index, int pname, float[] rfparams );
        private delegate void DglGetVertexAttribfvARB_IIP( int index, int pname, IntPtr rfparams );
        private delegate void DglGetVertexAttribfvNV_IIaF( int index, int pname, float[] rfparams );
        private delegate void DglGetVertexAttribfvNV_IIP( int index, int pname, IntPtr rfparams );
        private delegate void DglGetVertexAttribiv_IIaI( int index, int pname, int[] riparams );
        private delegate void DglGetVertexAttribiv_IIP( int index, int pname, IntPtr riparams );
        private delegate void DglGetVertexAttribivARB_IIaI( int index, int pname, int[] riparams );
        private delegate void DglGetVertexAttribivARB_IIP( int index, int pname, IntPtr riparams );
        private delegate void DglGetVertexAttribivNV_IIaI( int index, int pname, int[] riparams );
        private delegate void DglGetVertexAttribivNV_IIP( int index, int pname, IntPtr riparams );
        private delegate void DglGetVertexAttribPointerv_IIrP( int index, int pname, ref IntPtr pointer );
        private delegate void DglGetVertexAttribPointervARB_IIrP( int index, int pname, ref IntPtr pointer );
        private delegate void DglGetVertexAttribPointervNV_IIrP( int index, int pname, ref IntPtr pointer );
        private delegate void DglGlobalAlphaFactorbSUN_B( byte factor );
        private delegate void DglGlobalAlphaFactordSUN_D( double factor );
        private delegate void DglGlobalAlphaFactorfSUN_F( float factor );
        private delegate void DglGlobalAlphaFactoriSUN_I( int factor );
        private delegate void DglGlobalAlphaFactorsSUN_H( short factor );
        private delegate void DglGlobalAlphaFactorubSUN_B( byte factor );
        private delegate void DglGlobalAlphaFactoruiSUN_I( int factor );
        private delegate void DglGlobalAlphaFactorusSUN_H( short factor );
        private delegate void DglHint_II( int target, int mode );
        private delegate void DglHintPGI_II( int target, int mode );
        private delegate void DglHistogram_IIIB( int target, int width, int internalformat, byte sink );
        private delegate void DglHistogramEXT_IIIB( int target, int width, int internalformat, byte sink );
        private delegate void DglIglooInterfaceSGIX_IaB( int pname, byte[] rvparams );
        private delegate void DglIglooInterfaceSGIX_IP( int pname, IntPtr rvparams );
        private delegate void DglImageTransformParameterfHP_IIF( int target, int pname, float fparam );
        private delegate void DglImageTransformParameterfvHP_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglImageTransformParameterfvHP_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglImageTransformParameteriHP_III( int target, int pname, int iparam );
        private delegate void DglImageTransformParameterivHP_IIaI( int target, int pname, int[] riparams );
        private delegate void DglImageTransformParameterivHP_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglIndexd_D( double c );
        private delegate void DglIndexdv_aD( double[] c );
        private delegate void DglIndexdv_P( IntPtr c );
        private delegate void DglIndexf_F( float c );
        private delegate void DglIndexFuncEXT_IF( int func, float fref );
        private delegate void DglIndexfv_aF( float[] c );
        private delegate void DglIndexfv_P( IntPtr c );
        private delegate void DglIndexi_I( int c );
        private delegate void DglIndexiv_aI( int[] c );
        private delegate void DglIndexiv_P( IntPtr c );
        private delegate void DglIndexMask_I( int mask );
        private delegate void DglIndexMaterialEXT_II( int face, int mode );
        private delegate void DglIndexPointer_IIaB( int itype, int stride, byte[] pointer );
        private delegate void DglIndexPointer_IIaH( int itype, int stride, short[] pointer );
        private delegate void DglIndexPointer_IIaI( int itype, int stride, int[] pointer );
        private delegate void DglIndexPointer_IIaF( int itype, int stride, float[] pointer );
        private delegate void DglIndexPointer_IIaD( int itype, int stride, double[] pointer );
        private delegate void DglIndexPointer_IIP( int itype, int stride, IntPtr pointer );
        private delegate void DglIndexPointerEXT_IIIaB( int itype, int stride, int count, byte[] pointer );
        private delegate void DglIndexPointerEXT_IIIaH( int itype, int stride, int count, short[] pointer );
        private delegate void DglIndexPointerEXT_IIIaI( int itype, int stride, int count, int[] pointer );
        private delegate void DglIndexPointerEXT_IIIaF( int itype, int stride, int count, float[] pointer );
        private delegate void DglIndexPointerEXT_IIIaD( int itype, int stride, int count, double[] pointer );
        private delegate void DglIndexPointerEXT_IIIP( int itype, int stride, int count, IntPtr pointer );
        private delegate void DglIndexPointerListIBM_IIrPaB( int itype, int stride, ref IntPtr pointer, byte[] ptrstride );
        private delegate void DglIndexPointerListIBM_IIrPaH( int itype, int stride, ref IntPtr pointer, short[] ptrstride );
        private delegate void DglIndexPointerListIBM_IIrPaI( int itype, int stride, ref IntPtr pointer, int[] ptrstride );
        private delegate void DglIndexPointerListIBM_IIrPaF( int itype, int stride, ref IntPtr pointer, float[] ptrstride );
        private delegate void DglIndexPointerListIBM_IIrPaD( int itype, int stride, ref IntPtr pointer, double[] ptrstride );
        private delegate void DglIndexPointerListIBM_IIrPP( int itype, int stride, ref IntPtr pointer, IntPtr ptrstride );
        private delegate void DglIndexs_H( short c );
        private delegate void DglIndexsv_aH( short[] c );
        private delegate void DglIndexsv_P( IntPtr c );
        private delegate void DglIndexub_B( byte c );
        private delegate void DglIndexubv_aB( byte[] c );
        private delegate void DglIndexubv_P( IntPtr c );
        private delegate void DglInitNames_V();
        private delegate void DglInsertComponentEXT_III( int res, int src, int num );
        private delegate void DglInstrumentsBufferSGIX_IaI( int size, int[] buffer );
        private delegate void DglInstrumentsBufferSGIX_IP( int size, IntPtr buffer );
        private delegate void DglInterleavedArrays_IIaB( int format, int stride, byte[] pointer );
        private delegate void DglInterleavedArrays_IIaF( int format, int stride, float[] pointer );
        private delegate void DglInterleavedArrays_IIP( int format, int stride, IntPtr pointer );
        private delegate byte DglIsAsyncMarkerSGIX_I( int marker );
        private delegate byte DglIsBuffer_I( int buffer );
        private delegate byte DglIsBufferARB_I( int buffer );
        private delegate byte DglIsEnabled_I( int cap );
        private delegate byte DglIsFenceAPPLE_I( int fence );
        private delegate byte DglIsFenceNV_I( int fence );
        private delegate byte DglIsFramebufferEXT_I( int framebuffer );
        private delegate byte DglIsList_I( int list );
        private delegate byte DglIsObjectBufferATI_I( int buffer );
        private delegate byte DglIsOcclusionQueryNV_I( int id );
        private delegate byte DglIsProgram_I( int program );
        private delegate byte DglIsProgramARB_I( int program );
        private delegate byte DglIsProgramNV_I( int id );
        private delegate byte DglIsQuery_I( int id );
        private delegate byte DglIsQueryARB_I( int id );
        private delegate byte DglIsRenderbufferEXT_I( int renderbuffer );
        private delegate byte DglIsShader_I( int shader );
        private delegate byte DglIsTexture_I( int texture );
        private delegate byte DglIsTextureEXT_I( int texture );
        private delegate byte DglIsVariantEnabledEXT_II( int id, int cap );
        private delegate byte DglIsVertexArrayAPPLE_I( int array );
        private delegate void DglLightEnviSGIX_II( int pname, int iparam );
        private delegate void DglLightf_IIF( int light, int pname, float fparam );
        private delegate void DglLightfv_IIaF( int light, int pname, float[] rfparams );
        private delegate void DglLightfv_IIP( int light, int pname, IntPtr rfparams );
        private delegate void DglLighti_III( int light, int pname, int iparam );
        private delegate void DglLightiv_IIaI( int light, int pname, int[] riparams );
        private delegate void DglLightiv_IIP( int light, int pname, IntPtr riparams );
        private delegate void DglLightModelf_IF( int pname, float fparam );
        private delegate void DglLightModelfv_IaF( int pname, float[] rfparams );
        private delegate void DglLightModelfv_IP( int pname, IntPtr rfparams );
        private delegate void DglLightModeli_II( int pname, int iparam );
        private delegate void DglLightModeliv_IaI( int pname, int[] riparams );
        private delegate void DglLightModeliv_IP( int pname, IntPtr riparams );
        private delegate void DglLineStipple_IH( int factor, short pattern );
        private delegate void DglLineWidth_F( float width );
        private delegate void DglLinkProgram_I( int program );
        private delegate void DglLinkProgramARB_I( int programObj );
        private delegate void DglListBase_I( int ibase );
        private delegate void DglListParameterfSGIX_IIF( int list, int pname, float fparam );
        private delegate void DglListParameterfvSGIX_IIaF( int list, int pname, float[] rfparams );
        private delegate void DglListParameterfvSGIX_IIP( int list, int pname, IntPtr rfparams );
        private delegate void DglListParameteriSGIX_III( int list, int pname, int iparam );
        private delegate void DglListParameterivSGIX_IIaI( int list, int pname, int[] riparams );
        private delegate void DglListParameterivSGIX_IIP( int list, int pname, IntPtr riparams );
        private delegate void DglLoadIdentity_V();
        private delegate void DglLoadIdentityDeformationMapSGIX_I( int mask );
        private delegate void DglLoadMatrixd_aD( double[] m );
        private delegate void DglLoadMatrixd_P( IntPtr m );
        private delegate void DglLoadMatrixf_aF( float[] m );
        private delegate void DglLoadMatrixf_P( IntPtr m );
        private delegate void DglLoadName_I( int name );
        private delegate void DglLoadProgramNV_IIIaB( int target, int id, int len, byte[] program );
        private delegate void DglLoadProgramNV_IIIP( int target, int id, int len, IntPtr program );
        private delegate void DglLoadTransposeMatrixd_aD( double[] m );
        private delegate void DglLoadTransposeMatrixd_P( IntPtr m );
        private delegate void DglLoadTransposeMatrixdARB_aD( double[] m );
        private delegate void DglLoadTransposeMatrixdARB_P( IntPtr m );
        private delegate void DglLoadTransposeMatrixf_aF( float[] m );
        private delegate void DglLoadTransposeMatrixf_P( IntPtr m );
        private delegate void DglLoadTransposeMatrixfARB_aF( float[] m );
        private delegate void DglLoadTransposeMatrixfARB_P( IntPtr m );
        private delegate void DglLockArraysEXT_II( int first, int count );
        private delegate void DglLogicOp_I( int opcode );
        private delegate void DglMap1d_IDDIIaD( int target, double u1, double u2, int stride, int order, double[] points );
        private delegate void DglMap1d_IDDIIP( int target, double u1, double u2, int stride, int order, IntPtr points );
        private delegate void DglMap1f_IFFIIaF( int target, float u1, float u2, int stride, int order, float[] points );
        private delegate void DglMap1f_IFFIIP( int target, float u1, float u2, int stride, int order, IntPtr points );
        private delegate void DglMap2d_IDDIIDDIIaD( int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points );
        private delegate void DglMap2d_IDDIIDDIIP( int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, IntPtr points );
        private delegate void DglMap2f_IFFIIFFIIaF( int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points );
        private delegate void DglMap2f_IFFIIFFIIP( int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, IntPtr points );
        private delegate IntPtr DglMapBuffer_II( int target, int access );
        private delegate IntPtr DglMapBufferARB_II( int target, int access );
        private delegate void DglMapControlPointsNV_IIIIIIIBaB( int target, int index, int itype, int ustride, int vstride, int uorder, int vorder, byte packed, byte[] points );
        private delegate void DglMapControlPointsNV_IIIIIIIBaF( int target, int index, int itype, int ustride, int vstride, int uorder, int vorder, byte packed, float[] points );
        private delegate void DglMapControlPointsNV_IIIIIIIBP( int target, int index, int itype, int ustride, int vstride, int uorder, int vorder, byte packed, IntPtr points );
        private delegate void DglMapGrid1d_IDD( int un, double u1, double u2 );
        private delegate void DglMapGrid1f_IFF( int un, float u1, float u2 );
        private delegate void DglMapGrid2d_IDDIDD( int un, double u1, double u2, int vn, double v1, double v2 );
        private delegate void DglMapGrid2f_IFFIFF( int un, float u1, float u2, int vn, float v1, float v2 );
        private delegate IntPtr DglMapObjectBufferATI_I( int buffer );
        private delegate void DglMapParameterfvNV_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglMapParameterfvNV_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglMapParameterivNV_IIaI( int target, int pname, int[] riparams );
        private delegate void DglMapParameterivNV_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglMaterialf_IIF( int face, int pname, float param );
        private delegate void DglMaterialfv_IIaF( int face, int pname, float[] rfparams );
        private delegate void DglMaterialfv_IIP( int face, int pname, IntPtr rfparams );
        private delegate void DglMateriali_III( int face, int pname, int iparam );
        private delegate void DglMaterialiv_IIaI( int face, int pname, int[] riparams );
        private delegate void DglMaterialiv_IIP( int face, int pname, IntPtr riparams );
        private delegate void DglMatrixIndexPointerARB_IIIaI( int size, int itype, int stride, int[] pointer );
        private delegate void DglMatrixIndexPointerARB_IIIP( int size, int itype, int stride, IntPtr pointer );
        private delegate void DglMatrixIndexubvARB_IaB( int size, byte[] indices );
        private delegate void DglMatrixIndexubvARB_IP( int size, IntPtr indices );
        private delegate void DglMatrixIndexuivARB_IaI( int size, int[] indices );
        private delegate void DglMatrixIndexuivARB_IP( int size, IntPtr indices );
        private delegate void DglMatrixIndexusvARB_IaH( int size, short[] indices );
        private delegate void DglMatrixIndexusvARB_IP( int size, IntPtr indices );
        private delegate void DglMatrixMode_I( int mode );
        private delegate void DglMinmax_IIB( int target, int internalformat, byte sink );
        private delegate void DglMinmaxEXT_IIB( int target, int internalformat, byte sink );
        private delegate void DglMultiDrawArrays_IrIrII( int mode, ref int first, ref int count, int primcount );
        private delegate void DglMultiDrawArraysEXT_IrIrII( int mode, ref int first, ref int count, int primcount );
        private delegate void DglMultiDrawElementArrayAPPLE_IrIrII( int mode, ref int first, ref int count, int primcount );
        private delegate void DglMultiDrawElements_IrIIrPI( int mode, ref int count, int itype, ref IntPtr indices, int primcount );
        private delegate void DglMultiDrawElementsEXT_IrIIrPI( int mode, ref int count, int itype, ref IntPtr indices, int primcount );
        private delegate void DglMultiDrawRangeElementArrayAPPLE_IIIrIrII( int mode, int start, int end, ref int first, ref int count, int primcount );
        private delegate void DglMultiModeDrawArraysIBM_rIrIrIII( ref int mode, ref int first, ref int count, int primcount, int modestride );
        private delegate void DglMultiModeDrawElementsIBM_rIrIIrPII( ref int mode, ref int count, int itype, ref IntPtr indices, int primcount, int modestride );
        private delegate void DglMultiTexCoord1d_ID( int target, double s );
        private delegate void DglMultiTexCoord1dARB_ID( int target, double s );
        private delegate void DglMultiTexCoord1dv_IaD( int target, double[] v );
        private delegate void DglMultiTexCoord1dv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord1dvARB_IaD( int target, double[] v );
        private delegate void DglMultiTexCoord1dvARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord1f_IF( int target, float s );
        private delegate void DglMultiTexCoord1fARB_IF( int target, float s );
        private delegate void DglMultiTexCoord1fv_IaF( int target, float[] v );
        private delegate void DglMultiTexCoord1fv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord1fvARB_IaF( int target, float[] v );
        private delegate void DglMultiTexCoord1fvARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord1hNV_IH( int target, short s );
        private delegate void DglMultiTexCoord1hvNV_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord1hvNV_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord1i_II( int target, int s );
        private delegate void DglMultiTexCoord1iARB_II( int target, int s );
        private delegate void DglMultiTexCoord1iv_IaI( int target, int[] v );
        private delegate void DglMultiTexCoord1iv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord1ivARB_IaI( int target, int[] v );
        private delegate void DglMultiTexCoord1ivARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord1s_IH( int target, short s );
        private delegate void DglMultiTexCoord1sARB_IH( int target, short s );
        private delegate void DglMultiTexCoord1sv_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord1sv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord1svARB_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord1svARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord2d_IDD( int target, double s, double t );
        private delegate void DglMultiTexCoord2dARB_IDD( int target, double s, double t );
        private delegate void DglMultiTexCoord2dv_IaD( int target, double[] v );
        private delegate void DglMultiTexCoord2dv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord2dvARB_IaD( int target, double[] v );
        private delegate void DglMultiTexCoord2dvARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord2f_IFF( int target, float s, float t );
        private delegate void DglMultiTexCoord2fARB_IFF( int target, float s, float t );
        private delegate void DglMultiTexCoord2fv_IaF( int target, float[] v );
        private delegate void DglMultiTexCoord2fv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord2fvARB_IaF( int target, float[] v );
        private delegate void DglMultiTexCoord2fvARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord2hNV_IHH( int target, short s, short t );
        private delegate void DglMultiTexCoord2hvNV_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord2hvNV_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord2i_III( int target, int s, int t );
        private delegate void DglMultiTexCoord2iARB_III( int target, int s, int t );
        private delegate void DglMultiTexCoord2iv_IaI( int target, int[] v );
        private delegate void DglMultiTexCoord2iv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord2ivARB_IaI( int target, int[] v );
        private delegate void DglMultiTexCoord2ivARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord2s_IHH( int target, short s, short t );
        private delegate void DglMultiTexCoord2sARB_IHH( int target, short s, short t );
        private delegate void DglMultiTexCoord2sv_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord2sv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord2svARB_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord2svARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord3d_IDDD( int target, double s, double t, double r );
        private delegate void DglMultiTexCoord3dARB_IDDD( int target, double s, double t, double r );
        private delegate void DglMultiTexCoord3dv_IaD( int target, double[] v );
        private delegate void DglMultiTexCoord3dv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord3dvARB_IaD( int target, double[] v );
        private delegate void DglMultiTexCoord3dvARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord3f_IFFF( int target, float s, float t, float r );
        private delegate void DglMultiTexCoord3fARB_IFFF( int target, float s, float t, float r );
        private delegate void DglMultiTexCoord3fv_IaF( int target, float[] v );
        private delegate void DglMultiTexCoord3fv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord3fvARB_IaF( int target, float[] v );
        private delegate void DglMultiTexCoord3fvARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord3hNV_IHHH( int target, short s, short t, short r );
        private delegate void DglMultiTexCoord3hvNV_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord3hvNV_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord3i_IIII( int target, int s, int t, int r );
        private delegate void DglMultiTexCoord3iARB_IIII( int target, int s, int t, int r );
        private delegate void DglMultiTexCoord3iv_IaI( int target, int[] v );
        private delegate void DglMultiTexCoord3iv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord3ivARB_IaI( int target, int[] v );
        private delegate void DglMultiTexCoord3ivARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord3s_IHHH( int target, short s, short t, short r );
        private delegate void DglMultiTexCoord3sARB_IHHH( int target, short s, short t, short r );
        private delegate void DglMultiTexCoord3sv_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord3sv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord3svARB_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord3svARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord4d_IDDDD( int target, double s, double t, double r, double q );
        private delegate void DglMultiTexCoord4dARB_IDDDD( int target, double s, double t, double r, double q );
        private delegate void DglMultiTexCoord4dv_IaD( int target, double[] v );
        private delegate void DglMultiTexCoord4dv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord4dvARB_IaD( int target, double[] v );
        private delegate void DglMultiTexCoord4dvARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord4f_IFFFF( int target, float s, float t, float r, float q );
        private delegate void DglMultiTexCoord4fARB_IFFFF( int target, float s, float t, float r, float q );
        private delegate void DglMultiTexCoord4fv_IaF( int target, float[] v );
        private delegate void DglMultiTexCoord4fv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord4fvARB_IaF( int target, float[] v );
        private delegate void DglMultiTexCoord4fvARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord4hNV_IHHHH( int target, short s, short t, short r, short q );
        private delegate void DglMultiTexCoord4hvNV_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord4hvNV_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord4i_IIIII( int target, int s, int t, int r, int q );
        private delegate void DglMultiTexCoord4iARB_IIIII( int target, int s, int t, int r, int q );
        private delegate void DglMultiTexCoord4iv_IaI( int target, int[] v );
        private delegate void DglMultiTexCoord4iv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord4ivARB_IaI( int target, int[] v );
        private delegate void DglMultiTexCoord4ivARB_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord4s_IHHHH( int target, short s, short t, short r, short q );
        private delegate void DglMultiTexCoord4sARB_IHHHH( int target, short s, short t, short r, short q );
        private delegate void DglMultiTexCoord4sv_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord4sv_IP( int target, IntPtr v );
        private delegate void DglMultiTexCoord4svARB_IaH( int target, short[] v );
        private delegate void DglMultiTexCoord4svARB_IP( int target, IntPtr v );
        private delegate void DglMultMatrixd_aD( double[] m );
        private delegate void DglMultMatrixd_P( IntPtr m );
        private delegate void DglMultMatrixf_aF( float[] m );
        private delegate void DglMultMatrixf_P( IntPtr m );
        private delegate void DglMultTransposeMatrixd_aD( double[] m );
        private delegate void DglMultTransposeMatrixd_P( IntPtr m );
        private delegate void DglMultTransposeMatrixdARB_aD( double[] m );
        private delegate void DglMultTransposeMatrixdARB_P( IntPtr m );
        private delegate void DglMultTransposeMatrixf_aF( float[] m );
        private delegate void DglMultTransposeMatrixf_P( IntPtr m );
        private delegate void DglMultTransposeMatrixfARB_aF( float[] m );
        private delegate void DglMultTransposeMatrixfARB_P( IntPtr m );
        private delegate void DglNewList_II( int list, int mode );
        private delegate int DglNewObjectBufferATI_IaBI( int size, byte[] pointer, int usage );
        private delegate int DglNewObjectBufferATI_IPI( int size, IntPtr pointer, int usage );
        private delegate void DglNormal3b_BBB( byte nx, byte ny, byte nz );
        private delegate void DglNormal3bv_aB( byte[] v );
        private delegate void DglNormal3bv_P( IntPtr v );
        private delegate void DglNormal3d_DDD( double nx, double ny, double nz );
        private delegate void DglNormal3dv_aD( double[] v );
        private delegate void DglNormal3dv_P( IntPtr v );
        private delegate void DglNormal3f_FFF( float nx, float ny, float nz );
        private delegate void DglNormal3fv_aF( float[] v );
        private delegate void DglNormal3fv_P( IntPtr v );
        private delegate void DglNormal3fVertex3fSUN_FFFFFF( float nx, float ny, float nz, float x, float y, float z );
        private delegate void DglNormal3fVertex3fvSUN_aFaF( float[] n, float[] v );
        private delegate void DglNormal3fVertex3fvSUN_PP( IntPtr n, IntPtr v );
        private delegate void DglNormal3hNV_HHH( short nx, short ny, short nz );
        private delegate void DglNormal3hvNV_aH( short[] v );
        private delegate void DglNormal3hvNV_P( IntPtr v );
        private delegate void DglNormal3i_III( int nx, int ny, int nz );
        private delegate void DglNormal3iv_aI( int[] v );
        private delegate void DglNormal3iv_P( IntPtr v );
        private delegate void DglNormal3s_HHH( short nx, short ny, short nz );
        private delegate void DglNormal3sv_aH( short[] v );
        private delegate void DglNormal3sv_P( IntPtr v );
        private delegate void DglNormalPointer_IIaB( int itype, int stride, byte[] pointer );
        private delegate void DglNormalPointer_IIaH( int itype, int stride, short[] pointer );
        private delegate void DglNormalPointer_IIaI( int itype, int stride, int[] pointer );
        private delegate void DglNormalPointer_IIaF( int itype, int stride, float[] pointer );
        private delegate void DglNormalPointer_IIaD( int itype, int stride, double[] pointer );
        private delegate void DglNormalPointer_IIP( int itype, int stride, IntPtr pointer );
        private delegate void DglNormalPointerEXT_IIIaB( int itype, int stride, int count, byte[] pointer );
        private delegate void DglNormalPointerEXT_IIIaH( int itype, int stride, int count, short[] pointer );
        private delegate void DglNormalPointerEXT_IIIaI( int itype, int stride, int count, int[] pointer );
        private delegate void DglNormalPointerEXT_IIIaF( int itype, int stride, int count, float[] pointer );
        private delegate void DglNormalPointerEXT_IIIaD( int itype, int stride, int count, double[] pointer );
        private delegate void DglNormalPointerEXT_IIIP( int itype, int stride, int count, IntPtr pointer );
        private delegate void DglNormalPointerListIBM_IIrPI( int itype, int stride, ref IntPtr pointer, int ptrstride );
        private delegate void DglNormalPointervINTEL_IrP( int itype, ref IntPtr pointer );
        private delegate void DglNormalStream3bATI_IBBB( int stream, byte nx, byte ny, byte nz );
        private delegate void DglNormalStream3bvATI_IaB( int stream, byte[] coords );
        private delegate void DglNormalStream3bvATI_IP( int stream, IntPtr coords );
        private delegate void DglNormalStream3dATI_IDDD( int stream, double nx, double ny, double nz );
        private delegate void DglNormalStream3dvATI_IaD( int stream, double[] coords );
        private delegate void DglNormalStream3dvATI_IP( int stream, IntPtr coords );
        private delegate void DglNormalStream3fATI_IFFF( int stream, float nx, float ny, float nz );
        private delegate void DglNormalStream3fvATI_IaF( int stream, float[] coords );
        private delegate void DglNormalStream3fvATI_IP( int stream, IntPtr coords );
        private delegate void DglNormalStream3iATI_IIII( int stream, int nx, int ny, int nz );
        private delegate void DglNormalStream3ivATI_IaI( int stream, int[] coords );
        private delegate void DglNormalStream3ivATI_IP( int stream, IntPtr coords );
        private delegate void DglNormalStream3sATI_IHHH( int stream, short nx, short ny, short nz );
        private delegate void DglNormalStream3svATI_IaH( int stream, short[] coords );
        private delegate void DglNormalStream3svATI_IP( int stream, IntPtr coords );
        private delegate void DglOrtho_DDDDDD( double left, double right, double bottom, double top, double zNear, double zFar );
        private delegate void DglPassTexCoordATI_III( int dst, int coord, int swizzle );
        private delegate void DglPassThrough_F( float token );
        private delegate void DglPixelDataRangeNV_IIaB( int target, int length, byte[] pointer );
        private delegate void DglPixelDataRangeNV_IIP( int target, int length, IntPtr pointer );
        private delegate void DglPixelMapfv_IIaF( int map, int mapsize, float[] values );
        private delegate void DglPixelMapfv_IIP( int map, int mapsize, IntPtr values );
        private delegate void DglPixelMapuiv_IIaI( int map, int mapsize, int[] values );
        private delegate void DglPixelMapuiv_IIP( int map, int mapsize, IntPtr values );
        private delegate void DglPixelMapusv_IIaH( int map, int mapsize, short[] values );
        private delegate void DglPixelMapusv_IIP( int map, int mapsize, IntPtr values );
        private delegate void DglPixelStoref_IF( int pname, float param );
        private delegate void DglPixelStorei_II( int pname, int param );
        private delegate void DglPixelTexGenParameterfSGIS_IF( int pname, float fparam );
        private delegate void DglPixelTexGenParameterfvSGIS_IaF( int pname, float[] rfparams );
        private delegate void DglPixelTexGenParameterfvSGIS_IP( int pname, IntPtr rfparams );
        private delegate void DglPixelTexGenParameteriSGIS_II( int pname, int iparam );
        private delegate void DglPixelTexGenParameterivSGIS_IaI( int pname, int[] riparams );
        private delegate void DglPixelTexGenParameterivSGIS_IP( int pname, IntPtr riparams );
        private delegate void DglPixelTexGenSGIX_I( int mode );
        private delegate void DglPixelTransferf_IF( int pname, float param );
        private delegate void DglPixelTransferi_II( int pname, int param );
        private delegate void DglPixelTransformParameterfEXT_IIF( int target, int pname, float fparam );
        private delegate void DglPixelTransformParameterfvEXT_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglPixelTransformParameterfvEXT_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglPixelTransformParameteriEXT_III( int target, int pname, int iparam );
        private delegate void DglPixelTransformParameterivEXT_IIaI( int target, int pname, int[] riparams );
        private delegate void DglPixelTransformParameterivEXT_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglPixelZoom_FF( float xfactor, float yfactor );
        private delegate void DglPNTrianglesfATI_IF( int pname, float fparam );
        private delegate void DglPNTrianglesiATI_II( int pname, int iparam );
        private delegate void DglPointParameterf_IF( int pname, float fparam );
        private delegate void DglPointParameterfARB_IF( int pname, float fparam );
        private delegate void DglPointParameterfEXT_IF( int pname, float fparam );
        private delegate void DglPointParameterfSGIS_IF( int pname, float fparam );
        private delegate void DglPointParameterfv_IaF( int pname, float[] rfparams );
        private delegate void DglPointParameterfv_IP( int pname, IntPtr rfparams );
        private delegate void DglPointParameterfvARB_IaF( int pname, float[] rfparams );
        private delegate void DglPointParameterfvARB_IP( int pname, IntPtr rfparams );
        private delegate void DglPointParameterfvEXT_IaF( int pname, float[] rfparams );
        private delegate void DglPointParameterfvEXT_IP( int pname, IntPtr rfparams );
        private delegate void DglPointParameterfvSGIS_IaF( int pname, float[] rfparams );
        private delegate void DglPointParameterfvSGIS_IP( int pname, IntPtr rfparams );
        private delegate void DglPointParameteri_II( int pname, int iparam );
        private delegate void DglPointParameteriNV_II( int pname, int iparam );
        private delegate void DglPointParameteriv_IaI( int pname, int[] riparams );
        private delegate void DglPointParameteriv_IP( int pname, IntPtr riparams );
        private delegate void DglPointParameterivNV_IaI( int pname, int[] riparams );
        private delegate void DglPointParameterivNV_IP( int pname, IntPtr riparams );
        private delegate void DglPointSize_F( float size );
        private delegate int DglPollAsyncSGIX_rI( ref int markerp );
        private delegate int DglPollInstrumentsSGIX_rI( ref int marker_p );
        private delegate void DglPolygonMode_II( int face, int mode );
        private delegate void DglPolygonOffset_FF( float factor, float units );
        private delegate void DglPolygonOffsetEXT_FF( float factor, float bias );
        private delegate void DglPolygonStipple_aB( byte[] mask );
        private delegate void DglPolygonStipple_P( IntPtr mask );
        private delegate void DglPopAttrib_V();
        private delegate void DglPopClientAttrib_V();
        private delegate void DglPopMatrix_V();
        private delegate void DglPopName_V();
        private delegate void DglPrimitiveRestartIndexNV_I( int index );
        private delegate void DglPrimitiveRestartNV_V();
        private delegate void DglPrioritizeTextures_IaIaF( int n, int[] textures, float[] priorities );
        private delegate void DglPrioritizeTextures_IPP( int n, IntPtr textures, IntPtr priorities );
        private delegate void DglPrioritizeTexturesEXT_IaIaF( int n, int[] textures, float[] priorities );
        private delegate void DglPrioritizeTexturesEXT_IPP( int n, IntPtr textures, IntPtr priorities );
        private delegate void DglProgramEnvParameter4dARB_IIDDDD( int target, int index, double x, double y, double z, double w );
        private delegate void DglProgramEnvParameter4dvARB_IIaD( int target, int index, double[] rdparams );
        private delegate void DglProgramEnvParameter4dvARB_IIP( int target, int index, IntPtr rdparams );
        private delegate void DglProgramEnvParameter4fARB_IIFFFF( int target, int index, float x, float y, float z, float w );
        private delegate void DglProgramEnvParameter4fvARB_IIaF( int target, int index, float[] rfparams );
        private delegate void DglProgramEnvParameter4fvARB_IIP( int target, int index, IntPtr rfparams );
        private delegate void DglProgramLocalParameter4dARB_IIDDDD( int target, int index, double x, double y, double z, double w );
        private delegate void DglProgramLocalParameter4dvARB_IIaD( int target, int index, double[] rdparams );
        private delegate void DglProgramLocalParameter4dvARB_IIP( int target, int index, IntPtr rdparams );
        private delegate void DglProgramLocalParameter4fARB_IIFFFF( int target, int index, float x, float y, float z, float w );
        private delegate void DglProgramLocalParameter4fvARB_IIaF( int target, int index, float[] rfparams );
        private delegate void DglProgramLocalParameter4fvARB_IIP( int target, int index, IntPtr rfparams );
        private delegate void DglProgramNamedParameter4dNV_IIaBDDDD( int id, int len, byte[] name, double x, double y, double z, double w );
        private delegate void DglProgramNamedParameter4dNV_IIPDDDD( int id, int len, IntPtr name, double x, double y, double z, double w );
        private delegate void DglProgramNamedParameter4dvNV_IIaBaD( int id, int len, byte[] name, double[] v );
        private delegate void DglProgramNamedParameter4dvNV_IIPP( int id, int len, IntPtr name, IntPtr v );
        private delegate void DglProgramNamedParameter4fNV_IIaBFFFF( int id, int len, byte[] name, float x, float y, float z, float w );
        private delegate void DglProgramNamedParameter4fNV_IIPFFFF( int id, int len, IntPtr name, float x, float y, float z, float w );
        private delegate void DglProgramNamedParameter4fvNV_IIaBaF( int id, int len, byte[] name, float[] v );
        private delegate void DglProgramNamedParameter4fvNV_IIPP( int id, int len, IntPtr name, IntPtr v );
        private delegate void DglProgramParameter4dNV_IIDDDD( int target, int index, double x, double y, double z, double w );
        private delegate void DglProgramParameter4dvNV_IIaD( int target, int index, double[] v );
        private delegate void DglProgramParameter4dvNV_IIP( int target, int index, IntPtr v );
        private delegate void DglProgramParameter4fNV_IIFFFF( int target, int index, float x, float y, float z, float w );
        private delegate void DglProgramParameter4fvNV_IIaF( int target, int index, float[] v );
        private delegate void DglProgramParameter4fvNV_IIP( int target, int index, IntPtr v );
        private delegate void DglProgramParameters4dvNV_IIIaD( int target, int index, int count, double[] v );
        private delegate void DglProgramParameters4dvNV_IIIP( int target, int index, int count, IntPtr v );
        private delegate void DglProgramParameters4fvNV_IIIaF( int target, int index, int count, float[] v );
        private delegate void DglProgramParameters4fvNV_IIIP( int target, int index, int count, IntPtr v );
        private delegate void DglProgramStringARB_IIIS( int target, int format, int len, String rvstring );
        private delegate void DglPushAttrib_I( int mask );
        private delegate void DglPushClientAttrib_I( int mask );
        private delegate void DglPushMatrix_V();
        private delegate void DglPushName_I( int name );
        private delegate void DglRasterPos2d_DD( double x, double y );
        private delegate void DglRasterPos2dv_aD( double[] v );
        private delegate void DglRasterPos2dv_P( IntPtr v );
        private delegate void DglRasterPos2f_FF( float x, float y );
        private delegate void DglRasterPos2fv_aF( float[] v );
        private delegate void DglRasterPos2fv_P( IntPtr v );
        private delegate void DglRasterPos2i_II( int x, int y );
        private delegate void DglRasterPos2iv_aI( int[] v );
        private delegate void DglRasterPos2iv_P( IntPtr v );
        private delegate void DglRasterPos2s_HH( short x, short y );
        private delegate void DglRasterPos2sv_aH( short[] v );
        private delegate void DglRasterPos2sv_P( IntPtr v );
        private delegate void DglRasterPos3d_DDD( double x, double y, double z );
        private delegate void DglRasterPos3dv_aD( double[] v );
        private delegate void DglRasterPos3dv_P( IntPtr v );
        private delegate void DglRasterPos3f_FFF( float x, float y, float z );
        private delegate void DglRasterPos3fv_aF( float[] v );
        private delegate void DglRasterPos3fv_P( IntPtr v );
        private delegate void DglRasterPos3i_III( int x, int y, int z );
        private delegate void DglRasterPos3iv_aI( int[] v );
        private delegate void DglRasterPos3iv_P( IntPtr v );
        private delegate void DglRasterPos3s_HHH( short x, short y, short z );
        private delegate void DglRasterPos3sv_aH( short[] v );
        private delegate void DglRasterPos3sv_P( IntPtr v );
        private delegate void DglRasterPos4d_DDDD( double x, double y, double z, double w );
        private delegate void DglRasterPos4dv_aD( double[] v );
        private delegate void DglRasterPos4dv_P( IntPtr v );
        private delegate void DglRasterPos4f_FFFF( float x, float y, float z, float w );
        private delegate void DglRasterPos4fv_aF( float[] v );
        private delegate void DglRasterPos4fv_P( IntPtr v );
        private delegate void DglRasterPos4i_IIII( int x, int y, int z, int w );
        private delegate void DglRasterPos4iv_aI( int[] v );
        private delegate void DglRasterPos4iv_P( IntPtr v );
        private delegate void DglRasterPos4s_HHHH( short x, short y, short z, short w );
        private delegate void DglRasterPos4sv_aH( short[] v );
        private delegate void DglRasterPos4sv_P( IntPtr v );
        private delegate void DglReadBuffer_I( int mode );
        private delegate void DglReadInstrumentsSGIX_I( int marker );
        private delegate void DglReadPixels_IIIIIIaB( int x, int y, int width, int height, int format, int itype, byte[] pixels );
        private delegate void DglReadPixels_IIIIIIaH( int x, int y, int width, int height, int format, int itype, short[] pixels );
        private delegate void DglReadPixels_IIIIIIaI( int x, int y, int width, int height, int format, int itype, int[] pixels );
        private delegate void DglReadPixels_IIIIIIaF( int x, int y, int width, int height, int format, int itype, float[] pixels );
        private delegate void DglReadPixels_IIIIIIP( int x, int y, int width, int height, int format, int itype, IntPtr pixels );
        private delegate void DglRectd_DDDD( double x1, double y1, double x2, double y2 );
        private delegate void DglRectdv_aDaD( double[] v1, double[] v2 );
        private delegate void DglRectdv_PP( IntPtr v1, IntPtr v2 );
        private delegate void DglRectf_FFFF( float x1, float y1, float x2, float y2 );
        private delegate void DglRectfv_aFaF( float[] v1, float[] v2 );
        private delegate void DglRectfv_PP( IntPtr v1, IntPtr v2 );
        private delegate void DglRecti_IIII( int x1, int y1, int x2, int y2 );
        private delegate void DglRectiv_aIaI( int[] v1, int[] v2 );
        private delegate void DglRectiv_PP( IntPtr v1, IntPtr v2 );
        private delegate void DglRects_HHHH( short x1, short y1, short x2, short y2 );
        private delegate void DglRectsv_aHaH( short[] v1, short[] v2 );
        private delegate void DglRectsv_PP( IntPtr v1, IntPtr v2 );
        private delegate void DglReferencePlaneSGIX_aD( double[] equation );
        private delegate void DglReferencePlaneSGIX_P( IntPtr equation );
        private delegate void DglRenderbufferStorageEXT_IIII( int target, int internalformat, int width, int height );
        private delegate int DglRenderMode_I( int mode );
        private delegate void DglReplacementCodePointerSUN_IIrP( int itype, int stride, ref IntPtr pointer );
        private delegate void DglReplacementCodeubSUN_B( byte code );
        private delegate void DglReplacementCodeubvSUN_aB( byte[] code );
        private delegate void DglReplacementCodeubvSUN_P( IntPtr code );
        private delegate void DglReplacementCodeuiColor3fVertex3fSUN_IFFFFFF( int rc, float r, float g, float b, float x, float y, float z );
        private delegate void DglReplacementCodeuiColor3fVertex3fvSUN_rIaFaF( ref int rc, float[] c, float[] v );
        private delegate void DglReplacementCodeuiColor3fVertex3fvSUN_rIPP( ref int rc, IntPtr c, IntPtr v );
        private delegate void DglReplacementCodeuiColor4fNormal3fVertex3fSUN_IFFFFFFFFFF( int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z );
        private delegate void DglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIaFaFaF( ref int rc, float[] c, float[] n, float[] v );
        private delegate void DglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIPPP( ref int rc, IntPtr c, IntPtr n, IntPtr v );
        private delegate void DglReplacementCodeuiColor4ubVertex3fSUN_IBBBBFFF( int rc, byte r, byte g, byte b, byte a, float x, float y, float z );
        private delegate void DglReplacementCodeuiColor4ubVertex3fvSUN_rIaBaF( ref int rc, byte[] c, float[] v );
        private delegate void DglReplacementCodeuiColor4ubVertex3fvSUN_rIPP( ref int rc, IntPtr c, IntPtr v );
        private delegate void DglReplacementCodeuiNormal3fVertex3fSUN_IFFFFFF( int rc, float nx, float ny, float nz, float x, float y, float z );
        private delegate void DglReplacementCodeuiNormal3fVertex3fvSUN_rIaFaF( ref int rc, float[] n, float[] v );
        private delegate void DglReplacementCodeuiNormal3fVertex3fvSUN_rIPP( ref int rc, IntPtr n, IntPtr v );
        private delegate void DglReplacementCodeuiSUN_I( int code );
        private delegate void DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_IFFFFFFFFFFFF( int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z );
        private delegate void DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIaFaFaFaF( ref int rc, float[] tc, float[] c, float[] n, float[] v );
        private delegate void DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIPPPP( ref int rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v );
        private delegate void DglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_IFFFFFFFF( int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z );
        private delegate void DglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIaFaFaF( ref int rc, float[] tc, float[] n, float[] v );
        private delegate void DglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIPPP( ref int rc, IntPtr tc, IntPtr n, IntPtr v );
        private delegate void DglReplacementCodeuiTexCoord2fVertex3fSUN_IFFFFF( int rc, float s, float t, float x, float y, float z );
        private delegate void DglReplacementCodeuiTexCoord2fVertex3fvSUN_rIaFaF( ref int rc, float[] tc, float[] v );
        private delegate void DglReplacementCodeuiTexCoord2fVertex3fvSUN_rIPP( ref int rc, IntPtr tc, IntPtr v );
        private delegate void DglReplacementCodeuiVertex3fSUN_IFFF( int rc, float x, float y, float z );
        private delegate void DglReplacementCodeuiVertex3fvSUN_rIaF( ref int rc, float[] v );
        private delegate void DglReplacementCodeuiVertex3fvSUN_rIP( ref int rc, IntPtr v );
        private delegate void DglReplacementCodeuivSUN_rI( ref int code );
        private delegate void DglReplacementCodeusSUN_H( short code );
        private delegate void DglReplacementCodeusvSUN_rH( ref short code );
        private delegate void DglRequestResidentProgramsNV_IaI( int n, int[] programs );
        private delegate void DglRequestResidentProgramsNV_IP( int n, IntPtr programs );
        private delegate void DglResetHistogram_I( int target );
        private delegate void DglResetHistogramEXT_I( int target );
        private delegate void DglResetMinmax_I( int target );
        private delegate void DglResetMinmaxEXT_I( int target );
        private delegate void DglResizeBuffersMESA_V();
        private delegate void DglRotated_DDDD( double angle, double x, double y, double z );
        private delegate void DglRotatef_FFFF( float angle, float x, float y, float z );
        private delegate void DglSampleCoverage_FB( float value, byte invert );
        private delegate void DglSampleCoverageARB_FB( float value, byte invert );
        private delegate void DglSampleMapATI_III( int dst, int interp, int swizzle );
        private delegate void DglSampleMaskEXT_FB( float value, byte invert );
        private delegate void DglSampleMaskSGIS_FB( float value, byte invert );
        private delegate void DglSamplePatternEXT_I( int pattern );
        private delegate void DglSamplePatternSGIS_I( int pattern );
        private delegate void DglScaled_DDD( double x, double y, double z );
        private delegate void DglScalef_FFF( float x, float y, float z );
        private delegate void DglScissor_IIII( int x, int y, int width, int height );
        private delegate void DglSecondaryColor3b_BBB( byte red, byte green, byte blue );
        private delegate void DglSecondaryColor3bEXT_BBB( byte red, byte green, byte blue );
        private delegate void DglSecondaryColor3bv_aB( byte[] v );
        private delegate void DglSecondaryColor3bv_P( IntPtr v );
        private delegate void DglSecondaryColor3bvEXT_aB( byte[] v );
        private delegate void DglSecondaryColor3bvEXT_P( IntPtr v );
        private delegate void DglSecondaryColor3d_DDD( double red, double green, double blue );
        private delegate void DglSecondaryColor3dEXT_DDD( double red, double green, double blue );
        private delegate void DglSecondaryColor3dv_aD( double[] v );
        private delegate void DglSecondaryColor3dv_P( IntPtr v );
        private delegate void DglSecondaryColor3dvEXT_aD( double[] v );
        private delegate void DglSecondaryColor3dvEXT_P( IntPtr v );
        private delegate void DglSecondaryColor3f_FFF( float red, float green, float blue );
        private delegate void DglSecondaryColor3fEXT_FFF( float red, float green, float blue );
        private delegate void DglSecondaryColor3fv_aF( float[] v );
        private delegate void DglSecondaryColor3fv_P( IntPtr v );
        private delegate void DglSecondaryColor3fvEXT_aF( float[] v );
        private delegate void DglSecondaryColor3fvEXT_P( IntPtr v );
        private delegate void DglSecondaryColor3hNV_HHH( short red, short green, short blue );
        private delegate void DglSecondaryColor3hvNV_aH( short[] v );
        private delegate void DglSecondaryColor3hvNV_P( IntPtr v );
        private delegate void DglSecondaryColor3i_III( int red, int green, int blue );
        private delegate void DglSecondaryColor3iEXT_III( int red, int green, int blue );
        private delegate void DglSecondaryColor3iv_aI( int[] v );
        private delegate void DglSecondaryColor3iv_P( IntPtr v );
        private delegate void DglSecondaryColor3ivEXT_aI( int[] v );
        private delegate void DglSecondaryColor3ivEXT_P( IntPtr v );
        private delegate void DglSecondaryColor3s_HHH( short red, short green, short blue );
        private delegate void DglSecondaryColor3sEXT_HHH( short red, short green, short blue );
        private delegate void DglSecondaryColor3sv_aH( short[] v );
        private delegate void DglSecondaryColor3sv_P( IntPtr v );
        private delegate void DglSecondaryColor3svEXT_aH( short[] v );
        private delegate void DglSecondaryColor3svEXT_P( IntPtr v );
        private delegate void DglSecondaryColor3ub_BBB( byte red, byte green, byte blue );
        private delegate void DglSecondaryColor3ubEXT_BBB( byte red, byte green, byte blue );
        private delegate void DglSecondaryColor3ubv_aB( byte[] v );
        private delegate void DglSecondaryColor3ubv_P( IntPtr v );
        private delegate void DglSecondaryColor3ubvEXT_aB( byte[] v );
        private delegate void DglSecondaryColor3ubvEXT_P( IntPtr v );
        private delegate void DglSecondaryColor3ui_III( int red, int green, int blue );
        private delegate void DglSecondaryColor3uiEXT_III( int red, int green, int blue );
        private delegate void DglSecondaryColor3uiv_aI( int[] v );
        private delegate void DglSecondaryColor3uiv_P( IntPtr v );
        private delegate void DglSecondaryColor3uivEXT_aI( int[] v );
        private delegate void DglSecondaryColor3uivEXT_P( IntPtr v );
        private delegate void DglSecondaryColor3us_HHH( short red, short green, short blue );
        private delegate void DglSecondaryColor3usEXT_HHH( short red, short green, short blue );
        private delegate void DglSecondaryColor3usv_aH( short[] v );
        private delegate void DglSecondaryColor3usv_P( IntPtr v );
        private delegate void DglSecondaryColor3usvEXT_aH( short[] v );
        private delegate void DglSecondaryColor3usvEXT_P( IntPtr v );
        private delegate void DglSecondaryColorPointer_IIIaB( int size, int itype, int stride, byte[] pointer );
        private delegate void DglSecondaryColorPointer_IIIaH( int size, int itype, int stride, short[] pointer );
        private delegate void DglSecondaryColorPointer_IIIaI( int size, int itype, int stride, int[] pointer );
        private delegate void DglSecondaryColorPointer_IIIaF( int size, int itype, int stride, float[] pointer );
        private delegate void DglSecondaryColorPointer_IIIaD( int size, int itype, int stride, double[] pointer );
        private delegate void DglSecondaryColorPointer_IIIP( int size, int itype, int stride, IntPtr pointer );
        private delegate void DglSecondaryColorPointerEXT_IIIaB( int size, int itype, int stride, byte[] pointer );
        private delegate void DglSecondaryColorPointerEXT_IIIaH( int size, int itype, int stride, short[] pointer );
        private delegate void DglSecondaryColorPointerEXT_IIIaI( int size, int itype, int stride, int[] pointer );
        private delegate void DglSecondaryColorPointerEXT_IIIaF( int size, int itype, int stride, float[] pointer );
        private delegate void DglSecondaryColorPointerEXT_IIIaD( int size, int itype, int stride, double[] pointer );
        private delegate void DglSecondaryColorPointerEXT_IIIP( int size, int itype, int stride, IntPtr pointer );
        private delegate void DglSecondaryColorPointerListIBM_IIIrPI( int size, int itype, int stride, ref IntPtr pointer, int ptrstride );
        private delegate void DglSelectBuffer_IaI( int size, int[] buffer );
        private delegate void DglSelectBuffer_IP( int size, IntPtr buffer );
        private delegate void DglSeparableFilter2D_IIIIIIaBaB( int target, int internalformat, int width, int height, int format, int itype, byte[] row, byte[] column );
        private delegate void DglSeparableFilter2D_IIIIIIaHaH( int target, int internalformat, int width, int height, int format, int itype, short[] row, short[] column );
        private delegate void DglSeparableFilter2D_IIIIIIaIaI( int target, int internalformat, int width, int height, int format, int itype, int[] row, int[] column );
        private delegate void DglSeparableFilter2D_IIIIIIaFaF( int target, int internalformat, int width, int height, int format, int itype, float[] row, float[] column );
        private delegate void DglSeparableFilter2D_IIIIIIPP( int target, int internalformat, int width, int height, int format, int itype, IntPtr row, IntPtr column );
        private delegate void DglSeparableFilter2DEXT_IIIIIIaBaB( int target, int internalformat, int width, int height, int format, int itype, byte[] row, byte[] column );
        private delegate void DglSeparableFilter2DEXT_IIIIIIaHaH( int target, int internalformat, int width, int height, int format, int itype, short[] row, short[] column );
        private delegate void DglSeparableFilter2DEXT_IIIIIIaIaI( int target, int internalformat, int width, int height, int format, int itype, int[] row, int[] column );
        private delegate void DglSeparableFilter2DEXT_IIIIIIaFaF( int target, int internalformat, int width, int height, int format, int itype, float[] row, float[] column );
        private delegate void DglSeparableFilter2DEXT_IIIIIIPP( int target, int internalformat, int width, int height, int format, int itype, IntPtr row, IntPtr column );
        private delegate void DglSetFenceAPPLE_I( int fence );
        private delegate void DglSetFenceNV_II( int fence, int condition );
        private delegate void DglSetFragmentShaderConstantATI_IaF( int dst, float[] value );
        private delegate void DglSetFragmentShaderConstantATI_IP( int dst, IntPtr value );
        private delegate void DglSetInvariantEXT_IIaB( int id, int itype, byte[] addr );
        private delegate void DglSetInvariantEXT_IIaH( int id, int itype, short[] addr );
        private delegate void DglSetInvariantEXT_IIaI( int id, int itype, int[] addr );
        private delegate void DglSetInvariantEXT_IIaF( int id, int itype, float[] addr );
        private delegate void DglSetInvariantEXT_IIaD( int id, int itype, double[] addr );
        private delegate void DglSetInvariantEXT_IIP( int id, int itype, IntPtr addr );
        private delegate void DglSetLocalConstantEXT_IIaB( int id, int itype, byte[] addr );
        private delegate void DglSetLocalConstantEXT_IIaH( int id, int itype, short[] addr );
        private delegate void DglSetLocalConstantEXT_IIaI( int id, int itype, int[] addr );
        private delegate void DglSetLocalConstantEXT_IIaF( int id, int itype, float[] addr );
        private delegate void DglSetLocalConstantEXT_IIaD( int id, int itype, double[] addr );
        private delegate void DglSetLocalConstantEXT_IIP( int id, int itype, IntPtr addr );
        private delegate void DglShadeModel_I( int mode );
        private delegate void DglShaderOp1EXT_III( int op, int res, int arg1 );
        private delegate void DglShaderOp2EXT_IIII( int op, int res, int arg1, int arg2 );
        private delegate void DglShaderOp3EXT_IIIII( int op, int res, int arg1, int arg2, int arg3 );
        private delegate void DglShaderSource_IIaSaI( int shader, int count, String[] textLines, int[] lengths );
        private delegate void DglShaderSource_IIaSP( int shader, int count, String[] textLines, IntPtr lengths );
        private delegate void DglShaderSource_IIPaI( int shader, int count, IntPtr textLines, int[] lengths );
        private delegate void DglShaderSource_IIPP( int shader, int count, IntPtr textLines, IntPtr lengths );
        private delegate void DglShaderSourceARB_IIaSaI( int shaderObj, int count, String[] textLines, int[] lengths );
        private delegate void DglShaderSourceARB_IIaSP( int shaderObj, int count, String[] textLines, IntPtr lengths );
        private delegate void DglShaderSourceARB_IIPaI( int shaderObj, int count, IntPtr textLines, int[] lengths );
        private delegate void DglShaderSourceARB_IIPP( int shaderObj, int count, IntPtr textLines, IntPtr lengths );
        private delegate void DglSharpenTexFuncSGIS_IIaF( int target, int n, float[] points );
        private delegate void DglSharpenTexFuncSGIS_IIP( int target, int n, IntPtr points );
        private delegate void DglSpriteParameterfSGIX_IF( int pname, float fparam );
        private delegate void DglSpriteParameterfvSGIX_IaF( int pname, float[] rfparams );
        private delegate void DglSpriteParameterfvSGIX_IP( int pname, IntPtr rfparams );
        private delegate void DglSpriteParameteriSGIX_II( int pname, int iparam );
        private delegate void DglSpriteParameterivSGIX_IaI( int pname, int[] riparams );
        private delegate void DglSpriteParameterivSGIX_IP( int pname, IntPtr riparams );
        private delegate void DglStartInstrumentsSGIX_V();
        private delegate void DglStencilFunc_III( int func, int iref, int mask );
        private delegate void DglStencilFuncSeparate_IIII( int frontfunc, int backfunc, int iref, int mask );
        private delegate void DglStencilFuncSeparateATI_IIII( int frontfunc, int backfunc, int iref, int mask );
        private delegate void DglStencilMask_I( int mask );
        private delegate void DglStencilMaskSeparate_II( int face, int mask );
        private delegate void DglStencilOp_III( int fail, int zfail, int zpass );
        private delegate void DglStencilOpSeparate_IIII( int face, int sfail, int dpfail, int dppass );
        private delegate void DglStencilOpSeparateATI_IIII( int face, int sfail, int dpfail, int dppass );
        private delegate void DglStopInstrumentsSGIX_I( int marker );
        private delegate void DglStringMarkerGREMEDY_IaB( int len, byte[] rvstring );
        private delegate void DglStringMarkerGREMEDY_IP( int len, IntPtr rvstring );
        private delegate void DglSwizzleEXT_IIIIII( int res, int iin, int outX, int outY, int outZ, int outW );
        private delegate void DglTagSampleBufferSGIX_V();
        private delegate void DglTangent3bEXT_BBB( byte tx, byte ty, byte tz );
        private delegate void DglTangent3bvEXT_aB( byte[] v );
        private delegate void DglTangent3bvEXT_P( IntPtr v );
        private delegate void DglTangent3dEXT_DDD( double tx, double ty, double tz );
        private delegate void DglTangent3dvEXT_aD( double[] v );
        private delegate void DglTangent3dvEXT_P( IntPtr v );
        private delegate void DglTangent3fEXT_FFF( float tx, float ty, float tz );
        private delegate void DglTangent3fvEXT_aF( float[] v );
        private delegate void DglTangent3fvEXT_P( IntPtr v );
        private delegate void DglTangent3iEXT_III( int tx, int ty, int tz );
        private delegate void DglTangent3ivEXT_aI( int[] v );
        private delegate void DglTangent3ivEXT_P( IntPtr v );
        private delegate void DglTangent3sEXT_HHH( short tx, short ty, short tz );
        private delegate void DglTangent3svEXT_aH( short[] v );
        private delegate void DglTangent3svEXT_P( IntPtr v );
        private delegate void DglTangentPointerEXT_IIaB( int itype, int stride, byte[] pointer );
        private delegate void DglTangentPointerEXT_IIaH( int itype, int stride, short[] pointer );
        private delegate void DglTangentPointerEXT_IIaI( int itype, int stride, int[] pointer );
        private delegate void DglTangentPointerEXT_IIaF( int itype, int stride, float[] pointer );
        private delegate void DglTangentPointerEXT_IIaD( int itype, int stride, double[] pointer );
        private delegate void DglTangentPointerEXT_IIP( int itype, int stride, IntPtr pointer );
        private delegate void DglTbufferMask3DFX_I( int mask );
        private delegate byte DglTestFenceAPPLE_I( int fence );
        private delegate byte DglTestFenceNV_I( int fence );
        private delegate byte DglTestObjectAPPLE_II( int iobject, int name );
        private delegate void DglTexBumpParameterfvATI_IaF( int pname, float[] rfparam );
        private delegate void DglTexBumpParameterfvATI_IP( int pname, IntPtr rfparam );
        private delegate void DglTexBumpParameterivATI_IaI( int pname, int[] riparam );
        private delegate void DglTexBumpParameterivATI_IP( int pname, IntPtr riparam );
        private delegate void DglTexCoord1d_D( double s );
        private delegate void DglTexCoord1dv_aD( double[] v );
        private delegate void DglTexCoord1dv_P( IntPtr v );
        private delegate void DglTexCoord1f_F( float s );
        private delegate void DglTexCoord1fv_aF( float[] v );
        private delegate void DglTexCoord1fv_P( IntPtr v );
        private delegate void DglTexCoord1hNV_H( short s );
        private delegate void DglTexCoord1hvNV_aH( short[] v );
        private delegate void DglTexCoord1hvNV_P( IntPtr v );
        private delegate void DglTexCoord1i_I( int s );
        private delegate void DglTexCoord1iv_aI( int[] v );
        private delegate void DglTexCoord1iv_P( IntPtr v );
        private delegate void DglTexCoord1s_H( short s );
        private delegate void DglTexCoord1sv_aH( short[] v );
        private delegate void DglTexCoord1sv_P( IntPtr v );
        private delegate void DglTexCoord2d_DD( double s, double t );
        private delegate void DglTexCoord2dv_aD( double[] v );
        private delegate void DglTexCoord2dv_P( IntPtr v );
        private delegate void DglTexCoord2f_FF( float s, float t );
        private delegate void DglTexCoord2fColor3fVertex3fSUN_FFFFFFFF( float s, float t, float r, float g, float b, float x, float y, float z );
        private delegate void DglTexCoord2fColor3fVertex3fvSUN_aFaFaF( float[] tc, float[] c, float[] v );
        private delegate void DglTexCoord2fColor3fVertex3fvSUN_PPP( IntPtr tc, IntPtr c, IntPtr v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fSUN_FFFFFFFFFFFF( float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFaF( float[] tc, float[] c, float[] n, float[] v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFP( float[] tc, float[] c, float[] n, IntPtr v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPaF( float[] tc, float[] c, IntPtr n, float[] v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPP( float[] tc, float[] c, IntPtr n, IntPtr v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFaF( float[] tc, IntPtr c, float[] n, float[] v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFP( float[] tc, IntPtr c, float[] n, IntPtr v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPaF( float[] tc, IntPtr c, IntPtr n, float[] v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPP( float[] tc, IntPtr c, IntPtr n, IntPtr v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFaF( IntPtr tc, float[] c, float[] n, float[] v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFP( IntPtr tc, float[] c, float[] n, IntPtr v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPaF( IntPtr tc, float[] c, IntPtr n, float[] v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPP( IntPtr tc, float[] c, IntPtr n, IntPtr v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFaF( IntPtr tc, IntPtr c, float[] n, float[] v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFP( IntPtr tc, IntPtr c, float[] n, IntPtr v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPaF( IntPtr tc, IntPtr c, IntPtr n, float[] v );
        private delegate void DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPP( IntPtr tc, IntPtr c, IntPtr n, IntPtr v );
        private delegate void DglTexCoord2fColor4ubVertex3fSUN_FFBBBBFFF( float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z );
        private delegate void DglTexCoord2fColor4ubVertex3fvSUN_aFaBaF( float[] tc, byte[] c, float[] v );
        private delegate void DglTexCoord2fColor4ubVertex3fvSUN_aFaBP( float[] tc, byte[] c, IntPtr v );
        private delegate void DglTexCoord2fColor4ubVertex3fvSUN_aFPaF( float[] tc, IntPtr c, float[] v );
        private delegate void DglTexCoord2fColor4ubVertex3fvSUN_aFPP( float[] tc, IntPtr c, IntPtr v );
        private delegate void DglTexCoord2fColor4ubVertex3fvSUN_PaBaF( IntPtr tc, byte[] c, float[] v );
        private delegate void DglTexCoord2fColor4ubVertex3fvSUN_PaBP( IntPtr tc, byte[] c, IntPtr v );
        private delegate void DglTexCoord2fColor4ubVertex3fvSUN_PPaF( IntPtr tc, IntPtr c, float[] v );
        private delegate void DglTexCoord2fColor4ubVertex3fvSUN_PPP( IntPtr tc, IntPtr c, IntPtr v );
        private delegate void DglTexCoord2fNormal3fVertex3fSUN_FFFFFFFF( float s, float t, float nx, float ny, float nz, float x, float y, float z );
        private delegate void DglTexCoord2fNormal3fVertex3fvSUN_aFaFaF( float[] tc, float[] n, float[] v );
        private delegate void DglTexCoord2fNormal3fVertex3fvSUN_aFaFP( float[] tc, float[] n, IntPtr v );
        private delegate void DglTexCoord2fNormal3fVertex3fvSUN_aFPaF( float[] tc, IntPtr n, float[] v );
        private delegate void DglTexCoord2fNormal3fVertex3fvSUN_aFPP( float[] tc, IntPtr n, IntPtr v );
        private delegate void DglTexCoord2fNormal3fVertex3fvSUN_PaFaF( IntPtr tc, float[] n, float[] v );
        private delegate void DglTexCoord2fNormal3fVertex3fvSUN_PaFP( IntPtr tc, float[] n, IntPtr v );
        private delegate void DglTexCoord2fNormal3fVertex3fvSUN_PPaF( IntPtr tc, IntPtr n, float[] v );
        private delegate void DglTexCoord2fNormal3fVertex3fvSUN_PPP( IntPtr tc, IntPtr n, IntPtr v );
        private delegate void DglTexCoord2fv_aF( float[] v );
        private delegate void DglTexCoord2fv_P( IntPtr v );
        private delegate void DglTexCoord2fVertex3fSUN_FFFFF( float s, float t, float x, float y, float z );
        private delegate void DglTexCoord2fVertex3fvSUN_aFaF( float[] tc, float[] v );
        private delegate void DglTexCoord2fVertex3fvSUN_aFP( float[] tc, IntPtr v );
        private delegate void DglTexCoord2fVertex3fvSUN_PaF( IntPtr tc, float[] v );
        private delegate void DglTexCoord2fVertex3fvSUN_PP( IntPtr tc, IntPtr v );
        private delegate void DglTexCoord2hNV_HH( short s, short t );
        private delegate void DglTexCoord2hvNV_aH( short[] v );
        private delegate void DglTexCoord2hvNV_P( IntPtr v );
        private delegate void DglTexCoord2i_II( int s, int t );
        private delegate void DglTexCoord2iv_aI( int[] v );
        private delegate void DglTexCoord2iv_P( IntPtr v );
        private delegate void DglTexCoord2s_HH( short s, short t );
        private delegate void DglTexCoord2sv_aH( short[] v );
        private delegate void DglTexCoord2sv_P( IntPtr v );
        private delegate void DglTexCoord3d_DDD( double s, double t, double r );
        private delegate void DglTexCoord3dv_aD( double[] v );
        private delegate void DglTexCoord3dv_P( IntPtr v );
        private delegate void DglTexCoord3f_FFF( float s, float t, float r );
        private delegate void DglTexCoord3fv_aF( float[] v );
        private delegate void DglTexCoord3fv_P( IntPtr v );
        private delegate void DglTexCoord3hNV_HHH( short s, short t, short r );
        private delegate void DglTexCoord3hvNV_aH( short[] v );
        private delegate void DglTexCoord3hvNV_P( IntPtr v );
        private delegate void DglTexCoord3i_III( int s, int t, int r );
        private delegate void DglTexCoord3iv_aI( int[] v );
        private delegate void DglTexCoord3iv_P( IntPtr v );
        private delegate void DglTexCoord3s_HHH( short s, short t, short r );
        private delegate void DglTexCoord3sv_aH( short[] v );
        private delegate void DglTexCoord3sv_P( IntPtr v );
        private delegate void DglTexCoord4d_DDDD( double s, double t, double r, double q );
        private delegate void DglTexCoord4dv_aD( double[] v );
        private delegate void DglTexCoord4dv_P( IntPtr v );
        private delegate void DglTexCoord4f_FFFF( float s, float t, float r, float q );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fSUN_FFFFFFFFFFFFFFF( float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFaF( float[] tc, float[] c, float[] n, float[] v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFP( float[] tc, float[] c, float[] n, IntPtr v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPaF( float[] tc, float[] c, IntPtr n, float[] v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPP( float[] tc, float[] c, IntPtr n, IntPtr v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFaF( float[] tc, IntPtr c, float[] n, float[] v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFP( float[] tc, IntPtr c, float[] n, IntPtr v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPaF( float[] tc, IntPtr c, IntPtr n, float[] v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPP( float[] tc, IntPtr c, IntPtr n, IntPtr v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFaF( IntPtr tc, float[] c, float[] n, float[] v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFP( IntPtr tc, float[] c, float[] n, IntPtr v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPaF( IntPtr tc, float[] c, IntPtr n, float[] v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPP( IntPtr tc, float[] c, IntPtr n, IntPtr v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFaF( IntPtr tc, IntPtr c, float[] n, float[] v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFP( IntPtr tc, IntPtr c, float[] n, IntPtr v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPaF( IntPtr tc, IntPtr c, IntPtr n, float[] v );
        private delegate void DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPP( IntPtr tc, IntPtr c, IntPtr n, IntPtr v );
        private delegate void DglTexCoord4fv_aF( float[] v );
        private delegate void DglTexCoord4fv_P( IntPtr v );
        private delegate void DglTexCoord4fVertex4fSUN_FFFFFFFF( float s, float t, float p, float q, float x, float y, float z, float w );
        private delegate void DglTexCoord4fVertex4fvSUN_aFaF( float[] tc, float[] v );
        private delegate void DglTexCoord4fVertex4fvSUN_aFP( float[] tc, IntPtr v );
        private delegate void DglTexCoord4fVertex4fvSUN_PaF( IntPtr tc, float[] v );
        private delegate void DglTexCoord4fVertex4fvSUN_PP( IntPtr tc, IntPtr v );
        private delegate void DglTexCoord4hNV_HHHH( short s, short t, short r, short q );
        private delegate void DglTexCoord4hvNV_aH( short[] v );
        private delegate void DglTexCoord4hvNV_P( IntPtr v );
        private delegate void DglTexCoord4i_IIII( int s, int t, int r, int q );
        private delegate void DglTexCoord4iv_aI( int[] v );
        private delegate void DglTexCoord4iv_P( IntPtr v );
        private delegate void DglTexCoord4s_HHHH( short s, short t, short r, short q );
        private delegate void DglTexCoord4sv_aH( short[] v );
        private delegate void DglTexCoord4sv_P( IntPtr v );
        private delegate void DglTexCoordPointer_IIIaB( int size, int itype, int stride, byte[] pointer );
        private delegate void DglTexCoordPointer_IIIaH( int size, int itype, int stride, short[] pointer );
        private delegate void DglTexCoordPointer_IIIaI( int size, int itype, int stride, int[] pointer );
        private delegate void DglTexCoordPointer_IIIaF( int size, int itype, int stride, float[] pointer );
        private delegate void DglTexCoordPointer_IIIaD( int size, int itype, int stride, double[] pointer );
        private delegate void DglTexCoordPointer_IIIP( int size, int itype, int stride, IntPtr pointer );
        private delegate void DglTexCoordPointerEXT_IIIIaB( int size, int itype, int stride, int count, byte[] pointer );
        private delegate void DglTexCoordPointerEXT_IIIIaH( int size, int itype, int stride, int count, short[] pointer );
        private delegate void DglTexCoordPointerEXT_IIIIaI( int size, int itype, int stride, int count, int[] pointer );
        private delegate void DglTexCoordPointerEXT_IIIIaF( int size, int itype, int stride, int count, float[] pointer );
        private delegate void DglTexCoordPointerEXT_IIIIaD( int size, int itype, int stride, int count, double[] pointer );
        private delegate void DglTexCoordPointerEXT_IIIIP( int size, int itype, int stride, int count, IntPtr pointer );
        private delegate void DglTexCoordPointerListIBM_IIIrPI( int size, int itype, int stride, ref IntPtr pointer, int ptrstride );
        private delegate void DglTexCoordPointervINTEL_IIrP( int size, int itype, ref IntPtr pointer );
        private delegate void DglTexEnvf_IIF( int target, int pname, float param );
        private delegate void DglTexEnvfv_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglTexEnvfv_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglTexEnvi_III( int target, int pname, int iparam );
        private delegate void DglTexEnviv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglTexEnviv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglTexFilterFuncSGIS_IIIaF( int target, int filter, int n, float[] weights );
        private delegate void DglTexFilterFuncSGIS_IIIP( int target, int filter, int n, IntPtr weights );
        private delegate void DglTexGend_IID( int coord, int pname, double dparam );
        private delegate void DglTexGendv_IIaD( int coord, int pname, double[] rdparams );
        private delegate void DglTexGendv_IIP( int coord, int pname, IntPtr rdparams );
        private delegate void DglTexGenf_IIF( int coord, int pname, float fparam );
        private delegate void DglTexGenfv_IIaF( int coord, int pname, float[] rfparams );
        private delegate void DglTexGenfv_IIP( int coord, int pname, IntPtr rfparams );
        private delegate void DglTexGeni_III( int coord, int pname, int iparam );
        private delegate void DglTexGeniv_IIaI( int coord, int pname, int[] riparams );
        private delegate void DglTexGeniv_IIP( int coord, int pname, IntPtr riparams );
        private delegate void DglTexImage1D_IIIIIIIaB( int target, int level, int internalformat, int width, int border, int format, int itype, byte[] pixels );
        private delegate void DglTexImage1D_IIIIIIIaH( int target, int level, int internalformat, int width, int border, int format, int itype, short[] pixels );
        private delegate void DglTexImage1D_IIIIIIIaI( int target, int level, int internalformat, int width, int border, int format, int itype, int[] pixels );
        private delegate void DglTexImage1D_IIIIIIIaF( int target, int level, int internalformat, int width, int border, int format, int itype, float[] pixels );
        private delegate void DglTexImage1D_IIIIIIIP( int target, int level, int internalformat, int width, int border, int format, int itype, IntPtr pixels );
        private delegate void DglTexImage2D_IIIIIIIIaB( int target, int level, int internalformat, int width, int height, int border, int format, int itype, byte[] pixels );
        private delegate void DglTexImage2D_IIIIIIIIaH( int target, int level, int internalformat, int width, int height, int border, int format, int itype, short[] pixels );
        private delegate void DglTexImage2D_IIIIIIIIaI( int target, int level, int internalformat, int width, int height, int border, int format, int itype, int[] pixels );
        private delegate void DglTexImage2D_IIIIIIIIaF( int target, int level, int internalformat, int width, int height, int border, int format, int itype, float[] pixels );
        private delegate void DglTexImage2D_IIIIIIIIP( int target, int level, int internalformat, int width, int height, int border, int format, int itype, IntPtr pixels );
        private delegate void DglTexImage3D_IIIIIIIIIaB( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, byte[] pixels );
        private delegate void DglTexImage3D_IIIIIIIIIaH( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, short[] pixels );
        private delegate void DglTexImage3D_IIIIIIIIIaI( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, int[] pixels );
        private delegate void DglTexImage3D_IIIIIIIIIaF( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, float[] pixels );
        private delegate void DglTexImage3D_IIIIIIIIIP( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, IntPtr pixels );
        private delegate void DglTexImage3DEXT_IIIIIIIIIaB( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, byte[] pixels );
        private delegate void DglTexImage3DEXT_IIIIIIIIIaH( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, short[] pixels );
        private delegate void DglTexImage3DEXT_IIIIIIIIIaI( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, int[] pixels );
        private delegate void DglTexImage3DEXT_IIIIIIIIIaF( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, float[] pixels );
        private delegate void DglTexImage3DEXT_IIIIIIIIIP( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, IntPtr pixels );
        private delegate void DglTexImage4DSGIS_IIIIIIIIIIaB( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int itype, byte[] pixels );
        private delegate void DglTexImage4DSGIS_IIIIIIIIIIaH( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int itype, short[] pixels );
        private delegate void DglTexImage4DSGIS_IIIIIIIIIIaI( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int itype, int[] pixels );
        private delegate void DglTexImage4DSGIS_IIIIIIIIIIaF( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int itype, float[] pixels );
        private delegate void DglTexImage4DSGIS_IIIIIIIIIIP( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int itype, IntPtr pixels );
        private delegate void DglTexParameterf_IIF( int target, int pname, float param );
        private delegate void DglTexParameterfv_IIaF( int target, int pname, float[] rfparams );
        private delegate void DglTexParameterfv_IIP( int target, int pname, IntPtr rfparams );
        private delegate void DglTexParameteri_III( int target, int pname, int iparam );
        private delegate void DglTexParameteriv_IIaI( int target, int pname, int[] riparams );
        private delegate void DglTexParameteriv_IIP( int target, int pname, IntPtr riparams );
        private delegate void DglTexSubImage1D_IIIIIIaB( int target, int level, int xoffset, int width, int format, int itype, byte[] pixels );
        private delegate void DglTexSubImage1D_IIIIIIaH( int target, int level, int xoffset, int width, int format, int itype, short[] pixels );
        private delegate void DglTexSubImage1D_IIIIIIaI( int target, int level, int xoffset, int width, int format, int itype, int[] pixels );
        private delegate void DglTexSubImage1D_IIIIIIaF( int target, int level, int xoffset, int width, int format, int itype, float[] pixels );
        private delegate void DglTexSubImage1D_IIIIIIP( int target, int level, int xoffset, int width, int format, int itype, IntPtr pixels );
        private delegate void DglTexSubImage1DEXT_IIIIIIaB( int target, int level, int xoffset, int width, int format, int itype, byte[] pixels );
        private delegate void DglTexSubImage1DEXT_IIIIIIaH( int target, int level, int xoffset, int width, int format, int itype, short[] pixels );
        private delegate void DglTexSubImage1DEXT_IIIIIIaI( int target, int level, int xoffset, int width, int format, int itype, int[] pixels );
        private delegate void DglTexSubImage1DEXT_IIIIIIaF( int target, int level, int xoffset, int width, int format, int itype, float[] pixels );
        private delegate void DglTexSubImage1DEXT_IIIIIIP( int target, int level, int xoffset, int width, int format, int itype, IntPtr pixels );
        private delegate void DglTexSubImage2D_IIIIIIIIaB( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, byte[] pixels );
        private delegate void DglTexSubImage2D_IIIIIIIIaH( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, short[] pixels );
        private delegate void DglTexSubImage2D_IIIIIIIIaI( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, int[] pixels );
        private delegate void DglTexSubImage2D_IIIIIIIIaF( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, float[] pixels );
        private delegate void DglTexSubImage2D_IIIIIIIIP( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, IntPtr pixels );
        private delegate void DglTexSubImage2DEXT_IIIIIIIIaB( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, byte[] pixels );
        private delegate void DglTexSubImage2DEXT_IIIIIIIIaH( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, short[] pixels );
        private delegate void DglTexSubImage2DEXT_IIIIIIIIaI( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, int[] pixels );
        private delegate void DglTexSubImage2DEXT_IIIIIIIIaF( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, float[] pixels );
        private delegate void DglTexSubImage2DEXT_IIIIIIIIP( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, IntPtr pixels );
        private delegate void DglTexSubImage3D_IIIIIIIIIIaB( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, byte[] pixels );
        private delegate void DglTexSubImage3D_IIIIIIIIIIaH( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, short[] pixels );
        private delegate void DglTexSubImage3D_IIIIIIIIIIaI( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, int[] pixels );
        private delegate void DglTexSubImage3D_IIIIIIIIIIaF( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, float[] pixels );
        private delegate void DglTexSubImage3D_IIIIIIIIIIP( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, IntPtr pixels );
        private delegate void DglTexSubImage3DEXT_IIIIIIIIIIaB( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, byte[] pixels );
        private delegate void DglTexSubImage3DEXT_IIIIIIIIIIaH( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, short[] pixels );
        private delegate void DglTexSubImage3DEXT_IIIIIIIIIIaI( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, int[] pixels );
        private delegate void DglTexSubImage3DEXT_IIIIIIIIIIaF( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, float[] pixels );
        private delegate void DglTexSubImage3DEXT_IIIIIIIIIIP( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, IntPtr pixels );
        private delegate void DglTexSubImage4DSGIS_IIIIIIIIIIIIaB( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int itype, byte[] pixels );
        private delegate void DglTexSubImage4DSGIS_IIIIIIIIIIIIaH( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int itype, short[] pixels );
        private delegate void DglTexSubImage4DSGIS_IIIIIIIIIIIIaI( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int itype, int[] pixels );
        private delegate void DglTexSubImage4DSGIS_IIIIIIIIIIIIaF( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int itype, float[] pixels );
        private delegate void DglTexSubImage4DSGIS_IIIIIIIIIIIIP( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int itype, IntPtr pixels );
        private delegate void DglTextureColorMaskSGIS_BBBB( byte red, byte green, byte blue, byte alpha );
        private delegate void DglTextureLightEXT_I( int pname );
        private delegate void DglTextureMaterialEXT_II( int face, int mode );
        private delegate void DglTextureNormalEXT_I( int mode );
        private delegate void DglTrackMatrixNV_IIII( int target, int address, int matrix, int transform );
        private delegate void DglTranslated_DDD( double x, double y, double z );
        private delegate void DglTranslatef_FFF( float x, float y, float z );
        private delegate void DgluBeginCurve_P( IntPtr nobj );
        private delegate void DgluBeginPolygon_P( IntPtr tess );
        private delegate void DgluBeginSurface_P( IntPtr nobj );
        private delegate void DgluBeginTrim_P( IntPtr nobj );
        private delegate int DgluBuild1DMipmaps_IIIIIaB( int target, int components, int width, int format, int itype, byte[] data );
        private delegate int DgluBuild1DMipmaps_IIIIIaH( int target, int components, int width, int format, int itype, short[] data );
        private delegate int DgluBuild1DMipmaps_IIIIIaI( int target, int components, int width, int format, int itype, int[] data );
        private delegate int DgluBuild1DMipmaps_IIIIIaF( int target, int components, int width, int format, int itype, float[] data );
        private delegate int DgluBuild1DMipmaps_IIIIIP( int target, int components, int width, int format, int itype, IntPtr data );
        private delegate int DgluBuild2DMipmaps_IIIIIIaB( int target, int components, int width, int height, int format, int itype, byte[] data );
        private delegate int DgluBuild2DMipmaps_IIIIIIaH( int target, int components, int width, int height, int format, int itype, short[] data );
        private delegate int DgluBuild2DMipmaps_IIIIIIaI( int target, int components, int width, int height, int format, int itype, int[] data );
        private delegate int DgluBuild2DMipmaps_IIIIIIaF( int target, int components, int width, int height, int format, int itype, float[] data );
        private delegate int DgluBuild2DMipmaps_IIIIIIP( int target, int components, int width, int height, int format, int itype, IntPtr data );
        private delegate void DgluCylinder_PDDDII( IntPtr qobj, double baseRadius, double topRadius, double height, int slices, int stacks );
        private delegate void DgluDeleteNurbsRenderer_P( IntPtr nobj );
        private delegate void DgluDeleteQuadric_P( IntPtr state );
        private delegate void DgluDeleteTess_P( IntPtr tess );
        private delegate void DgluDisk_PDDII( IntPtr qobj, double innerRadius, double outerRadius, int slices, int loops );
        private delegate void DgluEndCurve_P( IntPtr nobj );
        private delegate void DgluEndPolygon_P( IntPtr tess );
        private delegate void DgluEndSurface_P( IntPtr nobj );
        private delegate void DgluEndTrim_P( IntPtr nobj );
        private delegate String DgluErrorString_I( int errCode );
        private delegate String DgluErrorUnicodeStringEXT_I( int errCode );
        private delegate void DgluGetNurbsProperty_PIrF( IntPtr nobj, int property, ref float value );
        private delegate String DgluGetString_I( int name );
        private delegate void DgluGetTessProperty_PIrD( IntPtr tess, int which, ref double value );
        private delegate void DgluLoadSamplingMatrices_PaFaFaI( IntPtr nobj, float[] modelMatrix, float[] projMatrix, int[] viewport );
        private delegate void DgluLoadSamplingMatrices_PaFaFP( IntPtr nobj, float[] modelMatrix, float[] projMatrix, IntPtr viewport );
        private delegate void DgluLoadSamplingMatrices_PaFPaI( IntPtr nobj, float[] modelMatrix, IntPtr projMatrix, int[] viewport );
        private delegate void DgluLoadSamplingMatrices_PaFPP( IntPtr nobj, float[] modelMatrix, IntPtr projMatrix, IntPtr viewport );
        private delegate void DgluLoadSamplingMatrices_PPaFaI( IntPtr nobj, IntPtr modelMatrix, float[] projMatrix, int[] viewport );
        private delegate void DgluLoadSamplingMatrices_PPaFP( IntPtr nobj, IntPtr modelMatrix, float[] projMatrix, IntPtr viewport );
        private delegate void DgluLoadSamplingMatrices_PPPaI( IntPtr nobj, IntPtr modelMatrix, IntPtr projMatrix, int[] viewport );
        private delegate void DgluLoadSamplingMatrices_PPPP( IntPtr nobj, IntPtr modelMatrix, IntPtr projMatrix, IntPtr viewport );
        private delegate void DgluLookAt_DDDDDDDDD( double eyex, double eyey, double eyez, double centerx, double centery, double centerz, double upx, double upy, double upz );
        private delegate IntPtr DgluNewNurbsRenderer_V();
        private delegate IntPtr DgluNewQuadric_V();
        private delegate IntPtr DgluNewTess_V();
        private delegate void DgluNextContour_PI( IntPtr tess, int itype );
        private delegate void DglUniform1f_IF( int location, float v0 );
        private delegate void DglUniform1fARB_IF( int location, float v0 );
        private delegate void DglUniform1fv_IIaF( int location, int count, float[] value );
        private delegate void DglUniform1fv_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform1fvARB_IIaF( int location, int count, float[] value );
        private delegate void DglUniform1fvARB_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform1i_II( int location, int v0 );
        private delegate void DglUniform1iARB_II( int location, int v0 );
        private delegate void DglUniform1iv_IIaI( int location, int count, int[] value );
        private delegate void DglUniform1iv_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform1ivARB_IIaI( int location, int count, int[] value );
        private delegate void DglUniform1ivARB_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform2f_IFF( int location, float v0, float v1 );
        private delegate void DglUniform2fARB_IFF( int location, float v0, float v1 );
        private delegate void DglUniform2fv_IIaF( int location, int count, float[] value );
        private delegate void DglUniform2fv_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform2fvARB_IIaF( int location, int count, float[] value );
        private delegate void DglUniform2fvARB_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform2i_III( int location, int v0, int v1 );
        private delegate void DglUniform2iARB_III( int location, int v0, int v1 );
        private delegate void DglUniform2iv_IIaI( int location, int count, int[] value );
        private delegate void DglUniform2iv_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform2ivARB_IIaI( int location, int count, int[] value );
        private delegate void DglUniform2ivARB_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform3f_IFFF( int location, float v0, float v1, float v2 );
        private delegate void DglUniform3fARB_IFFF( int location, float v0, float v1, float v2 );
        private delegate void DglUniform3fv_IIaF( int location, int count, float[] value );
        private delegate void DglUniform3fv_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform3fvARB_IIaF( int location, int count, float[] value );
        private delegate void DglUniform3fvARB_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform3i_IIII( int location, int v0, int v1, int v2 );
        private delegate void DglUniform3iARB_IIII( int location, int v0, int v1, int v2 );
        private delegate void DglUniform3iv_IIaI( int location, int count, int[] value );
        private delegate void DglUniform3iv_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform3ivARB_IIaI( int location, int count, int[] value );
        private delegate void DglUniform3ivARB_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform4f_IFFFF( int location, float v0, float v1, float v2, float v3 );
        private delegate void DglUniform4fARB_IFFFF( int location, float v0, float v1, float v2, float v3 );
        private delegate void DglUniform4fv_IIaF( int location, int count, float[] value );
        private delegate void DglUniform4fv_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform4fvARB_IIaF( int location, int count, float[] value );
        private delegate void DglUniform4fvARB_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform4i_IIIII( int location, int v0, int v1, int v2, int v3 );
        private delegate void DglUniform4iARB_IIIII( int location, int v0, int v1, int v2, int v3 );
        private delegate void DglUniform4iv_IIaI( int location, int count, int[] value );
        private delegate void DglUniform4iv_IIP( int location, int count, IntPtr value );
        private delegate void DglUniform4ivARB_IIaI( int location, int count, int[] value );
        private delegate void DglUniform4ivARB_IIP( int location, int count, IntPtr value );
        private delegate void DglUniformMatrix2fv_IIBaF( int location, int count, byte transpose, float[] value );
        private delegate void DglUniformMatrix2fv_IIBP( int location, int count, byte transpose, IntPtr value );
        private delegate void DglUniformMatrix2fvARB_IIBaF( int location, int count, byte transpose, float[] value );
        private delegate void DglUniformMatrix2fvARB_IIBP( int location, int count, byte transpose, IntPtr value );
        private delegate void DglUniformMatrix3fv_IIBaF( int location, int count, byte transpose, float[] value );
        private delegate void DglUniformMatrix3fv_IIBP( int location, int count, byte transpose, IntPtr value );
        private delegate void DglUniformMatrix3fvARB_IIBaF( int location, int count, byte transpose, float[] value );
        private delegate void DglUniformMatrix3fvARB_IIBP( int location, int count, byte transpose, IntPtr value );
        private delegate void DglUniformMatrix4fv_IIBaF( int location, int count, byte transpose, float[] value );
        private delegate void DglUniformMatrix4fv_IIBP( int location, int count, byte transpose, IntPtr value );
        private delegate void DglUniformMatrix4fvARB_IIBaF( int location, int count, byte transpose, float[] value );
        private delegate void DglUniformMatrix4fvARB_IIBP( int location, int count, byte transpose, IntPtr value );
        private delegate void DglUnlockArraysEXT_V();
        private delegate byte DglUnmapBuffer_I( int target );
        private delegate byte DglUnmapBufferARB_I( int target );
        private delegate void DglUnmapObjectBufferATI_I( int buffer );
        private delegate void DgluNurbsCallback_PIP( IntPtr nobj, int which, IntPtr fn );
        private delegate void DgluNurbsCurve_PIaFIaFII( IntPtr nobj, int nknots, float[] knot, int stride, float[] ctlarray, int order, int itype );
        private delegate void DgluNurbsCurve_PIaFIPII( IntPtr nobj, int nknots, float[] knot, int stride, IntPtr ctlarray, int order, int itype );
        private delegate void DgluNurbsCurve_PIPIaFII( IntPtr nobj, int nknots, IntPtr knot, int stride, float[] ctlarray, int order, int itype );
        private delegate void DgluNurbsCurve_PIPIPII( IntPtr nobj, int nknots, IntPtr knot, int stride, IntPtr ctlarray, int order, int itype );
        private delegate void DgluNurbsProperty_PIF( IntPtr nobj, int property, float value );
        private delegate void DgluNurbsSurface_PIaFIaFIIaFIII( IntPtr nobj, int sknot_count, float[] sknot, int tknot_count, float[] tknot, int s_stride, int t_stride, float[] ctlarray, int sorder, int torder, int itype );
        private delegate void DgluNurbsSurface_PIaFIaFIIPIII( IntPtr nobj, int sknot_count, float[] sknot, int tknot_count, float[] tknot, int s_stride, int t_stride, IntPtr ctlarray, int sorder, int torder, int itype );
        private delegate void DgluNurbsSurface_PIaFIPIIaFIII( IntPtr nobj, int sknot_count, float[] sknot, int tknot_count, IntPtr tknot, int s_stride, int t_stride, float[] ctlarray, int sorder, int torder, int itype );
        private delegate void DgluNurbsSurface_PIaFIPIIPIII( IntPtr nobj, int sknot_count, float[] sknot, int tknot_count, IntPtr tknot, int s_stride, int t_stride, IntPtr ctlarray, int sorder, int torder, int itype );
        private delegate void DgluNurbsSurface_PIPIaFIIaFIII( IntPtr nobj, int sknot_count, IntPtr sknot, int tknot_count, float[] tknot, int s_stride, int t_stride, float[] ctlarray, int sorder, int torder, int itype );
        private delegate void DgluNurbsSurface_PIPIaFIIPIII( IntPtr nobj, int sknot_count, IntPtr sknot, int tknot_count, float[] tknot, int s_stride, int t_stride, IntPtr ctlarray, int sorder, int torder, int itype );
        private delegate void DgluNurbsSurface_PIPIPIIaFIII( IntPtr nobj, int sknot_count, IntPtr sknot, int tknot_count, IntPtr tknot, int s_stride, int t_stride, float[] ctlarray, int sorder, int torder, int itype );
        private delegate void DgluNurbsSurface_PIPIPIIPIII( IntPtr nobj, int sknot_count, IntPtr sknot, int tknot_count, IntPtr tknot, int s_stride, int t_stride, IntPtr ctlarray, int sorder, int torder, int itype );
        private delegate void DgluOrtho2D_DDDD( double left, double right, double bottom, double top );
        private delegate void DgluPartialDisk_PDDIIDD( IntPtr qobj, double innerRadius, double outerRadius, int slices, int loops, double startAngle, double sweepAngle );
        private delegate void DglUpdateObjectBufferATI_IIIaBI( int buffer, int offset, int size, byte[] pointer, int preserve );
        private delegate void DglUpdateObjectBufferATI_IIIPI( int buffer, int offset, int size, IntPtr pointer, int preserve );
        private delegate void DgluPerspective_DDDD( double fovy, double aspect, double zNear, double zFar );
        private delegate void DgluPickMatrix_DDDDaI( double x, double y, double width, double height, int[] viewport );
        private delegate void DgluPickMatrix_DDDDP( double x, double y, double width, double height, IntPtr viewport );
        private delegate int DgluProject_DDDaDaDaIrDrDrD( double objx, double objy, double objz, double[] modelMatrix, double[] projMatrix, int[] viewport, ref double winx, ref double winy, ref double winz );
        private delegate int DgluProject_DDDPPPPPP( double objx, double objy, double objz, IntPtr modelMatrix, IntPtr projMatrix, IntPtr viewport, IntPtr winx, IntPtr winy, IntPtr winz );
        private delegate void DgluPwlCurve_PIaFII( IntPtr nobj, int count, float[] array, int stride, int itype );
        private delegate void DgluPwlCurve_PIPII( IntPtr nobj, int count, IntPtr array, int stride, int itype );
        private delegate void DgluQuadricCallback_PIP( IntPtr qobj, int which, IntPtr fn );
        private delegate void DgluQuadricDrawStyle_PI( IntPtr quadObject, int drawStyle );
        private delegate void DgluQuadricNormals_PI( IntPtr quadObject, int normals );
        private delegate void DgluQuadricOrientation_PI( IntPtr quadObject, int orientation );
        private delegate void DgluQuadricTexture_PB( IntPtr quadObject, byte textureCoords );
        private delegate int DgluScaleImage_IIIIaBIIIaB( int format, int widthin, int heightin, int typein, byte[] datain, int widthout, int heightout, int typeout, byte[] dataout );
        private delegate int DgluScaleImage_IIIIaBIIIP( int format, int widthin, int heightin, int typein, byte[] datain, int widthout, int heightout, int typeout, IntPtr dataout );
        private delegate int DgluScaleImage_IIIIPIIIaB( int format, int widthin, int heightin, int typein, IntPtr datain, int widthout, int heightout, int typeout, byte[] dataout );
        private delegate int DgluScaleImage_IIIIPIIIP( int format, int widthin, int heightin, int typein, IntPtr datain, int widthout, int heightout, int typeout, IntPtr dataout );
        private delegate void DglUseProgram_I( int program );
        private delegate void DglUseProgramObjectARB_I( int programObj );
        private delegate void DgluSphere_PDII( IntPtr qobj, double radius, int slices, int stacks );
        private delegate void DgluTessBeginContour_P( IntPtr tess );
        private delegate void DgluTessBeginPolygon_PaB( IntPtr tess, byte[] polygon_data );
        private delegate void DgluTessBeginPolygon_PP( IntPtr tess, IntPtr polygon_data );
        private delegate void DgluTessCallback_PIP( IntPtr tess, int which, IntPtr fn );
        private delegate void DgluTessEndContour_P( IntPtr tess );
        private delegate void DgluTessEndPolygon_P( IntPtr tess );
        private delegate void DgluTessNormal_PDDD( IntPtr tess, double x, double y, double z );
        private delegate void DgluTessProperty_PID( IntPtr tess, int which, double value );
        private delegate void DgluTessVertex_PaDaB( IntPtr tess, double[] coords, byte[] data );
        private delegate void DgluTessVertex_PaDP( IntPtr tess, double[] coords, IntPtr data );
        private delegate void DgluTessVertex_PPaB( IntPtr tess, IntPtr coords, byte[] data );
        private delegate void DgluTessVertex_PPP( IntPtr tess, IntPtr coords, IntPtr data );
        private delegate int DgluUnProject_DDDaDaDaIrDrDrD( double winx, double winy, double winz, double[] modelMatrix, double[] projMatrix, int[] viewport, ref double objx, ref double objy, ref double objz );
        private delegate int DgluUnProject_DDDPPPPPP( double winx, double winy, double winz, IntPtr modelMatrix, IntPtr projMatrix, IntPtr viewport, IntPtr objx, IntPtr objy, IntPtr objz );
        private delegate void DglValidateProgram_I( int program );
        private delegate void DglValidateProgramARB_I( int programObj );
        private delegate void DglVariantArrayObjectATI_IIIII( int id, int itype, int stride, int buffer, int offset );
        private delegate void DglVariantbvEXT_IaB( int id, byte[] addr );
        private delegate void DglVariantbvEXT_IP( int id, IntPtr addr );
        private delegate void DglVariantdvEXT_IaD( int id, double[] addr );
        private delegate void DglVariantdvEXT_IP( int id, IntPtr addr );
        private delegate void DglVariantfvEXT_IaF( int id, float[] addr );
        private delegate void DglVariantfvEXT_IP( int id, IntPtr addr );
        private delegate void DglVariantivEXT_IaI( int id, int[] addr );
        private delegate void DglVariantivEXT_IP( int id, IntPtr addr );
        private delegate void DglVariantPointerEXT_IIIaB( int id, int itype, int stride, byte[] addr );
        private delegate void DglVariantPointerEXT_IIIaH( int id, int itype, int stride, short[] addr );
        private delegate void DglVariantPointerEXT_IIIaI( int id, int itype, int stride, int[] addr );
        private delegate void DglVariantPointerEXT_IIIaF( int id, int itype, int stride, float[] addr );
        private delegate void DglVariantPointerEXT_IIIaD( int id, int itype, int stride, double[] addr );
        private delegate void DglVariantPointerEXT_IIIP( int id, int itype, int stride, IntPtr addr );
        private delegate void DglVariantsvEXT_IaH( int id, short[] addr );
        private delegate void DglVariantsvEXT_IP( int id, IntPtr addr );
        private delegate void DglVariantubvEXT_IaB( int id, byte[] addr );
        private delegate void DglVariantubvEXT_IP( int id, IntPtr addr );
        private delegate void DglVariantuivEXT_IaI( int id, int[] addr );
        private delegate void DglVariantuivEXT_IP( int id, IntPtr addr );
        private delegate void DglVariantusvEXT_IaH( int id, short[] addr );
        private delegate void DglVariantusvEXT_IP( int id, IntPtr addr );
        private delegate void DglVertex2d_DD( double x, double y );
        private delegate void DglVertex2dv_aD( double[] v );
        private delegate void DglVertex2dv_P( IntPtr v );
        private delegate void DglVertex2f_FF( float x, float y );
        private delegate void DglVertex2fv_aF( float[] v );
        private delegate void DglVertex2fv_P( IntPtr v );
        private delegate void DglVertex2hNV_HH( short x, short y );
        private delegate void DglVertex2hvNV_aH( short[] v );
        private delegate void DglVertex2hvNV_P( IntPtr v );
        private delegate void DglVertex2i_II( int x, int y );
        private delegate void DglVertex2iv_aI( int[] v );
        private delegate void DglVertex2iv_P( IntPtr v );
        private delegate void DglVertex2s_HH( short x, short y );
        private delegate void DglVertex2sv_aH( short[] v );
        private delegate void DglVertex2sv_P( IntPtr v );
        private delegate void DglVertex3d_DDD( double x, double y, double z );
        private delegate void DglVertex3dv_aD( double[] v );
        private delegate void DglVertex3dv_P( IntPtr v );
        private delegate void DglVertex3f_FFF( float x, float y, float z );
        private delegate void DglVertex3fv_aF( float[] v );
        private delegate void DglVertex3fv_P( IntPtr v );
        private delegate void DglVertex3hNV_HHH( short x, short y, short z );
        private delegate void DglVertex3hvNV_aH( short[] v );
        private delegate void DglVertex3hvNV_P( IntPtr v );
        private delegate void DglVertex3i_III( int x, int y, int z );
        private delegate void DglVertex3iv_aI( int[] v );
        private delegate void DglVertex3iv_P( IntPtr v );
        private delegate void DglVertex3s_HHH( short x, short y, short z );
        private delegate void DglVertex3sv_aH( short[] v );
        private delegate void DglVertex3sv_P( IntPtr v );
        private delegate void DglVertex4d_DDDD( double x, double y, double z, double w );
        private delegate void DglVertex4dv_aD( double[] v );
        private delegate void DglVertex4dv_P( IntPtr v );
        private delegate void DglVertex4f_FFFF( float x, float y, float z, float w );
        private delegate void DglVertex4fv_aF( float[] v );
        private delegate void DglVertex4fv_P( IntPtr v );
        private delegate void DglVertex4hNV_HHHH( short x, short y, short z, short w );
        private delegate void DglVertex4hvNV_aH( short[] v );
        private delegate void DglVertex4hvNV_P( IntPtr v );
        private delegate void DglVertex4i_IIII( int x, int y, int z, int w );
        private delegate void DglVertex4iv_aI( int[] v );
        private delegate void DglVertex4iv_P( IntPtr v );
        private delegate void DglVertex4s_HHHH( short x, short y, short z, short w );
        private delegate void DglVertex4sv_aH( short[] v );
        private delegate void DglVertex4sv_P( IntPtr v );
        private delegate void DglVertexArrayParameteriAPPLE_II( int pname, int iparam );
        private delegate void DglVertexArrayRangeAPPLE_IaB( int length, byte[] pointer );
        private delegate void DglVertexArrayRangeAPPLE_IP( int length, IntPtr pointer );
        private delegate void DglVertexArrayRangeNV_IaB( int length, byte[] pointer );
        private delegate void DglVertexArrayRangeNV_IP( int length, IntPtr pointer );
        private delegate void DglVertexAttrib1d_ID( int index, double x );
        private delegate void DglVertexAttrib1dARB_ID( int index, double x );
        private delegate void DglVertexAttrib1dNV_ID( int index, double x );
        private delegate void DglVertexAttrib1dv_IaD( int index, double[] v );
        private delegate void DglVertexAttrib1dv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib1dvARB_IaD( int index, double[] v );
        private delegate void DglVertexAttrib1dvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib1dvNV_IaD( int index, double[] v );
        private delegate void DglVertexAttrib1dvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib1f_IF( int index, float x );
        private delegate void DglVertexAttrib1fARB_IF( int index, float x );
        private delegate void DglVertexAttrib1fNV_IF( int index, float x );
        private delegate void DglVertexAttrib1fv_IaF( int index, float[] v );
        private delegate void DglVertexAttrib1fv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib1fvARB_IaF( int index, float[] v );
        private delegate void DglVertexAttrib1fvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib1fvNV_IaF( int index, float[] v );
        private delegate void DglVertexAttrib1fvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib1hNV_IH( int index, short x );
        private delegate void DglVertexAttrib1hvNV_IaH( int index, short[] v );
        private delegate void DglVertexAttrib1hvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib1s_IH( int index, short x );
        private delegate void DglVertexAttrib1sARB_IH( int index, short x );
        private delegate void DglVertexAttrib1sNV_IH( int index, short x );
        private delegate void DglVertexAttrib1sv_IaH( int index, short[] v );
        private delegate void DglVertexAttrib1sv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib1svARB_IaH( int index, short[] v );
        private delegate void DglVertexAttrib1svARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib1svNV_IaH( int index, short[] v );
        private delegate void DglVertexAttrib1svNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib2d_IDD( int index, double x, double y );
        private delegate void DglVertexAttrib2dARB_IDD( int index, double x, double y );
        private delegate void DglVertexAttrib2dNV_IDD( int index, double x, double y );
        private delegate void DglVertexAttrib2dv_IaD( int index, double[] v );
        private delegate void DglVertexAttrib2dv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib2dvARB_IaD( int index, double[] v );
        private delegate void DglVertexAttrib2dvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib2dvNV_IaD( int index, double[] v );
        private delegate void DglVertexAttrib2dvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib2f_IFF( int index, float x, float y );
        private delegate void DglVertexAttrib2fARB_IFF( int index, float x, float y );
        private delegate void DglVertexAttrib2fNV_IFF( int index, float x, float y );
        private delegate void DglVertexAttrib2fv_IaF( int index, float[] v );
        private delegate void DglVertexAttrib2fv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib2fvARB_IaF( int index, float[] v );
        private delegate void DglVertexAttrib2fvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib2fvNV_IaF( int index, float[] v );
        private delegate void DglVertexAttrib2fvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib2hNV_IHH( int index, short x, short y );
        private delegate void DglVertexAttrib2hvNV_IaH( int index, short[] v );
        private delegate void DglVertexAttrib2hvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib2s_IHH( int index, short x, short y );
        private delegate void DglVertexAttrib2sARB_IHH( int index, short x, short y );
        private delegate void DglVertexAttrib2sNV_IHH( int index, short x, short y );
        private delegate void DglVertexAttrib2sv_IaH( int index, short[] v );
        private delegate void DglVertexAttrib2sv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib2svARB_IaH( int index, short[] v );
        private delegate void DglVertexAttrib2svARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib2svNV_IaH( int index, short[] v );
        private delegate void DglVertexAttrib2svNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib3d_IDDD( int index, double x, double y, double z );
        private delegate void DglVertexAttrib3dARB_IDDD( int index, double x, double y, double z );
        private delegate void DglVertexAttrib3dNV_IDDD( int index, double x, double y, double z );
        private delegate void DglVertexAttrib3dv_IaD( int index, double[] v );
        private delegate void DglVertexAttrib3dv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib3dvARB_IaD( int index, double[] v );
        private delegate void DglVertexAttrib3dvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib3dvNV_IaD( int index, double[] v );
        private delegate void DglVertexAttrib3dvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib3f_IFFF( int index, float x, float y, float z );
        private delegate void DglVertexAttrib3fARB_IFFF( int index, float x, float y, float z );
        private delegate void DglVertexAttrib3fNV_IFFF( int index, float x, float y, float z );
        private delegate void DglVertexAttrib3fv_IaF( int index, float[] v );
        private delegate void DglVertexAttrib3fv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib3fvARB_IaF( int index, float[] v );
        private delegate void DglVertexAttrib3fvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib3fvNV_IaF( int index, float[] v );
        private delegate void DglVertexAttrib3fvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib3hNV_IHHH( int index, short x, short y, short z );
        private delegate void DglVertexAttrib3hvNV_IaH( int index, short[] v );
        private delegate void DglVertexAttrib3hvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib3s_IHHH( int index, short x, short y, short z );
        private delegate void DglVertexAttrib3sARB_IHHH( int index, short x, short y, short z );
        private delegate void DglVertexAttrib3sNV_IHHH( int index, short x, short y, short z );
        private delegate void DglVertexAttrib3sv_IaH( int index, short[] v );
        private delegate void DglVertexAttrib3sv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib3svARB_IaH( int index, short[] v );
        private delegate void DglVertexAttrib3svARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib3svNV_IaH( int index, short[] v );
        private delegate void DglVertexAttrib3svNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4bv_IaB( int index, byte[] v );
        private delegate void DglVertexAttrib4bv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4bvARB_IaB( int index, byte[] v );
        private delegate void DglVertexAttrib4bvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4d_IDDDD( int index, double x, double y, double z, double w );
        private delegate void DglVertexAttrib4dARB_IDDDD( int index, double x, double y, double z, double w );
        private delegate void DglVertexAttrib4dNV_IDDDD( int index, double x, double y, double z, double w );
        private delegate void DglVertexAttrib4dv_IaD( int index, double[] v );
        private delegate void DglVertexAttrib4dv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4dvARB_IaD( int index, double[] v );
        private delegate void DglVertexAttrib4dvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4dvNV_IaD( int index, double[] v );
        private delegate void DglVertexAttrib4dvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4f_IFFFF( int index, float x, float y, float z, float w );
        private delegate void DglVertexAttrib4fARB_IFFFF( int index, float x, float y, float z, float w );
        private delegate void DglVertexAttrib4fNV_IFFFF( int index, float x, float y, float z, float w );
        private delegate void DglVertexAttrib4fv_IaF( int index, float[] v );
        private delegate void DglVertexAttrib4fv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4fvARB_IaF( int index, float[] v );
        private delegate void DglVertexAttrib4fvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4fvNV_IaF( int index, float[] v );
        private delegate void DglVertexAttrib4fvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4hNV_IHHHH( int index, short x, short y, short z, short w );
        private delegate void DglVertexAttrib4hvNV_IaH( int index, short[] v );
        private delegate void DglVertexAttrib4hvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4iv_IaI( int index, int[] v );
        private delegate void DglVertexAttrib4iv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4ivARB_IaI( int index, int[] v );
        private delegate void DglVertexAttrib4ivARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4Nbv_IaB( int index, byte[] v );
        private delegate void DglVertexAttrib4Nbv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4NbvARB_IaB( int index, byte[] v );
        private delegate void DglVertexAttrib4NbvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4Niv_IaI( int index, int[] v );
        private delegate void DglVertexAttrib4Niv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4NivARB_IaI( int index, int[] v );
        private delegate void DglVertexAttrib4NivARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4Nsv_IaH( int index, short[] v );
        private delegate void DglVertexAttrib4Nsv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4NsvARB_IaH( int index, short[] v );
        private delegate void DglVertexAttrib4NsvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4Nub_IBBBB( int index, byte x, byte y, byte z, byte w );
        private delegate void DglVertexAttrib4NubARB_IBBBB( int index, byte x, byte y, byte z, byte w );
        private delegate void DglVertexAttrib4Nubv_IaB( int index, byte[] v );
        private delegate void DglVertexAttrib4Nubv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4NubvARB_IaB( int index, byte[] v );
        private delegate void DglVertexAttrib4NubvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4Nuiv_IaI( int index, int[] v );
        private delegate void DglVertexAttrib4Nuiv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4NuivARB_IaI( int index, int[] v );
        private delegate void DglVertexAttrib4NuivARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4Nusv_IaH( int index, short[] v );
        private delegate void DglVertexAttrib4Nusv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4NusvARB_IaH( int index, short[] v );
        private delegate void DglVertexAttrib4NusvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4s_IHHHH( int index, short x, short y, short z, short w );
        private delegate void DglVertexAttrib4sARB_IHHHH( int index, short x, short y, short z, short w );
        private delegate void DglVertexAttrib4sNV_IHHHH( int index, short x, short y, short z, short w );
        private delegate void DglVertexAttrib4sv_IaH( int index, short[] v );
        private delegate void DglVertexAttrib4sv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4svARB_IaH( int index, short[] v );
        private delegate void DglVertexAttrib4svARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4svNV_IaH( int index, short[] v );
        private delegate void DglVertexAttrib4svNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4ubNV_IBBBB( int index, byte x, byte y, byte z, byte w );
        private delegate void DglVertexAttrib4ubv_IaB( int index, byte[] v );
        private delegate void DglVertexAttrib4ubv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4ubvARB_IaB( int index, byte[] v );
        private delegate void DglVertexAttrib4ubvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4ubvNV_IaB( int index, byte[] v );
        private delegate void DglVertexAttrib4ubvNV_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4uiv_IaI( int index, int[] v );
        private delegate void DglVertexAttrib4uiv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4uivARB_IaI( int index, int[] v );
        private delegate void DglVertexAttrib4uivARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4usv_IaH( int index, short[] v );
        private delegate void DglVertexAttrib4usv_IP( int index, IntPtr v );
        private delegate void DglVertexAttrib4usvARB_IaH( int index, short[] v );
        private delegate void DglVertexAttrib4usvARB_IP( int index, IntPtr v );
        private delegate void DglVertexAttribArrayObjectATI_IIIBIII( int index, int size, int itype, byte normalized, int stride, int buffer, int offset );
        private delegate void DglVertexAttribPointer_IIIBIaB( int index, int size, int itype, byte normalized, int stride, byte[] pointer );
        private delegate void DglVertexAttribPointer_IIIBIaH( int index, int size, int itype, byte normalized, int stride, short[] pointer );
        private delegate void DglVertexAttribPointer_IIIBIaI( int index, int size, int itype, byte normalized, int stride, int[] pointer );
        private delegate void DglVertexAttribPointer_IIIBIaF( int index, int size, int itype, byte normalized, int stride, float[] pointer );
        private delegate void DglVertexAttribPointer_IIIBIaD( int index, int size, int itype, byte normalized, int stride, double[] pointer );
        private delegate void DglVertexAttribPointer_IIIBIP( int index, int size, int itype, byte normalized, int stride, IntPtr pointer );
        private delegate void DglVertexAttribPointerARB_IIIBIaB( int index, int size, int itype, byte normalized, int stride, byte[] pointer );
        private delegate void DglVertexAttribPointerARB_IIIBIaH( int index, int size, int itype, byte normalized, int stride, short[] pointer );
        private delegate void DglVertexAttribPointerARB_IIIBIaI( int index, int size, int itype, byte normalized, int stride, int[] pointer );
        private delegate void DglVertexAttribPointerARB_IIIBIaF( int index, int size, int itype, byte normalized, int stride, float[] pointer );
        private delegate void DglVertexAttribPointerARB_IIIBIaD( int index, int size, int itype, byte normalized, int stride, double[] pointer );
        private delegate void DglVertexAttribPointerARB_IIIBIP( int index, int size, int itype, byte normalized, int stride, IntPtr pointer );
        private delegate void DglVertexAttribPointerNV_IIIIaB( int index, int fsize, int itype, int stride, byte[] pointer );
        private delegate void DglVertexAttribPointerNV_IIIIaH( int index, int fsize, int itype, int stride, short[] pointer );
        private delegate void DglVertexAttribPointerNV_IIIIaI( int index, int fsize, int itype, int stride, int[] pointer );
        private delegate void DglVertexAttribPointerNV_IIIIaF( int index, int fsize, int itype, int stride, float[] pointer );
        private delegate void DglVertexAttribPointerNV_IIIIaD( int index, int fsize, int itype, int stride, double[] pointer );
        private delegate void DglVertexAttribPointerNV_IIIIP( int index, int fsize, int itype, int stride, IntPtr pointer );
        private delegate void DglVertexAttribs1dvNV_IIaD( int index, int count, double[] v );
        private delegate void DglVertexAttribs1dvNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs1fvNV_IIaF( int index, int count, float[] v );
        private delegate void DglVertexAttribs1fvNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs1hvNV_IIaH( int index, int n, short[] v );
        private delegate void DglVertexAttribs1hvNV_IIP( int index, int n, IntPtr v );
        private delegate void DglVertexAttribs1svNV_IIaH( int index, int count, short[] v );
        private delegate void DglVertexAttribs1svNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs2dvNV_IIaD( int index, int count, double[] v );
        private delegate void DglVertexAttribs2dvNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs2fvNV_IIaF( int index, int count, float[] v );
        private delegate void DglVertexAttribs2fvNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs2hvNV_IIaH( int index, int n, short[] v );
        private delegate void DglVertexAttribs2hvNV_IIP( int index, int n, IntPtr v );
        private delegate void DglVertexAttribs2svNV_IIaH( int index, int count, short[] v );
        private delegate void DglVertexAttribs2svNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs3dvNV_IIaD( int index, int count, double[] v );
        private delegate void DglVertexAttribs3dvNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs3fvNV_IIaF( int index, int count, float[] v );
        private delegate void DglVertexAttribs3fvNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs3hvNV_IIaH( int index, int n, short[] v );
        private delegate void DglVertexAttribs3hvNV_IIP( int index, int n, IntPtr v );
        private delegate void DglVertexAttribs3svNV_IIaH( int index, int count, short[] v );
        private delegate void DglVertexAttribs3svNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs4dvNV_IIaD( int index, int count, double[] v );
        private delegate void DglVertexAttribs4dvNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs4fvNV_IIaF( int index, int count, float[] v );
        private delegate void DglVertexAttribs4fvNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs4hvNV_IIaH( int index, int n, short[] v );
        private delegate void DglVertexAttribs4hvNV_IIP( int index, int n, IntPtr v );
        private delegate void DglVertexAttribs4svNV_IIaH( int index, int count, short[] v );
        private delegate void DglVertexAttribs4svNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexAttribs4ubvNV_IIaB( int index, int count, byte[] v );
        private delegate void DglVertexAttribs4ubvNV_IIP( int index, int count, IntPtr v );
        private delegate void DglVertexBlendARB_I( int count );
        private delegate void DglVertexBlendEnvfATI_IF( int pname, float fparam );
        private delegate void DglVertexBlendEnviATI_II( int pname, int iparam );
        private delegate void DglVertexPointer_IIIaH( int size, int itype, int stride, short[] pointer );
        private delegate void DglVertexPointer_IIIaI( int size, int itype, int stride, int[] pointer );
        private delegate void DglVertexPointer_IIIaF( int size, int itype, int stride, float[] pointer );
        private delegate void DglVertexPointer_IIIaD( int size, int itype, int stride, double[] pointer );
        private delegate void DglVertexPointer_IIIP( int size, int itype, int stride, IntPtr pointer );
        private delegate void DglVertexPointerEXT_IIIIaH( int size, int itype, int stride, int count, short[] pointer );
        private delegate void DglVertexPointerEXT_IIIIaI( int size, int itype, int stride, int count, int[] pointer );
        private delegate void DglVertexPointerEXT_IIIIaF( int size, int itype, int stride, int count, float[] pointer );
        private delegate void DglVertexPointerEXT_IIIIaD( int size, int itype, int stride, int count, double[] pointer );
        private delegate void DglVertexPointerEXT_IIIIP( int size, int itype, int stride, int count, IntPtr pointer );
        private delegate void DglVertexPointerListIBM_IIIrPI( int size, int itype, int stride, ref IntPtr pointer, int ptrstride );
        private delegate void DglVertexPointervINTEL_IIrP( int size, int itype, ref IntPtr pointer );
        private delegate void DglVertexStream1dATI_ID( int stream, double x );
        private delegate void DglVertexStream1dvATI_IaD( int stream, double[] coords );
        private delegate void DglVertexStream1dvATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream1fATI_IF( int stream, float x );
        private delegate void DglVertexStream1fvATI_IaF( int stream, float[] coords );
        private delegate void DglVertexStream1fvATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream1iATI_II( int stream, int x );
        private delegate void DglVertexStream1ivATI_IaI( int stream, int[] coords );
        private delegate void DglVertexStream1ivATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream1sATI_IH( int stream, short x );
        private delegate void DglVertexStream1svATI_IaH( int stream, short[] coords );
        private delegate void DglVertexStream1svATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream2dATI_IDD( int stream, double x, double y );
        private delegate void DglVertexStream2dvATI_IaD( int stream, double[] coords );
        private delegate void DglVertexStream2dvATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream2fATI_IFF( int stream, float x, float y );
        private delegate void DglVertexStream2fvATI_IaF( int stream, float[] coords );
        private delegate void DglVertexStream2fvATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream2iATI_III( int stream, int x, int y );
        private delegate void DglVertexStream2ivATI_IaI( int stream, int[] coords );
        private delegate void DglVertexStream2ivATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream2sATI_IHH( int stream, short x, short y );
        private delegate void DglVertexStream2svATI_IaH( int stream, short[] coords );
        private delegate void DglVertexStream2svATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream3dATI_IDDD( int stream, double x, double y, double z );
        private delegate void DglVertexStream3dvATI_IaD( int stream, double[] coords );
        private delegate void DglVertexStream3dvATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream3fATI_IFFF( int stream, float x, float y, float z );
        private delegate void DglVertexStream3fvATI_IaF( int stream, float[] coords );
        private delegate void DglVertexStream3fvATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream3iATI_IIII( int stream, int x, int y, int z );
        private delegate void DglVertexStream3ivATI_IaI( int stream, int[] coords );
        private delegate void DglVertexStream3ivATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream3sATI_IHHH( int stream, short x, short y, short z );
        private delegate void DglVertexStream3svATI_IaH( int stream, short[] coords );
        private delegate void DglVertexStream3svATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream4dATI_IDDDD( int stream, double x, double y, double z, double w );
        private delegate void DglVertexStream4dvATI_IaD( int stream, double[] coords );
        private delegate void DglVertexStream4dvATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream4fATI_IFFFF( int stream, float x, float y, float z, float w );
        private delegate void DglVertexStream4fvATI_IaF( int stream, float[] coords );
        private delegate void DglVertexStream4fvATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream4iATI_IIIII( int stream, int x, int y, int z, int w );
        private delegate void DglVertexStream4ivATI_IaI( int stream, int[] coords );
        private delegate void DglVertexStream4ivATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexStream4sATI_IHHHH( int stream, short x, short y, short z, short w );
        private delegate void DglVertexStream4svATI_IaH( int stream, short[] coords );
        private delegate void DglVertexStream4svATI_IP( int stream, IntPtr coords );
        private delegate void DglVertexWeightfEXT_F( float weight );
        private delegate void DglVertexWeightfvEXT_aF( float[] weight );
        private delegate void DglVertexWeightfvEXT_P( IntPtr weight );
        private delegate void DglVertexWeighthNV_H( short weight );
        private delegate void DglVertexWeighthvNV_aH( short[] weight );
        private delegate void DglVertexWeighthvNV_P( IntPtr weight );
        private delegate void DglVertexWeightPointerEXT_IIIaB( int size, int itype, int stride, byte[] pointer );
        private delegate void DglVertexWeightPointerEXT_IIIaH( int size, int itype, int stride, short[] pointer );
        private delegate void DglVertexWeightPointerEXT_IIIaI( int size, int itype, int stride, int[] pointer );
        private delegate void DglVertexWeightPointerEXT_IIIaF( int size, int itype, int stride, float[] pointer );
        private delegate void DglVertexWeightPointerEXT_IIIaD( int size, int itype, int stride, double[] pointer );
        private delegate void DglVertexWeightPointerEXT_IIIP( int size, int itype, int stride, IntPtr pointer );
        private delegate void DglViewport_IIII( int x, int y, int width, int height );
        private delegate void DglWeightbvARB_IaB( int size, byte[] weights );
        private delegate void DglWeightbvARB_IP( int size, IntPtr weights );
        private delegate void DglWeightdvARB_IaD( int size, double[] weights );
        private delegate void DglWeightdvARB_IP( int size, IntPtr weights );
        private delegate void DglWeightfvARB_IaF( int size, float[] weights );
        private delegate void DglWeightfvARB_IP( int size, IntPtr weights );
        private delegate void DglWeightivARB_IaI( int size, int[] weights );
        private delegate void DglWeightivARB_IP( int size, IntPtr weights );
        private delegate void DglWeightPointerARB_IIIaB( int size, int itype, int stride, byte[] pointer );
        private delegate void DglWeightPointerARB_IIIaH( int size, int itype, int stride, short[] pointer );
        private delegate void DglWeightPointerARB_IIIaI( int size, int itype, int stride, int[] pointer );
        private delegate void DglWeightPointerARB_IIIaF( int size, int itype, int stride, float[] pointer );
        private delegate void DglWeightPointerARB_IIIaD( int size, int itype, int stride, double[] pointer );
        private delegate void DglWeightPointerARB_IIIP( int size, int itype, int stride, IntPtr pointer );
        private delegate void DglWeightsvARB_IaH( int size, short[] weights );
        private delegate void DglWeightsvARB_IP( int size, IntPtr weights );
        private delegate void DglWeightubvARB_IaB( int size, byte[] weights );
        private delegate void DglWeightubvARB_IP( int size, IntPtr weights );
        private delegate void DglWeightuivARB_IaI( int size, int[] weights );
        private delegate void DglWeightuivARB_IP( int size, IntPtr weights );
        private delegate void DglWeightusvARB_IaH( int size, short[] weights );
        private delegate void DglWeightusvARB_IP( int size, IntPtr weights );
        private delegate void DglWindowPos2d_DD( double x, double y );
        private delegate void DglWindowPos2dARB_DD( double x, double y );
        private delegate void DglWindowPos2dMESA_DD( double x, double y );
        private delegate void DglWindowPos2dv_aD( double[] v );
        private delegate void DglWindowPos2dv_P( IntPtr v );
        private delegate void DglWindowPos2dvARB_aD( double[] v );
        private delegate void DglWindowPos2dvARB_P( IntPtr v );
        private delegate void DglWindowPos2dvMESA_aD( double[] v );
        private delegate void DglWindowPos2dvMESA_P( IntPtr v );
        private delegate void DglWindowPos2f_FF( float x, float y );
        private delegate void DglWindowPos2fARB_FF( float x, float y );
        private delegate void DglWindowPos2fMESA_FF( float x, float y );
        private delegate void DglWindowPos2fv_aF( float[] v );
        private delegate void DglWindowPos2fv_P( IntPtr v );
        private delegate void DglWindowPos2fvARB_aF( float[] v );
        private delegate void DglWindowPos2fvARB_P( IntPtr v );
        private delegate void DglWindowPos2fvMESA_aF( float[] v );
        private delegate void DglWindowPos2fvMESA_P( IntPtr v );
        private delegate void DglWindowPos2i_II( int x, int y );
        private delegate void DglWindowPos2iARB_II( int x, int y );
        private delegate void DglWindowPos2iMESA_II( int x, int y );
        private delegate void DglWindowPos2iv_aI( int[] v );
        private delegate void DglWindowPos2iv_P( IntPtr v );
        private delegate void DglWindowPos2ivARB_aI( int[] v );
        private delegate void DglWindowPos2ivARB_P( IntPtr v );
        private delegate void DglWindowPos2ivMESA_aI( int[] v );
        private delegate void DglWindowPos2ivMESA_P( IntPtr v );
        private delegate void DglWindowPos2s_HH( short x, short y );
        private delegate void DglWindowPos2sARB_HH( short x, short y );
        private delegate void DglWindowPos2sMESA_HH( short x, short y );
        private delegate void DglWindowPos2sv_aH( short[] v );
        private delegate void DglWindowPos2sv_P( IntPtr v );
        private delegate void DglWindowPos2svARB_aH( short[] v );
        private delegate void DglWindowPos2svARB_P( IntPtr v );
        private delegate void DglWindowPos2svMESA_aH( short[] v );
        private delegate void DglWindowPos2svMESA_P( IntPtr v );
        private delegate void DglWindowPos3d_DDD( double x, double y, double z );
        private delegate void DglWindowPos3dARB_DDD( double x, double y, double z );
        private delegate void DglWindowPos3dMESA_DDD( double x, double y, double z );
        private delegate void DglWindowPos3dv_aD( double[] v );
        private delegate void DglWindowPos3dv_P( IntPtr v );
        private delegate void DglWindowPos3dvARB_aD( double[] v );
        private delegate void DglWindowPos3dvARB_P( IntPtr v );
        private delegate void DglWindowPos3dvMESA_aD( double[] v );
        private delegate void DglWindowPos3dvMESA_P( IntPtr v );
        private delegate void DglWindowPos3f_FFF( float x, float y, float z );
        private delegate void DglWindowPos3fARB_FFF( float x, float y, float z );
        private delegate void DglWindowPos3fMESA_FFF( float x, float y, float z );
        private delegate void DglWindowPos3fv_aF( float[] v );
        private delegate void DglWindowPos3fv_P( IntPtr v );
        private delegate void DglWindowPos3fvARB_aF( float[] v );
        private delegate void DglWindowPos3fvARB_P( IntPtr v );
        private delegate void DglWindowPos3fvMESA_aF( float[] v );
        private delegate void DglWindowPos3fvMESA_P( IntPtr v );
        private delegate void DglWindowPos3i_III( int x, int y, int z );
        private delegate void DglWindowPos3iARB_III( int x, int y, int z );
        private delegate void DglWindowPos3iMESA_III( int x, int y, int z );
        private delegate void DglWindowPos3iv_aI( int[] v );
        private delegate void DglWindowPos3iv_P( IntPtr v );
        private delegate void DglWindowPos3ivARB_aI( int[] v );
        private delegate void DglWindowPos3ivARB_P( IntPtr v );
        private delegate void DglWindowPos3ivMESA_aI( int[] v );
        private delegate void DglWindowPos3ivMESA_P( IntPtr v );
        private delegate void DglWindowPos3s_HHH( short x, short y, short z );
        private delegate void DglWindowPos3sARB_HHH( short x, short y, short z );
        private delegate void DglWindowPos3sMESA_HHH( short x, short y, short z );
        private delegate void DglWindowPos3sv_aH( short[] v );
        private delegate void DglWindowPos3sv_P( IntPtr v );
        private delegate void DglWindowPos3svARB_aH( short[] v );
        private delegate void DglWindowPos3svARB_P( IntPtr v );
        private delegate void DglWindowPos3svMESA_aH( short[] v );
        private delegate void DglWindowPos3svMESA_P( IntPtr v );
        private delegate void DglWindowPos4dMESA_DDDD( double x, double y, double z, double w );
        private delegate void DglWindowPos4dvMESA_aD( double[] v );
        private delegate void DglWindowPos4dvMESA_P( IntPtr v );
        private delegate void DglWindowPos4fMESA_FFFF( float x, float y, float z, float w );
        private delegate void DglWindowPos4fvMESA_aF( float[] v );
        private delegate void DglWindowPos4fvMESA_P( IntPtr v );
        private delegate void DglWindowPos4iMESA_IIII( int x, int y, int z, int w );
        private delegate void DglWindowPos4ivMESA_aI( int[] v );
        private delegate void DglWindowPos4ivMESA_P( IntPtr v );
        private delegate void DglWindowPos4sMESA_HHHH( short x, short y, short z, short w );
        private delegate void DglWindowPos4svMESA_aH( short[] v );
        private delegate void DglWindowPos4svMESA_P( IntPtr v );
        private delegate void DglWriteMaskEXT_IIIIII( int res, int iin, int outX, int outY, int outZ, int outW );
        private delegate int DSwapBuffers_P( IntPtr hdc );
        private delegate IntPtr DwglAllocateMemoryNV_IFFF( int size, float readfreq, float writefreq, float priority );
        private delegate int DwglAssociateImageBufferEventsI3D_PrPrPrII( IntPtr hDC, ref IntPtr pEvent, ref IntPtr pAddress, ref int pSize, int count );
        private delegate int DwglBeginFrameTrackingI3D_V();
        private delegate byte DwglBindDisplayColorTableEXT_H( short id );
        private delegate int DwglBindTexImageARB_PI( IntPtr hPbuffer, int iBuffer );
        private delegate int DwglChoosePixelFormatARB_PaIaFIaIrI( IntPtr hdc, int[] piAttribIList, float[] pfAttribFList, int nMaxFormats, int[] piFormats, ref int nNumFormats );
        private delegate int DwglChoosePixelFormatARB_PPPIPP( IntPtr hdc, IntPtr piAttribIList, IntPtr pfAttribFList, int nMaxFormats, IntPtr piFormats, IntPtr nNumFormats );
        private delegate int DwglChoosePixelFormatEXT_PaIaFIaIrI( IntPtr hdc, int[] piAttribIList, float[] pfAttribFList, int nMaxFormats, int[] piFormats, ref int nNumFormats );
        private delegate int DwglChoosePixelFormatEXT_PPPIPP( IntPtr hdc, IntPtr piAttribIList, IntPtr pfAttribFList, int nMaxFormats, IntPtr piFormats, IntPtr nNumFormats );
        private delegate int DwglCopyContext_PPI( IntPtr hglrcSrc, IntPtr hglrcDst, int mask );
        private delegate IntPtr DwglCreateBufferRegionARB_PII( IntPtr hDC, int iLayerPlane, int uType );
        private delegate IntPtr DwglCreateContext_P( IntPtr hdc );
        private delegate byte DwglCreateDisplayColorTableEXT_H( short id );
        private delegate IntPtr DwglCreateImageBufferI3D_PII( IntPtr hDC, int dwSize, int uFlags );
        private delegate IntPtr DwglCreateLayerContext_PI( IntPtr hdc, int iLayerPlane );
        private delegate IntPtr DwglCreatePbufferARB_PIIIaI( IntPtr hDC, int iPixelFormat, int iWidth, int iHeight, int[] piAttribList );
        private delegate IntPtr DwglCreatePbufferARB_PIIIP( IntPtr hDC, int iPixelFormat, int iWidth, int iHeight, IntPtr piAttribList );
        private delegate IntPtr DwglCreatePbufferEXT_PIIIaI( IntPtr hDC, int iPixelFormat, int iWidth, int iHeight, int[] piAttribList );
        private delegate IntPtr DwglCreatePbufferEXT_PIIIP( IntPtr hDC, int iPixelFormat, int iWidth, int iHeight, IntPtr piAttribList );
        private delegate void DwglDeleteBufferRegionARB_P( IntPtr hRegion );
        private delegate int DwglDeleteContext_P( IntPtr hglrc );
        private delegate int DwglDescribeLayerPlane_PIIIrX( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nBytes, ref LAYERPLANEDESCRIPTOR plpd );
        private delegate void DwglDestroyDisplayColorTableEXT_H( short id );
        private delegate int DwglDestroyImageBufferI3D_PaB( IntPtr hDC, byte[] pAddress );
        private delegate int DwglDestroyImageBufferI3D_PP( IntPtr hDC, IntPtr pAddress );
        private delegate int DwglDestroyPbufferARB_P( IntPtr hPbuffer );
        private delegate int DwglDestroyPbufferEXT_P( IntPtr hPbuffer );
        private delegate int DwglDisableFrameLockI3D_V();
        private delegate int DwglDisableGenlockI3D_P( IntPtr hDC );
        private delegate int DwglEnableFrameLockI3D_V();
        private delegate int DwglEnableGenlockI3D_P( IntPtr hDC );
        private delegate int DwglEndFrameTrackingI3D_V();
        private delegate void DwglFreeMemoryNV_P( IntPtr pointer );
        private delegate int DwglGenlockSampleRateI3D_PI( IntPtr hDC, int uRate );
        private delegate int DwglGenlockSourceDelayI3D_PI( IntPtr hDC, int uDelay );
        private delegate int DwglGenlockSourceEdgeI3D_PI( IntPtr hDC, int uEdge );
        private delegate int DwglGenlockSourceI3D_PI( IntPtr hDC, int uSource );
        private delegate IntPtr DwglGetCurrentContext_V();
        private delegate IntPtr DwglGetCurrentDC_V();
        private delegate IntPtr DwglGetCurrentReadDCARB_V();
        private delegate IntPtr DwglGetCurrentReadDCEXT_V();
        private delegate int DwglGetDigitalVideoParametersI3D_PIrI( IntPtr hDC, int iAttribute, ref int piValue );
        private delegate String DwglGetExtensionsStringARB_P( IntPtr hdc );
        private delegate String DwglGetExtensionsStringEXT_V();
        private delegate int DwglGetFrameUsageI3D_rF( ref float pUsage );
        private delegate int DwglGetGammaTableI3D_PIaHaHaH( IntPtr hDC, int iEntries, short[] puRed, short[] puGreen, short[] puBlue );
        private delegate int DwglGetGammaTableI3D_PIPPP( IntPtr hDC, int iEntries, IntPtr puRed, IntPtr puGreen, IntPtr puBlue );
        private delegate int DwglGetGammaTableParametersI3D_PIrI( IntPtr hDC, int iAttribute, ref int piValue );
        private delegate int DwglGetGenlockSampleRateI3D_PrI( IntPtr hDC, ref int uRate );
        private delegate int DwglGetGenlockSourceDelayI3D_PrI( IntPtr hDC, ref int uDelay );
        private delegate int DwglGetGenlockSourceEdgeI3D_PrI( IntPtr hDC, ref int uEdge );
        private delegate int DwglGetGenlockSourceI3D_PrI( IntPtr hDC, ref int uSource );
        private delegate int DwglGetLayerPaletteEntries_PIIIaI( IntPtr hdc, int iLayerPlane, int iStart, int cEntries, int[] rixbgr );
        private delegate int DwglGetLayerPaletteEntries_PIIIP( IntPtr hdc, int iLayerPlane, int iStart, int cEntries, IntPtr rixbgr );
        private delegate int DwglGetMscRateOML_PrIrI( IntPtr hdc, ref int numerator, ref int denominator );
        private delegate IntPtr DwglGetPbufferDCARB_P( IntPtr hPbuffer );
        private delegate IntPtr DwglGetPbufferDCEXT_P( IntPtr hPbuffer );
        private delegate int DwglGetPixelFormatAttribfvARB_PIIIaIaF( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, int[] piAttributes, float[] pfValues );
        private delegate int DwglGetPixelFormatAttribfvARB_PIIIPP( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, IntPtr piAttributes, IntPtr pfValues );
        private delegate int DwglGetPixelFormatAttribfvEXT_PIIIaIaF( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, int[] piAttributes, float[] pfValues );
        private delegate int DwglGetPixelFormatAttribfvEXT_PIIIPP( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, IntPtr piAttributes, IntPtr pfValues );
        private delegate int DwglGetPixelFormatAttribivARB_PIIIaIaI( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, int[] piAttributes, int[] piValues );
        private delegate int DwglGetPixelFormatAttribivARB_PIIIPP( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, IntPtr piAttributes, IntPtr piValues );
        private delegate int DwglGetPixelFormatAttribivEXT_PIIIaIaI( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, int[] piAttributes, int[] piValues );
        private delegate int DwglGetPixelFormatAttribivEXT_PIIIPP( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, IntPtr piAttributes, IntPtr piValues );
        private delegate IntPtr DwglGetProcAddress_S( String functionName );
        private delegate int DwglGetSwapIntervalEXT_V();
        private delegate int DwglGetSyncValuesOML_PrLrLrL( IntPtr hdc, ref long ust, ref long msc, ref long sbc );
        private delegate int DwglIsEnabledFrameLockI3D_rI( ref int pFlag );
        private delegate int DwglIsEnabledGenlockI3D_PrI( IntPtr hDC, ref int pFlag );
        private delegate byte DwglLoadDisplayColorTableEXT_aHI( short[] table, int length );
        private delegate byte DwglLoadDisplayColorTableEXT_PI( IntPtr table, int length );
        private delegate int DwglMakeContextCurrentARB_PPP( IntPtr hDrawDC, IntPtr hReadDC, IntPtr hglrc );
        private delegate int DwglMakeContextCurrentEXT_PPP( IntPtr hDrawDC, IntPtr hReadDC, IntPtr hglrc );
        private delegate int DwglMakeCurrent_PP( IntPtr hdc, IntPtr hglrc );
        private delegate int DwglQueryFrameLockMasterI3D_rI( ref int pFlag );
        private delegate int DwglQueryFrameTrackingI3D_rIrIrF( ref int pFrameCount, ref int pMissedFrames, ref float pLastMissedUsage );
        private delegate int DwglQueryGenlockMaxSourceDelayI3D_PrIrI( IntPtr hDC, ref int uMaxLineDelay, ref int uMaxPixelDelay );
        private delegate int DwglQueryPbufferARB_PIrI( IntPtr hPbuffer, int iAttribute, ref int piValue );
        private delegate int DwglQueryPbufferEXT_PIrI( IntPtr hPbuffer, int iAttribute, ref int piValue );
        private delegate int DwglRealizeLayerPalette_PII( IntPtr hdc, int iLayerPlane, int bRealize );
        private delegate int DwglReleaseImageBufferEventsI3D_PrPI( IntPtr hDC, ref IntPtr pAddress, int count );
        private delegate int DwglReleasePbufferDCARB_PP( IntPtr hPbuffer, IntPtr hDC );
        private delegate int DwglReleasePbufferDCEXT_PP( IntPtr hPbuffer, IntPtr hDC );
        private delegate int DwglReleaseTexImageARB_PI( IntPtr hPbuffer, int iBuffer );
        private delegate int DwglRestoreBufferRegionARB_PIIIIII( IntPtr hRegion, int x, int y, int width, int height, int xSrc, int ySrc );
        private delegate int DwglSaveBufferRegionARB_PIIII( IntPtr hRegion, int x, int y, int width, int height );
        private delegate int DwglSetDigitalVideoParametersI3D_PIrI( IntPtr hDC, int iAttribute, ref int piValue );
        private delegate int DwglSetGammaTableI3D_PIaHaHaH( IntPtr hDC, int iEntries, short[] puRed, short[] puGreen, short[] puBlue );
        private delegate int DwglSetGammaTableI3D_PIPPP( IntPtr hDC, int iEntries, IntPtr puRed, IntPtr puGreen, IntPtr puBlue );
        private delegate int DwglSetGammaTableParametersI3D_PIrI( IntPtr hDC, int iAttribute, ref int piValue );
        private delegate int DwglSetLayerPaletteEntries_PIIIaI( IntPtr hdc, int iLayerPlane, int iStart, int cEntries, int[] rixbgr );
        private delegate int DwglSetLayerPaletteEntries_PIIIP( IntPtr hdc, int iLayerPlane, int iStart, int cEntries, IntPtr rixbgr );
        private delegate int DwglSetPbufferAttribARB_PaI( IntPtr hPbuffer, int[] piAttribList );
        private delegate int DwglSetPbufferAttribARB_PP( IntPtr hPbuffer, IntPtr piAttribList );
        private delegate int DwglShareLists_PP( IntPtr hglrc1, IntPtr hglrc2 );
        private delegate int DwglSwapBuffers_P( IntPtr hdc );
        private delegate long DwglSwapBuffersMscOML_PLLL( IntPtr hdc, long target_msc, long divisor, long remainder );
        private delegate int DwglSwapIntervalEXT_I( int interval );
        private delegate int DwglSwapLayerBuffers_PI( IntPtr hdc, int fuPlanes );
        private delegate long DwglSwapLayerBuffersMscOML_PILLL( IntPtr hdc, int fuPlanes, long target_msc, long divisor, long remainder );
        private delegate int DwglSwapMultipleBuffers_IrX( int p1, ref WGLSWAP pwglswap );
        private delegate int DwglUseFontBitmapsA_PIII( IntPtr hdc, int first, int count, int listbase );
        private delegate int DwglUseFontBitmapsW_PIII( IntPtr hdc, int first, int count, int listbase );
        private delegate int DwglUseFontOutlinesA_PIIIFFIX( IntPtr hdc, int first, int count, int listBase, float deviation, float extrusion, int format, [Out, MarshalAs( UnmanagedType.LPArray )] GLYPHMETRICSFLOAT[] gmfarray );
        private delegate int DwglUseFontOutlinesA_PIIIFFIP( IntPtr hdc, int first, int count, int listBase, float deviation, float extrusion, int format, IntPtr gmfarray );
        private delegate int DwglUseFontOutlinesW_PIIIFFIX( IntPtr hdc, int first, int count, int listBase, float deviation, float extrusion, int format, [Out, MarshalAs( UnmanagedType.LPArray )] GLYPHMETRICSFLOAT[] gmfarray );
        private delegate int DwglUseFontOutlinesW_PIIIFFIP( IntPtr hdc, int first, int count, int listBase, float deviation, float extrusion, int format, IntPtr gmfarray );
        private delegate int DwglWaitForMscOML_PLLLrLrLrL( IntPtr hdc, long target_msc, long divisor, long remainder, ref long ust, ref long msc, ref long sbc );
        private delegate int DwglWaitForMscOML_PLLLPPP( IntPtr hdc, long target_msc, long divisor, long remainder, IntPtr ust, IntPtr msc, IntPtr sbc );
        private delegate int DwglWaitForSbcOML_PLPPP( IntPtr hdc, long target_sbc, IntPtr ust, IntPtr msc, IntPtr sbc );
















        private DglAccum_IF mDglAccum_IF;
        private DglActiveStencilFaceEXT_I mDglActiveStencilFaceEXT_I;
        private DglActiveTexture_I mDglActiveTexture_I;
        private DglActiveTextureARB_I mDglActiveTextureARB_I;
        private DglAddSwapHintRectWIN_IIII mDglAddSwapHintRectWIN_IIII;
        private DglAlphaFragmentOp1ATI_IIIIII mDglAlphaFragmentOp1ATI_IIIIII;
        private DglAlphaFragmentOp2ATI_IIIIIIIII mDglAlphaFragmentOp2ATI_IIIIIIIII;
        private DglAlphaFragmentOp3ATI_IIIIIIIIIIII mDglAlphaFragmentOp3ATI_IIIIIIIIIIII;
        private DglAlphaFunc_IF mDglAlphaFunc_IF;
        private DglApplyTextureEXT_I mDglApplyTextureEXT_I;
        private DglAreProgramsResidentNV_IaIaB mDglAreProgramsResidentNV_IaIaB;
        private DglAreProgramsResidentNV_IPP mDglAreProgramsResidentNV_IPP;
        private DglAreTexturesResident_IaIaB mDglAreTexturesResident_IaIaB;
        private DglAreTexturesResident_IPP mDglAreTexturesResident_IPP;
        private DglAreTexturesResidentEXT_IaIaB mDglAreTexturesResidentEXT_IaIaB;
        private DglAreTexturesResidentEXT_IPP mDglAreTexturesResidentEXT_IPP;
        private DglArrayElement_I mDglArrayElement_I;
        private DglArrayElementArrayEXT_IIaB mDglArrayElementArrayEXT_IIaB;
        private DglArrayElementArrayEXT_IIP mDglArrayElementArrayEXT_IIP;
        private DglArrayElementEXT_I mDglArrayElementEXT_I;
        private DglArrayObjectATI_IIIIII mDglArrayObjectATI_IIIIII;
        private DglAsyncMarkerSGIX_I mDglAsyncMarkerSGIX_I;
        private DglAttachObjectARB_II mDglAttachObjectARB_II;
        private DglAttachShader_II mDglAttachShader_II;
        private DglBegin_I mDglBegin_I;
        private DglBeginFragmentShaderATI_V mDglBeginFragmentShaderATI_V;
        private DglBeginOcclusionQueryNV_I mDglBeginOcclusionQueryNV_I;
        private DglBeginQuery_II mDglBeginQuery_II;
        private DglBeginQueryARB_II mDglBeginQueryARB_II;
        private DglBeginVertexShaderEXT_V mDglBeginVertexShaderEXT_V;
        private DglBindAttribLocation_IIS mDglBindAttribLocation_IIS;
        private DglBindAttribLocationARB_IIS mDglBindAttribLocationARB_IIS;
        private DglBindBuffer_II mDglBindBuffer_II;
        private DglBindBufferARB_II mDglBindBufferARB_II;
        private DglBindFragmentShaderATI_I mDglBindFragmentShaderATI_I;
        private DglBindFramebufferEXT_II mDglBindFramebufferEXT_II;
        private DglBindLightParameterEXT_II mDglBindLightParameterEXT_II;
        private DglBindMaterialParameterEXT_II mDglBindMaterialParameterEXT_II;
        private DglBindParameterEXT_I mDglBindParameterEXT_I;
        private DglBindProgramARB_II mDglBindProgramARB_II;
        private DglBindProgramNV_II mDglBindProgramNV_II;
        private DglBindRenderbufferEXT_II mDglBindRenderbufferEXT_II;
        private DglBindTexGenParameterEXT_III mDglBindTexGenParameterEXT_III;
        private DglBindTexture_II mDglBindTexture_II;
        private DglBindTextureEXT_II mDglBindTextureEXT_II;
        private DglBindTextureUnitParameterEXT_II mDglBindTextureUnitParameterEXT_II;
        private DglBindVertexArrayAPPLE_I mDglBindVertexArrayAPPLE_I;
        private DglBindVertexShaderEXT_I mDglBindVertexShaderEXT_I;
        private DglBinormal3bEXT_BBB mDglBinormal3bEXT_BBB;
        private DglBinormal3bvEXT_aB mDglBinormal3bvEXT_aB;
        private DglBinormal3bvEXT_P mDglBinormal3bvEXT_P;
        private DglBinormal3dEXT_DDD mDglBinormal3dEXT_DDD;
        private DglBinormal3dvEXT_aD mDglBinormal3dvEXT_aD;
        private DglBinormal3dvEXT_P mDglBinormal3dvEXT_P;
        private DglBinormal3fEXT_FFF mDglBinormal3fEXT_FFF;
        private DglBinormal3fvEXT_aF mDglBinormal3fvEXT_aF;
        private DglBinormal3fvEXT_P mDglBinormal3fvEXT_P;
        private DglBinormal3iEXT_III mDglBinormal3iEXT_III;
        private DglBinormal3ivEXT_aI mDglBinormal3ivEXT_aI;
        private DglBinormal3ivEXT_P mDglBinormal3ivEXT_P;
        private DglBinormal3sEXT_HHH mDglBinormal3sEXT_HHH;
        private DglBinormal3svEXT_aH mDglBinormal3svEXT_aH;
        private DglBinormal3svEXT_P mDglBinormal3svEXT_P;
        private DglBinormalPointerEXT_IIaF mDglBinormalPointerEXT_IIaF;
        private DglBinormalPointerEXT_IIP mDglBinormalPointerEXT_IIP;
        private DglBitmap_IIFFFFaB mDglBitmap_IIFFFFaB;
        private DglBitmap_IIFFFFP mDglBitmap_IIFFFFP;
        private DglBlendColor_FFFF mDglBlendColor_FFFF;
        private DglBlendColorEXT_FFFF mDglBlendColorEXT_FFFF;
        private DglBlendEquation_I mDglBlendEquation_I;
        private DglBlendEquationEXT_I mDglBlendEquationEXT_I;
        private DglBlendEquationSeparate_II mDglBlendEquationSeparate_II;
        private DglBlendEquationSeparateEXT_II mDglBlendEquationSeparateEXT_II;
        private DglBlendFunc_II mDglBlendFunc_II;
        private DglBlendFuncSeparate_IIII mDglBlendFuncSeparate_IIII;
        private DglBlendFuncSeparateEXT_IIII mDglBlendFuncSeparateEXT_IIII;
        private DglBlendFuncSeparateINGR_IIII mDglBlendFuncSeparateINGR_IIII;
        private DglBufferData_IIaBI mDglBufferData_IIaBI;
        private DglBufferData_IIPI mDglBufferData_IIPI;
        private DglBufferDataARB_IIaBI mDglBufferDataARB_IIaBI;
        private DglBufferDataARB_IIPI mDglBufferDataARB_IIPI;
        private DglBufferSubData_IIIaB mDglBufferSubData_IIIaB;
        private DglBufferSubData_IIIP mDglBufferSubData_IIIP;
        private DglBufferSubDataARB_IIIaB mDglBufferSubDataARB_IIIaB;
        private DglBufferSubDataARB_IIIP mDglBufferSubDataARB_IIIP;
        private DglCallList_I mDglCallList_I;
        private DglCallLists_IIaB mDglCallLists_IIaB;
        private DglCallLists_IIaH mDglCallLists_IIaH;
        private DglCallLists_IIaI mDglCallLists_IIaI;
        private DglCallLists_IIaF mDglCallLists_IIaF;
        private DglCallLists_IIP mDglCallLists_IIP;
        private DglCheckFramebufferStatusEXT_I mDglCheckFramebufferStatusEXT_I;
        private DglClampColorARB_II mDglClampColorARB_II;
        private DglClear_I mDglClear_I;
        private DglClearAccum_FFFF mDglClearAccum_FFFF;
        private DglClearColor_FFFF mDglClearColor_FFFF;
        private DglClearDepth_D mDglClearDepth_D;
        private DglClearIndex_F mDglClearIndex_F;
        private DglClearStencil_I mDglClearStencil_I;
        private DglClientActiveTexture_I mDglClientActiveTexture_I;
        private DglClientActiveTextureARB_I mDglClientActiveTextureARB_I;
        private DglClientActiveVertexStreamATI_I mDglClientActiveVertexStreamATI_I;
        private DglClipPlane_IaD mDglClipPlane_IaD;
        private DglClipPlane_IP mDglClipPlane_IP;
        private DglColor3b_BBB mDglColor3b_BBB;
        private DglColor3bv_aB mDglColor3bv_aB;
        private DglColor3bv_P mDglColor3bv_P;
        private DglColor3d_DDD mDglColor3d_DDD;
        private DglColor3dv_aD mDglColor3dv_aD;
        private DglColor3dv_P mDglColor3dv_P;
        private DglColor3f_FFF mDglColor3f_FFF;
        private DglColor3fv_aF mDglColor3fv_aF;
        private DglColor3fv_P mDglColor3fv_P;
        private DglColor3fVertex3fSUN_FFFFFF mDglColor3fVertex3fSUN_FFFFFF;
        private DglColor3fVertex3fvSUN_aFaF mDglColor3fVertex3fvSUN_aFaF;
        private DglColor3fVertex3fvSUN_aFP mDglColor3fVertex3fvSUN_aFP;
        private DglColor3fVertex3fvSUN_PaF mDglColor3fVertex3fvSUN_PaF;
        private DglColor3fVertex3fvSUN_PP mDglColor3fVertex3fvSUN_PP;
        private DglColor3hNV_HHH mDglColor3hNV_HHH;
        private DglColor3hvNV_aH mDglColor3hvNV_aH;
        private DglColor3hvNV_P mDglColor3hvNV_P;
        private DglColor3i_III mDglColor3i_III;
        private DglColor3iv_aI mDglColor3iv_aI;
        private DglColor3iv_P mDglColor3iv_P;
        private DglColor3s_HHH mDglColor3s_HHH;
        private DglColor3sv_aH mDglColor3sv_aH;
        private DglColor3sv_P mDglColor3sv_P;
        private DglColor3ub_BBB mDglColor3ub_BBB;
        private DglColor3ubv_aB mDglColor3ubv_aB;
        private DglColor3ubv_P mDglColor3ubv_P;
        private DglColor3ui_III mDglColor3ui_III;
        private DglColor3uiv_aI mDglColor3uiv_aI;
        private DglColor3uiv_P mDglColor3uiv_P;
        private DglColor3us_HHH mDglColor3us_HHH;
        private DglColor3usv_aH mDglColor3usv_aH;
        private DglColor3usv_P mDglColor3usv_P;
        private DglColor4b_BBBB mDglColor4b_BBBB;
        private DglColor4bv_aB mDglColor4bv_aB;
        private DglColor4bv_P mDglColor4bv_P;
        private DglColor4d_DDDD mDglColor4d_DDDD;
        private DglColor4dv_aD mDglColor4dv_aD;
        private DglColor4dv_P mDglColor4dv_P;
        private DglColor4f_FFFF mDglColor4f_FFFF;
        private DglColor4fNormal3fVertex3fSUN_FFFFFFFFFF mDglColor4fNormal3fVertex3fSUN_FFFFFFFFFF;
        private DglColor4fNormal3fVertex3fvSUN_aFaFaF mDglColor4fNormal3fVertex3fvSUN_aFaFaF;
        private DglColor4fNormal3fVertex3fvSUN_PPP mDglColor4fNormal3fVertex3fvSUN_PPP;
        private DglColor4fv_aF mDglColor4fv_aF;
        private DglColor4fv_P mDglColor4fv_P;
        private DglColor4hNV_HHHH mDglColor4hNV_HHHH;
        private DglColor4hvNV_aH mDglColor4hvNV_aH;
        private DglColor4hvNV_P mDglColor4hvNV_P;
        private DglColor4i_IIII mDglColor4i_IIII;
        private DglColor4iv_aI mDglColor4iv_aI;
        private DglColor4iv_P mDglColor4iv_P;
        private DglColor4s_HHHH mDglColor4s_HHHH;
        private DglColor4sv_aH mDglColor4sv_aH;
        private DglColor4sv_P mDglColor4sv_P;
        private DglColor4ub_BBBB mDglColor4ub_BBBB;
        private DglColor4ubv_aB mDglColor4ubv_aB;
        private DglColor4ubv_P mDglColor4ubv_P;
        private DglColor4ubVertex2fSUN_BBBBFF mDglColor4ubVertex2fSUN_BBBBFF;
        private DglColor4ubVertex2fvSUN_aBaF mDglColor4ubVertex2fvSUN_aBaF;
        private DglColor4ubVertex2fvSUN_aBP mDglColor4ubVertex2fvSUN_aBP;
        private DglColor4ubVertex2fvSUN_PaF mDglColor4ubVertex2fvSUN_PaF;
        private DglColor4ubVertex2fvSUN_PP mDglColor4ubVertex2fvSUN_PP;
        private DglColor4ubVertex3fSUN_BBBBFFF mDglColor4ubVertex3fSUN_BBBBFFF;
        private DglColor4ubVertex3fvSUN_aBaF mDglColor4ubVertex3fvSUN_aBaF;
        private DglColor4ubVertex3fvSUN_aBP mDglColor4ubVertex3fvSUN_aBP;
        private DglColor4ubVertex3fvSUN_PaF mDglColor4ubVertex3fvSUN_PaF;
        private DglColor4ubVertex3fvSUN_PP mDglColor4ubVertex3fvSUN_PP;
        private DglColor4ui_IIII mDglColor4ui_IIII;
        private DglColor4uiv_aI mDglColor4uiv_aI;
        private DglColor4uiv_P mDglColor4uiv_P;
        private DglColor4us_HHHH mDglColor4us_HHHH;
        private DglColor4usv_aH mDglColor4usv_aH;
        private DglColor4usv_P mDglColor4usv_P;
        private DglColorFragmentOp1ATI_IIIIIII mDglColorFragmentOp1ATI_IIIIIII;
        private DglColorFragmentOp2ATI_IIIIIIIIII mDglColorFragmentOp2ATI_IIIIIIIIII;
        private DglColorFragmentOp3ATI_IIIIIIIIIIIII mDglColorFragmentOp3ATI_IIIIIIIIIIIII;
        private DglColorMask_BBBB mDglColorMask_BBBB;
        private DglColorMaterial_II mDglColorMaterial_II;
        private DglColorPointer_IIIaB mDglColorPointer_IIIaB;
        private DglColorPointer_IIIaH mDglColorPointer_IIIaH;
        private DglColorPointer_IIIaI mDglColorPointer_IIIaI;
        private DglColorPointer_IIIaF mDglColorPointer_IIIaF;
        private DglColorPointer_IIIaD mDglColorPointer_IIIaD;
        private DglColorPointer_IIIP mDglColorPointer_IIIP;
        private DglColorPointerEXT_IIIIaB mDglColorPointerEXT_IIIIaB;
        private DglColorPointerEXT_IIIIaH mDglColorPointerEXT_IIIIaH;
        private DglColorPointerEXT_IIIIaI mDglColorPointerEXT_IIIIaI;
        private DglColorPointerEXT_IIIIaF mDglColorPointerEXT_IIIIaF;
        private DglColorPointerEXT_IIIIaD mDglColorPointerEXT_IIIIaD;
        private DglColorPointerEXT_IIIIP mDglColorPointerEXT_IIIIP;
        private DglColorPointerListIBM_IIIrPI mDglColorPointerListIBM_IIIrPI;
        private DglColorPointervINTEL_IIrP mDglColorPointervINTEL_IIrP;
        private DglColorSubTable_IIIIIaB mDglColorSubTable_IIIIIaB;
        private DglColorSubTable_IIIIIaH mDglColorSubTable_IIIIIaH;
        private DglColorSubTable_IIIIIaI mDglColorSubTable_IIIIIaI;
        private DglColorSubTable_IIIIIaF mDglColorSubTable_IIIIIaF;
        private DglColorSubTable_IIIIIP mDglColorSubTable_IIIIIP;
        private DglColorSubTableEXT_IIIIIaB mDglColorSubTableEXT_IIIIIaB;
        private DglColorSubTableEXT_IIIIIaH mDglColorSubTableEXT_IIIIIaH;
        private DglColorSubTableEXT_IIIIIaI mDglColorSubTableEXT_IIIIIaI;
        private DglColorSubTableEXT_IIIIIaF mDglColorSubTableEXT_IIIIIaF;
        private DglColorSubTableEXT_IIIIIP mDglColorSubTableEXT_IIIIIP;
        private DglColorTable_IIIIIaB mDglColorTable_IIIIIaB;
        private DglColorTable_IIIIIaH mDglColorTable_IIIIIaH;
        private DglColorTable_IIIIIaI mDglColorTable_IIIIIaI;
        private DglColorTable_IIIIIaF mDglColorTable_IIIIIaF;
        private DglColorTable_IIIIIP mDglColorTable_IIIIIP;
        private DglColorTableEXT_IIIIIaB mDglColorTableEXT_IIIIIaB;
        private DglColorTableEXT_IIIIIaH mDglColorTableEXT_IIIIIaH;
        private DglColorTableEXT_IIIIIaI mDglColorTableEXT_IIIIIaI;
        private DglColorTableEXT_IIIIIaF mDglColorTableEXT_IIIIIaF;
        private DglColorTableEXT_IIIIIP mDglColorTableEXT_IIIIIP;
        private DglColorTableParameterfv_IIaF mDglColorTableParameterfv_IIaF;
        private DglColorTableParameterfv_IIP mDglColorTableParameterfv_IIP;
        private DglColorTableParameterfvSGI_IIaF mDglColorTableParameterfvSGI_IIaF;
        private DglColorTableParameterfvSGI_IIP mDglColorTableParameterfvSGI_IIP;
        private DglColorTableParameteriv_IIaI mDglColorTableParameteriv_IIaI;
        private DglColorTableParameteriv_IIP mDglColorTableParameteriv_IIP;
        private DglColorTableParameterivSGI_IIaI mDglColorTableParameterivSGI_IIaI;
        private DglColorTableParameterivSGI_IIP mDglColorTableParameterivSGI_IIP;
        private DglColorTableSGI_IIIIIaB mDglColorTableSGI_IIIIIaB;
        private DglColorTableSGI_IIIIIaH mDglColorTableSGI_IIIIIaH;
        private DglColorTableSGI_IIIIIaI mDglColorTableSGI_IIIIIaI;
        private DglColorTableSGI_IIIIIaF mDglColorTableSGI_IIIIIaF;
        private DglColorTableSGI_IIIIIP mDglColorTableSGI_IIIIIP;
        private DglCombinerInputNV_IIIIII mDglCombinerInputNV_IIIIII;
        private DglCombinerOutputNV_IIIIIIIBBB mDglCombinerOutputNV_IIIIIIIBBB;
        private DglCombinerParameterfNV_IF mDglCombinerParameterfNV_IF;
        private DglCombinerParameterfvNV_IaF mDglCombinerParameterfvNV_IaF;
        private DglCombinerParameterfvNV_IP mDglCombinerParameterfvNV_IP;
        private DglCombinerParameteriNV_II mDglCombinerParameteriNV_II;
        private DglCombinerParameterivNV_IaI mDglCombinerParameterivNV_IaI;
        private DglCombinerParameterivNV_IP mDglCombinerParameterivNV_IP;
        private DglCombinerStageParameterfvNV_IIaF mDglCombinerStageParameterfvNV_IIaF;
        private DglCombinerStageParameterfvNV_IIP mDglCombinerStageParameterfvNV_IIP;
        private DglCompileShader_I mDglCompileShader_I;
        private DglCompileShaderARB_I mDglCompileShaderARB_I;
        private DglCompressedTexImage1D_IIIIIIaB mDglCompressedTexImage1D_IIIIIIaB;
        private DglCompressedTexImage1D_IIIIIIP mDglCompressedTexImage1D_IIIIIIP;
        private DglCompressedTexImage1DARB_IIIIIIaB mDglCompressedTexImage1DARB_IIIIIIaB;
        private DglCompressedTexImage1DARB_IIIIIIP mDglCompressedTexImage1DARB_IIIIIIP;
        private DglCompressedTexImage2D_IIIIIIIaB mDglCompressedTexImage2D_IIIIIIIaB;
        private DglCompressedTexImage2D_IIIIIIIP mDglCompressedTexImage2D_IIIIIIIP;
        private DglCompressedTexImage2DARB_IIIIIIIaB mDglCompressedTexImage2DARB_IIIIIIIaB;
        private DglCompressedTexImage2DARB_IIIIIIIP mDglCompressedTexImage2DARB_IIIIIIIP;
        private DglCompressedTexImage3D_IIIIIIIIaB mDglCompressedTexImage3D_IIIIIIIIaB;
        private DglCompressedTexImage3D_IIIIIIIIP mDglCompressedTexImage3D_IIIIIIIIP;
        private DglCompressedTexImage3DARB_IIIIIIIIaB mDglCompressedTexImage3DARB_IIIIIIIIaB;
        private DglCompressedTexImage3DARB_IIIIIIIIP mDglCompressedTexImage3DARB_IIIIIIIIP;
        private DglCompressedTexSubImage1D_IIIIIIaB mDglCompressedTexSubImage1D_IIIIIIaB;
        private DglCompressedTexSubImage1D_IIIIIIP mDglCompressedTexSubImage1D_IIIIIIP;
        private DglCompressedTexSubImage1DARB_IIIIIIaB mDglCompressedTexSubImage1DARB_IIIIIIaB;
        private DglCompressedTexSubImage1DARB_IIIIIIP mDglCompressedTexSubImage1DARB_IIIIIIP;
        private DglCompressedTexSubImage2D_IIIIIIIIaB mDglCompressedTexSubImage2D_IIIIIIIIaB;
        private DglCompressedTexSubImage2D_IIIIIIIIP mDglCompressedTexSubImage2D_IIIIIIIIP;
        private DglCompressedTexSubImage2DARB_IIIIIIIIaB mDglCompressedTexSubImage2DARB_IIIIIIIIaB;
        private DglCompressedTexSubImage2DARB_IIIIIIIIP mDglCompressedTexSubImage2DARB_IIIIIIIIP;
        private DglCompressedTexSubImage3D_IIIIIIIIIIaB mDglCompressedTexSubImage3D_IIIIIIIIIIaB;
        private DglCompressedTexSubImage3D_IIIIIIIIIIP mDglCompressedTexSubImage3D_IIIIIIIIIIP;
        private DglCompressedTexSubImage3DARB_IIIIIIIIIIaB mDglCompressedTexSubImage3DARB_IIIIIIIIIIaB;
        private DglCompressedTexSubImage3DARB_IIIIIIIIIIP mDglCompressedTexSubImage3DARB_IIIIIIIIIIP;
        private DglConvolutionFilter1D_IIIIIaB mDglConvolutionFilter1D_IIIIIaB;
        private DglConvolutionFilter1D_IIIIIaH mDglConvolutionFilter1D_IIIIIaH;
        private DglConvolutionFilter1D_IIIIIaI mDglConvolutionFilter1D_IIIIIaI;
        private DglConvolutionFilter1D_IIIIIaF mDglConvolutionFilter1D_IIIIIaF;
        private DglConvolutionFilter1D_IIIIIP mDglConvolutionFilter1D_IIIIIP;
        private DglConvolutionFilter1DEXT_IIIIIaB mDglConvolutionFilter1DEXT_IIIIIaB;
        private DglConvolutionFilter1DEXT_IIIIIaH mDglConvolutionFilter1DEXT_IIIIIaH;
        private DglConvolutionFilter1DEXT_IIIIIaI mDglConvolutionFilter1DEXT_IIIIIaI;
        private DglConvolutionFilter1DEXT_IIIIIaF mDglConvolutionFilter1DEXT_IIIIIaF;
        private DglConvolutionFilter1DEXT_IIIIIP mDglConvolutionFilter1DEXT_IIIIIP;
        private DglConvolutionFilter2D_IIIIIIaB mDglConvolutionFilter2D_IIIIIIaB;
        private DglConvolutionFilter2D_IIIIIIaH mDglConvolutionFilter2D_IIIIIIaH;
        private DglConvolutionFilter2D_IIIIIIaI mDglConvolutionFilter2D_IIIIIIaI;
        private DglConvolutionFilter2D_IIIIIIaF mDglConvolutionFilter2D_IIIIIIaF;
        private DglConvolutionFilter2D_IIIIIIP mDglConvolutionFilter2D_IIIIIIP;
        private DglConvolutionFilter2DEXT_IIIIIIaB mDglConvolutionFilter2DEXT_IIIIIIaB;
        private DglConvolutionFilter2DEXT_IIIIIIaH mDglConvolutionFilter2DEXT_IIIIIIaH;
        private DglConvolutionFilter2DEXT_IIIIIIaI mDglConvolutionFilter2DEXT_IIIIIIaI;
        private DglConvolutionFilter2DEXT_IIIIIIaF mDglConvolutionFilter2DEXT_IIIIIIaF;
        private DglConvolutionFilter2DEXT_IIIIIIP mDglConvolutionFilter2DEXT_IIIIIIP;
        private DglConvolutionParameterf_IIF mDglConvolutionParameterf_IIF;
        private DglConvolutionParameterfEXT_IIF mDglConvolutionParameterfEXT_IIF;
        private DglConvolutionParameterfv_IIaF mDglConvolutionParameterfv_IIaF;
        private DglConvolutionParameterfv_IIP mDglConvolutionParameterfv_IIP;
        private DglConvolutionParameterfvEXT_IIaF mDglConvolutionParameterfvEXT_IIaF;
        private DglConvolutionParameterfvEXT_IIP mDglConvolutionParameterfvEXT_IIP;
        private DglConvolutionParameteri_III mDglConvolutionParameteri_III;
        private DglConvolutionParameteriEXT_III mDglConvolutionParameteriEXT_III;
        private DglConvolutionParameteriv_IIaI mDglConvolutionParameteriv_IIaI;
        private DglConvolutionParameteriv_IIP mDglConvolutionParameteriv_IIP;
        private DglConvolutionParameterivEXT_IIaI mDglConvolutionParameterivEXT_IIaI;
        private DglConvolutionParameterivEXT_IIP mDglConvolutionParameterivEXT_IIP;
        private DglCopyColorSubTable_IIIII mDglCopyColorSubTable_IIIII;
        private DglCopyColorSubTableEXT_IIIII mDglCopyColorSubTableEXT_IIIII;
        private DglCopyColorTable_IIIII mDglCopyColorTable_IIIII;
        private DglCopyColorTableSGI_IIIII mDglCopyColorTableSGI_IIIII;
        private DglCopyConvolutionFilter1D_IIIII mDglCopyConvolutionFilter1D_IIIII;
        private DglCopyConvolutionFilter1DEXT_IIIII mDglCopyConvolutionFilter1DEXT_IIIII;
        private DglCopyConvolutionFilter2D_IIIIII mDglCopyConvolutionFilter2D_IIIIII;
        private DglCopyConvolutionFilter2DEXT_IIIIII mDglCopyConvolutionFilter2DEXT_IIIIII;
        private DglCopyPixels_IIIII mDglCopyPixels_IIIII;
        private DglCopyTexImage1D_IIIIIII mDglCopyTexImage1D_IIIIIII;
        private DglCopyTexImage1DEXT_IIIIIII mDglCopyTexImage1DEXT_IIIIIII;
        private DglCopyTexImage2D_IIIIIIII mDglCopyTexImage2D_IIIIIIII;
        private DglCopyTexImage2DEXT_IIIIIIII mDglCopyTexImage2DEXT_IIIIIIII;
        private DglCopyTexSubImage1D_IIIIII mDglCopyTexSubImage1D_IIIIII;
        private DglCopyTexSubImage1DEXT_IIIIII mDglCopyTexSubImage1DEXT_IIIIII;
        private DglCopyTexSubImage2D_IIIIIIII mDglCopyTexSubImage2D_IIIIIIII;
        private DglCopyTexSubImage2DEXT_IIIIIIII mDglCopyTexSubImage2DEXT_IIIIIIII;
        private DglCopyTexSubImage3D_IIIIIIIII mDglCopyTexSubImage3D_IIIIIIIII;
        private DglCopyTexSubImage3DEXT_IIIIIIIII mDglCopyTexSubImage3DEXT_IIIIIIIII;
        private DglCreateProgram_V mDglCreateProgram_V;
        private DglCreateProgramObjectARB_V mDglCreateProgramObjectARB_V;
        private DglCreateShader_I mDglCreateShader_I;
        private DglCreateShaderObjectARB_I mDglCreateShaderObjectARB_I;
        private DglCullFace_I mDglCullFace_I;
        private DglCullParameterdvEXT_IaD mDglCullParameterdvEXT_IaD;
        private DglCullParameterdvEXT_IP mDglCullParameterdvEXT_IP;
        private DglCullParameterfvEXT_IaF mDglCullParameterfvEXT_IaF;
        private DglCullParameterfvEXT_IP mDglCullParameterfvEXT_IP;
        private DglCurrentPaletteMatrixARB_I mDglCurrentPaletteMatrixARB_I;
        private DglDeformationMap3dSGIX_IDDIIDDIIDDIIaD mDglDeformationMap3dSGIX_IDDIIDDIIDDIIaD;
        private DglDeformationMap3dSGIX_IDDIIDDIIDDIIP mDglDeformationMap3dSGIX_IDDIIDDIIDDIIP;
        private DglDeformationMap3fSGIX_IFFIIFFIIFFIIaF mDglDeformationMap3fSGIX_IFFIIFFIIFFIIaF;
        private DglDeformationMap3fSGIX_IFFIIFFIIFFIIP mDglDeformationMap3fSGIX_IFFIIFFIIFFIIP;
        private DglDeformSGIX_I mDglDeformSGIX_I;
        private DglDeleteAsyncMarkersSGIX_II mDglDeleteAsyncMarkersSGIX_II;
        private DglDeleteBuffers_IaI mDglDeleteBuffers_IaI;
        private DglDeleteBuffers_IP mDglDeleteBuffers_IP;
        private DglDeleteBuffersARB_IaI mDglDeleteBuffersARB_IaI;
        private DglDeleteBuffersARB_IP mDglDeleteBuffersARB_IP;
        private DglDeleteFencesAPPLE_IaI mDglDeleteFencesAPPLE_IaI;
        private DglDeleteFencesAPPLE_IP mDglDeleteFencesAPPLE_IP;
        private DglDeleteFencesNV_IaI mDglDeleteFencesNV_IaI;
        private DglDeleteFencesNV_IP mDglDeleteFencesNV_IP;
        private DglDeleteFragmentShaderATI_I mDglDeleteFragmentShaderATI_I;
        private DglDeleteFramebuffersEXT_IaI mDglDeleteFramebuffersEXT_IaI;
        private DglDeleteFramebuffersEXT_IP mDglDeleteFramebuffersEXT_IP;
        private DglDeleteLists_II mDglDeleteLists_II;
        private DglDeleteObjectARB_I mDglDeleteObjectARB_I;
        private DglDeleteOcclusionQueriesNV_IaI mDglDeleteOcclusionQueriesNV_IaI;
        private DglDeleteOcclusionQueriesNV_IP mDglDeleteOcclusionQueriesNV_IP;
        private DglDeleteProgram_I mDglDeleteProgram_I;
        private DglDeleteProgramsARB_IaI mDglDeleteProgramsARB_IaI;
        private DglDeleteProgramsARB_IP mDglDeleteProgramsARB_IP;
        private DglDeleteProgramsNV_IaI mDglDeleteProgramsNV_IaI;
        private DglDeleteProgramsNV_IP mDglDeleteProgramsNV_IP;
        private DglDeleteQueries_IaI mDglDeleteQueries_IaI;
        private DglDeleteQueries_IP mDglDeleteQueries_IP;
        private DglDeleteQueriesARB_IaI mDglDeleteQueriesARB_IaI;
        private DglDeleteQueriesARB_IP mDglDeleteQueriesARB_IP;
        private DglDeleteRenderbuffersEXT_IaI mDglDeleteRenderbuffersEXT_IaI;
        private DglDeleteRenderbuffersEXT_IP mDglDeleteRenderbuffersEXT_IP;
        private DglDeleteShader_I mDglDeleteShader_I;
        private DglDeleteTextures_IaI mDglDeleteTextures_IaI;
        private DglDeleteTextures_IP mDglDeleteTextures_IP;
        private DglDeleteTexturesEXT_IaI mDglDeleteTexturesEXT_IaI;
        private DglDeleteTexturesEXT_IP mDglDeleteTexturesEXT_IP;
        private DglDeleteVertexArraysAPPLE_IaI mDglDeleteVertexArraysAPPLE_IaI;
        private DglDeleteVertexArraysAPPLE_IP mDglDeleteVertexArraysAPPLE_IP;
        private DglDeleteVertexShaderEXT_I mDglDeleteVertexShaderEXT_I;
        private DglDepthBoundsEXT_DD mDglDepthBoundsEXT_DD;
        private DglDepthFunc_I mDglDepthFunc_I;
        private DglDepthMask_B mDglDepthMask_B;
        private DglDepthRange_DD mDglDepthRange_DD;
        private DglDetachObjectARB_II mDglDetachObjectARB_II;
        private DglDetachShader_II mDglDetachShader_II;
        private DglDetailTexFuncSGIS_IIaF mDglDetailTexFuncSGIS_IIaF;
        private DglDetailTexFuncSGIS_IIP mDglDetailTexFuncSGIS_IIP;
        private DglDisable_I mDglDisable_I;
        private DglDisableClientState_I mDglDisableClientState_I;
        private DglDisableVariantClientStateEXT_I mDglDisableVariantClientStateEXT_I;
        private DglDisableVertexAttribArray_I mDglDisableVertexAttribArray_I;
        private DglDisableVertexAttribArrayARB_I mDglDisableVertexAttribArrayARB_I;
        private DglDrawArrays_III mDglDrawArrays_III;
        private DglDrawArraysEXT_III mDglDrawArraysEXT_III;
        private DglDrawBuffer_I mDglDrawBuffer_I;
        private DglDrawBuffers_IaI mDglDrawBuffers_IaI;
        private DglDrawBuffers_IP mDglDrawBuffers_IP;
        private DglDrawBuffersARB_IaI mDglDrawBuffersARB_IaI;
        private DglDrawBuffersARB_IP mDglDrawBuffersARB_IP;
        private DglDrawBuffersATI_IaI mDglDrawBuffersATI_IaI;
        private DglDrawBuffersATI_IP mDglDrawBuffersATI_IP;
        private DglDrawElementArrayAPPLE_III mDglDrawElementArrayAPPLE_III;
        private DglDrawElementArrayATI_II mDglDrawElementArrayATI_II;
        private DglDrawElements_IIIaB mDglDrawElements_IIIaB;
        private DglDrawElements_IIIaH mDglDrawElements_IIIaH;
        private DglDrawElements_IIIaI mDglDrawElements_IIIaI;
        private DglDrawElements_IIIP mDglDrawElements_IIIP;
        private DglDrawMeshArraysSUN_IIII mDglDrawMeshArraysSUN_IIII;
        private DglDrawPixels_IIIIaB mDglDrawPixels_IIIIaB;
        private DglDrawPixels_IIIIaH mDglDrawPixels_IIIIaH;
        private DglDrawPixels_IIIIaI mDglDrawPixels_IIIIaI;
        private DglDrawPixels_IIIIaF mDglDrawPixels_IIIIaF;
        private DglDrawPixels_IIIIP mDglDrawPixels_IIIIP;
        private DglDrawRangeElementArrayAPPLE_IIIII mDglDrawRangeElementArrayAPPLE_IIIII;
        private DglDrawRangeElementArrayATI_IIII mDglDrawRangeElementArrayATI_IIII;
        private DglDrawRangeElements_IIIIIaB mDglDrawRangeElements_IIIIIaB;
        private DglDrawRangeElements_IIIIIaH mDglDrawRangeElements_IIIIIaH;
        private DglDrawRangeElements_IIIIIaI mDglDrawRangeElements_IIIIIaI;
        private DglDrawRangeElements_IIIIIP mDglDrawRangeElements_IIIIIP;
        private DglDrawRangeElementsEXT_IIIIIaB mDglDrawRangeElementsEXT_IIIIIaB;
        private DglDrawRangeElementsEXT_IIIIIaH mDglDrawRangeElementsEXT_IIIIIaH;
        private DglDrawRangeElementsEXT_IIIIIaI mDglDrawRangeElementsEXT_IIIIIaI;
        private DglDrawRangeElementsEXT_IIIIIP mDglDrawRangeElementsEXT_IIIIIP;
        private DglDrawRangeElementsWIN_IIIIIaB mDglDrawRangeElementsWIN_IIIIIaB;
        private DglDrawRangeElementsWIN_IIIIIaH mDglDrawRangeElementsWIN_IIIIIaH;
        private DglDrawRangeElementsWIN_IIIIIaI mDglDrawRangeElementsWIN_IIIIIaI;
        private DglDrawRangeElementsWIN_IIIIIP mDglDrawRangeElementsWIN_IIIIIP;
        private DglEdgeFlag_B mDglEdgeFlag_B;
        private DglEdgeFlagPointer_IaB mDglEdgeFlagPointer_IaB;
        private DglEdgeFlagPointer_IP mDglEdgeFlagPointer_IP;
        private DglEdgeFlagPointerEXT_IIaB mDglEdgeFlagPointerEXT_IIaB;
        private DglEdgeFlagPointerEXT_IIP mDglEdgeFlagPointerEXT_IIP;
        private DglEdgeFlagPointerListIBM_IrPI mDglEdgeFlagPointerListIBM_IrPI;
        private DglEdgeFlagv_aB mDglEdgeFlagv_aB;
        private DglEdgeFlagv_P mDglEdgeFlagv_P;
        private DglElementPointerAPPLE_IaB mDglElementPointerAPPLE_IaB;
        private DglElementPointerAPPLE_IP mDglElementPointerAPPLE_IP;
        private DglElementPointerATI_IaB mDglElementPointerATI_IaB;
        private DglElementPointerATI_IP mDglElementPointerATI_IP;
        private DglEnable_I mDglEnable_I;
        private DglEnableClientState_I mDglEnableClientState_I;
        private DglEnableVariantClientStateEXT_I mDglEnableVariantClientStateEXT_I;
        private DglEnableVertexAttribArray_I mDglEnableVertexAttribArray_I;
        private DglEnableVertexAttribArrayARB_I mDglEnableVertexAttribArrayARB_I;
        private DglEnd_V mDglEnd_V;
        private DglEndFragmentShaderATI_V mDglEndFragmentShaderATI_V;
        private DglEndList_V mDglEndList_V;
        private DglEndOcclusionQueryNV_V mDglEndOcclusionQueryNV_V;
        private DglEndQuery_I mDglEndQuery_I;
        private DglEndQueryARB_I mDglEndQueryARB_I;
        private DglEndVertexShaderEXT_V mDglEndVertexShaderEXT_V;
        private DglEvalCoord1d_D mDglEvalCoord1d_D;
        private DglEvalCoord1dv_aD mDglEvalCoord1dv_aD;
        private DglEvalCoord1dv_P mDglEvalCoord1dv_P;
        private DglEvalCoord1f_F mDglEvalCoord1f_F;
        private DglEvalCoord1fv_aF mDglEvalCoord1fv_aF;
        private DglEvalCoord1fv_P mDglEvalCoord1fv_P;
        private DglEvalCoord2d_DD mDglEvalCoord2d_DD;
        private DglEvalCoord2dv_aD mDglEvalCoord2dv_aD;
        private DglEvalCoord2dv_P mDglEvalCoord2dv_P;
        private DglEvalCoord2f_FF mDglEvalCoord2f_FF;
        private DglEvalCoord2fv_aF mDglEvalCoord2fv_aF;
        private DglEvalCoord2fv_P mDglEvalCoord2fv_P;
        private DglEvalMapsNV_II mDglEvalMapsNV_II;
        private DglEvalMesh1_III mDglEvalMesh1_III;
        private DglEvalMesh2_IIIII mDglEvalMesh2_IIIII;
        private DglEvalPoint1_I mDglEvalPoint1_I;
        private DglEvalPoint2_II mDglEvalPoint2_II;
        private DglExecuteProgramNV_IIaF mDglExecuteProgramNV_IIaF;
        private DglExecuteProgramNV_IIP mDglExecuteProgramNV_IIP;
        private DglExtractComponentEXT_III mDglExtractComponentEXT_III;
        private DglFeedbackBuffer_IIaF mDglFeedbackBuffer_IIaF;
        private DglFeedbackBuffer_IIP mDglFeedbackBuffer_IIP;
        private DglFinalCombinerInputNV_IIII mDglFinalCombinerInputNV_IIII;
        private DglFinish_V mDglFinish_V;
        private DglFinishAsyncSGIX_rI mDglFinishAsyncSGIX_rI;
        private DglFinishFenceAPPLE_I mDglFinishFenceAPPLE_I;
        private DglFinishFenceNV_I mDglFinishFenceNV_I;
        private DglFinishObjectAPPLE_II mDglFinishObjectAPPLE_II;
        private DglFinishTextureSUNX_V mDglFinishTextureSUNX_V;
        private DglFlush_V mDglFlush_V;
        private DglFlushPixelDataRangeNV_I mDglFlushPixelDataRangeNV_I;
        private DglFlushRasterSGIX_V mDglFlushRasterSGIX_V;
        private DglFlushVertexArrayRangeAPPLE_IaB mDglFlushVertexArrayRangeAPPLE_IaB;
        private DglFlushVertexArrayRangeAPPLE_IP mDglFlushVertexArrayRangeAPPLE_IP;
        private DglFlushVertexArrayRangeNV_V mDglFlushVertexArrayRangeNV_V;
        private DglFogCoordd_D mDglFogCoordd_D;
        private DglFogCoorddEXT_D mDglFogCoorddEXT_D;
        private DglFogCoorddv_aD mDglFogCoorddv_aD;
        private DglFogCoorddv_P mDglFogCoorddv_P;
        private DglFogCoorddvEXT_aD mDglFogCoorddvEXT_aD;
        private DglFogCoorddvEXT_P mDglFogCoorddvEXT_P;
        private DglFogCoordf_F mDglFogCoordf_F;
        private DglFogCoordfEXT_F mDglFogCoordfEXT_F;
        private DglFogCoordfv_aF mDglFogCoordfv_aF;
        private DglFogCoordfv_P mDglFogCoordfv_P;
        private DglFogCoordfvEXT_aF mDglFogCoordfvEXT_aF;
        private DglFogCoordfvEXT_P mDglFogCoordfvEXT_P;
        private DglFogCoordhNV_H mDglFogCoordhNV_H;
        private DglFogCoordhvNV_aH mDglFogCoordhvNV_aH;
        private DglFogCoordhvNV_P mDglFogCoordhvNV_P;
        private DglFogCoordPointer_IIaF mDglFogCoordPointer_IIaF;
        private DglFogCoordPointer_IIaD mDglFogCoordPointer_IIaD;
        private DglFogCoordPointer_IIP mDglFogCoordPointer_IIP;
        private DglFogCoordPointerEXT_IIaF mDglFogCoordPointerEXT_IIaF;
        private DglFogCoordPointerEXT_IIaD mDglFogCoordPointerEXT_IIaD;
        private DglFogCoordPointerEXT_IIP mDglFogCoordPointerEXT_IIP;
        private DglFogCoordPointerListIBM_IIrPI mDglFogCoordPointerListIBM_IIrPI;
        private DglFogf_IF mDglFogf_IF;
        private DglFogFuncSGIS_IaF mDglFogFuncSGIS_IaF;
        private DglFogFuncSGIS_IP mDglFogFuncSGIS_IP;
        private DglFogfv_IaF mDglFogfv_IaF;
        private DglFogfv_IP mDglFogfv_IP;
        private DglFogi_II mDglFogi_II;
        private DglFogiv_IaI mDglFogiv_IaI;
        private DglFogiv_IP mDglFogiv_IP;
        private DglFragmentColorMaterialSGIX_II mDglFragmentColorMaterialSGIX_II;
        private DglFragmentLightfSGIX_IIF mDglFragmentLightfSGIX_IIF;
        private DglFragmentLightfvSGIX_IIaF mDglFragmentLightfvSGIX_IIaF;
        private DglFragmentLightfvSGIX_IIP mDglFragmentLightfvSGIX_IIP;
        private DglFragmentLightiSGIX_III mDglFragmentLightiSGIX_III;
        private DglFragmentLightivSGIX_IIaI mDglFragmentLightivSGIX_IIaI;
        private DglFragmentLightivSGIX_IIP mDglFragmentLightivSGIX_IIP;
        private DglFragmentLightModelfSGIX_IF mDglFragmentLightModelfSGIX_IF;
        private DglFragmentLightModelfvSGIX_IaF mDglFragmentLightModelfvSGIX_IaF;
        private DglFragmentLightModelfvSGIX_IP mDglFragmentLightModelfvSGIX_IP;
        private DglFragmentLightModeliSGIX_II mDglFragmentLightModeliSGIX_II;
        private DglFragmentLightModelivSGIX_IaI mDglFragmentLightModelivSGIX_IaI;
        private DglFragmentLightModelivSGIX_IP mDglFragmentLightModelivSGIX_IP;
        private DglFragmentMaterialfSGIX_IIF mDglFragmentMaterialfSGIX_IIF;
        private DglFragmentMaterialfvSGIX_IIaF mDglFragmentMaterialfvSGIX_IIaF;
        private DglFragmentMaterialfvSGIX_IIP mDglFragmentMaterialfvSGIX_IIP;
        private DglFragmentMaterialiSGIX_III mDglFragmentMaterialiSGIX_III;
        private DglFragmentMaterialivSGIX_IIaI mDglFragmentMaterialivSGIX_IIaI;
        private DglFragmentMaterialivSGIX_IIP mDglFragmentMaterialivSGIX_IIP;
        private DglFramebufferRenderbufferEXT_IIII mDglFramebufferRenderbufferEXT_IIII;
        private DglFramebufferTexture1DEXT_IIIII mDglFramebufferTexture1DEXT_IIIII;
        private DglFramebufferTexture2DEXT_IIIII mDglFramebufferTexture2DEXT_IIIII;
        private DglFramebufferTexture3DEXT_IIIIII mDglFramebufferTexture3DEXT_IIIIII;
        private DglFrameZoomSGIX_I mDglFrameZoomSGIX_I;
        private DglFreeObjectBufferATI_I mDglFreeObjectBufferATI_I;
        private DglFrontFace_I mDglFrontFace_I;
        private DglFrustum_DDDDDD mDglFrustum_DDDDDD;
        private DglGenAsyncMarkersSGIX_I mDglGenAsyncMarkersSGIX_I;
        private DglGenBuffers_IaI mDglGenBuffers_IaI;
        private DglGenBuffers_IP mDglGenBuffers_IP;
        private DglGenBuffersARB_IaI mDglGenBuffersARB_IaI;
        private DglGenBuffersARB_IP mDglGenBuffersARB_IP;
        private DglGenerateMipmapEXT_I mDglGenerateMipmapEXT_I;
        private DglGenFencesAPPLE_IaI mDglGenFencesAPPLE_IaI;
        private DglGenFencesAPPLE_IP mDglGenFencesAPPLE_IP;
        private DglGenFencesNV_IaI mDglGenFencesNV_IaI;
        private DglGenFencesNV_IP mDglGenFencesNV_IP;
        private DglGenFragmentShadersATI_I mDglGenFragmentShadersATI_I;
        private DglGenFramebuffersEXT_IaI mDglGenFramebuffersEXT_IaI;
        private DglGenFramebuffersEXT_IP mDglGenFramebuffersEXT_IP;
        private DglGenLists_I mDglGenLists_I;
        private DglGenOcclusionQueriesNV_IaI mDglGenOcclusionQueriesNV_IaI;
        private DglGenOcclusionQueriesNV_IP mDglGenOcclusionQueriesNV_IP;
        private DglGenProgramsARB_IaI mDglGenProgramsARB_IaI;
        private DglGenProgramsARB_IP mDglGenProgramsARB_IP;
        private DglGenProgramsNV_IaI mDglGenProgramsNV_IaI;
        private DglGenProgramsNV_IP mDglGenProgramsNV_IP;
        private DglGenQueries_IaI mDglGenQueries_IaI;
        private DglGenQueries_IP mDglGenQueries_IP;
        private DglGenQueriesARB_IaI mDglGenQueriesARB_IaI;
        private DglGenQueriesARB_IP mDglGenQueriesARB_IP;
        private DglGenRenderbuffersEXT_IaI mDglGenRenderbuffersEXT_IaI;
        private DglGenRenderbuffersEXT_IP mDglGenRenderbuffersEXT_IP;
        private DglGenSymbolsEXT_IIII mDglGenSymbolsEXT_IIII;
        private DglGenTextures_IaI mDglGenTextures_IaI;
        private DglGenTextures_IP mDglGenTextures_IP;
        private DglGenTexturesEXT_IaI mDglGenTexturesEXT_IaI;
        private DglGenTexturesEXT_IP mDglGenTexturesEXT_IP;
        private DglGenVertexArraysAPPLE_IaI mDglGenVertexArraysAPPLE_IaI;
        private DglGenVertexArraysAPPLE_IP mDglGenVertexArraysAPPLE_IP;
        private DglGenVertexShadersEXT_I mDglGenVertexShadersEXT_I;
        private DglGetActiveAttrib_IIIrIrIrIS mDglGetActiveAttrib_IIIrIrIrIS;
        private DglGetActiveAttribARB_IIIrIrIrIS mDglGetActiveAttribARB_IIIrIrIrIS;
        private DglGetActiveUniform_IIIrIrIrIS mDglGetActiveUniform_IIIrIrIrIS;
        private DglGetActiveUniformARB_IIIrIrIrIS mDglGetActiveUniformARB_IIIrIrIrIS;
        private DglGetArrayObjectfvATI_IIaF mDglGetArrayObjectfvATI_IIaF;
        private DglGetArrayObjectfvATI_IIP mDglGetArrayObjectfvATI_IIP;
        private DglGetArrayObjectivATI_IIaI mDglGetArrayObjectivATI_IIaI;
        private DglGetArrayObjectivATI_IIP mDglGetArrayObjectivATI_IIP;
        private DglGetAttachedObjectsARB_IIrIrI mDglGetAttachedObjectsARB_IIrIrI;
        private DglGetAttachedShaders_IIrIrI mDglGetAttachedShaders_IIrIrI;
        private DglGetAttribLocation_IS mDglGetAttribLocation_IS;
        private DglGetAttribLocationARB_IS mDglGetAttribLocationARB_IS;
        private DglGetBooleanv_IaB mDglGetBooleanv_IaB;
        private DglGetBooleanv_IP mDglGetBooleanv_IP;
        private DglGetBufferParameteriv_IIaI mDglGetBufferParameteriv_IIaI;
        private DglGetBufferParameteriv_IIP mDglGetBufferParameteriv_IIP;
        private DglGetBufferParameterivARB_IIaI mDglGetBufferParameterivARB_IIaI;
        private DglGetBufferParameterivARB_IIP mDglGetBufferParameterivARB_IIP;
        private DglGetBufferPointerv_IIrP mDglGetBufferPointerv_IIrP;
        private DglGetBufferPointervARB_IIrP mDglGetBufferPointervARB_IIrP;
        private DglGetBufferSubData_IIIaB mDglGetBufferSubData_IIIaB;
        private DglGetBufferSubData_IIIP mDglGetBufferSubData_IIIP;
        private DglGetBufferSubDataARB_IIIaB mDglGetBufferSubDataARB_IIIaB;
        private DglGetBufferSubDataARB_IIIP mDglGetBufferSubDataARB_IIIP;
        private DglGetClipPlane_IaD mDglGetClipPlane_IaD;
        private DglGetClipPlane_IP mDglGetClipPlane_IP;
        private DglGetColorTable_IIIaB mDglGetColorTable_IIIaB;
        private DglGetColorTable_IIIaH mDglGetColorTable_IIIaH;
        private DglGetColorTable_IIIaI mDglGetColorTable_IIIaI;
        private DglGetColorTable_IIIaF mDglGetColorTable_IIIaF;
        private DglGetColorTable_IIIP mDglGetColorTable_IIIP;
        private DglGetColorTableEXT_IIIaB mDglGetColorTableEXT_IIIaB;
        private DglGetColorTableEXT_IIIaH mDglGetColorTableEXT_IIIaH;
        private DglGetColorTableEXT_IIIaI mDglGetColorTableEXT_IIIaI;
        private DglGetColorTableEXT_IIIaF mDglGetColorTableEXT_IIIaF;
        private DglGetColorTableEXT_IIIP mDglGetColorTableEXT_IIIP;
        private DglGetColorTableParameterfv_IIaF mDglGetColorTableParameterfv_IIaF;
        private DglGetColorTableParameterfv_IIP mDglGetColorTableParameterfv_IIP;
        private DglGetColorTableParameterfvEXT_IIaF mDglGetColorTableParameterfvEXT_IIaF;
        private DglGetColorTableParameterfvEXT_IIP mDglGetColorTableParameterfvEXT_IIP;
        private DglGetColorTableParameterfvSGI_IIaF mDglGetColorTableParameterfvSGI_IIaF;
        private DglGetColorTableParameterfvSGI_IIP mDglGetColorTableParameterfvSGI_IIP;
        private DglGetColorTableParameteriv_IIaI mDglGetColorTableParameteriv_IIaI;
        private DglGetColorTableParameteriv_IIP mDglGetColorTableParameteriv_IIP;
        private DglGetColorTableParameterivEXT_IIaI mDglGetColorTableParameterivEXT_IIaI;
        private DglGetColorTableParameterivEXT_IIP mDglGetColorTableParameterivEXT_IIP;
        private DglGetColorTableParameterivSGI_IIaI mDglGetColorTableParameterivSGI_IIaI;
        private DglGetColorTableParameterivSGI_IIP mDglGetColorTableParameterivSGI_IIP;
        private DglGetColorTableSGI_IIIaB mDglGetColorTableSGI_IIIaB;
        private DglGetColorTableSGI_IIIaH mDglGetColorTableSGI_IIIaH;
        private DglGetColorTableSGI_IIIaI mDglGetColorTableSGI_IIIaI;
        private DglGetColorTableSGI_IIIaF mDglGetColorTableSGI_IIIaF;
        private DglGetColorTableSGI_IIIP mDglGetColorTableSGI_IIIP;
        private DglGetCombinerInputParameterfvNV_IIIIaF mDglGetCombinerInputParameterfvNV_IIIIaF;
        private DglGetCombinerInputParameterfvNV_IIIIP mDglGetCombinerInputParameterfvNV_IIIIP;
        private DglGetCombinerInputParameterivNV_IIIIaI mDglGetCombinerInputParameterivNV_IIIIaI;
        private DglGetCombinerInputParameterivNV_IIIIP mDglGetCombinerInputParameterivNV_IIIIP;
        private DglGetCombinerOutputParameterfvNV_IIIaF mDglGetCombinerOutputParameterfvNV_IIIaF;
        private DglGetCombinerOutputParameterfvNV_IIIP mDglGetCombinerOutputParameterfvNV_IIIP;
        private DglGetCombinerOutputParameterivNV_IIIaI mDglGetCombinerOutputParameterivNV_IIIaI;
        private DglGetCombinerOutputParameterivNV_IIIP mDglGetCombinerOutputParameterivNV_IIIP;
        private DglGetCombinerStageParameterfvNV_IIaF mDglGetCombinerStageParameterfvNV_IIaF;
        private DglGetCombinerStageParameterfvNV_IIP mDglGetCombinerStageParameterfvNV_IIP;
        private DglGetCompressedTexImage_IIaB mDglGetCompressedTexImage_IIaB;
        private DglGetCompressedTexImage_IIP mDglGetCompressedTexImage_IIP;
        private DglGetCompressedTexImageARB_IIaB mDglGetCompressedTexImageARB_IIaB;
        private DglGetCompressedTexImageARB_IIP mDglGetCompressedTexImageARB_IIP;
        private DglGetConvolutionFilter_IIIaB mDglGetConvolutionFilter_IIIaB;
        private DglGetConvolutionFilter_IIIaH mDglGetConvolutionFilter_IIIaH;
        private DglGetConvolutionFilter_IIIaI mDglGetConvolutionFilter_IIIaI;
        private DglGetConvolutionFilter_IIIaF mDglGetConvolutionFilter_IIIaF;
        private DglGetConvolutionFilter_IIIP mDglGetConvolutionFilter_IIIP;
        private DglGetConvolutionFilterEXT_IIIaB mDglGetConvolutionFilterEXT_IIIaB;
        private DglGetConvolutionFilterEXT_IIIaH mDglGetConvolutionFilterEXT_IIIaH;
        private DglGetConvolutionFilterEXT_IIIaI mDglGetConvolutionFilterEXT_IIIaI;
        private DglGetConvolutionFilterEXT_IIIaF mDglGetConvolutionFilterEXT_IIIaF;
        private DglGetConvolutionFilterEXT_IIIP mDglGetConvolutionFilterEXT_IIIP;
        private DglGetConvolutionParameterfv_IIaF mDglGetConvolutionParameterfv_IIaF;
        private DglGetConvolutionParameterfv_IIP mDglGetConvolutionParameterfv_IIP;
        private DglGetConvolutionParameterfvEXT_IIaF mDglGetConvolutionParameterfvEXT_IIaF;
        private DglGetConvolutionParameterfvEXT_IIP mDglGetConvolutionParameterfvEXT_IIP;
        private DglGetConvolutionParameteriv_IIaI mDglGetConvolutionParameteriv_IIaI;
        private DglGetConvolutionParameteriv_IIP mDglGetConvolutionParameteriv_IIP;
        private DglGetConvolutionParameterivEXT_IIaI mDglGetConvolutionParameterivEXT_IIaI;
        private DglGetConvolutionParameterivEXT_IIP mDglGetConvolutionParameterivEXT_IIP;
        private DglGetDetailTexFuncSGIS_IaF mDglGetDetailTexFuncSGIS_IaF;
        private DglGetDetailTexFuncSGIS_IP mDglGetDetailTexFuncSGIS_IP;
        private DglGetDoublev_IaD mDglGetDoublev_IaD;
        private DglGetDoublev_IP mDglGetDoublev_IP;
        private DglGetError_V mDglGetError_V;
        private DglGetFenceivNV_IIaI mDglGetFenceivNV_IIaI;
        private DglGetFenceivNV_IIP mDglGetFenceivNV_IIP;
        private DglGetFinalCombinerInputParameterfvNV_IIaF mDglGetFinalCombinerInputParameterfvNV_IIaF;
        private DglGetFinalCombinerInputParameterfvNV_IIP mDglGetFinalCombinerInputParameterfvNV_IIP;
        private DglGetFinalCombinerInputParameterivNV_IIaI mDglGetFinalCombinerInputParameterivNV_IIaI;
        private DglGetFinalCombinerInputParameterivNV_IIP mDglGetFinalCombinerInputParameterivNV_IIP;
        private DglGetFloatv_IaF mDglGetFloatv_IaF;
        private DglGetFloatv_IP mDglGetFloatv_IP;
        private DglGetFogFuncSGIS_aF mDglGetFogFuncSGIS_aF;
        private DglGetFogFuncSGIS_P mDglGetFogFuncSGIS_P;
        private DglGetFragmentLightfvSGIX_IIaF mDglGetFragmentLightfvSGIX_IIaF;
        private DglGetFragmentLightfvSGIX_IIP mDglGetFragmentLightfvSGIX_IIP;
        private DglGetFragmentLightivSGIX_IIaI mDglGetFragmentLightivSGIX_IIaI;
        private DglGetFragmentLightivSGIX_IIP mDglGetFragmentLightivSGIX_IIP;
        private DglGetFragmentMaterialfvSGIX_IIaF mDglGetFragmentMaterialfvSGIX_IIaF;
        private DglGetFragmentMaterialfvSGIX_IIP mDglGetFragmentMaterialfvSGIX_IIP;
        private DglGetFragmentMaterialivSGIX_IIaI mDglGetFragmentMaterialivSGIX_IIaI;
        private DglGetFragmentMaterialivSGIX_IIP mDglGetFragmentMaterialivSGIX_IIP;
        private DglGetFramebufferAttachmentParameterivEXT_IIIaI mDglGetFramebufferAttachmentParameterivEXT_IIIaI;
        private DglGetFramebufferAttachmentParameterivEXT_IIIP mDglGetFramebufferAttachmentParameterivEXT_IIIP;
        private DglGetHandleARB_I mDglGetHandleARB_I;
        private DglGetHistogram_IBIIaB mDglGetHistogram_IBIIaB;
        private DglGetHistogram_IBIIaH mDglGetHistogram_IBIIaH;
        private DglGetHistogram_IBIIaI mDglGetHistogram_IBIIaI;
        private DglGetHistogram_IBIIaF mDglGetHistogram_IBIIaF;
        private DglGetHistogram_IBIIP mDglGetHistogram_IBIIP;
        private DglGetHistogramEXT_IBIIaB mDglGetHistogramEXT_IBIIaB;
        private DglGetHistogramEXT_IBIIaH mDglGetHistogramEXT_IBIIaH;
        private DglGetHistogramEXT_IBIIaI mDglGetHistogramEXT_IBIIaI;
        private DglGetHistogramEXT_IBIIaF mDglGetHistogramEXT_IBIIaF;
        private DglGetHistogramEXT_IBIIP mDglGetHistogramEXT_IBIIP;
        private DglGetHistogramParameterfv_IIaF mDglGetHistogramParameterfv_IIaF;
        private DglGetHistogramParameterfv_IIP mDglGetHistogramParameterfv_IIP;
        private DglGetHistogramParameterfvEXT_IIaF mDglGetHistogramParameterfvEXT_IIaF;
        private DglGetHistogramParameterfvEXT_IIP mDglGetHistogramParameterfvEXT_IIP;
        private DglGetHistogramParameteriv_IIaI mDglGetHistogramParameteriv_IIaI;
        private DglGetHistogramParameteriv_IIP mDglGetHistogramParameteriv_IIP;
        private DglGetHistogramParameterivEXT_IIaI mDglGetHistogramParameterivEXT_IIaI;
        private DglGetHistogramParameterivEXT_IIP mDglGetHistogramParameterivEXT_IIP;
        private DglGetImageTransformParameterfvHP_IIaF mDglGetImageTransformParameterfvHP_IIaF;
        private DglGetImageTransformParameterfvHP_IIP mDglGetImageTransformParameterfvHP_IIP;
        private DglGetImageTransformParameterivHP_IIaI mDglGetImageTransformParameterivHP_IIaI;
        private DglGetImageTransformParameterivHP_IIP mDglGetImageTransformParameterivHP_IIP;
        private DglGetInfoLogARB_IIrIS mDglGetInfoLogARB_IIrIS;
        private DglGetInstrumentsSGIX_V mDglGetInstrumentsSGIX_V;
        private DglGetIntegerv_IaI mDglGetIntegerv_IaI;
        private DglGetIntegerv_IP mDglGetIntegerv_IP;
        private DglGetInvariantBooleanvEXT_IIaB mDglGetInvariantBooleanvEXT_IIaB;
        private DglGetInvariantBooleanvEXT_IIP mDglGetInvariantBooleanvEXT_IIP;
        private DglGetInvariantFloatvEXT_IIaF mDglGetInvariantFloatvEXT_IIaF;
        private DglGetInvariantFloatvEXT_IIP mDglGetInvariantFloatvEXT_IIP;
        private DglGetInvariantIntegervEXT_IIaI mDglGetInvariantIntegervEXT_IIaI;
        private DglGetInvariantIntegervEXT_IIP mDglGetInvariantIntegervEXT_IIP;
        private DglGetLightfv_IIaF mDglGetLightfv_IIaF;
        private DglGetLightfv_IIP mDglGetLightfv_IIP;
        private DglGetLightiv_IIaI mDglGetLightiv_IIaI;
        private DglGetLightiv_IIP mDglGetLightiv_IIP;
        private DglGetListParameterfvSGIX_IIaF mDglGetListParameterfvSGIX_IIaF;
        private DglGetListParameterfvSGIX_IIP mDglGetListParameterfvSGIX_IIP;
        private DglGetListParameterivSGIX_IIaI mDglGetListParameterivSGIX_IIaI;
        private DglGetListParameterivSGIX_IIP mDglGetListParameterivSGIX_IIP;
        private DglGetLocalConstantBooleanvEXT_IIaB mDglGetLocalConstantBooleanvEXT_IIaB;
        private DglGetLocalConstantBooleanvEXT_IIP mDglGetLocalConstantBooleanvEXT_IIP;
        private DglGetLocalConstantFloatvEXT_IIaF mDglGetLocalConstantFloatvEXT_IIaF;
        private DglGetLocalConstantFloatvEXT_IIP mDglGetLocalConstantFloatvEXT_IIP;
        private DglGetLocalConstantIntegervEXT_IIaI mDglGetLocalConstantIntegervEXT_IIaI;
        private DglGetLocalConstantIntegervEXT_IIP mDglGetLocalConstantIntegervEXT_IIP;
        private DglGetMapAttribParameterfvNV_IIIaF mDglGetMapAttribParameterfvNV_IIIaF;
        private DglGetMapAttribParameterfvNV_IIIP mDglGetMapAttribParameterfvNV_IIIP;
        private DglGetMapAttribParameterivNV_IIIaI mDglGetMapAttribParameterivNV_IIIaI;
        private DglGetMapAttribParameterivNV_IIIP mDglGetMapAttribParameterivNV_IIIP;
        private DglGetMapControlPointsNV_IIIIIBaB mDglGetMapControlPointsNV_IIIIIBaB;
        private DglGetMapControlPointsNV_IIIIIBP mDglGetMapControlPointsNV_IIIIIBP;
        private DglGetMapdv_IIaD mDglGetMapdv_IIaD;
        private DglGetMapdv_IIP mDglGetMapdv_IIP;
        private DglGetMapfv_IIaF mDglGetMapfv_IIaF;
        private DglGetMapfv_IIP mDglGetMapfv_IIP;
        private DglGetMapiv_IIaI mDglGetMapiv_IIaI;
        private DglGetMapiv_IIP mDglGetMapiv_IIP;
        private DglGetMapParameterfvNV_IIaF mDglGetMapParameterfvNV_IIaF;
        private DglGetMapParameterfvNV_IIP mDglGetMapParameterfvNV_IIP;
        private DglGetMapParameterivNV_IIaI mDglGetMapParameterivNV_IIaI;
        private DglGetMapParameterivNV_IIP mDglGetMapParameterivNV_IIP;
        private DglGetMaterialfv_IIaF mDglGetMaterialfv_IIaF;
        private DglGetMaterialfv_IIP mDglGetMaterialfv_IIP;
        private DglGetMaterialiv_IIaI mDglGetMaterialiv_IIaI;
        private DglGetMaterialiv_IIP mDglGetMaterialiv_IIP;
        private DglGetMinmax_IBIIaB mDglGetMinmax_IBIIaB;
        private DglGetMinmax_IBIIaH mDglGetMinmax_IBIIaH;
        private DglGetMinmax_IBIIaI mDglGetMinmax_IBIIaI;
        private DglGetMinmax_IBIIaF mDglGetMinmax_IBIIaF;
        private DglGetMinmax_IBIIP mDglGetMinmax_IBIIP;
        private DglGetMinmaxEXT_IBIIaB mDglGetMinmaxEXT_IBIIaB;
        private DglGetMinmaxEXT_IBIIaH mDglGetMinmaxEXT_IBIIaH;
        private DglGetMinmaxEXT_IBIIaI mDglGetMinmaxEXT_IBIIaI;
        private DglGetMinmaxEXT_IBIIaF mDglGetMinmaxEXT_IBIIaF;
        private DglGetMinmaxEXT_IBIIP mDglGetMinmaxEXT_IBIIP;
        private DglGetMinmaxParameterfv_IIaF mDglGetMinmaxParameterfv_IIaF;
        private DglGetMinmaxParameterfv_IIP mDglGetMinmaxParameterfv_IIP;
        private DglGetMinmaxParameterfvEXT_IIaF mDglGetMinmaxParameterfvEXT_IIaF;
        private DglGetMinmaxParameterfvEXT_IIP mDglGetMinmaxParameterfvEXT_IIP;
        private DglGetMinmaxParameteriv_IIaI mDglGetMinmaxParameteriv_IIaI;
        private DglGetMinmaxParameteriv_IIP mDglGetMinmaxParameteriv_IIP;
        private DglGetMinmaxParameterivEXT_IIaI mDglGetMinmaxParameterivEXT_IIaI;
        private DglGetMinmaxParameterivEXT_IIP mDglGetMinmaxParameterivEXT_IIP;
        private DglGetObjectBufferfvATI_IIaF mDglGetObjectBufferfvATI_IIaF;
        private DglGetObjectBufferfvATI_IIP mDglGetObjectBufferfvATI_IIP;
        private DglGetObjectBufferivATI_IIaI mDglGetObjectBufferivATI_IIaI;
        private DglGetObjectBufferivATI_IIP mDglGetObjectBufferivATI_IIP;
        private DglGetObjectParameterfvARB_IIaF mDglGetObjectParameterfvARB_IIaF;
        private DglGetObjectParameterfvARB_IIP mDglGetObjectParameterfvARB_IIP;
        private DglGetObjectParameterivARB_IIaI mDglGetObjectParameterivARB_IIaI;
        private DglGetObjectParameterivARB_IIP mDglGetObjectParameterivARB_IIP;
        private DglGetOcclusionQueryivNV_IIaI mDglGetOcclusionQueryivNV_IIaI;
        private DglGetOcclusionQueryivNV_IIP mDglGetOcclusionQueryivNV_IIP;
        private DglGetOcclusionQueryuivNV_IIaI mDglGetOcclusionQueryuivNV_IIaI;
        private DglGetOcclusionQueryuivNV_IIP mDglGetOcclusionQueryuivNV_IIP;
        private DglGetPixelMapfv_IaF mDglGetPixelMapfv_IaF;
        private DglGetPixelMapfv_IP mDglGetPixelMapfv_IP;
        private DglGetPixelMapuiv_IaI mDglGetPixelMapuiv_IaI;
        private DglGetPixelMapuiv_IP mDglGetPixelMapuiv_IP;
        private DglGetPixelMapusv_IaH mDglGetPixelMapusv_IaH;
        private DglGetPixelMapusv_IP mDglGetPixelMapusv_IP;
        private DglGetPixelTexGenParameterfvSGIS_IaF mDglGetPixelTexGenParameterfvSGIS_IaF;
        private DglGetPixelTexGenParameterfvSGIS_IP mDglGetPixelTexGenParameterfvSGIS_IP;
        private DglGetPixelTexGenParameterivSGIS_IaI mDglGetPixelTexGenParameterivSGIS_IaI;
        private DglGetPixelTexGenParameterivSGIS_IP mDglGetPixelTexGenParameterivSGIS_IP;
        private DglGetPointerv_IrP mDglGetPointerv_IrP;
        private DglGetPointervEXT_IrP mDglGetPointervEXT_IrP;
        private DglGetPolygonStipple_aB mDglGetPolygonStipple_aB;
        private DglGetPolygonStipple_P mDglGetPolygonStipple_P;
        private DglGetProgramEnvParameterdvARB_IIaD mDglGetProgramEnvParameterdvARB_IIaD;
        private DglGetProgramEnvParameterdvARB_IIP mDglGetProgramEnvParameterdvARB_IIP;
        private DglGetProgramEnvParameterfvARB_IIaF mDglGetProgramEnvParameterfvARB_IIaF;
        private DglGetProgramEnvParameterfvARB_IIP mDglGetProgramEnvParameterfvARB_IIP;
        private DglGetProgramInfoLog_IIrIS mDglGetProgramInfoLog_IIrIS;
        private DglGetProgramiv_IIaI mDglGetProgramiv_IIaI;
        private DglGetProgramiv_IIP mDglGetProgramiv_IIP;
        private DglGetProgramivARB_IIaI mDglGetProgramivARB_IIaI;
        private DglGetProgramivARB_IIP mDglGetProgramivARB_IIP;
        private DglGetProgramivNV_IIaI mDglGetProgramivNV_IIaI;
        private DglGetProgramivNV_IIP mDglGetProgramivNV_IIP;
        private DglGetProgramLocalParameterdvARB_IIaD mDglGetProgramLocalParameterdvARB_IIaD;
        private DglGetProgramLocalParameterdvARB_IIP mDglGetProgramLocalParameterdvARB_IIP;
        private DglGetProgramLocalParameterfvARB_IIaF mDglGetProgramLocalParameterfvARB_IIaF;
        private DglGetProgramLocalParameterfvARB_IIP mDglGetProgramLocalParameterfvARB_IIP;
        private DglGetProgramNamedParameterdvNV_IISaD mDglGetProgramNamedParameterdvNV_IISaD;
        private DglGetProgramNamedParameterdvNV_IISP mDglGetProgramNamedParameterdvNV_IISP;
        private DglGetProgramNamedParameterfvNV_IISaF mDglGetProgramNamedParameterfvNV_IISaF;
        private DglGetProgramNamedParameterfvNV_IISP mDglGetProgramNamedParameterfvNV_IISP;
        private DglGetProgramParameterdvNV_IIIaD mDglGetProgramParameterdvNV_IIIaD;
        private DglGetProgramParameterdvNV_IIIP mDglGetProgramParameterdvNV_IIIP;
        private DglGetProgramParameterfvNV_IIIaF mDglGetProgramParameterfvNV_IIIaF;
        private DglGetProgramParameterfvNV_IIIP mDglGetProgramParameterfvNV_IIIP;
        private DglGetProgramStringARB_IIaB mDglGetProgramStringARB_IIaB;
        private DglGetProgramStringARB_IIP mDglGetProgramStringARB_IIP;
        private DglGetProgramStringNV_IIaB mDglGetProgramStringNV_IIaB;
        private DglGetProgramStringNV_IIP mDglGetProgramStringNV_IIP;
        private DglGetQueryiv_IIaI mDglGetQueryiv_IIaI;
        private DglGetQueryiv_IIP mDglGetQueryiv_IIP;
        private DglGetQueryivARB_IIaI mDglGetQueryivARB_IIaI;
        private DglGetQueryivARB_IIP mDglGetQueryivARB_IIP;
        private DglGetQueryObjectiv_IIaI mDglGetQueryObjectiv_IIaI;
        private DglGetQueryObjectiv_IIP mDglGetQueryObjectiv_IIP;
        private DglGetQueryObjectivARB_IIaI mDglGetQueryObjectivARB_IIaI;
        private DglGetQueryObjectivARB_IIP mDglGetQueryObjectivARB_IIP;
        private DglGetQueryObjectuiv_IIaI mDglGetQueryObjectuiv_IIaI;
        private DglGetQueryObjectuiv_IIP mDglGetQueryObjectuiv_IIP;
        private DglGetQueryObjectuivARB_IIaI mDglGetQueryObjectuivARB_IIaI;
        private DglGetQueryObjectuivARB_IIP mDglGetQueryObjectuivARB_IIP;
        private DglGetRenderbufferParameterivEXT_IIaI mDglGetRenderbufferParameterivEXT_IIaI;
        private DglGetRenderbufferParameterivEXT_IIP mDglGetRenderbufferParameterivEXT_IIP;
        private DglGetSeparableFilter_IIIaBaBaB mDglGetSeparableFilter_IIIaBaBaB;
        private DglGetSeparableFilter_IIIaHaHaH mDglGetSeparableFilter_IIIaHaHaH;
        private DglGetSeparableFilter_IIIaIaIaI mDglGetSeparableFilter_IIIaIaIaI;
        private DglGetSeparableFilter_IIIaFaFaF mDglGetSeparableFilter_IIIaFaFaF;
        private DglGetSeparableFilter_IIIPPP mDglGetSeparableFilter_IIIPPP;
        private DglGetSeparableFilterEXT_IIIaBaBaB mDglGetSeparableFilterEXT_IIIaBaBaB;
        private DglGetSeparableFilterEXT_IIIaHaHaH mDglGetSeparableFilterEXT_IIIaHaHaH;
        private DglGetSeparableFilterEXT_IIIaIaIaI mDglGetSeparableFilterEXT_IIIaIaIaI;
        private DglGetSeparableFilterEXT_IIIaFaFaF mDglGetSeparableFilterEXT_IIIaFaFaF;
        private DglGetSeparableFilterEXT_IIIPPP mDglGetSeparableFilterEXT_IIIPPP;
        private DglGetShaderInfoLog_IIrIS mDglGetShaderInfoLog_IIrIS;
        private DglGetShaderiv_IIaI mDglGetShaderiv_IIaI;
        private DglGetShaderiv_IIP mDglGetShaderiv_IIP;
        private DglGetShaderSource_IIrIS mDglGetShaderSource_IIrIS;
        private DglGetShaderSourceARB_IIrIS mDglGetShaderSourceARB_IIrIS;
        private DglGetSharpenTexFuncSGIS_IaF mDglGetSharpenTexFuncSGIS_IaF;
        private DglGetSharpenTexFuncSGIS_IP mDglGetSharpenTexFuncSGIS_IP;
        private DglGetString_I mDglGetString_I;
        private DglGetTexBumpParameterfvATI_IaF mDglGetTexBumpParameterfvATI_IaF;
        private DglGetTexBumpParameterfvATI_IP mDglGetTexBumpParameterfvATI_IP;
        private DglGetTexBumpParameterivATI_IaI mDglGetTexBumpParameterivATI_IaI;
        private DglGetTexBumpParameterivATI_IP mDglGetTexBumpParameterivATI_IP;
        private DglGetTexEnvfv_IIaF mDglGetTexEnvfv_IIaF;
        private DglGetTexEnvfv_IIP mDglGetTexEnvfv_IIP;
        private DglGetTexEnviv_IIaI mDglGetTexEnviv_IIaI;
        private DglGetTexEnviv_IIP mDglGetTexEnviv_IIP;
        private DglGetTexFilterFuncSGIS_IIaF mDglGetTexFilterFuncSGIS_IIaF;
        private DglGetTexFilterFuncSGIS_IIP mDglGetTexFilterFuncSGIS_IIP;
        private DglGetTexGendv_IIaD mDglGetTexGendv_IIaD;
        private DglGetTexGendv_IIP mDglGetTexGendv_IIP;
        private DglGetTexGenfv_IIaF mDglGetTexGenfv_IIaF;
        private DglGetTexGenfv_IIP mDglGetTexGenfv_IIP;
        private DglGetTexGeniv_IIaI mDglGetTexGeniv_IIaI;
        private DglGetTexGeniv_IIP mDglGetTexGeniv_IIP;
        private DglGetTexImage_IIIIaB mDglGetTexImage_IIIIaB;
        private DglGetTexImage_IIIIaH mDglGetTexImage_IIIIaH;
        private DglGetTexImage_IIIIaI mDglGetTexImage_IIIIaI;
        private DglGetTexImage_IIIIaF mDglGetTexImage_IIIIaF;
        private DglGetTexImage_IIIIP mDglGetTexImage_IIIIP;
        private DglGetTexLevelParameterfv_IIIaF mDglGetTexLevelParameterfv_IIIaF;
        private DglGetTexLevelParameterfv_IIIP mDglGetTexLevelParameterfv_IIIP;
        private DglGetTexLevelParameteriv_IIIaI mDglGetTexLevelParameteriv_IIIaI;
        private DglGetTexLevelParameteriv_IIIP mDglGetTexLevelParameteriv_IIIP;
        private DglGetTexParameterfv_IIaF mDglGetTexParameterfv_IIaF;
        private DglGetTexParameterfv_IIP mDglGetTexParameterfv_IIP;
        private DglGetTexParameteriv_IIaI mDglGetTexParameteriv_IIaI;
        private DglGetTexParameteriv_IIP mDglGetTexParameteriv_IIP;
        private DglGetTrackMatrixivNV_IIIaI mDglGetTrackMatrixivNV_IIIaI;
        private DglGetTrackMatrixivNV_IIIP mDglGetTrackMatrixivNV_IIIP;
        private DglGetUniformfv_IIaF mDglGetUniformfv_IIaF;
        private DglGetUniformfv_IIP mDglGetUniformfv_IIP;
        private DglGetUniformfvARB_IIaF mDglGetUniformfvARB_IIaF;
        private DglGetUniformfvARB_IIP mDglGetUniformfvARB_IIP;
        private DglGetUniformiv_IIaI mDglGetUniformiv_IIaI;
        private DglGetUniformiv_IIP mDglGetUniformiv_IIP;
        private DglGetUniformivARB_IIaI mDglGetUniformivARB_IIaI;
        private DglGetUniformivARB_IIP mDglGetUniformivARB_IIP;
        private DglGetUniformLocation_IS mDglGetUniformLocation_IS;
        private DglGetUniformLocationARB_IS mDglGetUniformLocationARB_IS;
        private DglGetVariantArrayObjectfvATI_IIaF mDglGetVariantArrayObjectfvATI_IIaF;
        private DglGetVariantArrayObjectfvATI_IIP mDglGetVariantArrayObjectfvATI_IIP;
        private DglGetVariantArrayObjectivATI_IIaI mDglGetVariantArrayObjectivATI_IIaI;
        private DglGetVariantArrayObjectivATI_IIP mDglGetVariantArrayObjectivATI_IIP;
        private DglGetVariantBooleanvEXT_IIaB mDglGetVariantBooleanvEXT_IIaB;
        private DglGetVariantBooleanvEXT_IIP mDglGetVariantBooleanvEXT_IIP;
        private DglGetVariantFloatvEXT_IIaF mDglGetVariantFloatvEXT_IIaF;
        private DglGetVariantFloatvEXT_IIP mDglGetVariantFloatvEXT_IIP;
        private DglGetVariantIntegervEXT_IIaI mDglGetVariantIntegervEXT_IIaI;
        private DglGetVariantIntegervEXT_IIP mDglGetVariantIntegervEXT_IIP;
        private DglGetVariantPointervEXT_IIrP mDglGetVariantPointervEXT_IIrP;
        private DglGetVertexAttribArrayObjectfvATI_IIaF mDglGetVertexAttribArrayObjectfvATI_IIaF;
        private DglGetVertexAttribArrayObjectfvATI_IIP mDglGetVertexAttribArrayObjectfvATI_IIP;
        private DglGetVertexAttribArrayObjectivATI_IIaI mDglGetVertexAttribArrayObjectivATI_IIaI;
        private DglGetVertexAttribArrayObjectivATI_IIP mDglGetVertexAttribArrayObjectivATI_IIP;
        private DglGetVertexAttribdv_IIaD mDglGetVertexAttribdv_IIaD;
        private DglGetVertexAttribdv_IIP mDglGetVertexAttribdv_IIP;
        private DglGetVertexAttribdvARB_IIaD mDglGetVertexAttribdvARB_IIaD;
        private DglGetVertexAttribdvARB_IIP mDglGetVertexAttribdvARB_IIP;
        private DglGetVertexAttribdvNV_IIaD mDglGetVertexAttribdvNV_IIaD;
        private DglGetVertexAttribdvNV_IIP mDglGetVertexAttribdvNV_IIP;
        private DglGetVertexAttribfv_IIaF mDglGetVertexAttribfv_IIaF;
        private DglGetVertexAttribfv_IIP mDglGetVertexAttribfv_IIP;
        private DglGetVertexAttribfvARB_IIaF mDglGetVertexAttribfvARB_IIaF;
        private DglGetVertexAttribfvARB_IIP mDglGetVertexAttribfvARB_IIP;
        private DglGetVertexAttribfvNV_IIaF mDglGetVertexAttribfvNV_IIaF;
        private DglGetVertexAttribfvNV_IIP mDglGetVertexAttribfvNV_IIP;
        private DglGetVertexAttribiv_IIaI mDglGetVertexAttribiv_IIaI;
        private DglGetVertexAttribiv_IIP mDglGetVertexAttribiv_IIP;
        private DglGetVertexAttribivARB_IIaI mDglGetVertexAttribivARB_IIaI;
        private DglGetVertexAttribivARB_IIP mDglGetVertexAttribivARB_IIP;
        private DglGetVertexAttribivNV_IIaI mDglGetVertexAttribivNV_IIaI;
        private DglGetVertexAttribivNV_IIP mDglGetVertexAttribivNV_IIP;
        private DglGetVertexAttribPointerv_IIrP mDglGetVertexAttribPointerv_IIrP;
        private DglGetVertexAttribPointervARB_IIrP mDglGetVertexAttribPointervARB_IIrP;
        private DglGetVertexAttribPointervNV_IIrP mDglGetVertexAttribPointervNV_IIrP;
        private DglGlobalAlphaFactorbSUN_B mDglGlobalAlphaFactorbSUN_B;
        private DglGlobalAlphaFactordSUN_D mDglGlobalAlphaFactordSUN_D;
        private DglGlobalAlphaFactorfSUN_F mDglGlobalAlphaFactorfSUN_F;
        private DglGlobalAlphaFactoriSUN_I mDglGlobalAlphaFactoriSUN_I;
        private DglGlobalAlphaFactorsSUN_H mDglGlobalAlphaFactorsSUN_H;
        private DglGlobalAlphaFactorubSUN_B mDglGlobalAlphaFactorubSUN_B;
        private DglGlobalAlphaFactoruiSUN_I mDglGlobalAlphaFactoruiSUN_I;
        private DglGlobalAlphaFactorusSUN_H mDglGlobalAlphaFactorusSUN_H;
        private DglHint_II mDglHint_II;
        private DglHintPGI_II mDglHintPGI_II;
        private DglHistogram_IIIB mDglHistogram_IIIB;
        private DglHistogramEXT_IIIB mDglHistogramEXT_IIIB;
        private DglIglooInterfaceSGIX_IaB mDglIglooInterfaceSGIX_IaB;
        private DglIglooInterfaceSGIX_IP mDglIglooInterfaceSGIX_IP;
        private DglImageTransformParameterfHP_IIF mDglImageTransformParameterfHP_IIF;
        private DglImageTransformParameterfvHP_IIaF mDglImageTransformParameterfvHP_IIaF;
        private DglImageTransformParameterfvHP_IIP mDglImageTransformParameterfvHP_IIP;
        private DglImageTransformParameteriHP_III mDglImageTransformParameteriHP_III;
        private DglImageTransformParameterivHP_IIaI mDglImageTransformParameterivHP_IIaI;
        private DglImageTransformParameterivHP_IIP mDglImageTransformParameterivHP_IIP;
        private DglIndexd_D mDglIndexd_D;
        private DglIndexdv_aD mDglIndexdv_aD;
        private DglIndexdv_P mDglIndexdv_P;
        private DglIndexf_F mDglIndexf_F;
        private DglIndexFuncEXT_IF mDglIndexFuncEXT_IF;
        private DglIndexfv_aF mDglIndexfv_aF;
        private DglIndexfv_P mDglIndexfv_P;
        private DglIndexi_I mDglIndexi_I;
        private DglIndexiv_aI mDglIndexiv_aI;
        private DglIndexiv_P mDglIndexiv_P;
        private DglIndexMask_I mDglIndexMask_I;
        private DglIndexMaterialEXT_II mDglIndexMaterialEXT_II;
        private DglIndexPointer_IIaB mDglIndexPointer_IIaB;
        private DglIndexPointer_IIaH mDglIndexPointer_IIaH;
        private DglIndexPointer_IIaI mDglIndexPointer_IIaI;
        private DglIndexPointer_IIaF mDglIndexPointer_IIaF;
        private DglIndexPointer_IIaD mDglIndexPointer_IIaD;
        private DglIndexPointer_IIP mDglIndexPointer_IIP;
        private DglIndexPointerEXT_IIIaB mDglIndexPointerEXT_IIIaB;
        private DglIndexPointerEXT_IIIaH mDglIndexPointerEXT_IIIaH;
        private DglIndexPointerEXT_IIIaI mDglIndexPointerEXT_IIIaI;
        private DglIndexPointerEXT_IIIaF mDglIndexPointerEXT_IIIaF;
        private DglIndexPointerEXT_IIIaD mDglIndexPointerEXT_IIIaD;
        private DglIndexPointerEXT_IIIP mDglIndexPointerEXT_IIIP;
        private DglIndexPointerListIBM_IIrPaB mDglIndexPointerListIBM_IIrPaB;
        private DglIndexPointerListIBM_IIrPaH mDglIndexPointerListIBM_IIrPaH;
        private DglIndexPointerListIBM_IIrPaI mDglIndexPointerListIBM_IIrPaI;
        private DglIndexPointerListIBM_IIrPaF mDglIndexPointerListIBM_IIrPaF;
        private DglIndexPointerListIBM_IIrPaD mDglIndexPointerListIBM_IIrPaD;
        private DglIndexPointerListIBM_IIrPP mDglIndexPointerListIBM_IIrPP;
        private DglIndexs_H mDglIndexs_H;
        private DglIndexsv_aH mDglIndexsv_aH;
        private DglIndexsv_P mDglIndexsv_P;
        private DglIndexub_B mDglIndexub_B;
        private DglIndexubv_aB mDglIndexubv_aB;
        private DglIndexubv_P mDglIndexubv_P;
        private DglInitNames_V mDglInitNames_V;
        private DglInsertComponentEXT_III mDglInsertComponentEXT_III;
        private DglInstrumentsBufferSGIX_IaI mDglInstrumentsBufferSGIX_IaI;
        private DglInstrumentsBufferSGIX_IP mDglInstrumentsBufferSGIX_IP;
        private DglInterleavedArrays_IIaB mDglInterleavedArrays_IIaB;
        private DglInterleavedArrays_IIaF mDglInterleavedArrays_IIaF;
        private DglInterleavedArrays_IIP mDglInterleavedArrays_IIP;
        private DglIsAsyncMarkerSGIX_I mDglIsAsyncMarkerSGIX_I;
        private DglIsBuffer_I mDglIsBuffer_I;
        private DglIsBufferARB_I mDglIsBufferARB_I;
        private DglIsEnabled_I mDglIsEnabled_I;
        private DglIsFenceAPPLE_I mDglIsFenceAPPLE_I;
        private DglIsFenceNV_I mDglIsFenceNV_I;
        private DglIsFramebufferEXT_I mDglIsFramebufferEXT_I;
        private DglIsList_I mDglIsList_I;
        private DglIsObjectBufferATI_I mDglIsObjectBufferATI_I;
        private DglIsOcclusionQueryNV_I mDglIsOcclusionQueryNV_I;
        private DglIsProgram_I mDglIsProgram_I;
        private DglIsProgramARB_I mDglIsProgramARB_I;
        private DglIsProgramNV_I mDglIsProgramNV_I;
        private DglIsQuery_I mDglIsQuery_I;
        private DglIsQueryARB_I mDglIsQueryARB_I;
        private DglIsRenderbufferEXT_I mDglIsRenderbufferEXT_I;
        private DglIsShader_I mDglIsShader_I;
        private DglIsTexture_I mDglIsTexture_I;
        private DglIsTextureEXT_I mDglIsTextureEXT_I;
        private DglIsVariantEnabledEXT_II mDglIsVariantEnabledEXT_II;
        private DglIsVertexArrayAPPLE_I mDglIsVertexArrayAPPLE_I;
        private DglLightEnviSGIX_II mDglLightEnviSGIX_II;
        private DglLightf_IIF mDglLightf_IIF;
        private DglLightfv_IIaF mDglLightfv_IIaF;
        private DglLightfv_IIP mDglLightfv_IIP;
        private DglLighti_III mDglLighti_III;
        private DglLightiv_IIaI mDglLightiv_IIaI;
        private DglLightiv_IIP mDglLightiv_IIP;
        private DglLightModelf_IF mDglLightModelf_IF;
        private DglLightModelfv_IaF mDglLightModelfv_IaF;
        private DglLightModelfv_IP mDglLightModelfv_IP;
        private DglLightModeli_II mDglLightModeli_II;
        private DglLightModeliv_IaI mDglLightModeliv_IaI;
        private DglLightModeliv_IP mDglLightModeliv_IP;
        private DglLineStipple_IH mDglLineStipple_IH;
        private DglLineWidth_F mDglLineWidth_F;
        private DglLinkProgram_I mDglLinkProgram_I;
        private DglLinkProgramARB_I mDglLinkProgramARB_I;
        private DglListBase_I mDglListBase_I;
        private DglListParameterfSGIX_IIF mDglListParameterfSGIX_IIF;
        private DglListParameterfvSGIX_IIaF mDglListParameterfvSGIX_IIaF;
        private DglListParameterfvSGIX_IIP mDglListParameterfvSGIX_IIP;
        private DglListParameteriSGIX_III mDglListParameteriSGIX_III;
        private DglListParameterivSGIX_IIaI mDglListParameterivSGIX_IIaI;
        private DglListParameterivSGIX_IIP mDglListParameterivSGIX_IIP;
        private DglLoadIdentity_V mDglLoadIdentity_V;
        private DglLoadIdentityDeformationMapSGIX_I mDglLoadIdentityDeformationMapSGIX_I;
        private DglLoadMatrixd_aD mDglLoadMatrixd_aD;
        private DglLoadMatrixd_P mDglLoadMatrixd_P;
        private DglLoadMatrixf_aF mDglLoadMatrixf_aF;
        private DglLoadMatrixf_P mDglLoadMatrixf_P;
        private DglLoadName_I mDglLoadName_I;
        private DglLoadProgramNV_IIIaB mDglLoadProgramNV_IIIaB;
        private DglLoadProgramNV_IIIP mDglLoadProgramNV_IIIP;
        private DglLoadTransposeMatrixd_aD mDglLoadTransposeMatrixd_aD;
        private DglLoadTransposeMatrixd_P mDglLoadTransposeMatrixd_P;
        private DglLoadTransposeMatrixdARB_aD mDglLoadTransposeMatrixdARB_aD;
        private DglLoadTransposeMatrixdARB_P mDglLoadTransposeMatrixdARB_P;
        private DglLoadTransposeMatrixf_aF mDglLoadTransposeMatrixf_aF;
        private DglLoadTransposeMatrixf_P mDglLoadTransposeMatrixf_P;
        private DglLoadTransposeMatrixfARB_aF mDglLoadTransposeMatrixfARB_aF;
        private DglLoadTransposeMatrixfARB_P mDglLoadTransposeMatrixfARB_P;
        private DglLockArraysEXT_II mDglLockArraysEXT_II;
        private DglLogicOp_I mDglLogicOp_I;
        private DglMap1d_IDDIIaD mDglMap1d_IDDIIaD;
        private DglMap1d_IDDIIP mDglMap1d_IDDIIP;
        private DglMap1f_IFFIIaF mDglMap1f_IFFIIaF;
        private DglMap1f_IFFIIP mDglMap1f_IFFIIP;
        private DglMap2d_IDDIIDDIIaD mDglMap2d_IDDIIDDIIaD;
        private DglMap2d_IDDIIDDIIP mDglMap2d_IDDIIDDIIP;
        private DglMap2f_IFFIIFFIIaF mDglMap2f_IFFIIFFIIaF;
        private DglMap2f_IFFIIFFIIP mDglMap2f_IFFIIFFIIP;
        private DglMapBuffer_II mDglMapBuffer_II;
        private DglMapBufferARB_II mDglMapBufferARB_II;
        private DglMapControlPointsNV_IIIIIIIBaB mDglMapControlPointsNV_IIIIIIIBaB;
        private DglMapControlPointsNV_IIIIIIIBaF mDglMapControlPointsNV_IIIIIIIBaF;
        private DglMapControlPointsNV_IIIIIIIBP mDglMapControlPointsNV_IIIIIIIBP;
        private DglMapGrid1d_IDD mDglMapGrid1d_IDD;
        private DglMapGrid1f_IFF mDglMapGrid1f_IFF;
        private DglMapGrid2d_IDDIDD mDglMapGrid2d_IDDIDD;
        private DglMapGrid2f_IFFIFF mDglMapGrid2f_IFFIFF;
        private DglMapObjectBufferATI_I mDglMapObjectBufferATI_I;
        private DglMapParameterfvNV_IIaF mDglMapParameterfvNV_IIaF;
        private DglMapParameterfvNV_IIP mDglMapParameterfvNV_IIP;
        private DglMapParameterivNV_IIaI mDglMapParameterivNV_IIaI;
        private DglMapParameterivNV_IIP mDglMapParameterivNV_IIP;
        private DglMaterialf_IIF mDglMaterialf_IIF;
        private DglMaterialfv_IIaF mDglMaterialfv_IIaF;
        private DglMaterialfv_IIP mDglMaterialfv_IIP;
        private DglMateriali_III mDglMateriali_III;
        private DglMaterialiv_IIaI mDglMaterialiv_IIaI;
        private DglMaterialiv_IIP mDglMaterialiv_IIP;
        private DglMatrixIndexPointerARB_IIIaI mDglMatrixIndexPointerARB_IIIaI;
        private DglMatrixIndexPointerARB_IIIP mDglMatrixIndexPointerARB_IIIP;
        private DglMatrixIndexubvARB_IaB mDglMatrixIndexubvARB_IaB;
        private DglMatrixIndexubvARB_IP mDglMatrixIndexubvARB_IP;
        private DglMatrixIndexuivARB_IaI mDglMatrixIndexuivARB_IaI;
        private DglMatrixIndexuivARB_IP mDglMatrixIndexuivARB_IP;
        private DglMatrixIndexusvARB_IaH mDglMatrixIndexusvARB_IaH;
        private DglMatrixIndexusvARB_IP mDglMatrixIndexusvARB_IP;
        private DglMatrixMode_I mDglMatrixMode_I;
        private DglMinmax_IIB mDglMinmax_IIB;
        private DglMinmaxEXT_IIB mDglMinmaxEXT_IIB;
        private DglMultiDrawArrays_IrIrII mDglMultiDrawArrays_IrIrII;
        private DglMultiDrawArraysEXT_IrIrII mDglMultiDrawArraysEXT_IrIrII;
        private DglMultiDrawElementArrayAPPLE_IrIrII mDglMultiDrawElementArrayAPPLE_IrIrII;
        private DglMultiDrawElements_IrIIrPI mDglMultiDrawElements_IrIIrPI;
        private DglMultiDrawElementsEXT_IrIIrPI mDglMultiDrawElementsEXT_IrIIrPI;
        private DglMultiDrawRangeElementArrayAPPLE_IIIrIrII mDglMultiDrawRangeElementArrayAPPLE_IIIrIrII;
        private DglMultiModeDrawArraysIBM_rIrIrIII mDglMultiModeDrawArraysIBM_rIrIrIII;
        private DglMultiModeDrawElementsIBM_rIrIIrPII mDglMultiModeDrawElementsIBM_rIrIIrPII;
        private DglMultiTexCoord1d_ID mDglMultiTexCoord1d_ID;
        private DglMultiTexCoord1dARB_ID mDglMultiTexCoord1dARB_ID;
        private DglMultiTexCoord1dv_IaD mDglMultiTexCoord1dv_IaD;
        private DglMultiTexCoord1dv_IP mDglMultiTexCoord1dv_IP;
        private DglMultiTexCoord1dvARB_IaD mDglMultiTexCoord1dvARB_IaD;
        private DglMultiTexCoord1dvARB_IP mDglMultiTexCoord1dvARB_IP;
        private DglMultiTexCoord1f_IF mDglMultiTexCoord1f_IF;
        private DglMultiTexCoord1fARB_IF mDglMultiTexCoord1fARB_IF;
        private DglMultiTexCoord1fv_IaF mDglMultiTexCoord1fv_IaF;
        private DglMultiTexCoord1fv_IP mDglMultiTexCoord1fv_IP;
        private DglMultiTexCoord1fvARB_IaF mDglMultiTexCoord1fvARB_IaF;
        private DglMultiTexCoord1fvARB_IP mDglMultiTexCoord1fvARB_IP;
        private DglMultiTexCoord1hNV_IH mDglMultiTexCoord1hNV_IH;
        private DglMultiTexCoord1hvNV_IaH mDglMultiTexCoord1hvNV_IaH;
        private DglMultiTexCoord1hvNV_IP mDglMultiTexCoord1hvNV_IP;
        private DglMultiTexCoord1i_II mDglMultiTexCoord1i_II;
        private DglMultiTexCoord1iARB_II mDglMultiTexCoord1iARB_II;
        private DglMultiTexCoord1iv_IaI mDglMultiTexCoord1iv_IaI;
        private DglMultiTexCoord1iv_IP mDglMultiTexCoord1iv_IP;
        private DglMultiTexCoord1ivARB_IaI mDglMultiTexCoord1ivARB_IaI;
        private DglMultiTexCoord1ivARB_IP mDglMultiTexCoord1ivARB_IP;
        private DglMultiTexCoord1s_IH mDglMultiTexCoord1s_IH;
        private DglMultiTexCoord1sARB_IH mDglMultiTexCoord1sARB_IH;
        private DglMultiTexCoord1sv_IaH mDglMultiTexCoord1sv_IaH;
        private DglMultiTexCoord1sv_IP mDglMultiTexCoord1sv_IP;
        private DglMultiTexCoord1svARB_IaH mDglMultiTexCoord1svARB_IaH;
        private DglMultiTexCoord1svARB_IP mDglMultiTexCoord1svARB_IP;
        private DglMultiTexCoord2d_IDD mDglMultiTexCoord2d_IDD;
        private DglMultiTexCoord2dARB_IDD mDglMultiTexCoord2dARB_IDD;
        private DglMultiTexCoord2dv_IaD mDglMultiTexCoord2dv_IaD;
        private DglMultiTexCoord2dv_IP mDglMultiTexCoord2dv_IP;
        private DglMultiTexCoord2dvARB_IaD mDglMultiTexCoord2dvARB_IaD;
        private DglMultiTexCoord2dvARB_IP mDglMultiTexCoord2dvARB_IP;
        private DglMultiTexCoord2f_IFF mDglMultiTexCoord2f_IFF;
        private DglMultiTexCoord2fARB_IFF mDglMultiTexCoord2fARB_IFF;
        private DglMultiTexCoord2fv_IaF mDglMultiTexCoord2fv_IaF;
        private DglMultiTexCoord2fv_IP mDglMultiTexCoord2fv_IP;
        private DglMultiTexCoord2fvARB_IaF mDglMultiTexCoord2fvARB_IaF;
        private DglMultiTexCoord2fvARB_IP mDglMultiTexCoord2fvARB_IP;
        private DglMultiTexCoord2hNV_IHH mDglMultiTexCoord2hNV_IHH;
        private DglMultiTexCoord2hvNV_IaH mDglMultiTexCoord2hvNV_IaH;
        private DglMultiTexCoord2hvNV_IP mDglMultiTexCoord2hvNV_IP;
        private DglMultiTexCoord2i_III mDglMultiTexCoord2i_III;
        private DglMultiTexCoord2iARB_III mDglMultiTexCoord2iARB_III;
        private DglMultiTexCoord2iv_IaI mDglMultiTexCoord2iv_IaI;
        private DglMultiTexCoord2iv_IP mDglMultiTexCoord2iv_IP;
        private DglMultiTexCoord2ivARB_IaI mDglMultiTexCoord2ivARB_IaI;
        private DglMultiTexCoord2ivARB_IP mDglMultiTexCoord2ivARB_IP;
        private DglMultiTexCoord2s_IHH mDglMultiTexCoord2s_IHH;
        private DglMultiTexCoord2sARB_IHH mDglMultiTexCoord2sARB_IHH;
        private DglMultiTexCoord2sv_IaH mDglMultiTexCoord2sv_IaH;
        private DglMultiTexCoord2sv_IP mDglMultiTexCoord2sv_IP;
        private DglMultiTexCoord2svARB_IaH mDglMultiTexCoord2svARB_IaH;
        private DglMultiTexCoord2svARB_IP mDglMultiTexCoord2svARB_IP;
        private DglMultiTexCoord3d_IDDD mDglMultiTexCoord3d_IDDD;
        private DglMultiTexCoord3dARB_IDDD mDglMultiTexCoord3dARB_IDDD;
        private DglMultiTexCoord3dv_IaD mDglMultiTexCoord3dv_IaD;
        private DglMultiTexCoord3dv_IP mDglMultiTexCoord3dv_IP;
        private DglMultiTexCoord3dvARB_IaD mDglMultiTexCoord3dvARB_IaD;
        private DglMultiTexCoord3dvARB_IP mDglMultiTexCoord3dvARB_IP;
        private DglMultiTexCoord3f_IFFF mDglMultiTexCoord3f_IFFF;
        private DglMultiTexCoord3fARB_IFFF mDglMultiTexCoord3fARB_IFFF;
        private DglMultiTexCoord3fv_IaF mDglMultiTexCoord3fv_IaF;
        private DglMultiTexCoord3fv_IP mDglMultiTexCoord3fv_IP;
        private DglMultiTexCoord3fvARB_IaF mDglMultiTexCoord3fvARB_IaF;
        private DglMultiTexCoord3fvARB_IP mDglMultiTexCoord3fvARB_IP;
        private DglMultiTexCoord3hNV_IHHH mDglMultiTexCoord3hNV_IHHH;
        private DglMultiTexCoord3hvNV_IaH mDglMultiTexCoord3hvNV_IaH;
        private DglMultiTexCoord3hvNV_IP mDglMultiTexCoord3hvNV_IP;
        private DglMultiTexCoord3i_IIII mDglMultiTexCoord3i_IIII;
        private DglMultiTexCoord3iARB_IIII mDglMultiTexCoord3iARB_IIII;
        private DglMultiTexCoord3iv_IaI mDglMultiTexCoord3iv_IaI;
        private DglMultiTexCoord3iv_IP mDglMultiTexCoord3iv_IP;
        private DglMultiTexCoord3ivARB_IaI mDglMultiTexCoord3ivARB_IaI;
        private DglMultiTexCoord3ivARB_IP mDglMultiTexCoord3ivARB_IP;
        private DglMultiTexCoord3s_IHHH mDglMultiTexCoord3s_IHHH;
        private DglMultiTexCoord3sARB_IHHH mDglMultiTexCoord3sARB_IHHH;
        private DglMultiTexCoord3sv_IaH mDglMultiTexCoord3sv_IaH;
        private DglMultiTexCoord3sv_IP mDglMultiTexCoord3sv_IP;
        private DglMultiTexCoord3svARB_IaH mDglMultiTexCoord3svARB_IaH;
        private DglMultiTexCoord3svARB_IP mDglMultiTexCoord3svARB_IP;
        private DglMultiTexCoord4d_IDDDD mDglMultiTexCoord4d_IDDDD;
        private DglMultiTexCoord4dARB_IDDDD mDglMultiTexCoord4dARB_IDDDD;
        private DglMultiTexCoord4dv_IaD mDglMultiTexCoord4dv_IaD;
        private DglMultiTexCoord4dv_IP mDglMultiTexCoord4dv_IP;
        private DglMultiTexCoord4dvARB_IaD mDglMultiTexCoord4dvARB_IaD;
        private DglMultiTexCoord4dvARB_IP mDglMultiTexCoord4dvARB_IP;
        private DglMultiTexCoord4f_IFFFF mDglMultiTexCoord4f_IFFFF;
        private DglMultiTexCoord4fARB_IFFFF mDglMultiTexCoord4fARB_IFFFF;
        private DglMultiTexCoord4fv_IaF mDglMultiTexCoord4fv_IaF;
        private DglMultiTexCoord4fv_IP mDglMultiTexCoord4fv_IP;
        private DglMultiTexCoord4fvARB_IaF mDglMultiTexCoord4fvARB_IaF;
        private DglMultiTexCoord4fvARB_IP mDglMultiTexCoord4fvARB_IP;
        private DglMultiTexCoord4hNV_IHHHH mDglMultiTexCoord4hNV_IHHHH;
        private DglMultiTexCoord4hvNV_IaH mDglMultiTexCoord4hvNV_IaH;
        private DglMultiTexCoord4hvNV_IP mDglMultiTexCoord4hvNV_IP;
        private DglMultiTexCoord4i_IIIII mDglMultiTexCoord4i_IIIII;
        private DglMultiTexCoord4iARB_IIIII mDglMultiTexCoord4iARB_IIIII;
        private DglMultiTexCoord4iv_IaI mDglMultiTexCoord4iv_IaI;
        private DglMultiTexCoord4iv_IP mDglMultiTexCoord4iv_IP;
        private DglMultiTexCoord4ivARB_IaI mDglMultiTexCoord4ivARB_IaI;
        private DglMultiTexCoord4ivARB_IP mDglMultiTexCoord4ivARB_IP;
        private DglMultiTexCoord4s_IHHHH mDglMultiTexCoord4s_IHHHH;
        private DglMultiTexCoord4sARB_IHHHH mDglMultiTexCoord4sARB_IHHHH;
        private DglMultiTexCoord4sv_IaH mDglMultiTexCoord4sv_IaH;
        private DglMultiTexCoord4sv_IP mDglMultiTexCoord4sv_IP;
        private DglMultiTexCoord4svARB_IaH mDglMultiTexCoord4svARB_IaH;
        private DglMultiTexCoord4svARB_IP mDglMultiTexCoord4svARB_IP;
        private DglMultMatrixd_aD mDglMultMatrixd_aD;
        private DglMultMatrixd_P mDglMultMatrixd_P;
        private DglMultMatrixf_aF mDglMultMatrixf_aF;
        private DglMultMatrixf_P mDglMultMatrixf_P;
        private DglMultTransposeMatrixd_aD mDglMultTransposeMatrixd_aD;
        private DglMultTransposeMatrixd_P mDglMultTransposeMatrixd_P;
        private DglMultTransposeMatrixdARB_aD mDglMultTransposeMatrixdARB_aD;
        private DglMultTransposeMatrixdARB_P mDglMultTransposeMatrixdARB_P;
        private DglMultTransposeMatrixf_aF mDglMultTransposeMatrixf_aF;
        private DglMultTransposeMatrixf_P mDglMultTransposeMatrixf_P;
        private DglMultTransposeMatrixfARB_aF mDglMultTransposeMatrixfARB_aF;
        private DglMultTransposeMatrixfARB_P mDglMultTransposeMatrixfARB_P;
        private DglNewList_II mDglNewList_II;
        private DglNewObjectBufferATI_IaBI mDglNewObjectBufferATI_IaBI;
        private DglNewObjectBufferATI_IPI mDglNewObjectBufferATI_IPI;
        private DglNormal3b_BBB mDglNormal3b_BBB;
        private DglNormal3bv_aB mDglNormal3bv_aB;
        private DglNormal3bv_P mDglNormal3bv_P;
        private DglNormal3d_DDD mDglNormal3d_DDD;
        private DglNormal3dv_aD mDglNormal3dv_aD;
        private DglNormal3dv_P mDglNormal3dv_P;
        private DglNormal3f_FFF mDglNormal3f_FFF;
        private DglNormal3fv_aF mDglNormal3fv_aF;
        private DglNormal3fv_P mDglNormal3fv_P;
        private DglNormal3fVertex3fSUN_FFFFFF mDglNormal3fVertex3fSUN_FFFFFF;
        private DglNormal3fVertex3fvSUN_aFaF mDglNormal3fVertex3fvSUN_aFaF;
        private DglNormal3fVertex3fvSUN_PP mDglNormal3fVertex3fvSUN_PP;
        private DglNormal3hNV_HHH mDglNormal3hNV_HHH;
        private DglNormal3hvNV_aH mDglNormal3hvNV_aH;
        private DglNormal3hvNV_P mDglNormal3hvNV_P;
        private DglNormal3i_III mDglNormal3i_III;
        private DglNormal3iv_aI mDglNormal3iv_aI;
        private DglNormal3iv_P mDglNormal3iv_P;
        private DglNormal3s_HHH mDglNormal3s_HHH;
        private DglNormal3sv_aH mDglNormal3sv_aH;
        private DglNormal3sv_P mDglNormal3sv_P;
        private DglNormalPointer_IIaB mDglNormalPointer_IIaB;
        private DglNormalPointer_IIaH mDglNormalPointer_IIaH;
        private DglNormalPointer_IIaI mDglNormalPointer_IIaI;
        private DglNormalPointer_IIaF mDglNormalPointer_IIaF;
        private DglNormalPointer_IIaD mDglNormalPointer_IIaD;
        private DglNormalPointer_IIP mDglNormalPointer_IIP;
        private DglNormalPointerEXT_IIIaB mDglNormalPointerEXT_IIIaB;
        private DglNormalPointerEXT_IIIaH mDglNormalPointerEXT_IIIaH;
        private DglNormalPointerEXT_IIIaI mDglNormalPointerEXT_IIIaI;
        private DglNormalPointerEXT_IIIaF mDglNormalPointerEXT_IIIaF;
        private DglNormalPointerEXT_IIIaD mDglNormalPointerEXT_IIIaD;
        private DglNormalPointerEXT_IIIP mDglNormalPointerEXT_IIIP;
        private DglNormalPointerListIBM_IIrPI mDglNormalPointerListIBM_IIrPI;
        private DglNormalPointervINTEL_IrP mDglNormalPointervINTEL_IrP;
        private DglNormalStream3bATI_IBBB mDglNormalStream3bATI_IBBB;
        private DglNormalStream3bvATI_IaB mDglNormalStream3bvATI_IaB;
        private DglNormalStream3bvATI_IP mDglNormalStream3bvATI_IP;
        private DglNormalStream3dATI_IDDD mDglNormalStream3dATI_IDDD;
        private DglNormalStream3dvATI_IaD mDglNormalStream3dvATI_IaD;
        private DglNormalStream3dvATI_IP mDglNormalStream3dvATI_IP;
        private DglNormalStream3fATI_IFFF mDglNormalStream3fATI_IFFF;
        private DglNormalStream3fvATI_IaF mDglNormalStream3fvATI_IaF;
        private DglNormalStream3fvATI_IP mDglNormalStream3fvATI_IP;
        private DglNormalStream3iATI_IIII mDglNormalStream3iATI_IIII;
        private DglNormalStream3ivATI_IaI mDglNormalStream3ivATI_IaI;
        private DglNormalStream3ivATI_IP mDglNormalStream3ivATI_IP;
        private DglNormalStream3sATI_IHHH mDglNormalStream3sATI_IHHH;
        private DglNormalStream3svATI_IaH mDglNormalStream3svATI_IaH;
        private DglNormalStream3svATI_IP mDglNormalStream3svATI_IP;
        private DglOrtho_DDDDDD mDglOrtho_DDDDDD;
        private DglPassTexCoordATI_III mDglPassTexCoordATI_III;
        private DglPassThrough_F mDglPassThrough_F;
        private DglPixelDataRangeNV_IIaB mDglPixelDataRangeNV_IIaB;
        private DglPixelDataRangeNV_IIP mDglPixelDataRangeNV_IIP;
        private DglPixelMapfv_IIaF mDglPixelMapfv_IIaF;
        private DglPixelMapfv_IIP mDglPixelMapfv_IIP;
        private DglPixelMapuiv_IIaI mDglPixelMapuiv_IIaI;
        private DglPixelMapuiv_IIP mDglPixelMapuiv_IIP;
        private DglPixelMapusv_IIaH mDglPixelMapusv_IIaH;
        private DglPixelMapusv_IIP mDglPixelMapusv_IIP;
        private DglPixelStoref_IF mDglPixelStoref_IF;
        private DglPixelStorei_II mDglPixelStorei_II;
        private DglPixelTexGenParameterfSGIS_IF mDglPixelTexGenParameterfSGIS_IF;
        private DglPixelTexGenParameterfvSGIS_IaF mDglPixelTexGenParameterfvSGIS_IaF;
        private DglPixelTexGenParameterfvSGIS_IP mDglPixelTexGenParameterfvSGIS_IP;
        private DglPixelTexGenParameteriSGIS_II mDglPixelTexGenParameteriSGIS_II;
        private DglPixelTexGenParameterivSGIS_IaI mDglPixelTexGenParameterivSGIS_IaI;
        private DglPixelTexGenParameterivSGIS_IP mDglPixelTexGenParameterivSGIS_IP;
        private DglPixelTexGenSGIX_I mDglPixelTexGenSGIX_I;
        private DglPixelTransferf_IF mDglPixelTransferf_IF;
        private DglPixelTransferi_II mDglPixelTransferi_II;
        private DglPixelTransformParameterfEXT_IIF mDglPixelTransformParameterfEXT_IIF;
        private DglPixelTransformParameterfvEXT_IIaF mDglPixelTransformParameterfvEXT_IIaF;
        private DglPixelTransformParameterfvEXT_IIP mDglPixelTransformParameterfvEXT_IIP;
        private DglPixelTransformParameteriEXT_III mDglPixelTransformParameteriEXT_III;
        private DglPixelTransformParameterivEXT_IIaI mDglPixelTransformParameterivEXT_IIaI;
        private DglPixelTransformParameterivEXT_IIP mDglPixelTransformParameterivEXT_IIP;
        private DglPixelZoom_FF mDglPixelZoom_FF;
        private DglPNTrianglesfATI_IF mDglPNTrianglesfATI_IF;
        private DglPNTrianglesiATI_II mDglPNTrianglesiATI_II;
        private DglPointParameterf_IF mDglPointParameterf_IF;
        private DglPointParameterfARB_IF mDglPointParameterfARB_IF;
        private DglPointParameterfEXT_IF mDglPointParameterfEXT_IF;
        private DglPointParameterfSGIS_IF mDglPointParameterfSGIS_IF;
        private DglPointParameterfv_IaF mDglPointParameterfv_IaF;
        private DglPointParameterfv_IP mDglPointParameterfv_IP;
        private DglPointParameterfvARB_IaF mDglPointParameterfvARB_IaF;
        private DglPointParameterfvARB_IP mDglPointParameterfvARB_IP;
        private DglPointParameterfvEXT_IaF mDglPointParameterfvEXT_IaF;
        private DglPointParameterfvEXT_IP mDglPointParameterfvEXT_IP;
        private DglPointParameterfvSGIS_IaF mDglPointParameterfvSGIS_IaF;
        private DglPointParameterfvSGIS_IP mDglPointParameterfvSGIS_IP;
        private DglPointParameteri_II mDglPointParameteri_II;
        private DglPointParameteriNV_II mDglPointParameteriNV_II;
        private DglPointParameteriv_IaI mDglPointParameteriv_IaI;
        private DglPointParameteriv_IP mDglPointParameteriv_IP;
        private DglPointParameterivNV_IaI mDglPointParameterivNV_IaI;
        private DglPointParameterivNV_IP mDglPointParameterivNV_IP;
        private DglPointSize_F mDglPointSize_F;
        private DglPollAsyncSGIX_rI mDglPollAsyncSGIX_rI;
        private DglPollInstrumentsSGIX_rI mDglPollInstrumentsSGIX_rI;
        private DglPolygonMode_II mDglPolygonMode_II;
        private DglPolygonOffset_FF mDglPolygonOffset_FF;
        private DglPolygonOffsetEXT_FF mDglPolygonOffsetEXT_FF;
        private DglPolygonStipple_aB mDglPolygonStipple_aB;
        private DglPolygonStipple_P mDglPolygonStipple_P;
        private DglPopAttrib_V mDglPopAttrib_V;
        private DglPopClientAttrib_V mDglPopClientAttrib_V;
        private DglPopMatrix_V mDglPopMatrix_V;
        private DglPopName_V mDglPopName_V;
        private DglPrimitiveRestartIndexNV_I mDglPrimitiveRestartIndexNV_I;
        private DglPrimitiveRestartNV_V mDglPrimitiveRestartNV_V;
        private DglPrioritizeTextures_IaIaF mDglPrioritizeTextures_IaIaF;
        private DglPrioritizeTextures_IPP mDglPrioritizeTextures_IPP;
        private DglPrioritizeTexturesEXT_IaIaF mDglPrioritizeTexturesEXT_IaIaF;
        private DglPrioritizeTexturesEXT_IPP mDglPrioritizeTexturesEXT_IPP;
        private DglProgramEnvParameter4dARB_IIDDDD mDglProgramEnvParameter4dARB_IIDDDD;
        private DglProgramEnvParameter4dvARB_IIaD mDglProgramEnvParameter4dvARB_IIaD;
        private DglProgramEnvParameter4dvARB_IIP mDglProgramEnvParameter4dvARB_IIP;
        private DglProgramEnvParameter4fARB_IIFFFF mDglProgramEnvParameter4fARB_IIFFFF;
        private DglProgramEnvParameter4fvARB_IIaF mDglProgramEnvParameter4fvARB_IIaF;
        private DglProgramEnvParameter4fvARB_IIP mDglProgramEnvParameter4fvARB_IIP;
        private DglProgramLocalParameter4dARB_IIDDDD mDglProgramLocalParameter4dARB_IIDDDD;
        private DglProgramLocalParameter4dvARB_IIaD mDglProgramLocalParameter4dvARB_IIaD;
        private DglProgramLocalParameter4dvARB_IIP mDglProgramLocalParameter4dvARB_IIP;
        private DglProgramLocalParameter4fARB_IIFFFF mDglProgramLocalParameter4fARB_IIFFFF;
        private DglProgramLocalParameter4fvARB_IIaF mDglProgramLocalParameter4fvARB_IIaF;
        private DglProgramLocalParameter4fvARB_IIP mDglProgramLocalParameter4fvARB_IIP;
        private DglProgramNamedParameter4dNV_IIaBDDDD mDglProgramNamedParameter4dNV_IIaBDDDD;
        private DglProgramNamedParameter4dNV_IIPDDDD mDglProgramNamedParameter4dNV_IIPDDDD;
        private DglProgramNamedParameter4dvNV_IIaBaD mDglProgramNamedParameter4dvNV_IIaBaD;
        private DglProgramNamedParameter4dvNV_IIPP mDglProgramNamedParameter4dvNV_IIPP;
        private DglProgramNamedParameter4fNV_IIaBFFFF mDglProgramNamedParameter4fNV_IIaBFFFF;
        private DglProgramNamedParameter4fNV_IIPFFFF mDglProgramNamedParameter4fNV_IIPFFFF;
        private DglProgramNamedParameter4fvNV_IIaBaF mDglProgramNamedParameter4fvNV_IIaBaF;
        private DglProgramNamedParameter4fvNV_IIPP mDglProgramNamedParameter4fvNV_IIPP;
        private DglProgramParameter4dNV_IIDDDD mDglProgramParameter4dNV_IIDDDD;
        private DglProgramParameter4dvNV_IIaD mDglProgramParameter4dvNV_IIaD;
        private DglProgramParameter4dvNV_IIP mDglProgramParameter4dvNV_IIP;
        private DglProgramParameter4fNV_IIFFFF mDglProgramParameter4fNV_IIFFFF;
        private DglProgramParameter4fvNV_IIaF mDglProgramParameter4fvNV_IIaF;
        private DglProgramParameter4fvNV_IIP mDglProgramParameter4fvNV_IIP;
        private DglProgramParameters4dvNV_IIIaD mDglProgramParameters4dvNV_IIIaD;
        private DglProgramParameters4dvNV_IIIP mDglProgramParameters4dvNV_IIIP;
        private DglProgramParameters4fvNV_IIIaF mDglProgramParameters4fvNV_IIIaF;
        private DglProgramParameters4fvNV_IIIP mDglProgramParameters4fvNV_IIIP;
        private DglProgramStringARB_IIIS mDglProgramStringARB_IIIS;
        private DglPushAttrib_I mDglPushAttrib_I;
        private DglPushClientAttrib_I mDglPushClientAttrib_I;
        private DglPushMatrix_V mDglPushMatrix_V;
        private DglPushName_I mDglPushName_I;
        private DglRasterPos2d_DD mDglRasterPos2d_DD;
        private DglRasterPos2dv_aD mDglRasterPos2dv_aD;
        private DglRasterPos2dv_P mDglRasterPos2dv_P;
        private DglRasterPos2f_FF mDglRasterPos2f_FF;
        private DglRasterPos2fv_aF mDglRasterPos2fv_aF;
        private DglRasterPos2fv_P mDglRasterPos2fv_P;
        private DglRasterPos2i_II mDglRasterPos2i_II;
        private DglRasterPos2iv_aI mDglRasterPos2iv_aI;
        private DglRasterPos2iv_P mDglRasterPos2iv_P;
        private DglRasterPos2s_HH mDglRasterPos2s_HH;
        private DglRasterPos2sv_aH mDglRasterPos2sv_aH;
        private DglRasterPos2sv_P mDglRasterPos2sv_P;
        private DglRasterPos3d_DDD mDglRasterPos3d_DDD;
        private DglRasterPos3dv_aD mDglRasterPos3dv_aD;
        private DglRasterPos3dv_P mDglRasterPos3dv_P;
        private DglRasterPos3f_FFF mDglRasterPos3f_FFF;
        private DglRasterPos3fv_aF mDglRasterPos3fv_aF;
        private DglRasterPos3fv_P mDglRasterPos3fv_P;
        private DglRasterPos3i_III mDglRasterPos3i_III;
        private DglRasterPos3iv_aI mDglRasterPos3iv_aI;
        private DglRasterPos3iv_P mDglRasterPos3iv_P;
        private DglRasterPos3s_HHH mDglRasterPos3s_HHH;
        private DglRasterPos3sv_aH mDglRasterPos3sv_aH;
        private DglRasterPos3sv_P mDglRasterPos3sv_P;
        private DglRasterPos4d_DDDD mDglRasterPos4d_DDDD;
        private DglRasterPos4dv_aD mDglRasterPos4dv_aD;
        private DglRasterPos4dv_P mDglRasterPos4dv_P;
        private DglRasterPos4f_FFFF mDglRasterPos4f_FFFF;
        private DglRasterPos4fv_aF mDglRasterPos4fv_aF;
        private DglRasterPos4fv_P mDglRasterPos4fv_P;
        private DglRasterPos4i_IIII mDglRasterPos4i_IIII;
        private DglRasterPos4iv_aI mDglRasterPos4iv_aI;
        private DglRasterPos4iv_P mDglRasterPos4iv_P;
        private DglRasterPos4s_HHHH mDglRasterPos4s_HHHH;
        private DglRasterPos4sv_aH mDglRasterPos4sv_aH;
        private DglRasterPos4sv_P mDglRasterPos4sv_P;
        private DglReadBuffer_I mDglReadBuffer_I;
        private DglReadInstrumentsSGIX_I mDglReadInstrumentsSGIX_I;
        private DglReadPixels_IIIIIIaB mDglReadPixels_IIIIIIaB;
        private DglReadPixels_IIIIIIaH mDglReadPixels_IIIIIIaH;
        private DglReadPixels_IIIIIIaI mDglReadPixels_IIIIIIaI;
        private DglReadPixels_IIIIIIaF mDglReadPixels_IIIIIIaF;
        private DglReadPixels_IIIIIIP mDglReadPixels_IIIIIIP;
        private DglRectd_DDDD mDglRectd_DDDD;
        private DglRectdv_aDaD mDglRectdv_aDaD;
        private DglRectdv_PP mDglRectdv_PP;
        private DglRectf_FFFF mDglRectf_FFFF;
        private DglRectfv_aFaF mDglRectfv_aFaF;
        private DglRectfv_PP mDglRectfv_PP;
        private DglRecti_IIII mDglRecti_IIII;
        private DglRectiv_aIaI mDglRectiv_aIaI;
        private DglRectiv_PP mDglRectiv_PP;
        private DglRects_HHHH mDglRects_HHHH;
        private DglRectsv_aHaH mDglRectsv_aHaH;
        private DglRectsv_PP mDglRectsv_PP;
        private DglReferencePlaneSGIX_aD mDglReferencePlaneSGIX_aD;
        private DglReferencePlaneSGIX_P mDglReferencePlaneSGIX_P;
        private DglRenderbufferStorageEXT_IIII mDglRenderbufferStorageEXT_IIII;
        private DglRenderMode_I mDglRenderMode_I;
        private DglReplacementCodePointerSUN_IIrP mDglReplacementCodePointerSUN_IIrP;
        private DglReplacementCodeubSUN_B mDglReplacementCodeubSUN_B;
        private DglReplacementCodeubvSUN_aB mDglReplacementCodeubvSUN_aB;
        private DglReplacementCodeubvSUN_P mDglReplacementCodeubvSUN_P;
        private DglReplacementCodeuiColor3fVertex3fSUN_IFFFFFF mDglReplacementCodeuiColor3fVertex3fSUN_IFFFFFF;
        private DglReplacementCodeuiColor3fVertex3fvSUN_rIaFaF mDglReplacementCodeuiColor3fVertex3fvSUN_rIaFaF;
        private DglReplacementCodeuiColor3fVertex3fvSUN_rIPP mDglReplacementCodeuiColor3fVertex3fvSUN_rIPP;
        private DglReplacementCodeuiColor4fNormal3fVertex3fSUN_IFFFFFFFFFF mDglReplacementCodeuiColor4fNormal3fVertex3fSUN_IFFFFFFFFFF;
        private DglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIaFaFaF mDglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIaFaFaF;
        private DglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIPPP mDglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIPPP;
        private DglReplacementCodeuiColor4ubVertex3fSUN_IBBBBFFF mDglReplacementCodeuiColor4ubVertex3fSUN_IBBBBFFF;
        private DglReplacementCodeuiColor4ubVertex3fvSUN_rIaBaF mDglReplacementCodeuiColor4ubVertex3fvSUN_rIaBaF;
        private DglReplacementCodeuiColor4ubVertex3fvSUN_rIPP mDglReplacementCodeuiColor4ubVertex3fvSUN_rIPP;
        private DglReplacementCodeuiNormal3fVertex3fSUN_IFFFFFF mDglReplacementCodeuiNormal3fVertex3fSUN_IFFFFFF;
        private DglReplacementCodeuiNormal3fVertex3fvSUN_rIaFaF mDglReplacementCodeuiNormal3fVertex3fvSUN_rIaFaF;
        private DglReplacementCodeuiNormal3fVertex3fvSUN_rIPP mDglReplacementCodeuiNormal3fVertex3fvSUN_rIPP;
        private DglReplacementCodeuiSUN_I mDglReplacementCodeuiSUN_I;
        private DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_IFFFFFFFFFFFF mDglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_IFFFFFFFFFFFF;
        private DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIaFaFaFaF mDglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIaFaFaFaF;
        private DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIPPPP mDglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIPPPP;
        private DglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_IFFFFFFFF mDglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_IFFFFFFFF;
        private DglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIaFaFaF mDglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIaFaFaF;
        private DglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIPPP mDglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIPPP;
        private DglReplacementCodeuiTexCoord2fVertex3fSUN_IFFFFF mDglReplacementCodeuiTexCoord2fVertex3fSUN_IFFFFF;
        private DglReplacementCodeuiTexCoord2fVertex3fvSUN_rIaFaF mDglReplacementCodeuiTexCoord2fVertex3fvSUN_rIaFaF;
        private DglReplacementCodeuiTexCoord2fVertex3fvSUN_rIPP mDglReplacementCodeuiTexCoord2fVertex3fvSUN_rIPP;
        private DglReplacementCodeuiVertex3fSUN_IFFF mDglReplacementCodeuiVertex3fSUN_IFFF;
        private DglReplacementCodeuiVertex3fvSUN_rIaF mDglReplacementCodeuiVertex3fvSUN_rIaF;
        private DglReplacementCodeuiVertex3fvSUN_rIP mDglReplacementCodeuiVertex3fvSUN_rIP;
        private DglReplacementCodeuivSUN_rI mDglReplacementCodeuivSUN_rI;
        private DglReplacementCodeusSUN_H mDglReplacementCodeusSUN_H;
        private DglReplacementCodeusvSUN_rH mDglReplacementCodeusvSUN_rH;
        private DglRequestResidentProgramsNV_IaI mDglRequestResidentProgramsNV_IaI;
        private DglRequestResidentProgramsNV_IP mDglRequestResidentProgramsNV_IP;
        private DglResetHistogram_I mDglResetHistogram_I;
        private DglResetHistogramEXT_I mDglResetHistogramEXT_I;
        private DglResetMinmax_I mDglResetMinmax_I;
        private DglResetMinmaxEXT_I mDglResetMinmaxEXT_I;
        private DglResizeBuffersMESA_V mDglResizeBuffersMESA_V;
        private DglRotated_DDDD mDglRotated_DDDD;
        private DglRotatef_FFFF mDglRotatef_FFFF;
        private DglSampleCoverage_FB mDglSampleCoverage_FB;
        private DglSampleCoverageARB_FB mDglSampleCoverageARB_FB;
        private DglSampleMapATI_III mDglSampleMapATI_III;
        private DglSampleMaskEXT_FB mDglSampleMaskEXT_FB;
        private DglSampleMaskSGIS_FB mDglSampleMaskSGIS_FB;
        private DglSamplePatternEXT_I mDglSamplePatternEXT_I;
        private DglSamplePatternSGIS_I mDglSamplePatternSGIS_I;
        private DglScaled_DDD mDglScaled_DDD;
        private DglScalef_FFF mDglScalef_FFF;
        private DglScissor_IIII mDglScissor_IIII;
        private DglSecondaryColor3b_BBB mDglSecondaryColor3b_BBB;
        private DglSecondaryColor3bEXT_BBB mDglSecondaryColor3bEXT_BBB;
        private DglSecondaryColor3bv_aB mDglSecondaryColor3bv_aB;
        private DglSecondaryColor3bv_P mDglSecondaryColor3bv_P;
        private DglSecondaryColor3bvEXT_aB mDglSecondaryColor3bvEXT_aB;
        private DglSecondaryColor3bvEXT_P mDglSecondaryColor3bvEXT_P;
        private DglSecondaryColor3d_DDD mDglSecondaryColor3d_DDD;
        private DglSecondaryColor3dEXT_DDD mDglSecondaryColor3dEXT_DDD;
        private DglSecondaryColor3dv_aD mDglSecondaryColor3dv_aD;
        private DglSecondaryColor3dv_P mDglSecondaryColor3dv_P;
        private DglSecondaryColor3dvEXT_aD mDglSecondaryColor3dvEXT_aD;
        private DglSecondaryColor3dvEXT_P mDglSecondaryColor3dvEXT_P;
        private DglSecondaryColor3f_FFF mDglSecondaryColor3f_FFF;
        private DglSecondaryColor3fEXT_FFF mDglSecondaryColor3fEXT_FFF;
        private DglSecondaryColor3fv_aF mDglSecondaryColor3fv_aF;
        private DglSecondaryColor3fv_P mDglSecondaryColor3fv_P;
        private DglSecondaryColor3fvEXT_aF mDglSecondaryColor3fvEXT_aF;
        private DglSecondaryColor3fvEXT_P mDglSecondaryColor3fvEXT_P;
        private DglSecondaryColor3hNV_HHH mDglSecondaryColor3hNV_HHH;
        private DglSecondaryColor3hvNV_aH mDglSecondaryColor3hvNV_aH;
        private DglSecondaryColor3hvNV_P mDglSecondaryColor3hvNV_P;
        private DglSecondaryColor3i_III mDglSecondaryColor3i_III;
        private DglSecondaryColor3iEXT_III mDglSecondaryColor3iEXT_III;
        private DglSecondaryColor3iv_aI mDglSecondaryColor3iv_aI;
        private DglSecondaryColor3iv_P mDglSecondaryColor3iv_P;
        private DglSecondaryColor3ivEXT_aI mDglSecondaryColor3ivEXT_aI;
        private DglSecondaryColor3ivEXT_P mDglSecondaryColor3ivEXT_P;
        private DglSecondaryColor3s_HHH mDglSecondaryColor3s_HHH;
        private DglSecondaryColor3sEXT_HHH mDglSecondaryColor3sEXT_HHH;
        private DglSecondaryColor3sv_aH mDglSecondaryColor3sv_aH;
        private DglSecondaryColor3sv_P mDglSecondaryColor3sv_P;
        private DglSecondaryColor3svEXT_aH mDglSecondaryColor3svEXT_aH;
        private DglSecondaryColor3svEXT_P mDglSecondaryColor3svEXT_P;
        private DglSecondaryColor3ub_BBB mDglSecondaryColor3ub_BBB;
        private DglSecondaryColor3ubEXT_BBB mDglSecondaryColor3ubEXT_BBB;
        private DglSecondaryColor3ubv_aB mDglSecondaryColor3ubv_aB;
        private DglSecondaryColor3ubv_P mDglSecondaryColor3ubv_P;
        private DglSecondaryColor3ubvEXT_aB mDglSecondaryColor3ubvEXT_aB;
        private DglSecondaryColor3ubvEXT_P mDglSecondaryColor3ubvEXT_P;
        private DglSecondaryColor3ui_III mDglSecondaryColor3ui_III;
        private DglSecondaryColor3uiEXT_III mDglSecondaryColor3uiEXT_III;
        private DglSecondaryColor3uiv_aI mDglSecondaryColor3uiv_aI;
        private DglSecondaryColor3uiv_P mDglSecondaryColor3uiv_P;
        private DglSecondaryColor3uivEXT_aI mDglSecondaryColor3uivEXT_aI;
        private DglSecondaryColor3uivEXT_P mDglSecondaryColor3uivEXT_P;
        private DglSecondaryColor3us_HHH mDglSecondaryColor3us_HHH;
        private DglSecondaryColor3usEXT_HHH mDglSecondaryColor3usEXT_HHH;
        private DglSecondaryColor3usv_aH mDglSecondaryColor3usv_aH;
        private DglSecondaryColor3usv_P mDglSecondaryColor3usv_P;
        private DglSecondaryColor3usvEXT_aH mDglSecondaryColor3usvEXT_aH;
        private DglSecondaryColor3usvEXT_P mDglSecondaryColor3usvEXT_P;
        private DglSecondaryColorPointer_IIIaB mDglSecondaryColorPointer_IIIaB;
        private DglSecondaryColorPointer_IIIaH mDglSecondaryColorPointer_IIIaH;
        private DglSecondaryColorPointer_IIIaI mDglSecondaryColorPointer_IIIaI;
        private DglSecondaryColorPointer_IIIaF mDglSecondaryColorPointer_IIIaF;
        private DglSecondaryColorPointer_IIIaD mDglSecondaryColorPointer_IIIaD;
        private DglSecondaryColorPointer_IIIP mDglSecondaryColorPointer_IIIP;
        private DglSecondaryColorPointerEXT_IIIaB mDglSecondaryColorPointerEXT_IIIaB;
        private DglSecondaryColorPointerEXT_IIIaH mDglSecondaryColorPointerEXT_IIIaH;
        private DglSecondaryColorPointerEXT_IIIaI mDglSecondaryColorPointerEXT_IIIaI;
        private DglSecondaryColorPointerEXT_IIIaF mDglSecondaryColorPointerEXT_IIIaF;
        private DglSecondaryColorPointerEXT_IIIaD mDglSecondaryColorPointerEXT_IIIaD;
        private DglSecondaryColorPointerEXT_IIIP mDglSecondaryColorPointerEXT_IIIP;
        private DglSecondaryColorPointerListIBM_IIIrPI mDglSecondaryColorPointerListIBM_IIIrPI;
        private DglSelectBuffer_IaI mDglSelectBuffer_IaI;
        private DglSelectBuffer_IP mDglSelectBuffer_IP;
        private DglSeparableFilter2D_IIIIIIaBaB mDglSeparableFilter2D_IIIIIIaBaB;
        private DglSeparableFilter2D_IIIIIIaHaH mDglSeparableFilter2D_IIIIIIaHaH;
        private DglSeparableFilter2D_IIIIIIaIaI mDglSeparableFilter2D_IIIIIIaIaI;
        private DglSeparableFilter2D_IIIIIIaFaF mDglSeparableFilter2D_IIIIIIaFaF;
        private DglSeparableFilter2D_IIIIIIPP mDglSeparableFilter2D_IIIIIIPP;
        private DglSeparableFilter2DEXT_IIIIIIaBaB mDglSeparableFilter2DEXT_IIIIIIaBaB;
        private DglSeparableFilter2DEXT_IIIIIIaHaH mDglSeparableFilter2DEXT_IIIIIIaHaH;
        private DglSeparableFilter2DEXT_IIIIIIaIaI mDglSeparableFilter2DEXT_IIIIIIaIaI;
        private DglSeparableFilter2DEXT_IIIIIIaFaF mDglSeparableFilter2DEXT_IIIIIIaFaF;
        private DglSeparableFilter2DEXT_IIIIIIPP mDglSeparableFilter2DEXT_IIIIIIPP;
        private DglSetFenceAPPLE_I mDglSetFenceAPPLE_I;
        private DglSetFenceNV_II mDglSetFenceNV_II;
        private DglSetFragmentShaderConstantATI_IaF mDglSetFragmentShaderConstantATI_IaF;
        private DglSetFragmentShaderConstantATI_IP mDglSetFragmentShaderConstantATI_IP;
        private DglSetInvariantEXT_IIaB mDglSetInvariantEXT_IIaB;
        private DglSetInvariantEXT_IIaH mDglSetInvariantEXT_IIaH;
        private DglSetInvariantEXT_IIaI mDglSetInvariantEXT_IIaI;
        private DglSetInvariantEXT_IIaF mDglSetInvariantEXT_IIaF;
        private DglSetInvariantEXT_IIaD mDglSetInvariantEXT_IIaD;
        private DglSetInvariantEXT_IIP mDglSetInvariantEXT_IIP;
        private DglSetLocalConstantEXT_IIaB mDglSetLocalConstantEXT_IIaB;
        private DglSetLocalConstantEXT_IIaH mDglSetLocalConstantEXT_IIaH;
        private DglSetLocalConstantEXT_IIaI mDglSetLocalConstantEXT_IIaI;
        private DglSetLocalConstantEXT_IIaF mDglSetLocalConstantEXT_IIaF;
        private DglSetLocalConstantEXT_IIaD mDglSetLocalConstantEXT_IIaD;
        private DglSetLocalConstantEXT_IIP mDglSetLocalConstantEXT_IIP;
        private DglShadeModel_I mDglShadeModel_I;
        private DglShaderOp1EXT_III mDglShaderOp1EXT_III;
        private DglShaderOp2EXT_IIII mDglShaderOp2EXT_IIII;
        private DglShaderOp3EXT_IIIII mDglShaderOp3EXT_IIIII;
        private DglShaderSource_IIaSaI mDglShaderSource_IIaSaI;
        private DglShaderSource_IIaSP mDglShaderSource_IIaSP;
        private DglShaderSource_IIPaI mDglShaderSource_IIPaI;
        private DglShaderSource_IIPP mDglShaderSource_IIPP;
        private DglShaderSourceARB_IIaSaI mDglShaderSourceARB_IIaSaI;
        private DglShaderSourceARB_IIaSP mDglShaderSourceARB_IIaSP;
        private DglShaderSourceARB_IIPaI mDglShaderSourceARB_IIPaI;
        private DglShaderSourceARB_IIPP mDglShaderSourceARB_IIPP;
        private DglSharpenTexFuncSGIS_IIaF mDglSharpenTexFuncSGIS_IIaF;
        private DglSharpenTexFuncSGIS_IIP mDglSharpenTexFuncSGIS_IIP;
        private DglSpriteParameterfSGIX_IF mDglSpriteParameterfSGIX_IF;
        private DglSpriteParameterfvSGIX_IaF mDglSpriteParameterfvSGIX_IaF;
        private DglSpriteParameterfvSGIX_IP mDglSpriteParameterfvSGIX_IP;
        private DglSpriteParameteriSGIX_II mDglSpriteParameteriSGIX_II;
        private DglSpriteParameterivSGIX_IaI mDglSpriteParameterivSGIX_IaI;
        private DglSpriteParameterivSGIX_IP mDglSpriteParameterivSGIX_IP;
        private DglStartInstrumentsSGIX_V mDglStartInstrumentsSGIX_V;
        private DglStencilFunc_III mDglStencilFunc_III;
        private DglStencilFuncSeparate_IIII mDglStencilFuncSeparate_IIII;
        private DglStencilFuncSeparateATI_IIII mDglStencilFuncSeparateATI_IIII;
        private DglStencilMask_I mDglStencilMask_I;
        private DglStencilMaskSeparate_II mDglStencilMaskSeparate_II;
        private DglStencilOp_III mDglStencilOp_III;
        private DglStencilOpSeparate_IIII mDglStencilOpSeparate_IIII;
        private DglStencilOpSeparateATI_IIII mDglStencilOpSeparateATI_IIII;
        private DglStopInstrumentsSGIX_I mDglStopInstrumentsSGIX_I;
        private DglStringMarkerGREMEDY_IaB mDglStringMarkerGREMEDY_IaB;
        private DglStringMarkerGREMEDY_IP mDglStringMarkerGREMEDY_IP;
        private DglSwizzleEXT_IIIIII mDglSwizzleEXT_IIIIII;
        private DglTagSampleBufferSGIX_V mDglTagSampleBufferSGIX_V;
        private DglTangent3bEXT_BBB mDglTangent3bEXT_BBB;
        private DglTangent3bvEXT_aB mDglTangent3bvEXT_aB;
        private DglTangent3bvEXT_P mDglTangent3bvEXT_P;
        private DglTangent3dEXT_DDD mDglTangent3dEXT_DDD;
        private DglTangent3dvEXT_aD mDglTangent3dvEXT_aD;
        private DglTangent3dvEXT_P mDglTangent3dvEXT_P;
        private DglTangent3fEXT_FFF mDglTangent3fEXT_FFF;
        private DglTangent3fvEXT_aF mDglTangent3fvEXT_aF;
        private DglTangent3fvEXT_P mDglTangent3fvEXT_P;
        private DglTangent3iEXT_III mDglTangent3iEXT_III;
        private DglTangent3ivEXT_aI mDglTangent3ivEXT_aI;
        private DglTangent3ivEXT_P mDglTangent3ivEXT_P;
        private DglTangent3sEXT_HHH mDglTangent3sEXT_HHH;
        private DglTangent3svEXT_aH mDglTangent3svEXT_aH;
        private DglTangent3svEXT_P mDglTangent3svEXT_P;
        private DglTangentPointerEXT_IIaB mDglTangentPointerEXT_IIaB;
        private DglTangentPointerEXT_IIaH mDglTangentPointerEXT_IIaH;
        private DglTangentPointerEXT_IIaI mDglTangentPointerEXT_IIaI;
        private DglTangentPointerEXT_IIaF mDglTangentPointerEXT_IIaF;
        private DglTangentPointerEXT_IIaD mDglTangentPointerEXT_IIaD;
        private DglTangentPointerEXT_IIP mDglTangentPointerEXT_IIP;
        private DglTbufferMask3DFX_I mDglTbufferMask3DFX_I;
        private DglTestFenceAPPLE_I mDglTestFenceAPPLE_I;
        private DglTestFenceNV_I mDglTestFenceNV_I;
        private DglTestObjectAPPLE_II mDglTestObjectAPPLE_II;
        private DglTexBumpParameterfvATI_IaF mDglTexBumpParameterfvATI_IaF;
        private DglTexBumpParameterfvATI_IP mDglTexBumpParameterfvATI_IP;
        private DglTexBumpParameterivATI_IaI mDglTexBumpParameterivATI_IaI;
        private DglTexBumpParameterivATI_IP mDglTexBumpParameterivATI_IP;
        private DglTexCoord1d_D mDglTexCoord1d_D;
        private DglTexCoord1dv_aD mDglTexCoord1dv_aD;
        private DglTexCoord1dv_P mDglTexCoord1dv_P;
        private DglTexCoord1f_F mDglTexCoord1f_F;
        private DglTexCoord1fv_aF mDglTexCoord1fv_aF;
        private DglTexCoord1fv_P mDglTexCoord1fv_P;
        private DglTexCoord1hNV_H mDglTexCoord1hNV_H;
        private DglTexCoord1hvNV_aH mDglTexCoord1hvNV_aH;
        private DglTexCoord1hvNV_P mDglTexCoord1hvNV_P;
        private DglTexCoord1i_I mDglTexCoord1i_I;
        private DglTexCoord1iv_aI mDglTexCoord1iv_aI;
        private DglTexCoord1iv_P mDglTexCoord1iv_P;
        private DglTexCoord1s_H mDglTexCoord1s_H;
        private DglTexCoord1sv_aH mDglTexCoord1sv_aH;
        private DglTexCoord1sv_P mDglTexCoord1sv_P;
        private DglTexCoord2d_DD mDglTexCoord2d_DD;
        private DglTexCoord2dv_aD mDglTexCoord2dv_aD;
        private DglTexCoord2dv_P mDglTexCoord2dv_P;
        private DglTexCoord2f_FF mDglTexCoord2f_FF;
        private DglTexCoord2fColor3fVertex3fSUN_FFFFFFFF mDglTexCoord2fColor3fVertex3fSUN_FFFFFFFF;
        private DglTexCoord2fColor3fVertex3fvSUN_aFaFaF mDglTexCoord2fColor3fVertex3fvSUN_aFaFaF;
        private DglTexCoord2fColor3fVertex3fvSUN_PPP mDglTexCoord2fColor3fVertex3fvSUN_PPP;
        private DglTexCoord2fColor4fNormal3fVertex3fSUN_FFFFFFFFFFFF mDglTexCoord2fColor4fNormal3fVertex3fSUN_FFFFFFFFFFFF;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFaF mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFaF;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFP mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFP;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPaF mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPaF;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPP mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPP;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFaF mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFaF;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFP mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFP;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPaF mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPaF;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPP mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPP;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFaF mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFaF;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFP mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFP;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPaF mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPaF;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPP mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPP;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFaF mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFaF;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFP mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFP;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPaF mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPaF;
        private DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPP mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPP;
        private DglTexCoord2fColor4ubVertex3fSUN_FFBBBBFFF mDglTexCoord2fColor4ubVertex3fSUN_FFBBBBFFF;
        private DglTexCoord2fColor4ubVertex3fvSUN_aFaBaF mDglTexCoord2fColor4ubVertex3fvSUN_aFaBaF;
        private DglTexCoord2fColor4ubVertex3fvSUN_aFaBP mDglTexCoord2fColor4ubVertex3fvSUN_aFaBP;
        private DglTexCoord2fColor4ubVertex3fvSUN_aFPaF mDglTexCoord2fColor4ubVertex3fvSUN_aFPaF;
        private DglTexCoord2fColor4ubVertex3fvSUN_aFPP mDglTexCoord2fColor4ubVertex3fvSUN_aFPP;
        private DglTexCoord2fColor4ubVertex3fvSUN_PaBaF mDglTexCoord2fColor4ubVertex3fvSUN_PaBaF;
        private DglTexCoord2fColor4ubVertex3fvSUN_PaBP mDglTexCoord2fColor4ubVertex3fvSUN_PaBP;
        private DglTexCoord2fColor4ubVertex3fvSUN_PPaF mDglTexCoord2fColor4ubVertex3fvSUN_PPaF;
        private DglTexCoord2fColor4ubVertex3fvSUN_PPP mDglTexCoord2fColor4ubVertex3fvSUN_PPP;
        private DglTexCoord2fNormal3fVertex3fSUN_FFFFFFFF mDglTexCoord2fNormal3fVertex3fSUN_FFFFFFFF;
        private DglTexCoord2fNormal3fVertex3fvSUN_aFaFaF mDglTexCoord2fNormal3fVertex3fvSUN_aFaFaF;
        private DglTexCoord2fNormal3fVertex3fvSUN_aFaFP mDglTexCoord2fNormal3fVertex3fvSUN_aFaFP;
        private DglTexCoord2fNormal3fVertex3fvSUN_aFPaF mDglTexCoord2fNormal3fVertex3fvSUN_aFPaF;
        private DglTexCoord2fNormal3fVertex3fvSUN_aFPP mDglTexCoord2fNormal3fVertex3fvSUN_aFPP;
        private DglTexCoord2fNormal3fVertex3fvSUN_PaFaF mDglTexCoord2fNormal3fVertex3fvSUN_PaFaF;
        private DglTexCoord2fNormal3fVertex3fvSUN_PaFP mDglTexCoord2fNormal3fVertex3fvSUN_PaFP;
        private DglTexCoord2fNormal3fVertex3fvSUN_PPaF mDglTexCoord2fNormal3fVertex3fvSUN_PPaF;
        private DglTexCoord2fNormal3fVertex3fvSUN_PPP mDglTexCoord2fNormal3fVertex3fvSUN_PPP;
        private DglTexCoord2fv_aF mDglTexCoord2fv_aF;
        private DglTexCoord2fv_P mDglTexCoord2fv_P;
        private DglTexCoord2fVertex3fSUN_FFFFF mDglTexCoord2fVertex3fSUN_FFFFF;
        private DglTexCoord2fVertex3fvSUN_aFaF mDglTexCoord2fVertex3fvSUN_aFaF;
        private DglTexCoord2fVertex3fvSUN_aFP mDglTexCoord2fVertex3fvSUN_aFP;
        private DglTexCoord2fVertex3fvSUN_PaF mDglTexCoord2fVertex3fvSUN_PaF;
        private DglTexCoord2fVertex3fvSUN_PP mDglTexCoord2fVertex3fvSUN_PP;
        private DglTexCoord2hNV_HH mDglTexCoord2hNV_HH;
        private DglTexCoord2hvNV_aH mDglTexCoord2hvNV_aH;
        private DglTexCoord2hvNV_P mDglTexCoord2hvNV_P;
        private DglTexCoord2i_II mDglTexCoord2i_II;
        private DglTexCoord2iv_aI mDglTexCoord2iv_aI;
        private DglTexCoord2iv_P mDglTexCoord2iv_P;
        private DglTexCoord2s_HH mDglTexCoord2s_HH;
        private DglTexCoord2sv_aH mDglTexCoord2sv_aH;
        private DglTexCoord2sv_P mDglTexCoord2sv_P;
        private DglTexCoord3d_DDD mDglTexCoord3d_DDD;
        private DglTexCoord3dv_aD mDglTexCoord3dv_aD;
        private DglTexCoord3dv_P mDglTexCoord3dv_P;
        private DglTexCoord3f_FFF mDglTexCoord3f_FFF;
        private DglTexCoord3fv_aF mDglTexCoord3fv_aF;
        private DglTexCoord3fv_P mDglTexCoord3fv_P;
        private DglTexCoord3hNV_HHH mDglTexCoord3hNV_HHH;
        private DglTexCoord3hvNV_aH mDglTexCoord3hvNV_aH;
        private DglTexCoord3hvNV_P mDglTexCoord3hvNV_P;
        private DglTexCoord3i_III mDglTexCoord3i_III;
        private DglTexCoord3iv_aI mDglTexCoord3iv_aI;
        private DglTexCoord3iv_P mDglTexCoord3iv_P;
        private DglTexCoord3s_HHH mDglTexCoord3s_HHH;
        private DglTexCoord3sv_aH mDglTexCoord3sv_aH;
        private DglTexCoord3sv_P mDglTexCoord3sv_P;
        private DglTexCoord4d_DDDD mDglTexCoord4d_DDDD;
        private DglTexCoord4dv_aD mDglTexCoord4dv_aD;
        private DglTexCoord4dv_P mDglTexCoord4dv_P;
        private DglTexCoord4f_FFFF mDglTexCoord4f_FFFF;
        private DglTexCoord4fColor4fNormal3fVertex4fSUN_FFFFFFFFFFFFFFF mDglTexCoord4fColor4fNormal3fVertex4fSUN_FFFFFFFFFFFFFFF;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFaF mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFaF;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFP mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFP;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPaF mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPaF;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPP mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPP;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFaF mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFaF;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFP mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFP;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPaF mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPaF;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPP mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPP;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFaF mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFaF;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFP mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFP;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPaF mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPaF;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPP mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPP;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFaF mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFaF;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFP mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFP;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPaF mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPaF;
        private DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPP mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPP;
        private DglTexCoord4fv_aF mDglTexCoord4fv_aF;
        private DglTexCoord4fv_P mDglTexCoord4fv_P;
        private DglTexCoord4fVertex4fSUN_FFFFFFFF mDglTexCoord4fVertex4fSUN_FFFFFFFF;
        private DglTexCoord4fVertex4fvSUN_aFaF mDglTexCoord4fVertex4fvSUN_aFaF;
        private DglTexCoord4fVertex4fvSUN_aFP mDglTexCoord4fVertex4fvSUN_aFP;
        private DglTexCoord4fVertex4fvSUN_PaF mDglTexCoord4fVertex4fvSUN_PaF;
        private DglTexCoord4fVertex4fvSUN_PP mDglTexCoord4fVertex4fvSUN_PP;
        private DglTexCoord4hNV_HHHH mDglTexCoord4hNV_HHHH;
        private DglTexCoord4hvNV_aH mDglTexCoord4hvNV_aH;
        private DglTexCoord4hvNV_P mDglTexCoord4hvNV_P;
        private DglTexCoord4i_IIII mDglTexCoord4i_IIII;
        private DglTexCoord4iv_aI mDglTexCoord4iv_aI;
        private DglTexCoord4iv_P mDglTexCoord4iv_P;
        private DglTexCoord4s_HHHH mDglTexCoord4s_HHHH;
        private DglTexCoord4sv_aH mDglTexCoord4sv_aH;
        private DglTexCoord4sv_P mDglTexCoord4sv_P;
        private DglTexCoordPointer_IIIaB mDglTexCoordPointer_IIIaB;
        private DglTexCoordPointer_IIIaH mDglTexCoordPointer_IIIaH;
        private DglTexCoordPointer_IIIaI mDglTexCoordPointer_IIIaI;
        private DglTexCoordPointer_IIIaF mDglTexCoordPointer_IIIaF;
        private DglTexCoordPointer_IIIaD mDglTexCoordPointer_IIIaD;
        private DglTexCoordPointer_IIIP mDglTexCoordPointer_IIIP;
        private DglTexCoordPointerEXT_IIIIaB mDglTexCoordPointerEXT_IIIIaB;
        private DglTexCoordPointerEXT_IIIIaH mDglTexCoordPointerEXT_IIIIaH;
        private DglTexCoordPointerEXT_IIIIaI mDglTexCoordPointerEXT_IIIIaI;
        private DglTexCoordPointerEXT_IIIIaF mDglTexCoordPointerEXT_IIIIaF;
        private DglTexCoordPointerEXT_IIIIaD mDglTexCoordPointerEXT_IIIIaD;
        private DglTexCoordPointerEXT_IIIIP mDglTexCoordPointerEXT_IIIIP;
        private DglTexCoordPointerListIBM_IIIrPI mDglTexCoordPointerListIBM_IIIrPI;
        private DglTexCoordPointervINTEL_IIrP mDglTexCoordPointervINTEL_IIrP;
        private DglTexEnvf_IIF mDglTexEnvf_IIF;
        private DglTexEnvfv_IIaF mDglTexEnvfv_IIaF;
        private DglTexEnvfv_IIP mDglTexEnvfv_IIP;
        private DglTexEnvi_III mDglTexEnvi_III;
        private DglTexEnviv_IIaI mDglTexEnviv_IIaI;
        private DglTexEnviv_IIP mDglTexEnviv_IIP;
        private DglTexFilterFuncSGIS_IIIaF mDglTexFilterFuncSGIS_IIIaF;
        private DglTexFilterFuncSGIS_IIIP mDglTexFilterFuncSGIS_IIIP;
        private DglTexGend_IID mDglTexGend_IID;
        private DglTexGendv_IIaD mDglTexGendv_IIaD;
        private DglTexGendv_IIP mDglTexGendv_IIP;
        private DglTexGenf_IIF mDglTexGenf_IIF;
        private DglTexGenfv_IIaF mDglTexGenfv_IIaF;
        private DglTexGenfv_IIP mDglTexGenfv_IIP;
        private DglTexGeni_III mDglTexGeni_III;
        private DglTexGeniv_IIaI mDglTexGeniv_IIaI;
        private DglTexGeniv_IIP mDglTexGeniv_IIP;
        private DglTexImage1D_IIIIIIIaB mDglTexImage1D_IIIIIIIaB;
        private DglTexImage1D_IIIIIIIaH mDglTexImage1D_IIIIIIIaH;
        private DglTexImage1D_IIIIIIIaI mDglTexImage1D_IIIIIIIaI;
        private DglTexImage1D_IIIIIIIaF mDglTexImage1D_IIIIIIIaF;
        private DglTexImage1D_IIIIIIIP mDglTexImage1D_IIIIIIIP;
        private DglTexImage2D_IIIIIIIIaB mDglTexImage2D_IIIIIIIIaB;
        private DglTexImage2D_IIIIIIIIaH mDglTexImage2D_IIIIIIIIaH;
        private DglTexImage2D_IIIIIIIIaI mDglTexImage2D_IIIIIIIIaI;
        private DglTexImage2D_IIIIIIIIaF mDglTexImage2D_IIIIIIIIaF;
        private DglTexImage2D_IIIIIIIIP mDglTexImage2D_IIIIIIIIP;
        private DglTexImage3D_IIIIIIIIIaB mDglTexImage3D_IIIIIIIIIaB;
        private DglTexImage3D_IIIIIIIIIaH mDglTexImage3D_IIIIIIIIIaH;
        private DglTexImage3D_IIIIIIIIIaI mDglTexImage3D_IIIIIIIIIaI;
        private DglTexImage3D_IIIIIIIIIaF mDglTexImage3D_IIIIIIIIIaF;
        private DglTexImage3D_IIIIIIIIIP mDglTexImage3D_IIIIIIIIIP;
        private DglTexImage3DEXT_IIIIIIIIIaB mDglTexImage3DEXT_IIIIIIIIIaB;
        private DglTexImage3DEXT_IIIIIIIIIaH mDglTexImage3DEXT_IIIIIIIIIaH;
        private DglTexImage3DEXT_IIIIIIIIIaI mDglTexImage3DEXT_IIIIIIIIIaI;
        private DglTexImage3DEXT_IIIIIIIIIaF mDglTexImage3DEXT_IIIIIIIIIaF;
        private DglTexImage3DEXT_IIIIIIIIIP mDglTexImage3DEXT_IIIIIIIIIP;
        private DglTexImage4DSGIS_IIIIIIIIIIaB mDglTexImage4DSGIS_IIIIIIIIIIaB;
        private DglTexImage4DSGIS_IIIIIIIIIIaH mDglTexImage4DSGIS_IIIIIIIIIIaH;
        private DglTexImage4DSGIS_IIIIIIIIIIaI mDglTexImage4DSGIS_IIIIIIIIIIaI;
        private DglTexImage4DSGIS_IIIIIIIIIIaF mDglTexImage4DSGIS_IIIIIIIIIIaF;
        private DglTexImage4DSGIS_IIIIIIIIIIP mDglTexImage4DSGIS_IIIIIIIIIIP;
        private DglTexParameterf_IIF mDglTexParameterf_IIF;
        private DglTexParameterfv_IIaF mDglTexParameterfv_IIaF;
        private DglTexParameterfv_IIP mDglTexParameterfv_IIP;
        private DglTexParameteri_III mDglTexParameteri_III;
        private DglTexParameteriv_IIaI mDglTexParameteriv_IIaI;
        private DglTexParameteriv_IIP mDglTexParameteriv_IIP;
        private DglTexSubImage1D_IIIIIIaB mDglTexSubImage1D_IIIIIIaB;
        private DglTexSubImage1D_IIIIIIaH mDglTexSubImage1D_IIIIIIaH;
        private DglTexSubImage1D_IIIIIIaI mDglTexSubImage1D_IIIIIIaI;
        private DglTexSubImage1D_IIIIIIaF mDglTexSubImage1D_IIIIIIaF;
        private DglTexSubImage1D_IIIIIIP mDglTexSubImage1D_IIIIIIP;
        private DglTexSubImage1DEXT_IIIIIIaB mDglTexSubImage1DEXT_IIIIIIaB;
        private DglTexSubImage1DEXT_IIIIIIaH mDglTexSubImage1DEXT_IIIIIIaH;
        private DglTexSubImage1DEXT_IIIIIIaI mDglTexSubImage1DEXT_IIIIIIaI;
        private DglTexSubImage1DEXT_IIIIIIaF mDglTexSubImage1DEXT_IIIIIIaF;
        private DglTexSubImage1DEXT_IIIIIIP mDglTexSubImage1DEXT_IIIIIIP;
        private DglTexSubImage2D_IIIIIIIIaB mDglTexSubImage2D_IIIIIIIIaB;
        private DglTexSubImage2D_IIIIIIIIaH mDglTexSubImage2D_IIIIIIIIaH;
        private DglTexSubImage2D_IIIIIIIIaI mDglTexSubImage2D_IIIIIIIIaI;
        private DglTexSubImage2D_IIIIIIIIaF mDglTexSubImage2D_IIIIIIIIaF;
        private DglTexSubImage2D_IIIIIIIIP mDglTexSubImage2D_IIIIIIIIP;
        private DglTexSubImage2DEXT_IIIIIIIIaB mDglTexSubImage2DEXT_IIIIIIIIaB;
        private DglTexSubImage2DEXT_IIIIIIIIaH mDglTexSubImage2DEXT_IIIIIIIIaH;
        private DglTexSubImage2DEXT_IIIIIIIIaI mDglTexSubImage2DEXT_IIIIIIIIaI;
        private DglTexSubImage2DEXT_IIIIIIIIaF mDglTexSubImage2DEXT_IIIIIIIIaF;
        private DglTexSubImage2DEXT_IIIIIIIIP mDglTexSubImage2DEXT_IIIIIIIIP;
        private DglTexSubImage3D_IIIIIIIIIIaB mDglTexSubImage3D_IIIIIIIIIIaB;
        private DglTexSubImage3D_IIIIIIIIIIaH mDglTexSubImage3D_IIIIIIIIIIaH;
        private DglTexSubImage3D_IIIIIIIIIIaI mDglTexSubImage3D_IIIIIIIIIIaI;
        private DglTexSubImage3D_IIIIIIIIIIaF mDglTexSubImage3D_IIIIIIIIIIaF;
        private DglTexSubImage3D_IIIIIIIIIIP mDglTexSubImage3D_IIIIIIIIIIP;
        private DglTexSubImage3DEXT_IIIIIIIIIIaB mDglTexSubImage3DEXT_IIIIIIIIIIaB;
        private DglTexSubImage3DEXT_IIIIIIIIIIaH mDglTexSubImage3DEXT_IIIIIIIIIIaH;
        private DglTexSubImage3DEXT_IIIIIIIIIIaI mDglTexSubImage3DEXT_IIIIIIIIIIaI;
        private DglTexSubImage3DEXT_IIIIIIIIIIaF mDglTexSubImage3DEXT_IIIIIIIIIIaF;
        private DglTexSubImage3DEXT_IIIIIIIIIIP mDglTexSubImage3DEXT_IIIIIIIIIIP;
        private DglTexSubImage4DSGIS_IIIIIIIIIIIIaB mDglTexSubImage4DSGIS_IIIIIIIIIIIIaB;
        private DglTexSubImage4DSGIS_IIIIIIIIIIIIaH mDglTexSubImage4DSGIS_IIIIIIIIIIIIaH;
        private DglTexSubImage4DSGIS_IIIIIIIIIIIIaI mDglTexSubImage4DSGIS_IIIIIIIIIIIIaI;
        private DglTexSubImage4DSGIS_IIIIIIIIIIIIaF mDglTexSubImage4DSGIS_IIIIIIIIIIIIaF;
        private DglTexSubImage4DSGIS_IIIIIIIIIIIIP mDglTexSubImage4DSGIS_IIIIIIIIIIIIP;
        private DglTextureColorMaskSGIS_BBBB mDglTextureColorMaskSGIS_BBBB;
        private DglTextureLightEXT_I mDglTextureLightEXT_I;
        private DglTextureMaterialEXT_II mDglTextureMaterialEXT_II;
        private DglTextureNormalEXT_I mDglTextureNormalEXT_I;
        private DglTrackMatrixNV_IIII mDglTrackMatrixNV_IIII;
        private DglTranslated_DDD mDglTranslated_DDD;
        private DglTranslatef_FFF mDglTranslatef_FFF;
        private DgluBeginCurve_P mDgluBeginCurve_P;
        private DgluBeginPolygon_P mDgluBeginPolygon_P;
        private DgluBeginSurface_P mDgluBeginSurface_P;
        private DgluBeginTrim_P mDgluBeginTrim_P;
        private DgluBuild1DMipmaps_IIIIIaB mDgluBuild1DMipmaps_IIIIIaB;
        private DgluBuild1DMipmaps_IIIIIaH mDgluBuild1DMipmaps_IIIIIaH;
        private DgluBuild1DMipmaps_IIIIIaI mDgluBuild1DMipmaps_IIIIIaI;
        private DgluBuild1DMipmaps_IIIIIaF mDgluBuild1DMipmaps_IIIIIaF;
        private DgluBuild1DMipmaps_IIIIIP mDgluBuild1DMipmaps_IIIIIP;
        private DgluBuild2DMipmaps_IIIIIIaB mDgluBuild2DMipmaps_IIIIIIaB;
        private DgluBuild2DMipmaps_IIIIIIaH mDgluBuild2DMipmaps_IIIIIIaH;
        private DgluBuild2DMipmaps_IIIIIIaI mDgluBuild2DMipmaps_IIIIIIaI;
        private DgluBuild2DMipmaps_IIIIIIaF mDgluBuild2DMipmaps_IIIIIIaF;
        private DgluBuild2DMipmaps_IIIIIIP mDgluBuild2DMipmaps_IIIIIIP;
        private DgluCylinder_PDDDII mDgluCylinder_PDDDII;
        private DgluDeleteNurbsRenderer_P mDgluDeleteNurbsRenderer_P;
        private DgluDeleteQuadric_P mDgluDeleteQuadric_P;
        private DgluDeleteTess_P mDgluDeleteTess_P;
        private DgluDisk_PDDII mDgluDisk_PDDII;
        private DgluEndCurve_P mDgluEndCurve_P;
        private DgluEndPolygon_P mDgluEndPolygon_P;
        private DgluEndSurface_P mDgluEndSurface_P;
        private DgluEndTrim_P mDgluEndTrim_P;
        private DgluErrorString_I mDgluErrorString_I;
        private DgluErrorUnicodeStringEXT_I mDgluErrorUnicodeStringEXT_I;
        private DgluGetNurbsProperty_PIrF mDgluGetNurbsProperty_PIrF;
        private DgluGetString_I mDgluGetString_I;
        private DgluGetTessProperty_PIrD mDgluGetTessProperty_PIrD;
        private DgluLoadSamplingMatrices_PaFaFaI mDgluLoadSamplingMatrices_PaFaFaI;
        private DgluLoadSamplingMatrices_PaFaFP mDgluLoadSamplingMatrices_PaFaFP;
        private DgluLoadSamplingMatrices_PaFPaI mDgluLoadSamplingMatrices_PaFPaI;
        private DgluLoadSamplingMatrices_PaFPP mDgluLoadSamplingMatrices_PaFPP;
        private DgluLoadSamplingMatrices_PPaFaI mDgluLoadSamplingMatrices_PPaFaI;
        private DgluLoadSamplingMatrices_PPaFP mDgluLoadSamplingMatrices_PPaFP;
        private DgluLoadSamplingMatrices_PPPaI mDgluLoadSamplingMatrices_PPPaI;
        private DgluLoadSamplingMatrices_PPPP mDgluLoadSamplingMatrices_PPPP;
        private DgluLookAt_DDDDDDDDD mDgluLookAt_DDDDDDDDD;
        private DgluNewNurbsRenderer_V mDgluNewNurbsRenderer_V;
        private DgluNewQuadric_V mDgluNewQuadric_V;
        private DgluNewTess_V mDgluNewTess_V;
        private DgluNextContour_PI mDgluNextContour_PI;
        private DglUniform1f_IF mDglUniform1f_IF;
        private DglUniform1fARB_IF mDglUniform1fARB_IF;
        private DglUniform1fv_IIaF mDglUniform1fv_IIaF;
        private DglUniform1fv_IIP mDglUniform1fv_IIP;
        private DglUniform1fvARB_IIaF mDglUniform1fvARB_IIaF;
        private DglUniform1fvARB_IIP mDglUniform1fvARB_IIP;
        private DglUniform1i_II mDglUniform1i_II;
        private DglUniform1iARB_II mDglUniform1iARB_II;
        private DglUniform1iv_IIaI mDglUniform1iv_IIaI;
        private DglUniform1iv_IIP mDglUniform1iv_IIP;
        private DglUniform1ivARB_IIaI mDglUniform1ivARB_IIaI;
        private DglUniform1ivARB_IIP mDglUniform1ivARB_IIP;
        private DglUniform2f_IFF mDglUniform2f_IFF;
        private DglUniform2fARB_IFF mDglUniform2fARB_IFF;
        private DglUniform2fv_IIaF mDglUniform2fv_IIaF;
        private DglUniform2fv_IIP mDglUniform2fv_IIP;
        private DglUniform2fvARB_IIaF mDglUniform2fvARB_IIaF;
        private DglUniform2fvARB_IIP mDglUniform2fvARB_IIP;
        private DglUniform2i_III mDglUniform2i_III;
        private DglUniform2iARB_III mDglUniform2iARB_III;
        private DglUniform2iv_IIaI mDglUniform2iv_IIaI;
        private DglUniform2iv_IIP mDglUniform2iv_IIP;
        private DglUniform2ivARB_IIaI mDglUniform2ivARB_IIaI;
        private DglUniform2ivARB_IIP mDglUniform2ivARB_IIP;
        private DglUniform3f_IFFF mDglUniform3f_IFFF;
        private DglUniform3fARB_IFFF mDglUniform3fARB_IFFF;
        private DglUniform3fv_IIaF mDglUniform3fv_IIaF;
        private DglUniform3fv_IIP mDglUniform3fv_IIP;
        private DglUniform3fvARB_IIaF mDglUniform3fvARB_IIaF;
        private DglUniform3fvARB_IIP mDglUniform3fvARB_IIP;
        private DglUniform3i_IIII mDglUniform3i_IIII;
        private DglUniform3iARB_IIII mDglUniform3iARB_IIII;
        private DglUniform3iv_IIaI mDglUniform3iv_IIaI;
        private DglUniform3iv_IIP mDglUniform3iv_IIP;
        private DglUniform3ivARB_IIaI mDglUniform3ivARB_IIaI;
        private DglUniform3ivARB_IIP mDglUniform3ivARB_IIP;
        private DglUniform4f_IFFFF mDglUniform4f_IFFFF;
        private DglUniform4fARB_IFFFF mDglUniform4fARB_IFFFF;
        private DglUniform4fv_IIaF mDglUniform4fv_IIaF;
        private DglUniform4fv_IIP mDglUniform4fv_IIP;
        private DglUniform4fvARB_IIaF mDglUniform4fvARB_IIaF;
        private DglUniform4fvARB_IIP mDglUniform4fvARB_IIP;
        private DglUniform4i_IIIII mDglUniform4i_IIIII;
        private DglUniform4iARB_IIIII mDglUniform4iARB_IIIII;
        private DglUniform4iv_IIaI mDglUniform4iv_IIaI;
        private DglUniform4iv_IIP mDglUniform4iv_IIP;
        private DglUniform4ivARB_IIaI mDglUniform4ivARB_IIaI;
        private DglUniform4ivARB_IIP mDglUniform4ivARB_IIP;
        private DglUniformMatrix2fv_IIBaF mDglUniformMatrix2fv_IIBaF;
        private DglUniformMatrix2fv_IIBP mDglUniformMatrix2fv_IIBP;
        private DglUniformMatrix2fvARB_IIBaF mDglUniformMatrix2fvARB_IIBaF;
        private DglUniformMatrix2fvARB_IIBP mDglUniformMatrix2fvARB_IIBP;
        private DglUniformMatrix3fv_IIBaF mDglUniformMatrix3fv_IIBaF;
        private DglUniformMatrix3fv_IIBP mDglUniformMatrix3fv_IIBP;
        private DglUniformMatrix3fvARB_IIBaF mDglUniformMatrix3fvARB_IIBaF;
        private DglUniformMatrix3fvARB_IIBP mDglUniformMatrix3fvARB_IIBP;
        private DglUniformMatrix4fv_IIBaF mDglUniformMatrix4fv_IIBaF;
        private DglUniformMatrix4fv_IIBP mDglUniformMatrix4fv_IIBP;
        private DglUniformMatrix4fvARB_IIBaF mDglUniformMatrix4fvARB_IIBaF;
        private DglUniformMatrix4fvARB_IIBP mDglUniformMatrix4fvARB_IIBP;
        private DglUnlockArraysEXT_V mDglUnlockArraysEXT_V;
        private DglUnmapBuffer_I mDglUnmapBuffer_I;
        private DglUnmapBufferARB_I mDglUnmapBufferARB_I;
        private DglUnmapObjectBufferATI_I mDglUnmapObjectBufferATI_I;
        private DgluNurbsCallback_PIP mDgluNurbsCallback_PIP;
        private DgluNurbsCurve_PIaFIaFII mDgluNurbsCurve_PIaFIaFII;
        private DgluNurbsCurve_PIaFIPII mDgluNurbsCurve_PIaFIPII;
        private DgluNurbsCurve_PIPIaFII mDgluNurbsCurve_PIPIaFII;
        private DgluNurbsCurve_PIPIPII mDgluNurbsCurve_PIPIPII;
        private DgluNurbsProperty_PIF mDgluNurbsProperty_PIF;
        private DgluNurbsSurface_PIaFIaFIIaFIII mDgluNurbsSurface_PIaFIaFIIaFIII;
        private DgluNurbsSurface_PIaFIaFIIPIII mDgluNurbsSurface_PIaFIaFIIPIII;
        private DgluNurbsSurface_PIaFIPIIaFIII mDgluNurbsSurface_PIaFIPIIaFIII;
        private DgluNurbsSurface_PIaFIPIIPIII mDgluNurbsSurface_PIaFIPIIPIII;
        private DgluNurbsSurface_PIPIaFIIaFIII mDgluNurbsSurface_PIPIaFIIaFIII;
        private DgluNurbsSurface_PIPIaFIIPIII mDgluNurbsSurface_PIPIaFIIPIII;
        private DgluNurbsSurface_PIPIPIIaFIII mDgluNurbsSurface_PIPIPIIaFIII;
        private DgluNurbsSurface_PIPIPIIPIII mDgluNurbsSurface_PIPIPIIPIII;
        private DgluOrtho2D_DDDD mDgluOrtho2D_DDDD;
        private DgluPartialDisk_PDDIIDD mDgluPartialDisk_PDDIIDD;
        private DglUpdateObjectBufferATI_IIIaBI mDglUpdateObjectBufferATI_IIIaBI;
        private DglUpdateObjectBufferATI_IIIPI mDglUpdateObjectBufferATI_IIIPI;
        private DgluPerspective_DDDD mDgluPerspective_DDDD;
        private DgluPickMatrix_DDDDaI mDgluPickMatrix_DDDDaI;
        private DgluPickMatrix_DDDDP mDgluPickMatrix_DDDDP;
        private DgluProject_DDDaDaDaIrDrDrD mDgluProject_DDDaDaDaIrDrDrD;
        private DgluProject_DDDPPPPPP mDgluProject_DDDPPPPPP;
        private DgluPwlCurve_PIaFII mDgluPwlCurve_PIaFII;
        private DgluPwlCurve_PIPII mDgluPwlCurve_PIPII;
        private DgluQuadricCallback_PIP mDgluQuadricCallback_PIP;
        private DgluQuadricDrawStyle_PI mDgluQuadricDrawStyle_PI;
        private DgluQuadricNormals_PI mDgluQuadricNormals_PI;
        private DgluQuadricOrientation_PI mDgluQuadricOrientation_PI;
        private DgluQuadricTexture_PB mDgluQuadricTexture_PB;
        private DgluScaleImage_IIIIaBIIIaB mDgluScaleImage_IIIIaBIIIaB;
        private DgluScaleImage_IIIIaBIIIP mDgluScaleImage_IIIIaBIIIP;
        private DgluScaleImage_IIIIPIIIaB mDgluScaleImage_IIIIPIIIaB;
        private DgluScaleImage_IIIIPIIIP mDgluScaleImage_IIIIPIIIP;
        private DglUseProgram_I mDglUseProgram_I;
        private DglUseProgramObjectARB_I mDglUseProgramObjectARB_I;
        private DgluSphere_PDII mDgluSphere_PDII;
        private DgluTessBeginContour_P mDgluTessBeginContour_P;
        private DgluTessBeginPolygon_PaB mDgluTessBeginPolygon_PaB;
        private DgluTessBeginPolygon_PP mDgluTessBeginPolygon_PP;
        private DgluTessCallback_PIP mDgluTessCallback_PIP;
        private DgluTessEndContour_P mDgluTessEndContour_P;
        private DgluTessEndPolygon_P mDgluTessEndPolygon_P;
        private DgluTessNormal_PDDD mDgluTessNormal_PDDD;
        private DgluTessProperty_PID mDgluTessProperty_PID;
        private DgluTessVertex_PaDaB mDgluTessVertex_PaDaB;
        private DgluTessVertex_PaDP mDgluTessVertex_PaDP;
        private DgluTessVertex_PPaB mDgluTessVertex_PPaB;
        private DgluTessVertex_PPP mDgluTessVertex_PPP;
        private DgluUnProject_DDDaDaDaIrDrDrD mDgluUnProject_DDDaDaDaIrDrDrD;
        private DgluUnProject_DDDPPPPPP mDgluUnProject_DDDPPPPPP;
        private DglValidateProgram_I mDglValidateProgram_I;
        private DglValidateProgramARB_I mDglValidateProgramARB_I;
        private DglVariantArrayObjectATI_IIIII mDglVariantArrayObjectATI_IIIII;
        private DglVariantbvEXT_IaB mDglVariantbvEXT_IaB;
        private DglVariantbvEXT_IP mDglVariantbvEXT_IP;
        private DglVariantdvEXT_IaD mDglVariantdvEXT_IaD;
        private DglVariantdvEXT_IP mDglVariantdvEXT_IP;
        private DglVariantfvEXT_IaF mDglVariantfvEXT_IaF;
        private DglVariantfvEXT_IP mDglVariantfvEXT_IP;
        private DglVariantivEXT_IaI mDglVariantivEXT_IaI;
        private DglVariantivEXT_IP mDglVariantivEXT_IP;
        private DglVariantPointerEXT_IIIaB mDglVariantPointerEXT_IIIaB;
        private DglVariantPointerEXT_IIIaH mDglVariantPointerEXT_IIIaH;
        private DglVariantPointerEXT_IIIaI mDglVariantPointerEXT_IIIaI;
        private DglVariantPointerEXT_IIIaF mDglVariantPointerEXT_IIIaF;
        private DglVariantPointerEXT_IIIaD mDglVariantPointerEXT_IIIaD;
        private DglVariantPointerEXT_IIIP mDglVariantPointerEXT_IIIP;
        private DglVariantsvEXT_IaH mDglVariantsvEXT_IaH;
        private DglVariantsvEXT_IP mDglVariantsvEXT_IP;
        private DglVariantubvEXT_IaB mDglVariantubvEXT_IaB;
        private DglVariantubvEXT_IP mDglVariantubvEXT_IP;
        private DglVariantuivEXT_IaI mDglVariantuivEXT_IaI;
        private DglVariantuivEXT_IP mDglVariantuivEXT_IP;
        private DglVariantusvEXT_IaH mDglVariantusvEXT_IaH;
        private DglVariantusvEXT_IP mDglVariantusvEXT_IP;
        private DglVertex2d_DD mDglVertex2d_DD;
        private DglVertex2dv_aD mDglVertex2dv_aD;
        private DglVertex2dv_P mDglVertex2dv_P;
        private DglVertex2f_FF mDglVertex2f_FF;
        private DglVertex2fv_aF mDglVertex2fv_aF;
        private DglVertex2fv_P mDglVertex2fv_P;
        private DglVertex2hNV_HH mDglVertex2hNV_HH;
        private DglVertex2hvNV_aH mDglVertex2hvNV_aH;
        private DglVertex2hvNV_P mDglVertex2hvNV_P;
        private DglVertex2i_II mDglVertex2i_II;
        private DglVertex2iv_aI mDglVertex2iv_aI;
        private DglVertex2iv_P mDglVertex2iv_P;
        private DglVertex2s_HH mDglVertex2s_HH;
        private DglVertex2sv_aH mDglVertex2sv_aH;
        private DglVertex2sv_P mDglVertex2sv_P;
        private DglVertex3d_DDD mDglVertex3d_DDD;
        private DglVertex3dv_aD mDglVertex3dv_aD;
        private DglVertex3dv_P mDglVertex3dv_P;
        private DglVertex3f_FFF mDglVertex3f_FFF;
        private DglVertex3fv_aF mDglVertex3fv_aF;
        private DglVertex3fv_P mDglVertex3fv_P;
        private DglVertex3hNV_HHH mDglVertex3hNV_HHH;
        private DglVertex3hvNV_aH mDglVertex3hvNV_aH;
        private DglVertex3hvNV_P mDglVertex3hvNV_P;
        private DglVertex3i_III mDglVertex3i_III;
        private DglVertex3iv_aI mDglVertex3iv_aI;
        private DglVertex3iv_P mDglVertex3iv_P;
        private DglVertex3s_HHH mDglVertex3s_HHH;
        private DglVertex3sv_aH mDglVertex3sv_aH;
        private DglVertex3sv_P mDglVertex3sv_P;
        private DglVertex4d_DDDD mDglVertex4d_DDDD;
        private DglVertex4dv_aD mDglVertex4dv_aD;
        private DglVertex4dv_P mDglVertex4dv_P;
        private DglVertex4f_FFFF mDglVertex4f_FFFF;
        private DglVertex4fv_aF mDglVertex4fv_aF;
        private DglVertex4fv_P mDglVertex4fv_P;
        private DglVertex4hNV_HHHH mDglVertex4hNV_HHHH;
        private DglVertex4hvNV_aH mDglVertex4hvNV_aH;
        private DglVertex4hvNV_P mDglVertex4hvNV_P;
        private DglVertex4i_IIII mDglVertex4i_IIII;
        private DglVertex4iv_aI mDglVertex4iv_aI;
        private DglVertex4iv_P mDglVertex4iv_P;
        private DglVertex4s_HHHH mDglVertex4s_HHHH;
        private DglVertex4sv_aH mDglVertex4sv_aH;
        private DglVertex4sv_P mDglVertex4sv_P;
        private DglVertexArrayParameteriAPPLE_II mDglVertexArrayParameteriAPPLE_II;
        private DglVertexArrayRangeAPPLE_IaB mDglVertexArrayRangeAPPLE_IaB;
        private DglVertexArrayRangeAPPLE_IP mDglVertexArrayRangeAPPLE_IP;
        private DglVertexArrayRangeNV_IaB mDglVertexArrayRangeNV_IaB;
        private DglVertexArrayRangeNV_IP mDglVertexArrayRangeNV_IP;
        private DglVertexAttrib1d_ID mDglVertexAttrib1d_ID;
        private DglVertexAttrib1dARB_ID mDglVertexAttrib1dARB_ID;
        private DglVertexAttrib1dNV_ID mDglVertexAttrib1dNV_ID;
        private DglVertexAttrib1dv_IaD mDglVertexAttrib1dv_IaD;
        private DglVertexAttrib1dv_IP mDglVertexAttrib1dv_IP;
        private DglVertexAttrib1dvARB_IaD mDglVertexAttrib1dvARB_IaD;
        private DglVertexAttrib1dvARB_IP mDglVertexAttrib1dvARB_IP;
        private DglVertexAttrib1dvNV_IaD mDglVertexAttrib1dvNV_IaD;
        private DglVertexAttrib1dvNV_IP mDglVertexAttrib1dvNV_IP;
        private DglVertexAttrib1f_IF mDglVertexAttrib1f_IF;
        private DglVertexAttrib1fARB_IF mDglVertexAttrib1fARB_IF;
        private DglVertexAttrib1fNV_IF mDglVertexAttrib1fNV_IF;
        private DglVertexAttrib1fv_IaF mDglVertexAttrib1fv_IaF;
        private DglVertexAttrib1fv_IP mDglVertexAttrib1fv_IP;
        private DglVertexAttrib1fvARB_IaF mDglVertexAttrib1fvARB_IaF;
        private DglVertexAttrib1fvARB_IP mDglVertexAttrib1fvARB_IP;
        private DglVertexAttrib1fvNV_IaF mDglVertexAttrib1fvNV_IaF;
        private DglVertexAttrib1fvNV_IP mDglVertexAttrib1fvNV_IP;
        private DglVertexAttrib1hNV_IH mDglVertexAttrib1hNV_IH;
        private DglVertexAttrib1hvNV_IaH mDglVertexAttrib1hvNV_IaH;
        private DglVertexAttrib1hvNV_IP mDglVertexAttrib1hvNV_IP;
        private DglVertexAttrib1s_IH mDglVertexAttrib1s_IH;
        private DglVertexAttrib1sARB_IH mDglVertexAttrib1sARB_IH;
        private DglVertexAttrib1sNV_IH mDglVertexAttrib1sNV_IH;
        private DglVertexAttrib1sv_IaH mDglVertexAttrib1sv_IaH;
        private DglVertexAttrib1sv_IP mDglVertexAttrib1sv_IP;
        private DglVertexAttrib1svARB_IaH mDglVertexAttrib1svARB_IaH;
        private DglVertexAttrib1svARB_IP mDglVertexAttrib1svARB_IP;
        private DglVertexAttrib1svNV_IaH mDglVertexAttrib1svNV_IaH;
        private DglVertexAttrib1svNV_IP mDglVertexAttrib1svNV_IP;
        private DglVertexAttrib2d_IDD mDglVertexAttrib2d_IDD;
        private DglVertexAttrib2dARB_IDD mDglVertexAttrib2dARB_IDD;
        private DglVertexAttrib2dNV_IDD mDglVertexAttrib2dNV_IDD;
        private DglVertexAttrib2dv_IaD mDglVertexAttrib2dv_IaD;
        private DglVertexAttrib2dv_IP mDglVertexAttrib2dv_IP;
        private DglVertexAttrib2dvARB_IaD mDglVertexAttrib2dvARB_IaD;
        private DglVertexAttrib2dvARB_IP mDglVertexAttrib2dvARB_IP;
        private DglVertexAttrib2dvNV_IaD mDglVertexAttrib2dvNV_IaD;
        private DglVertexAttrib2dvNV_IP mDglVertexAttrib2dvNV_IP;
        private DglVertexAttrib2f_IFF mDglVertexAttrib2f_IFF;
        private DglVertexAttrib2fARB_IFF mDglVertexAttrib2fARB_IFF;
        private DglVertexAttrib2fNV_IFF mDglVertexAttrib2fNV_IFF;
        private DglVertexAttrib2fv_IaF mDglVertexAttrib2fv_IaF;
        private DglVertexAttrib2fv_IP mDglVertexAttrib2fv_IP;
        private DglVertexAttrib2fvARB_IaF mDglVertexAttrib2fvARB_IaF;
        private DglVertexAttrib2fvARB_IP mDglVertexAttrib2fvARB_IP;
        private DglVertexAttrib2fvNV_IaF mDglVertexAttrib2fvNV_IaF;
        private DglVertexAttrib2fvNV_IP mDglVertexAttrib2fvNV_IP;
        private DglVertexAttrib2hNV_IHH mDglVertexAttrib2hNV_IHH;
        private DglVertexAttrib2hvNV_IaH mDglVertexAttrib2hvNV_IaH;
        private DglVertexAttrib2hvNV_IP mDglVertexAttrib2hvNV_IP;
        private DglVertexAttrib2s_IHH mDglVertexAttrib2s_IHH;
        private DglVertexAttrib2sARB_IHH mDglVertexAttrib2sARB_IHH;
        private DglVertexAttrib2sNV_IHH mDglVertexAttrib2sNV_IHH;
        private DglVertexAttrib2sv_IaH mDglVertexAttrib2sv_IaH;
        private DglVertexAttrib2sv_IP mDglVertexAttrib2sv_IP;
        private DglVertexAttrib2svARB_IaH mDglVertexAttrib2svARB_IaH;
        private DglVertexAttrib2svARB_IP mDglVertexAttrib2svARB_IP;
        private DglVertexAttrib2svNV_IaH mDglVertexAttrib2svNV_IaH;
        private DglVertexAttrib2svNV_IP mDglVertexAttrib2svNV_IP;
        private DglVertexAttrib3d_IDDD mDglVertexAttrib3d_IDDD;
        private DglVertexAttrib3dARB_IDDD mDglVertexAttrib3dARB_IDDD;
        private DglVertexAttrib3dNV_IDDD mDglVertexAttrib3dNV_IDDD;
        private DglVertexAttrib3dv_IaD mDglVertexAttrib3dv_IaD;
        private DglVertexAttrib3dv_IP mDglVertexAttrib3dv_IP;
        private DglVertexAttrib3dvARB_IaD mDglVertexAttrib3dvARB_IaD;
        private DglVertexAttrib3dvARB_IP mDglVertexAttrib3dvARB_IP;
        private DglVertexAttrib3dvNV_IaD mDglVertexAttrib3dvNV_IaD;
        private DglVertexAttrib3dvNV_IP mDglVertexAttrib3dvNV_IP;
        private DglVertexAttrib3f_IFFF mDglVertexAttrib3f_IFFF;
        private DglVertexAttrib3fARB_IFFF mDglVertexAttrib3fARB_IFFF;
        private DglVertexAttrib3fNV_IFFF mDglVertexAttrib3fNV_IFFF;
        private DglVertexAttrib3fv_IaF mDglVertexAttrib3fv_IaF;
        private DglVertexAttrib3fv_IP mDglVertexAttrib3fv_IP;
        private DglVertexAttrib3fvARB_IaF mDglVertexAttrib3fvARB_IaF;
        private DglVertexAttrib3fvARB_IP mDglVertexAttrib3fvARB_IP;
        private DglVertexAttrib3fvNV_IaF mDglVertexAttrib3fvNV_IaF;
        private DglVertexAttrib3fvNV_IP mDglVertexAttrib3fvNV_IP;
        private DglVertexAttrib3hNV_IHHH mDglVertexAttrib3hNV_IHHH;
        private DglVertexAttrib3hvNV_IaH mDglVertexAttrib3hvNV_IaH;
        private DglVertexAttrib3hvNV_IP mDglVertexAttrib3hvNV_IP;
        private DglVertexAttrib3s_IHHH mDglVertexAttrib3s_IHHH;
        private DglVertexAttrib3sARB_IHHH mDglVertexAttrib3sARB_IHHH;
        private DglVertexAttrib3sNV_IHHH mDglVertexAttrib3sNV_IHHH;
        private DglVertexAttrib3sv_IaH mDglVertexAttrib3sv_IaH;
        private DglVertexAttrib3sv_IP mDglVertexAttrib3sv_IP;
        private DglVertexAttrib3svARB_IaH mDglVertexAttrib3svARB_IaH;
        private DglVertexAttrib3svARB_IP mDglVertexAttrib3svARB_IP;
        private DglVertexAttrib3svNV_IaH mDglVertexAttrib3svNV_IaH;
        private DglVertexAttrib3svNV_IP mDglVertexAttrib3svNV_IP;
        private DglVertexAttrib4bv_IaB mDglVertexAttrib4bv_IaB;
        private DglVertexAttrib4bv_IP mDglVertexAttrib4bv_IP;
        private DglVertexAttrib4bvARB_IaB mDglVertexAttrib4bvARB_IaB;
        private DglVertexAttrib4bvARB_IP mDglVertexAttrib4bvARB_IP;
        private DglVertexAttrib4d_IDDDD mDglVertexAttrib4d_IDDDD;
        private DglVertexAttrib4dARB_IDDDD mDglVertexAttrib4dARB_IDDDD;
        private DglVertexAttrib4dNV_IDDDD mDglVertexAttrib4dNV_IDDDD;
        private DglVertexAttrib4dv_IaD mDglVertexAttrib4dv_IaD;
        private DglVertexAttrib4dv_IP mDglVertexAttrib4dv_IP;
        private DglVertexAttrib4dvARB_IaD mDglVertexAttrib4dvARB_IaD;
        private DglVertexAttrib4dvARB_IP mDglVertexAttrib4dvARB_IP;
        private DglVertexAttrib4dvNV_IaD mDglVertexAttrib4dvNV_IaD;
        private DglVertexAttrib4dvNV_IP mDglVertexAttrib4dvNV_IP;
        private DglVertexAttrib4f_IFFFF mDglVertexAttrib4f_IFFFF;
        private DglVertexAttrib4fARB_IFFFF mDglVertexAttrib4fARB_IFFFF;
        private DglVertexAttrib4fNV_IFFFF mDglVertexAttrib4fNV_IFFFF;
        private DglVertexAttrib4fv_IaF mDglVertexAttrib4fv_IaF;
        private DglVertexAttrib4fv_IP mDglVertexAttrib4fv_IP;
        private DglVertexAttrib4fvARB_IaF mDglVertexAttrib4fvARB_IaF;
        private DglVertexAttrib4fvARB_IP mDglVertexAttrib4fvARB_IP;
        private DglVertexAttrib4fvNV_IaF mDglVertexAttrib4fvNV_IaF;
        private DglVertexAttrib4fvNV_IP mDglVertexAttrib4fvNV_IP;
        private DglVertexAttrib4hNV_IHHHH mDglVertexAttrib4hNV_IHHHH;
        private DglVertexAttrib4hvNV_IaH mDglVertexAttrib4hvNV_IaH;
        private DglVertexAttrib4hvNV_IP mDglVertexAttrib4hvNV_IP;
        private DglVertexAttrib4iv_IaI mDglVertexAttrib4iv_IaI;
        private DglVertexAttrib4iv_IP mDglVertexAttrib4iv_IP;
        private DglVertexAttrib4ivARB_IaI mDglVertexAttrib4ivARB_IaI;
        private DglVertexAttrib4ivARB_IP mDglVertexAttrib4ivARB_IP;
        private DglVertexAttrib4Nbv_IaB mDglVertexAttrib4Nbv_IaB;
        private DglVertexAttrib4Nbv_IP mDglVertexAttrib4Nbv_IP;
        private DglVertexAttrib4NbvARB_IaB mDglVertexAttrib4NbvARB_IaB;
        private DglVertexAttrib4NbvARB_IP mDglVertexAttrib4NbvARB_IP;
        private DglVertexAttrib4Niv_IaI mDglVertexAttrib4Niv_IaI;
        private DglVertexAttrib4Niv_IP mDglVertexAttrib4Niv_IP;
        private DglVertexAttrib4NivARB_IaI mDglVertexAttrib4NivARB_IaI;
        private DglVertexAttrib4NivARB_IP mDglVertexAttrib4NivARB_IP;
        private DglVertexAttrib4Nsv_IaH mDglVertexAttrib4Nsv_IaH;
        private DglVertexAttrib4Nsv_IP mDglVertexAttrib4Nsv_IP;
        private DglVertexAttrib4NsvARB_IaH mDglVertexAttrib4NsvARB_IaH;
        private DglVertexAttrib4NsvARB_IP mDglVertexAttrib4NsvARB_IP;
        private DglVertexAttrib4Nub_IBBBB mDglVertexAttrib4Nub_IBBBB;
        private DglVertexAttrib4NubARB_IBBBB mDglVertexAttrib4NubARB_IBBBB;
        private DglVertexAttrib4Nubv_IaB mDglVertexAttrib4Nubv_IaB;
        private DglVertexAttrib4Nubv_IP mDglVertexAttrib4Nubv_IP;
        private DglVertexAttrib4NubvARB_IaB mDglVertexAttrib4NubvARB_IaB;
        private DglVertexAttrib4NubvARB_IP mDglVertexAttrib4NubvARB_IP;
        private DglVertexAttrib4Nuiv_IaI mDglVertexAttrib4Nuiv_IaI;
        private DglVertexAttrib4Nuiv_IP mDglVertexAttrib4Nuiv_IP;
        private DglVertexAttrib4NuivARB_IaI mDglVertexAttrib4NuivARB_IaI;
        private DglVertexAttrib4NuivARB_IP mDglVertexAttrib4NuivARB_IP;
        private DglVertexAttrib4Nusv_IaH mDglVertexAttrib4Nusv_IaH;
        private DglVertexAttrib4Nusv_IP mDglVertexAttrib4Nusv_IP;
        private DglVertexAttrib4NusvARB_IaH mDglVertexAttrib4NusvARB_IaH;
        private DglVertexAttrib4NusvARB_IP mDglVertexAttrib4NusvARB_IP;
        private DglVertexAttrib4s_IHHHH mDglVertexAttrib4s_IHHHH;
        private DglVertexAttrib4sARB_IHHHH mDglVertexAttrib4sARB_IHHHH;
        private DglVertexAttrib4sNV_IHHHH mDglVertexAttrib4sNV_IHHHH;
        private DglVertexAttrib4sv_IaH mDglVertexAttrib4sv_IaH;
        private DglVertexAttrib4sv_IP mDglVertexAttrib4sv_IP;
        private DglVertexAttrib4svARB_IaH mDglVertexAttrib4svARB_IaH;
        private DglVertexAttrib4svARB_IP mDglVertexAttrib4svARB_IP;
        private DglVertexAttrib4svNV_IaH mDglVertexAttrib4svNV_IaH;
        private DglVertexAttrib4svNV_IP mDglVertexAttrib4svNV_IP;
        private DglVertexAttrib4ubNV_IBBBB mDglVertexAttrib4ubNV_IBBBB;
        private DglVertexAttrib4ubv_IaB mDglVertexAttrib4ubv_IaB;
        private DglVertexAttrib4ubv_IP mDglVertexAttrib4ubv_IP;
        private DglVertexAttrib4ubvARB_IaB mDglVertexAttrib4ubvARB_IaB;
        private DglVertexAttrib4ubvARB_IP mDglVertexAttrib4ubvARB_IP;
        private DglVertexAttrib4ubvNV_IaB mDglVertexAttrib4ubvNV_IaB;
        private DglVertexAttrib4ubvNV_IP mDglVertexAttrib4ubvNV_IP;
        private DglVertexAttrib4uiv_IaI mDglVertexAttrib4uiv_IaI;
        private DglVertexAttrib4uiv_IP mDglVertexAttrib4uiv_IP;
        private DglVertexAttrib4uivARB_IaI mDglVertexAttrib4uivARB_IaI;
        private DglVertexAttrib4uivARB_IP mDglVertexAttrib4uivARB_IP;
        private DglVertexAttrib4usv_IaH mDglVertexAttrib4usv_IaH;
        private DglVertexAttrib4usv_IP mDglVertexAttrib4usv_IP;
        private DglVertexAttrib4usvARB_IaH mDglVertexAttrib4usvARB_IaH;
        private DglVertexAttrib4usvARB_IP mDglVertexAttrib4usvARB_IP;
        private DglVertexAttribArrayObjectATI_IIIBIII mDglVertexAttribArrayObjectATI_IIIBIII;
        private DglVertexAttribPointer_IIIBIaB mDglVertexAttribPointer_IIIBIaB;
        private DglVertexAttribPointer_IIIBIaH mDglVertexAttribPointer_IIIBIaH;
        private DglVertexAttribPointer_IIIBIaI mDglVertexAttribPointer_IIIBIaI;
        private DglVertexAttribPointer_IIIBIaF mDglVertexAttribPointer_IIIBIaF;
        private DglVertexAttribPointer_IIIBIaD mDglVertexAttribPointer_IIIBIaD;
        private DglVertexAttribPointer_IIIBIP mDglVertexAttribPointer_IIIBIP;
        private DglVertexAttribPointerARB_IIIBIaB mDglVertexAttribPointerARB_IIIBIaB;
        private DglVertexAttribPointerARB_IIIBIaH mDglVertexAttribPointerARB_IIIBIaH;
        private DglVertexAttribPointerARB_IIIBIaI mDglVertexAttribPointerARB_IIIBIaI;
        private DglVertexAttribPointerARB_IIIBIaF mDglVertexAttribPointerARB_IIIBIaF;
        private DglVertexAttribPointerARB_IIIBIaD mDglVertexAttribPointerARB_IIIBIaD;
        private DglVertexAttribPointerARB_IIIBIP mDglVertexAttribPointerARB_IIIBIP;
        private DglVertexAttribPointerNV_IIIIaB mDglVertexAttribPointerNV_IIIIaB;
        private DglVertexAttribPointerNV_IIIIaH mDglVertexAttribPointerNV_IIIIaH;
        private DglVertexAttribPointerNV_IIIIaI mDglVertexAttribPointerNV_IIIIaI;
        private DglVertexAttribPointerNV_IIIIaF mDglVertexAttribPointerNV_IIIIaF;
        private DglVertexAttribPointerNV_IIIIaD mDglVertexAttribPointerNV_IIIIaD;
        private DglVertexAttribPointerNV_IIIIP mDglVertexAttribPointerNV_IIIIP;
        private DglVertexAttribs1dvNV_IIaD mDglVertexAttribs1dvNV_IIaD;
        private DglVertexAttribs1dvNV_IIP mDglVertexAttribs1dvNV_IIP;
        private DglVertexAttribs1fvNV_IIaF mDglVertexAttribs1fvNV_IIaF;
        private DglVertexAttribs1fvNV_IIP mDglVertexAttribs1fvNV_IIP;
        private DglVertexAttribs1hvNV_IIaH mDglVertexAttribs1hvNV_IIaH;
        private DglVertexAttribs1hvNV_IIP mDglVertexAttribs1hvNV_IIP;
        private DglVertexAttribs1svNV_IIaH mDglVertexAttribs1svNV_IIaH;
        private DglVertexAttribs1svNV_IIP mDglVertexAttribs1svNV_IIP;
        private DglVertexAttribs2dvNV_IIaD mDglVertexAttribs2dvNV_IIaD;
        private DglVertexAttribs2dvNV_IIP mDglVertexAttribs2dvNV_IIP;
        private DglVertexAttribs2fvNV_IIaF mDglVertexAttribs2fvNV_IIaF;
        private DglVertexAttribs2fvNV_IIP mDglVertexAttribs2fvNV_IIP;
        private DglVertexAttribs2hvNV_IIaH mDglVertexAttribs2hvNV_IIaH;
        private DglVertexAttribs2hvNV_IIP mDglVertexAttribs2hvNV_IIP;
        private DglVertexAttribs2svNV_IIaH mDglVertexAttribs2svNV_IIaH;
        private DglVertexAttribs2svNV_IIP mDglVertexAttribs2svNV_IIP;
        private DglVertexAttribs3dvNV_IIaD mDglVertexAttribs3dvNV_IIaD;
        private DglVertexAttribs3dvNV_IIP mDglVertexAttribs3dvNV_IIP;
        private DglVertexAttribs3fvNV_IIaF mDglVertexAttribs3fvNV_IIaF;
        private DglVertexAttribs3fvNV_IIP mDglVertexAttribs3fvNV_IIP;
        private DglVertexAttribs3hvNV_IIaH mDglVertexAttribs3hvNV_IIaH;
        private DglVertexAttribs3hvNV_IIP mDglVertexAttribs3hvNV_IIP;
        private DglVertexAttribs3svNV_IIaH mDglVertexAttribs3svNV_IIaH;
        private DglVertexAttribs3svNV_IIP mDglVertexAttribs3svNV_IIP;
        private DglVertexAttribs4dvNV_IIaD mDglVertexAttribs4dvNV_IIaD;
        private DglVertexAttribs4dvNV_IIP mDglVertexAttribs4dvNV_IIP;
        private DglVertexAttribs4fvNV_IIaF mDglVertexAttribs4fvNV_IIaF;
        private DglVertexAttribs4fvNV_IIP mDglVertexAttribs4fvNV_IIP;
        private DglVertexAttribs4hvNV_IIaH mDglVertexAttribs4hvNV_IIaH;
        private DglVertexAttribs4hvNV_IIP mDglVertexAttribs4hvNV_IIP;
        private DglVertexAttribs4svNV_IIaH mDglVertexAttribs4svNV_IIaH;
        private DglVertexAttribs4svNV_IIP mDglVertexAttribs4svNV_IIP;
        private DglVertexAttribs4ubvNV_IIaB mDglVertexAttribs4ubvNV_IIaB;
        private DglVertexAttribs4ubvNV_IIP mDglVertexAttribs4ubvNV_IIP;
        private DglVertexBlendARB_I mDglVertexBlendARB_I;
        private DglVertexBlendEnvfATI_IF mDglVertexBlendEnvfATI_IF;
        private DglVertexBlendEnviATI_II mDglVertexBlendEnviATI_II;
        private DglVertexPointer_IIIaH mDglVertexPointer_IIIaH;
        private DglVertexPointer_IIIaI mDglVertexPointer_IIIaI;
        private DglVertexPointer_IIIaF mDglVertexPointer_IIIaF;
        private DglVertexPointer_IIIaD mDglVertexPointer_IIIaD;
        private DglVertexPointer_IIIP mDglVertexPointer_IIIP;
        private DglVertexPointerEXT_IIIIaH mDglVertexPointerEXT_IIIIaH;
        private DglVertexPointerEXT_IIIIaI mDglVertexPointerEXT_IIIIaI;
        private DglVertexPointerEXT_IIIIaF mDglVertexPointerEXT_IIIIaF;
        private DglVertexPointerEXT_IIIIaD mDglVertexPointerEXT_IIIIaD;
        private DglVertexPointerEXT_IIIIP mDglVertexPointerEXT_IIIIP;
        private DglVertexPointerListIBM_IIIrPI mDglVertexPointerListIBM_IIIrPI;
        private DglVertexPointervINTEL_IIrP mDglVertexPointervINTEL_IIrP;
        private DglVertexStream1dATI_ID mDglVertexStream1dATI_ID;
        private DglVertexStream1dvATI_IaD mDglVertexStream1dvATI_IaD;
        private DglVertexStream1dvATI_IP mDglVertexStream1dvATI_IP;
        private DglVertexStream1fATI_IF mDglVertexStream1fATI_IF;
        private DglVertexStream1fvATI_IaF mDglVertexStream1fvATI_IaF;
        private DglVertexStream1fvATI_IP mDglVertexStream1fvATI_IP;
        private DglVertexStream1iATI_II mDglVertexStream1iATI_II;
        private DglVertexStream1ivATI_IaI mDglVertexStream1ivATI_IaI;
        private DglVertexStream1ivATI_IP mDglVertexStream1ivATI_IP;
        private DglVertexStream1sATI_IH mDglVertexStream1sATI_IH;
        private DglVertexStream1svATI_IaH mDglVertexStream1svATI_IaH;
        private DglVertexStream1svATI_IP mDglVertexStream1svATI_IP;
        private DglVertexStream2dATI_IDD mDglVertexStream2dATI_IDD;
        private DglVertexStream2dvATI_IaD mDglVertexStream2dvATI_IaD;
        private DglVertexStream2dvATI_IP mDglVertexStream2dvATI_IP;
        private DglVertexStream2fATI_IFF mDglVertexStream2fATI_IFF;
        private DglVertexStream2fvATI_IaF mDglVertexStream2fvATI_IaF;
        private DglVertexStream2fvATI_IP mDglVertexStream2fvATI_IP;
        private DglVertexStream2iATI_III mDglVertexStream2iATI_III;
        private DglVertexStream2ivATI_IaI mDglVertexStream2ivATI_IaI;
        private DglVertexStream2ivATI_IP mDglVertexStream2ivATI_IP;
        private DglVertexStream2sATI_IHH mDglVertexStream2sATI_IHH;
        private DglVertexStream2svATI_IaH mDglVertexStream2svATI_IaH;
        private DglVertexStream2svATI_IP mDglVertexStream2svATI_IP;
        private DglVertexStream3dATI_IDDD mDglVertexStream3dATI_IDDD;
        private DglVertexStream3dvATI_IaD mDglVertexStream3dvATI_IaD;
        private DglVertexStream3dvATI_IP mDglVertexStream3dvATI_IP;
        private DglVertexStream3fATI_IFFF mDglVertexStream3fATI_IFFF;
        private DglVertexStream3fvATI_IaF mDglVertexStream3fvATI_IaF;
        private DglVertexStream3fvATI_IP mDglVertexStream3fvATI_IP;
        private DglVertexStream3iATI_IIII mDglVertexStream3iATI_IIII;
        private DglVertexStream3ivATI_IaI mDglVertexStream3ivATI_IaI;
        private DglVertexStream3ivATI_IP mDglVertexStream3ivATI_IP;
        private DglVertexStream3sATI_IHHH mDglVertexStream3sATI_IHHH;
        private DglVertexStream3svATI_IaH mDglVertexStream3svATI_IaH;
        private DglVertexStream3svATI_IP mDglVertexStream3svATI_IP;
        private DglVertexStream4dATI_IDDDD mDglVertexStream4dATI_IDDDD;
        private DglVertexStream4dvATI_IaD mDglVertexStream4dvATI_IaD;
        private DglVertexStream4dvATI_IP mDglVertexStream4dvATI_IP;
        private DglVertexStream4fATI_IFFFF mDglVertexStream4fATI_IFFFF;
        private DglVertexStream4fvATI_IaF mDglVertexStream4fvATI_IaF;
        private DglVertexStream4fvATI_IP mDglVertexStream4fvATI_IP;
        private DglVertexStream4iATI_IIIII mDglVertexStream4iATI_IIIII;
        private DglVertexStream4ivATI_IaI mDglVertexStream4ivATI_IaI;
        private DglVertexStream4ivATI_IP mDglVertexStream4ivATI_IP;
        private DglVertexStream4sATI_IHHHH mDglVertexStream4sATI_IHHHH;
        private DglVertexStream4svATI_IaH mDglVertexStream4svATI_IaH;
        private DglVertexStream4svATI_IP mDglVertexStream4svATI_IP;
        private DglVertexWeightfEXT_F mDglVertexWeightfEXT_F;
        private DglVertexWeightfvEXT_aF mDglVertexWeightfvEXT_aF;
        private DglVertexWeightfvEXT_P mDglVertexWeightfvEXT_P;
        private DglVertexWeighthNV_H mDglVertexWeighthNV_H;
        private DglVertexWeighthvNV_aH mDglVertexWeighthvNV_aH;
        private DglVertexWeighthvNV_P mDglVertexWeighthvNV_P;
        private DglVertexWeightPointerEXT_IIIaB mDglVertexWeightPointerEXT_IIIaB;
        private DglVertexWeightPointerEXT_IIIaH mDglVertexWeightPointerEXT_IIIaH;
        private DglVertexWeightPointerEXT_IIIaI mDglVertexWeightPointerEXT_IIIaI;
        private DglVertexWeightPointerEXT_IIIaF mDglVertexWeightPointerEXT_IIIaF;
        private DglVertexWeightPointerEXT_IIIaD mDglVertexWeightPointerEXT_IIIaD;
        private DglVertexWeightPointerEXT_IIIP mDglVertexWeightPointerEXT_IIIP;
        private DglViewport_IIII mDglViewport_IIII;
        private DglWeightbvARB_IaB mDglWeightbvARB_IaB;
        private DglWeightbvARB_IP mDglWeightbvARB_IP;
        private DglWeightdvARB_IaD mDglWeightdvARB_IaD;
        private DglWeightdvARB_IP mDglWeightdvARB_IP;
        private DglWeightfvARB_IaF mDglWeightfvARB_IaF;
        private DglWeightfvARB_IP mDglWeightfvARB_IP;
        private DglWeightivARB_IaI mDglWeightivARB_IaI;
        private DglWeightivARB_IP mDglWeightivARB_IP;
        private DglWeightPointerARB_IIIaB mDglWeightPointerARB_IIIaB;
        private DglWeightPointerARB_IIIaH mDglWeightPointerARB_IIIaH;
        private DglWeightPointerARB_IIIaI mDglWeightPointerARB_IIIaI;
        private DglWeightPointerARB_IIIaF mDglWeightPointerARB_IIIaF;
        private DglWeightPointerARB_IIIaD mDglWeightPointerARB_IIIaD;
        private DglWeightPointerARB_IIIP mDglWeightPointerARB_IIIP;
        private DglWeightsvARB_IaH mDglWeightsvARB_IaH;
        private DglWeightsvARB_IP mDglWeightsvARB_IP;
        private DglWeightubvARB_IaB mDglWeightubvARB_IaB;
        private DglWeightubvARB_IP mDglWeightubvARB_IP;
        private DglWeightuivARB_IaI mDglWeightuivARB_IaI;
        private DglWeightuivARB_IP mDglWeightuivARB_IP;
        private DglWeightusvARB_IaH mDglWeightusvARB_IaH;
        private DglWeightusvARB_IP mDglWeightusvARB_IP;
        private DglWindowPos2d_DD mDglWindowPos2d_DD;
        private DglWindowPos2dARB_DD mDglWindowPos2dARB_DD;
        private DglWindowPos2dMESA_DD mDglWindowPos2dMESA_DD;
        private DglWindowPos2dv_aD mDglWindowPos2dv_aD;
        private DglWindowPos2dv_P mDglWindowPos2dv_P;
        private DglWindowPos2dvARB_aD mDglWindowPos2dvARB_aD;
        private DglWindowPos2dvARB_P mDglWindowPos2dvARB_P;
        private DglWindowPos2dvMESA_aD mDglWindowPos2dvMESA_aD;
        private DglWindowPos2dvMESA_P mDglWindowPos2dvMESA_P;
        private DglWindowPos2f_FF mDglWindowPos2f_FF;
        private DglWindowPos2fARB_FF mDglWindowPos2fARB_FF;
        private DglWindowPos2fMESA_FF mDglWindowPos2fMESA_FF;
        private DglWindowPos2fv_aF mDglWindowPos2fv_aF;
        private DglWindowPos2fv_P mDglWindowPos2fv_P;
        private DglWindowPos2fvARB_aF mDglWindowPos2fvARB_aF;
        private DglWindowPos2fvARB_P mDglWindowPos2fvARB_P;
        private DglWindowPos2fvMESA_aF mDglWindowPos2fvMESA_aF;
        private DglWindowPos2fvMESA_P mDglWindowPos2fvMESA_P;
        private DglWindowPos2i_II mDglWindowPos2i_II;
        private DglWindowPos2iARB_II mDglWindowPos2iARB_II;
        private DglWindowPos2iMESA_II mDglWindowPos2iMESA_II;
        private DglWindowPos2iv_aI mDglWindowPos2iv_aI;
        private DglWindowPos2iv_P mDglWindowPos2iv_P;
        private DglWindowPos2ivARB_aI mDglWindowPos2ivARB_aI;
        private DglWindowPos2ivARB_P mDglWindowPos2ivARB_P;
        private DglWindowPos2ivMESA_aI mDglWindowPos2ivMESA_aI;
        private DglWindowPos2ivMESA_P mDglWindowPos2ivMESA_P;
        private DglWindowPos2s_HH mDglWindowPos2s_HH;
        private DglWindowPos2sARB_HH mDglWindowPos2sARB_HH;
        private DglWindowPos2sMESA_HH mDglWindowPos2sMESA_HH;
        private DglWindowPos2sv_aH mDglWindowPos2sv_aH;
        private DglWindowPos2sv_P mDglWindowPos2sv_P;
        private DglWindowPos2svARB_aH mDglWindowPos2svARB_aH;
        private DglWindowPos2svARB_P mDglWindowPos2svARB_P;
        private DglWindowPos2svMESA_aH mDglWindowPos2svMESA_aH;
        private DglWindowPos2svMESA_P mDglWindowPos2svMESA_P;
        private DglWindowPos3d_DDD mDglWindowPos3d_DDD;
        private DglWindowPos3dARB_DDD mDglWindowPos3dARB_DDD;
        private DglWindowPos3dMESA_DDD mDglWindowPos3dMESA_DDD;
        private DglWindowPos3dv_aD mDglWindowPos3dv_aD;
        private DglWindowPos3dv_P mDglWindowPos3dv_P;
        private DglWindowPos3dvARB_aD mDglWindowPos3dvARB_aD;
        private DglWindowPos3dvARB_P mDglWindowPos3dvARB_P;
        private DglWindowPos3dvMESA_aD mDglWindowPos3dvMESA_aD;
        private DglWindowPos3dvMESA_P mDglWindowPos3dvMESA_P;
        private DglWindowPos3f_FFF mDglWindowPos3f_FFF;
        private DglWindowPos3fARB_FFF mDglWindowPos3fARB_FFF;
        private DglWindowPos3fMESA_FFF mDglWindowPos3fMESA_FFF;
        private DglWindowPos3fv_aF mDglWindowPos3fv_aF;
        private DglWindowPos3fv_P mDglWindowPos3fv_P;
        private DglWindowPos3fvARB_aF mDglWindowPos3fvARB_aF;
        private DglWindowPos3fvARB_P mDglWindowPos3fvARB_P;
        private DglWindowPos3fvMESA_aF mDglWindowPos3fvMESA_aF;
        private DglWindowPos3fvMESA_P mDglWindowPos3fvMESA_P;
        private DglWindowPos3i_III mDglWindowPos3i_III;
        private DglWindowPos3iARB_III mDglWindowPos3iARB_III;
        private DglWindowPos3iMESA_III mDglWindowPos3iMESA_III;
        private DglWindowPos3iv_aI mDglWindowPos3iv_aI;
        private DglWindowPos3iv_P mDglWindowPos3iv_P;
        private DglWindowPos3ivARB_aI mDglWindowPos3ivARB_aI;
        private DglWindowPos3ivARB_P mDglWindowPos3ivARB_P;
        private DglWindowPos3ivMESA_aI mDglWindowPos3ivMESA_aI;
        private DglWindowPos3ivMESA_P mDglWindowPos3ivMESA_P;
        private DglWindowPos3s_HHH mDglWindowPos3s_HHH;
        private DglWindowPos3sARB_HHH mDglWindowPos3sARB_HHH;
        private DglWindowPos3sMESA_HHH mDglWindowPos3sMESA_HHH;
        private DglWindowPos3sv_aH mDglWindowPos3sv_aH;
        private DglWindowPos3sv_P mDglWindowPos3sv_P;
        private DglWindowPos3svARB_aH mDglWindowPos3svARB_aH;
        private DglWindowPos3svARB_P mDglWindowPos3svARB_P;
        private DglWindowPos3svMESA_aH mDglWindowPos3svMESA_aH;
        private DglWindowPos3svMESA_P mDglWindowPos3svMESA_P;
        private DglWindowPos4dMESA_DDDD mDglWindowPos4dMESA_DDDD;
        private DglWindowPos4dvMESA_aD mDglWindowPos4dvMESA_aD;
        private DglWindowPos4dvMESA_P mDglWindowPos4dvMESA_P;
        private DglWindowPos4fMESA_FFFF mDglWindowPos4fMESA_FFFF;
        private DglWindowPos4fvMESA_aF mDglWindowPos4fvMESA_aF;
        private DglWindowPos4fvMESA_P mDglWindowPos4fvMESA_P;
        private DglWindowPos4iMESA_IIII mDglWindowPos4iMESA_IIII;
        private DglWindowPos4ivMESA_aI mDglWindowPos4ivMESA_aI;
        private DglWindowPos4ivMESA_P mDglWindowPos4ivMESA_P;
        private DglWindowPos4sMESA_HHHH mDglWindowPos4sMESA_HHHH;
        private DglWindowPos4svMESA_aH mDglWindowPos4svMESA_aH;
        private DglWindowPos4svMESA_P mDglWindowPos4svMESA_P;
        private DglWriteMaskEXT_IIIIII mDglWriteMaskEXT_IIIIII;
        private DSwapBuffers_P mDSwapBuffers_P;
        private DwglAllocateMemoryNV_IFFF mDwglAllocateMemoryNV_IFFF;
        private DwglAssociateImageBufferEventsI3D_PrPrPrII mDwglAssociateImageBufferEventsI3D_PrPrPrII;
        private DwglBeginFrameTrackingI3D_V mDwglBeginFrameTrackingI3D_V;
        private DwglBindDisplayColorTableEXT_H mDwglBindDisplayColorTableEXT_H;
        private DwglBindTexImageARB_PI mDwglBindTexImageARB_PI;
        private DwglChoosePixelFormatARB_PaIaFIaIrI mDwglChoosePixelFormatARB_PaIaFIaIrI;
        private DwglChoosePixelFormatARB_PPPIPP mDwglChoosePixelFormatARB_PPPIPP;
        private DwglChoosePixelFormatEXT_PaIaFIaIrI mDwglChoosePixelFormatEXT_PaIaFIaIrI;
        private DwglChoosePixelFormatEXT_PPPIPP mDwglChoosePixelFormatEXT_PPPIPP;
        private DwglCopyContext_PPI mDwglCopyContext_PPI;
        private DwglCreateBufferRegionARB_PII mDwglCreateBufferRegionARB_PII;
        private DwglCreateContext_P mDwglCreateContext_P;
        private DwglCreateDisplayColorTableEXT_H mDwglCreateDisplayColorTableEXT_H;
        private DwglCreateImageBufferI3D_PII mDwglCreateImageBufferI3D_PII;
        private DwglCreateLayerContext_PI mDwglCreateLayerContext_PI;
        private DwglCreatePbufferARB_PIIIaI mDwglCreatePbufferARB_PIIIaI;
        private DwglCreatePbufferARB_PIIIP mDwglCreatePbufferARB_PIIIP;
        private DwglCreatePbufferEXT_PIIIaI mDwglCreatePbufferEXT_PIIIaI;
        private DwglCreatePbufferEXT_PIIIP mDwglCreatePbufferEXT_PIIIP;
        private DwglDeleteBufferRegionARB_P mDwglDeleteBufferRegionARB_P;
        private DwglDeleteContext_P mDwglDeleteContext_P;
        private DwglDescribeLayerPlane_PIIIrX mDwglDescribeLayerPlane_PIIIrX;
        private DwglDestroyDisplayColorTableEXT_H mDwglDestroyDisplayColorTableEXT_H;
        private DwglDestroyImageBufferI3D_PaB mDwglDestroyImageBufferI3D_PaB;
        private DwglDestroyImageBufferI3D_PP mDwglDestroyImageBufferI3D_PP;
        private DwglDestroyPbufferARB_P mDwglDestroyPbufferARB_P;
        private DwglDestroyPbufferEXT_P mDwglDestroyPbufferEXT_P;
        private DwglDisableFrameLockI3D_V mDwglDisableFrameLockI3D_V;
        private DwglDisableGenlockI3D_P mDwglDisableGenlockI3D_P;
        private DwglEnableFrameLockI3D_V mDwglEnableFrameLockI3D_V;
        private DwglEnableGenlockI3D_P mDwglEnableGenlockI3D_P;
        private DwglEndFrameTrackingI3D_V mDwglEndFrameTrackingI3D_V;
        private DwglFreeMemoryNV_P mDwglFreeMemoryNV_P;
        private DwglGenlockSampleRateI3D_PI mDwglGenlockSampleRateI3D_PI;
        private DwglGenlockSourceDelayI3D_PI mDwglGenlockSourceDelayI3D_PI;
        private DwglGenlockSourceEdgeI3D_PI mDwglGenlockSourceEdgeI3D_PI;
        private DwglGenlockSourceI3D_PI mDwglGenlockSourceI3D_PI;
        private DwglGetCurrentContext_V mDwglGetCurrentContext_V;
        private DwglGetCurrentDC_V mDwglGetCurrentDC_V;
        private DwglGetCurrentReadDCARB_V mDwglGetCurrentReadDCARB_V;
        private DwglGetCurrentReadDCEXT_V mDwglGetCurrentReadDCEXT_V;
        private DwglGetDigitalVideoParametersI3D_PIrI mDwglGetDigitalVideoParametersI3D_PIrI;
        private DwglGetExtensionsStringARB_P mDwglGetExtensionsStringARB_P;
        private DwglGetExtensionsStringEXT_V mDwglGetExtensionsStringEXT_V;
        private DwglGetFrameUsageI3D_rF mDwglGetFrameUsageI3D_rF;
        private DwglGetGammaTableI3D_PIaHaHaH mDwglGetGammaTableI3D_PIaHaHaH;
        private DwglGetGammaTableI3D_PIPPP mDwglGetGammaTableI3D_PIPPP;
        private DwglGetGammaTableParametersI3D_PIrI mDwglGetGammaTableParametersI3D_PIrI;
        private DwglGetGenlockSampleRateI3D_PrI mDwglGetGenlockSampleRateI3D_PrI;
        private DwglGetGenlockSourceDelayI3D_PrI mDwglGetGenlockSourceDelayI3D_PrI;
        private DwglGetGenlockSourceEdgeI3D_PrI mDwglGetGenlockSourceEdgeI3D_PrI;
        private DwglGetGenlockSourceI3D_PrI mDwglGetGenlockSourceI3D_PrI;
        private DwglGetLayerPaletteEntries_PIIIaI mDwglGetLayerPaletteEntries_PIIIaI;
        private DwglGetLayerPaletteEntries_PIIIP mDwglGetLayerPaletteEntries_PIIIP;
        private DwglGetMscRateOML_PrIrI mDwglGetMscRateOML_PrIrI;
        private DwglGetPbufferDCARB_P mDwglGetPbufferDCARB_P;
        private DwglGetPbufferDCEXT_P mDwglGetPbufferDCEXT_P;
        private DwglGetPixelFormatAttribfvARB_PIIIaIaF mDwglGetPixelFormatAttribfvARB_PIIIaIaF;
        private DwglGetPixelFormatAttribfvARB_PIIIPP mDwglGetPixelFormatAttribfvARB_PIIIPP;
        private DwglGetPixelFormatAttribfvEXT_PIIIaIaF mDwglGetPixelFormatAttribfvEXT_PIIIaIaF;
        private DwglGetPixelFormatAttribfvEXT_PIIIPP mDwglGetPixelFormatAttribfvEXT_PIIIPP;
        private DwglGetPixelFormatAttribivARB_PIIIaIaI mDwglGetPixelFormatAttribivARB_PIIIaIaI;
        private DwglGetPixelFormatAttribivARB_PIIIPP mDwglGetPixelFormatAttribivARB_PIIIPP;
        private DwglGetPixelFormatAttribivEXT_PIIIaIaI mDwglGetPixelFormatAttribivEXT_PIIIaIaI;
        private DwglGetPixelFormatAttribivEXT_PIIIPP mDwglGetPixelFormatAttribivEXT_PIIIPP;
        private DwglGetProcAddress_S mDwglGetProcAddress_S;
        private DwglGetSwapIntervalEXT_V mDwglGetSwapIntervalEXT_V;
        private DwglGetSyncValuesOML_PrLrLrL mDwglGetSyncValuesOML_PrLrLrL;
        private DwglIsEnabledFrameLockI3D_rI mDwglIsEnabledFrameLockI3D_rI;
        private DwglIsEnabledGenlockI3D_PrI mDwglIsEnabledGenlockI3D_PrI;
        private DwglLoadDisplayColorTableEXT_aHI mDwglLoadDisplayColorTableEXT_aHI;
        private DwglLoadDisplayColorTableEXT_PI mDwglLoadDisplayColorTableEXT_PI;
        private DwglMakeContextCurrentARB_PPP mDwglMakeContextCurrentARB_PPP;
        private DwglMakeContextCurrentEXT_PPP mDwglMakeContextCurrentEXT_PPP;
        private DwglMakeCurrent_PP mDwglMakeCurrent_PP;
        private DwglQueryFrameLockMasterI3D_rI mDwglQueryFrameLockMasterI3D_rI;
        private DwglQueryFrameTrackingI3D_rIrIrF mDwglQueryFrameTrackingI3D_rIrIrF;
        private DwglQueryGenlockMaxSourceDelayI3D_PrIrI mDwglQueryGenlockMaxSourceDelayI3D_PrIrI;
        private DwglQueryPbufferARB_PIrI mDwglQueryPbufferARB_PIrI;
        private DwglQueryPbufferEXT_PIrI mDwglQueryPbufferEXT_PIrI;
        private DwglRealizeLayerPalette_PII mDwglRealizeLayerPalette_PII;
        private DwglReleaseImageBufferEventsI3D_PrPI mDwglReleaseImageBufferEventsI3D_PrPI;
        private DwglReleasePbufferDCARB_PP mDwglReleasePbufferDCARB_PP;
        private DwglReleasePbufferDCEXT_PP mDwglReleasePbufferDCEXT_PP;
        private DwglReleaseTexImageARB_PI mDwglReleaseTexImageARB_PI;
        private DwglRestoreBufferRegionARB_PIIIIII mDwglRestoreBufferRegionARB_PIIIIII;
        private DwglSaveBufferRegionARB_PIIII mDwglSaveBufferRegionARB_PIIII;
        private DwglSetDigitalVideoParametersI3D_PIrI mDwglSetDigitalVideoParametersI3D_PIrI;
        private DwglSetGammaTableI3D_PIaHaHaH mDwglSetGammaTableI3D_PIaHaHaH;
        private DwglSetGammaTableI3D_PIPPP mDwglSetGammaTableI3D_PIPPP;
        private DwglSetGammaTableParametersI3D_PIrI mDwglSetGammaTableParametersI3D_PIrI;
        private DwglSetLayerPaletteEntries_PIIIaI mDwglSetLayerPaletteEntries_PIIIaI;
        private DwglSetLayerPaletteEntries_PIIIP mDwglSetLayerPaletteEntries_PIIIP;
        private DwglSetPbufferAttribARB_PaI mDwglSetPbufferAttribARB_PaI;
        private DwglSetPbufferAttribARB_PP mDwglSetPbufferAttribARB_PP;
        private DwglShareLists_PP mDwglShareLists_PP;
        private DwglSwapBuffers_P mDwglSwapBuffers_P;
        private DwglSwapBuffersMscOML_PLLL mDwglSwapBuffersMscOML_PLLL;
        private DwglSwapIntervalEXT_I mDwglSwapIntervalEXT_I;
        private DwglSwapLayerBuffers_PI mDwglSwapLayerBuffers_PI;
        private DwglSwapLayerBuffersMscOML_PILLL mDwglSwapLayerBuffersMscOML_PILLL;
        private DwglSwapMultipleBuffers_IrX mDwglSwapMultipleBuffers_IrX;
        private DwglUseFontBitmapsA_PIII mDwglUseFontBitmapsA_PIII;
        private DwglUseFontBitmapsW_PIII mDwglUseFontBitmapsW_PIII;
        private DwglUseFontOutlinesA_PIIIFFIX mDwglUseFontOutlinesA_PIIIFFIX;
        private DwglUseFontOutlinesA_PIIIFFIP mDwglUseFontOutlinesA_PIIIFFIP;
        private DwglUseFontOutlinesW_PIIIFFIX mDwglUseFontOutlinesW_PIIIFFIX;
        private DwglUseFontOutlinesW_PIIIFFIP mDwglUseFontOutlinesW_PIIIFFIP;
        private DwglWaitForMscOML_PLLLrLrLrL mDwglWaitForMscOML_PLLLrLrLrL;
        private DwglWaitForMscOML_PLLLPPP mDwglWaitForMscOML_PLLLPPP;
        private DwglWaitForSbcOML_PLPPP mDwglWaitForSbcOML_PLPPP;
















        public bool bglAccum;
        public bool bglActiveStencilFaceEXT;
        public bool bglActiveTexture;
        public bool bglActiveTextureARB;
        public bool bglAddSwapHintRectWIN;
        public bool bglAlphaFragmentOp1ATI;
        public bool bglAlphaFragmentOp2ATI;
        public bool bglAlphaFragmentOp3ATI;
        public bool bglAlphaFunc;
        public bool bglApplyTextureEXT;
        public bool bglAreProgramsResidentNV;
        public bool bglAreTexturesResident;
        public bool bglAreTexturesResidentEXT;
        public bool bglArrayElement;
        public bool bglArrayElementArrayEXT;
        public bool bglArrayElementEXT;
        public bool bglArrayObjectATI;
        public bool bglAsyncMarkerSGIX;
        public bool bglAttachObjectARB;
        public bool bglAttachShader;
        public bool bglBegin;
        public bool bglBeginFragmentShaderATI;
        public bool bglBeginOcclusionQueryNV;
        public bool bglBeginQuery;
        public bool bglBeginQueryARB;
        public bool bglBeginVertexShaderEXT;
        public bool bglBindAttribLocation;
        public bool bglBindAttribLocationARB;
        public bool bglBindBuffer;
        public bool bglBindBufferARB;
        public bool bglBindFragmentShaderATI;
        public bool bglBindFramebufferEXT;
        public bool bglBindLightParameterEXT;
        public bool bglBindMaterialParameterEXT;
        public bool bglBindParameterEXT;
        public bool bglBindProgramARB;
        public bool bglBindProgramNV;
        public bool bglBindRenderbufferEXT;
        public bool bglBindTexGenParameterEXT;
        public bool bglBindTexture;
        public bool bglBindTextureEXT;
        public bool bglBindTextureUnitParameterEXT;
        public bool bglBindVertexArrayAPPLE;
        public bool bglBindVertexShaderEXT;
        public bool bglBinormal3bEXT;
        public bool bglBinormal3bvEXT;
        public bool bglBinormal3dEXT;
        public bool bglBinormal3dvEXT;
        public bool bglBinormal3fEXT;
        public bool bglBinormal3fvEXT;
        public bool bglBinormal3iEXT;
        public bool bglBinormal3ivEXT;
        public bool bglBinormal3sEXT;
        public bool bglBinormal3svEXT;
        public bool bglBinormalPointerEXT;
        public bool bglBitmap;
        public bool bglBlendColor;
        public bool bglBlendColorEXT;
        public bool bglBlendEquation;
        public bool bglBlendEquationEXT;
        public bool bglBlendEquationSeparate;
        public bool bglBlendEquationSeparateEXT;
        public bool bglBlendFunc;
        public bool bglBlendFuncSeparate;
        public bool bglBlendFuncSeparateEXT;
        public bool bglBlendFuncSeparateINGR;
        public bool bglBufferData;
        public bool bglBufferDataARB;
        public bool bglBufferSubData;
        public bool bglBufferSubDataARB;
        public bool bglCallList;
        public bool bglCallLists;
        public bool bglCheckFramebufferStatusEXT;
        public bool bglClampColorARB;
        public bool bglClear;
        public bool bglClearAccum;
        public bool bglClearColor;
        public bool bglClearDepth;
        public bool bglClearIndex;
        public bool bglClearStencil;
        public bool bglClientActiveTexture;
        public bool bglClientActiveTextureARB;
        public bool bglClientActiveVertexStreamATI;
        public bool bglClipPlane;
        public bool bglColor3b;
        public bool bglColor3bv;
        public bool bglColor3d;
        public bool bglColor3dv;
        public bool bglColor3f;
        public bool bglColor3fv;
        public bool bglColor3fVertex3fSUN;
        public bool bglColor3fVertex3fvSUN;
        public bool bglColor3hNV;
        public bool bglColor3hvNV;
        public bool bglColor3i;
        public bool bglColor3iv;
        public bool bglColor3s;
        public bool bglColor3sv;
        public bool bglColor3ub;
        public bool bglColor3ubv;
        public bool bglColor3ui;
        public bool bglColor3uiv;
        public bool bglColor3us;
        public bool bglColor3usv;
        public bool bglColor4b;
        public bool bglColor4bv;
        public bool bglColor4d;
        public bool bglColor4dv;
        public bool bglColor4f;
        public bool bglColor4fNormal3fVertex3fSUN;
        public bool bglColor4fNormal3fVertex3fvSUN;
        public bool bglColor4fv;
        public bool bglColor4hNV;
        public bool bglColor4hvNV;
        public bool bglColor4i;
        public bool bglColor4iv;
        public bool bglColor4s;
        public bool bglColor4sv;
        public bool bglColor4ub;
        public bool bglColor4ubv;
        public bool bglColor4ubVertex2fSUN;
        public bool bglColor4ubVertex2fvSUN;
        public bool bglColor4ubVertex3fSUN;
        public bool bglColor4ubVertex3fvSUN;
        public bool bglColor4ui;
        public bool bglColor4uiv;
        public bool bglColor4us;
        public bool bglColor4usv;
        public bool bglColorFragmentOp1ATI;
        public bool bglColorFragmentOp2ATI;
        public bool bglColorFragmentOp3ATI;
        public bool bglColorMask;
        public bool bglColorMaterial;
        public bool bglColorPointer;
        public bool bglColorPointerEXT;
        public bool bglColorPointerListIBM;
        public bool bglColorPointervINTEL;
        public bool bglColorSubTable;
        public bool bglColorSubTableEXT;
        public bool bglColorTable;
        public bool bglColorTableEXT;
        public bool bglColorTableParameterfv;
        public bool bglColorTableParameterfvSGI;
        public bool bglColorTableParameteriv;
        public bool bglColorTableParameterivSGI;
        public bool bglColorTableSGI;
        public bool bglCombinerInputNV;
        public bool bglCombinerOutputNV;
        public bool bglCombinerParameterfNV;
        public bool bglCombinerParameterfvNV;
        public bool bglCombinerParameteriNV;
        public bool bglCombinerParameterivNV;
        public bool bglCombinerStageParameterfvNV;
        public bool bglCompileShader;
        public bool bglCompileShaderARB;
        public bool bglCompressedTexImage1D;
        public bool bglCompressedTexImage1DARB;
        public bool bglCompressedTexImage2D;
        public bool bglCompressedTexImage2DARB;
        public bool bglCompressedTexImage3D;
        public bool bglCompressedTexImage3DARB;
        public bool bglCompressedTexSubImage1D;
        public bool bglCompressedTexSubImage1DARB;
        public bool bglCompressedTexSubImage2D;
        public bool bglCompressedTexSubImage2DARB;
        public bool bglCompressedTexSubImage3D;
        public bool bglCompressedTexSubImage3DARB;
        public bool bglConvolutionFilter1D;
        public bool bglConvolutionFilter1DEXT;
        public bool bglConvolutionFilter2D;
        public bool bglConvolutionFilter2DEXT;
        public bool bglConvolutionParameterf;
        public bool bglConvolutionParameterfEXT;
        public bool bglConvolutionParameterfv;
        public bool bglConvolutionParameterfvEXT;
        public bool bglConvolutionParameteri;
        public bool bglConvolutionParameteriEXT;
        public bool bglConvolutionParameteriv;
        public bool bglConvolutionParameterivEXT;
        public bool bglCopyColorSubTable;
        public bool bglCopyColorSubTableEXT;
        public bool bglCopyColorTable;
        public bool bglCopyColorTableSGI;
        public bool bglCopyConvolutionFilter1D;
        public bool bglCopyConvolutionFilter1DEXT;
        public bool bglCopyConvolutionFilter2D;
        public bool bglCopyConvolutionFilter2DEXT;
        public bool bglCopyPixels;
        public bool bglCopyTexImage1D;
        public bool bglCopyTexImage1DEXT;
        public bool bglCopyTexImage2D;
        public bool bglCopyTexImage2DEXT;
        public bool bglCopyTexSubImage1D;
        public bool bglCopyTexSubImage1DEXT;
        public bool bglCopyTexSubImage2D;
        public bool bglCopyTexSubImage2DEXT;
        public bool bglCopyTexSubImage3D;
        public bool bglCopyTexSubImage3DEXT;
        public bool bglCreateProgram;
        public bool bglCreateProgramObjectARB;
        public bool bglCreateShader;
        public bool bglCreateShaderObjectARB;
        public bool bglCullFace;
        public bool bglCullParameterdvEXT;
        public bool bglCullParameterfvEXT;
        public bool bglCurrentPaletteMatrixARB;
        public bool bglDeformationMap3dSGIX;
        public bool bglDeformationMap3fSGIX;
        public bool bglDeformSGIX;
        public bool bglDeleteAsyncMarkersSGIX;
        public bool bglDeleteBuffers;
        public bool bglDeleteBuffersARB;
        public bool bglDeleteFencesAPPLE;
        public bool bglDeleteFencesNV;
        public bool bglDeleteFragmentShaderATI;
        public bool bglDeleteFramebuffersEXT;
        public bool bglDeleteLists;
        public bool bglDeleteObjectARB;
        public bool bglDeleteOcclusionQueriesNV;
        public bool bglDeleteProgram;
        public bool bglDeleteProgramsARB;
        public bool bglDeleteProgramsNV;
        public bool bglDeleteQueries;
        public bool bglDeleteQueriesARB;
        public bool bglDeleteRenderbuffersEXT;
        public bool bglDeleteShader;
        public bool bglDeleteTextures;
        public bool bglDeleteTexturesEXT;
        public bool bglDeleteVertexArraysAPPLE;
        public bool bglDeleteVertexShaderEXT;
        public bool bglDepthBoundsEXT;
        public bool bglDepthFunc;
        public bool bglDepthMask;
        public bool bglDepthRange;
        public bool bglDetachObjectARB;
        public bool bglDetachShader;
        public bool bglDetailTexFuncSGIS;
        public bool bglDisable;
        public bool bglDisableClientState;
        public bool bglDisableVariantClientStateEXT;
        public bool bglDisableVertexAttribArray;
        public bool bglDisableVertexAttribArrayARB;
        public bool bglDrawArrays;
        public bool bglDrawArraysEXT;
        public bool bglDrawBuffer;
        public bool bglDrawBuffers;
        public bool bglDrawBuffersARB;
        public bool bglDrawBuffersATI;
        public bool bglDrawElementArrayAPPLE;
        public bool bglDrawElementArrayATI;
        public bool bglDrawElements;
        public bool bglDrawMeshArraysSUN;
        public bool bglDrawPixels;
        public bool bglDrawRangeElementArrayAPPLE;
        public bool bglDrawRangeElementArrayATI;
        public bool bglDrawRangeElements;
        public bool bglDrawRangeElementsEXT;
        public bool bglDrawRangeElementsWIN;
        public bool bglEdgeFlag;
        public bool bglEdgeFlagPointer;
        public bool bglEdgeFlagPointerEXT;
        public bool bglEdgeFlagPointerListIBM;
        public bool bglEdgeFlagv;
        public bool bglElementPointerAPPLE;
        public bool bglElementPointerATI;
        public bool bglEnable;
        public bool bglEnableClientState;
        public bool bglEnableVariantClientStateEXT;
        public bool bglEnableVertexAttribArray;
        public bool bglEnableVertexAttribArrayARB;
        public bool bglEnd;
        public bool bglEndFragmentShaderATI;
        public bool bglEndList;
        public bool bglEndOcclusionQueryNV;
        public bool bglEndQuery;
        public bool bglEndQueryARB;
        public bool bglEndVertexShaderEXT;
        public bool bglEvalCoord1d;
        public bool bglEvalCoord1dv;
        public bool bglEvalCoord1f;
        public bool bglEvalCoord1fv;
        public bool bglEvalCoord2d;
        public bool bglEvalCoord2dv;
        public bool bglEvalCoord2f;
        public bool bglEvalCoord2fv;
        public bool bglEvalMapsNV;
        public bool bglEvalMesh1;
        public bool bglEvalMesh2;
        public bool bglEvalPoint1;
        public bool bglEvalPoint2;
        public bool bglExecuteProgramNV;
        public bool bglExtractComponentEXT;
        public bool bglFeedbackBuffer;
        public bool bglFinalCombinerInputNV;
        public bool bglFinish;
        public bool bglFinishAsyncSGIX;
        public bool bglFinishFenceAPPLE;
        public bool bglFinishFenceNV;
        public bool bglFinishObjectAPPLE;
        public bool bglFinishTextureSUNX;
        public bool bglFlush;
        public bool bglFlushPixelDataRangeNV;
        public bool bglFlushRasterSGIX;
        public bool bglFlushVertexArrayRangeAPPLE;
        public bool bglFlushVertexArrayRangeNV;
        public bool bglFogCoordd;
        public bool bglFogCoorddEXT;
        public bool bglFogCoorddv;
        public bool bglFogCoorddvEXT;
        public bool bglFogCoordf;
        public bool bglFogCoordfEXT;
        public bool bglFogCoordfv;
        public bool bglFogCoordfvEXT;
        public bool bglFogCoordhNV;
        public bool bglFogCoordhvNV;
        public bool bglFogCoordPointer;
        public bool bglFogCoordPointerEXT;
        public bool bglFogCoordPointerListIBM;
        public bool bglFogf;
        public bool bglFogFuncSGIS;
        public bool bglFogfv;
        public bool bglFogi;
        public bool bglFogiv;
        public bool bglFragmentColorMaterialSGIX;
        public bool bglFragmentLightfSGIX;
        public bool bglFragmentLightfvSGIX;
        public bool bglFragmentLightiSGIX;
        public bool bglFragmentLightivSGIX;
        public bool bglFragmentLightModelfSGIX;
        public bool bglFragmentLightModelfvSGIX;
        public bool bglFragmentLightModeliSGIX;
        public bool bglFragmentLightModelivSGIX;
        public bool bglFragmentMaterialfSGIX;
        public bool bglFragmentMaterialfvSGIX;
        public bool bglFragmentMaterialiSGIX;
        public bool bglFragmentMaterialivSGIX;
        public bool bglFramebufferRenderbufferEXT;
        public bool bglFramebufferTexture1DEXT;
        public bool bglFramebufferTexture2DEXT;
        public bool bglFramebufferTexture3DEXT;
        public bool bglFrameZoomSGIX;
        public bool bglFreeObjectBufferATI;
        public bool bglFrontFace;
        public bool bglFrustum;
        public bool bglGenAsyncMarkersSGIX;
        public bool bglGenBuffers;
        public bool bglGenBuffersARB;
        public bool bglGenerateMipmapEXT;
        public bool bglGenFencesAPPLE;
        public bool bglGenFencesNV;
        public bool bglGenFragmentShadersATI;
        public bool bglGenFramebuffersEXT;
        public bool bglGenLists;
        public bool bglGenOcclusionQueriesNV;
        public bool bglGenProgramsARB;
        public bool bglGenProgramsNV;
        public bool bglGenQueries;
        public bool bglGenQueriesARB;
        public bool bglGenRenderbuffersEXT;
        public bool bglGenSymbolsEXT;
        public bool bglGenTextures;
        public bool bglGenTexturesEXT;
        public bool bglGenVertexArraysAPPLE;
        public bool bglGenVertexShadersEXT;
        public bool bglGetActiveAttrib;
        public bool bglGetActiveAttribARB;
        public bool bglGetActiveUniform;
        public bool bglGetActiveUniformARB;
        public bool bglGetArrayObjectfvATI;
        public bool bglGetArrayObjectivATI;
        public bool bglGetAttachedObjectsARB;
        public bool bglGetAttachedShaders;
        public bool bglGetAttribLocation;
        public bool bglGetAttribLocationARB;
        public bool bglGetBooleanv;
        public bool bglGetBufferParameteriv;
        public bool bglGetBufferParameterivARB;
        public bool bglGetBufferPointerv;
        public bool bglGetBufferPointervARB;
        public bool bglGetBufferSubData;
        public bool bglGetBufferSubDataARB;
        public bool bglGetClipPlane;
        public bool bglGetColorTable;
        public bool bglGetColorTableEXT;
        public bool bglGetColorTableParameterfv;
        public bool bglGetColorTableParameterfvEXT;
        public bool bglGetColorTableParameterfvSGI;
        public bool bglGetColorTableParameteriv;
        public bool bglGetColorTableParameterivEXT;
        public bool bglGetColorTableParameterivSGI;
        public bool bglGetColorTableSGI;
        public bool bglGetCombinerInputParameterfvNV;
        public bool bglGetCombinerInputParameterivNV;
        public bool bglGetCombinerOutputParameterfvNV;
        public bool bglGetCombinerOutputParameterivNV;
        public bool bglGetCombinerStageParameterfvNV;
        public bool bglGetCompressedTexImage;
        public bool bglGetCompressedTexImageARB;
        public bool bglGetConvolutionFilter;
        public bool bglGetConvolutionFilterEXT;
        public bool bglGetConvolutionParameterfv;
        public bool bglGetConvolutionParameterfvEXT;
        public bool bglGetConvolutionParameteriv;
        public bool bglGetConvolutionParameterivEXT;
        public bool bglGetDetailTexFuncSGIS;
        public bool bglGetDoublev;
        public bool bglGetError;
        public bool bglGetFenceivNV;
        public bool bglGetFinalCombinerInputParameterfvNV;
        public bool bglGetFinalCombinerInputParameterivNV;
        public bool bglGetFloatv;
        public bool bglGetFogFuncSGIS;
        public bool bglGetFragmentLightfvSGIX;
        public bool bglGetFragmentLightivSGIX;
        public bool bglGetFragmentMaterialfvSGIX;
        public bool bglGetFragmentMaterialivSGIX;
        public bool bglGetFramebufferAttachmentParameterivEXT;
        public bool bglGetHandleARB;
        public bool bglGetHistogram;
        public bool bglGetHistogramEXT;
        public bool bglGetHistogramParameterfv;
        public bool bglGetHistogramParameterfvEXT;
        public bool bglGetHistogramParameteriv;
        public bool bglGetHistogramParameterivEXT;
        public bool bglGetImageTransformParameterfvHP;
        public bool bglGetImageTransformParameterivHP;
        public bool bglGetInfoLogARB;
        public bool bglGetInstrumentsSGIX;
        public bool bglGetIntegerv;
        public bool bglGetInvariantBooleanvEXT;
        public bool bglGetInvariantFloatvEXT;
        public bool bglGetInvariantIntegervEXT;
        public bool bglGetLightfv;
        public bool bglGetLightiv;
        public bool bglGetListParameterfvSGIX;
        public bool bglGetListParameterivSGIX;
        public bool bglGetLocalConstantBooleanvEXT;
        public bool bglGetLocalConstantFloatvEXT;
        public bool bglGetLocalConstantIntegervEXT;
        public bool bglGetMapAttribParameterfvNV;
        public bool bglGetMapAttribParameterivNV;
        public bool bglGetMapControlPointsNV;
        public bool bglGetMapdv;
        public bool bglGetMapfv;
        public bool bglGetMapiv;
        public bool bglGetMapParameterfvNV;
        public bool bglGetMapParameterivNV;
        public bool bglGetMaterialfv;
        public bool bglGetMaterialiv;
        public bool bglGetMinmax;
        public bool bglGetMinmaxEXT;
        public bool bglGetMinmaxParameterfv;
        public bool bglGetMinmaxParameterfvEXT;
        public bool bglGetMinmaxParameteriv;
        public bool bglGetMinmaxParameterivEXT;
        public bool bglGetObjectBufferfvATI;
        public bool bglGetObjectBufferivATI;
        public bool bglGetObjectParameterfvARB;
        public bool bglGetObjectParameterivARB;
        public bool bglGetOcclusionQueryivNV;
        public bool bglGetOcclusionQueryuivNV;
        public bool bglGetPixelMapfv;
        public bool bglGetPixelMapuiv;
        public bool bglGetPixelMapusv;
        public bool bglGetPixelTexGenParameterfvSGIS;
        public bool bglGetPixelTexGenParameterivSGIS;
        public bool bglGetPointerv;
        public bool bglGetPointervEXT;
        public bool bglGetPolygonStipple;
        public bool bglGetProgramEnvParameterdvARB;
        public bool bglGetProgramEnvParameterfvARB;
        public bool bglGetProgramInfoLog;
        public bool bglGetProgramiv;
        public bool bglGetProgramivARB;
        public bool bglGetProgramivNV;
        public bool bglGetProgramLocalParameterdvARB;
        public bool bglGetProgramLocalParameterfvARB;
        public bool bglGetProgramNamedParameterdvNV;
        public bool bglGetProgramNamedParameterfvNV;
        public bool bglGetProgramParameterdvNV;
        public bool bglGetProgramParameterfvNV;
        public bool bglGetProgramStringARB;
        public bool bglGetProgramStringNV;
        public bool bglGetQueryiv;
        public bool bglGetQueryivARB;
        public bool bglGetQueryObjectiv;
        public bool bglGetQueryObjectivARB;
        public bool bglGetQueryObjectuiv;
        public bool bglGetQueryObjectuivARB;
        public bool bglGetRenderbufferParameterivEXT;
        public bool bglGetSeparableFilter;
        public bool bglGetSeparableFilterEXT;
        public bool bglGetShaderInfoLog;
        public bool bglGetShaderiv;
        public bool bglGetShaderSource;
        public bool bglGetShaderSourceARB;
        public bool bglGetSharpenTexFuncSGIS;
        public bool bglGetString;
        public bool bglGetTexBumpParameterfvATI;
        public bool bglGetTexBumpParameterivATI;
        public bool bglGetTexEnvfv;
        public bool bglGetTexEnviv;
        public bool bglGetTexFilterFuncSGIS;
        public bool bglGetTexGendv;
        public bool bglGetTexGenfv;
        public bool bglGetTexGeniv;
        public bool bglGetTexImage;
        public bool bglGetTexLevelParameterfv;
        public bool bglGetTexLevelParameteriv;
        public bool bglGetTexParameterfv;
        public bool bglGetTexParameteriv;
        public bool bglGetTrackMatrixivNV;
        public bool bglGetUniformfv;
        public bool bglGetUniformfvARB;
        public bool bglGetUniformiv;
        public bool bglGetUniformivARB;
        public bool bglGetUniformLocation;
        public bool bglGetUniformLocationARB;
        public bool bglGetVariantArrayObjectfvATI;
        public bool bglGetVariantArrayObjectivATI;
        public bool bglGetVariantBooleanvEXT;
        public bool bglGetVariantFloatvEXT;
        public bool bglGetVariantIntegervEXT;
        public bool bglGetVariantPointervEXT;
        public bool bglGetVertexAttribArrayObjectfvATI;
        public bool bglGetVertexAttribArrayObjectivATI;
        public bool bglGetVertexAttribdv;
        public bool bglGetVertexAttribdvARB;
        public bool bglGetVertexAttribdvNV;
        public bool bglGetVertexAttribfv;
        public bool bglGetVertexAttribfvARB;
        public bool bglGetVertexAttribfvNV;
        public bool bglGetVertexAttribiv;
        public bool bglGetVertexAttribivARB;
        public bool bglGetVertexAttribivNV;
        public bool bglGetVertexAttribPointerv;
        public bool bglGetVertexAttribPointervARB;
        public bool bglGetVertexAttribPointervNV;
        public bool bglGlobalAlphaFactorbSUN;
        public bool bglGlobalAlphaFactordSUN;
        public bool bglGlobalAlphaFactorfSUN;
        public bool bglGlobalAlphaFactoriSUN;
        public bool bglGlobalAlphaFactorsSUN;
        public bool bglGlobalAlphaFactorubSUN;
        public bool bglGlobalAlphaFactoruiSUN;
        public bool bglGlobalAlphaFactorusSUN;
        public bool bglHint;
        public bool bglHintPGI;
        public bool bglHistogram;
        public bool bglHistogramEXT;
        public bool bglIglooInterfaceSGIX;
        public bool bglImageTransformParameterfHP;
        public bool bglImageTransformParameterfvHP;
        public bool bglImageTransformParameteriHP;
        public bool bglImageTransformParameterivHP;
        public bool bglIndexd;
        public bool bglIndexdv;
        public bool bglIndexf;
        public bool bglIndexFuncEXT;
        public bool bglIndexfv;
        public bool bglIndexi;
        public bool bglIndexiv;
        public bool bglIndexMask;
        public bool bglIndexMaterialEXT;
        public bool bglIndexPointer;
        public bool bglIndexPointerEXT;
        public bool bglIndexPointerListIBM;
        public bool bglIndexs;
        public bool bglIndexsv;
        public bool bglIndexub;
        public bool bglIndexubv;
        public bool bglInitNames;
        public bool bglInsertComponentEXT;
        public bool bglInstrumentsBufferSGIX;
        public bool bglInterleavedArrays;
        public bool bglIsAsyncMarkerSGIX;
        public bool bglIsBuffer;
        public bool bglIsBufferARB;
        public bool bglIsEnabled;
        public bool bglIsFenceAPPLE;
        public bool bglIsFenceNV;
        public bool bglIsFramebufferEXT;
        public bool bglIsList;
        public bool bglIsObjectBufferATI;
        public bool bglIsOcclusionQueryNV;
        public bool bglIsProgram;
        public bool bglIsProgramARB;
        public bool bglIsProgramNV;
        public bool bglIsQuery;
        public bool bglIsQueryARB;
        public bool bglIsRenderbufferEXT;
        public bool bglIsShader;
        public bool bglIsTexture;
        public bool bglIsTextureEXT;
        public bool bglIsVariantEnabledEXT;
        public bool bglIsVertexArrayAPPLE;
        public bool bglLightEnviSGIX;
        public bool bglLightf;
        public bool bglLightfv;
        public bool bglLighti;
        public bool bglLightiv;
        public bool bglLightModelf;
        public bool bglLightModelfv;
        public bool bglLightModeli;
        public bool bglLightModeliv;
        public bool bglLineStipple;
        public bool bglLineWidth;
        public bool bglLinkProgram;
        public bool bglLinkProgramARB;
        public bool bglListBase;
        public bool bglListParameterfSGIX;
        public bool bglListParameterfvSGIX;
        public bool bglListParameteriSGIX;
        public bool bglListParameterivSGIX;
        public bool bglLoadIdentity;
        public bool bglLoadIdentityDeformationMapSGIX;
        public bool bglLoadMatrixd;
        public bool bglLoadMatrixf;
        public bool bglLoadName;
        public bool bglLoadProgramNV;
        public bool bglLoadTransposeMatrixd;
        public bool bglLoadTransposeMatrixdARB;
        public bool bglLoadTransposeMatrixf;
        public bool bglLoadTransposeMatrixfARB;
        public bool bglLockArraysEXT;
        public bool bglLogicOp;
        public bool bglMap1d;
        public bool bglMap1f;
        public bool bglMap2d;
        public bool bglMap2f;
        public bool bglMapBuffer;
        public bool bglMapBufferARB;
        public bool bglMapControlPointsNV;
        public bool bglMapGrid1d;
        public bool bglMapGrid1f;
        public bool bglMapGrid2d;
        public bool bglMapGrid2f;
        public bool bglMapObjectBufferATI;
        public bool bglMapParameterfvNV;
        public bool bglMapParameterivNV;
        public bool bglMaterialf;
        public bool bglMaterialfv;
        public bool bglMateriali;
        public bool bglMaterialiv;
        public bool bglMatrixIndexPointerARB;
        public bool bglMatrixIndexubvARB;
        public bool bglMatrixIndexuivARB;
        public bool bglMatrixIndexusvARB;
        public bool bglMatrixMode;
        public bool bglMinmax;
        public bool bglMinmaxEXT;
        public bool bglMultiDrawArrays;
        public bool bglMultiDrawArraysEXT;
        public bool bglMultiDrawElementArrayAPPLE;
        public bool bglMultiDrawElements;
        public bool bglMultiDrawElementsEXT;
        public bool bglMultiDrawRangeElementArrayAPPLE;
        public bool bglMultiModeDrawArraysIBM;
        public bool bglMultiModeDrawElementsIBM;
        public bool bglMultiTexCoord1d;
        public bool bglMultiTexCoord1dARB;
        public bool bglMultiTexCoord1dv;
        public bool bglMultiTexCoord1dvARB;
        public bool bglMultiTexCoord1f;
        public bool bglMultiTexCoord1fARB;
        public bool bglMultiTexCoord1fv;
        public bool bglMultiTexCoord1fvARB;
        public bool bglMultiTexCoord1hNV;
        public bool bglMultiTexCoord1hvNV;
        public bool bglMultiTexCoord1i;
        public bool bglMultiTexCoord1iARB;
        public bool bglMultiTexCoord1iv;
        public bool bglMultiTexCoord1ivARB;
        public bool bglMultiTexCoord1s;
        public bool bglMultiTexCoord1sARB;
        public bool bglMultiTexCoord1sv;
        public bool bglMultiTexCoord1svARB;
        public bool bglMultiTexCoord2d;
        public bool bglMultiTexCoord2dARB;
        public bool bglMultiTexCoord2dv;
        public bool bglMultiTexCoord2dvARB;
        public bool bglMultiTexCoord2f;
        public bool bglMultiTexCoord2fARB;
        public bool bglMultiTexCoord2fv;
        public bool bglMultiTexCoord2fvARB;
        public bool bglMultiTexCoord2hNV;
        public bool bglMultiTexCoord2hvNV;
        public bool bglMultiTexCoord2i;
        public bool bglMultiTexCoord2iARB;
        public bool bglMultiTexCoord2iv;
        public bool bglMultiTexCoord2ivARB;
        public bool bglMultiTexCoord2s;
        public bool bglMultiTexCoord2sARB;
        public bool bglMultiTexCoord2sv;
        public bool bglMultiTexCoord2svARB;
        public bool bglMultiTexCoord3d;
        public bool bglMultiTexCoord3dARB;
        public bool bglMultiTexCoord3dv;
        public bool bglMultiTexCoord3dvARB;
        public bool bglMultiTexCoord3f;
        public bool bglMultiTexCoord3fARB;
        public bool bglMultiTexCoord3fv;
        public bool bglMultiTexCoord3fvARB;
        public bool bglMultiTexCoord3hNV;
        public bool bglMultiTexCoord3hvNV;
        public bool bglMultiTexCoord3i;
        public bool bglMultiTexCoord3iARB;
        public bool bglMultiTexCoord3iv;
        public bool bglMultiTexCoord3ivARB;
        public bool bglMultiTexCoord3s;
        public bool bglMultiTexCoord3sARB;
        public bool bglMultiTexCoord3sv;
        public bool bglMultiTexCoord3svARB;
        public bool bglMultiTexCoord4d;
        public bool bglMultiTexCoord4dARB;
        public bool bglMultiTexCoord4dv;
        public bool bglMultiTexCoord4dvARB;
        public bool bglMultiTexCoord4f;
        public bool bglMultiTexCoord4fARB;
        public bool bglMultiTexCoord4fv;
        public bool bglMultiTexCoord4fvARB;
        public bool bglMultiTexCoord4hNV;
        public bool bglMultiTexCoord4hvNV;
        public bool bglMultiTexCoord4i;
        public bool bglMultiTexCoord4iARB;
        public bool bglMultiTexCoord4iv;
        public bool bglMultiTexCoord4ivARB;
        public bool bglMultiTexCoord4s;
        public bool bglMultiTexCoord4sARB;
        public bool bglMultiTexCoord4sv;
        public bool bglMultiTexCoord4svARB;
        public bool bglMultMatrixd;
        public bool bglMultMatrixf;
        public bool bglMultTransposeMatrixd;
        public bool bglMultTransposeMatrixdARB;
        public bool bglMultTransposeMatrixf;
        public bool bglMultTransposeMatrixfARB;
        public bool bglNewList;
        public bool bglNewObjectBufferATI;
        public bool bglNormal3b;
        public bool bglNormal3bv;
        public bool bglNormal3d;
        public bool bglNormal3dv;
        public bool bglNormal3f;
        public bool bglNormal3fv;
        public bool bglNormal3fVertex3fSUN;
        public bool bglNormal3fVertex3fvSUN;
        public bool bglNormal3hNV;
        public bool bglNormal3hvNV;
        public bool bglNormal3i;
        public bool bglNormal3iv;
        public bool bglNormal3s;
        public bool bglNormal3sv;
        public bool bglNormalPointer;
        public bool bglNormalPointerEXT;
        public bool bglNormalPointerListIBM;
        public bool bglNormalPointervINTEL;
        public bool bglNormalStream3bATI;
        public bool bglNormalStream3bvATI;
        public bool bglNormalStream3dATI;
        public bool bglNormalStream3dvATI;
        public bool bglNormalStream3fATI;
        public bool bglNormalStream3fvATI;
        public bool bglNormalStream3iATI;
        public bool bglNormalStream3ivATI;
        public bool bglNormalStream3sATI;
        public bool bglNormalStream3svATI;
        public bool bglOrtho;
        public bool bglPassTexCoordATI;
        public bool bglPassThrough;
        public bool bglPixelDataRangeNV;
        public bool bglPixelMapfv;
        public bool bglPixelMapuiv;
        public bool bglPixelMapusv;
        public bool bglPixelStoref;
        public bool bglPixelStorei;
        public bool bglPixelTexGenParameterfSGIS;
        public bool bglPixelTexGenParameterfvSGIS;
        public bool bglPixelTexGenParameteriSGIS;
        public bool bglPixelTexGenParameterivSGIS;
        public bool bglPixelTexGenSGIX;
        public bool bglPixelTransferf;
        public bool bglPixelTransferi;
        public bool bglPixelTransformParameterfEXT;
        public bool bglPixelTransformParameterfvEXT;
        public bool bglPixelTransformParameteriEXT;
        public bool bglPixelTransformParameterivEXT;
        public bool bglPixelZoom;
        public bool bglPNTrianglesfATI;
        public bool bglPNTrianglesiATI;
        public bool bglPointParameterf;
        public bool bglPointParameterfARB;
        public bool bglPointParameterfEXT;
        public bool bglPointParameterfSGIS;
        public bool bglPointParameterfv;
        public bool bglPointParameterfvARB;
        public bool bglPointParameterfvEXT;
        public bool bglPointParameterfvSGIS;
        public bool bglPointParameteri;
        public bool bglPointParameteriNV;
        public bool bglPointParameteriv;
        public bool bglPointParameterivNV;
        public bool bglPointSize;
        public bool bglPollAsyncSGIX;
        public bool bglPollInstrumentsSGIX;
        public bool bglPolygonMode;
        public bool bglPolygonOffset;
        public bool bglPolygonOffsetEXT;
        public bool bglPolygonStipple;
        public bool bglPopAttrib;
        public bool bglPopClientAttrib;
        public bool bglPopMatrix;
        public bool bglPopName;
        public bool bglPrimitiveRestartIndexNV;
        public bool bglPrimitiveRestartNV;
        public bool bglPrioritizeTextures;
        public bool bglPrioritizeTexturesEXT;
        public bool bglProgramEnvParameter4dARB;
        public bool bglProgramEnvParameter4dvARB;
        public bool bglProgramEnvParameter4fARB;
        public bool bglProgramEnvParameter4fvARB;
        public bool bglProgramLocalParameter4dARB;
        public bool bglProgramLocalParameter4dvARB;
        public bool bglProgramLocalParameter4fARB;
        public bool bglProgramLocalParameter4fvARB;
        public bool bglProgramNamedParameter4dNV;
        public bool bglProgramNamedParameter4dvNV;
        public bool bglProgramNamedParameter4fNV;
        public bool bglProgramNamedParameter4fvNV;
        public bool bglProgramParameter4dNV;
        public bool bglProgramParameter4dvNV;
        public bool bglProgramParameter4fNV;
        public bool bglProgramParameter4fvNV;
        public bool bglProgramParameters4dvNV;
        public bool bglProgramParameters4fvNV;
        public bool bglProgramStringARB;
        public bool bglPushAttrib;
        public bool bglPushClientAttrib;
        public bool bglPushMatrix;
        public bool bglPushName;
        public bool bglRasterPos2d;
        public bool bglRasterPos2dv;
        public bool bglRasterPos2f;
        public bool bglRasterPos2fv;
        public bool bglRasterPos2i;
        public bool bglRasterPos2iv;
        public bool bglRasterPos2s;
        public bool bglRasterPos2sv;
        public bool bglRasterPos3d;
        public bool bglRasterPos3dv;
        public bool bglRasterPos3f;
        public bool bglRasterPos3fv;
        public bool bglRasterPos3i;
        public bool bglRasterPos3iv;
        public bool bglRasterPos3s;
        public bool bglRasterPos3sv;
        public bool bglRasterPos4d;
        public bool bglRasterPos4dv;
        public bool bglRasterPos4f;
        public bool bglRasterPos4fv;
        public bool bglRasterPos4i;
        public bool bglRasterPos4iv;
        public bool bglRasterPos4s;
        public bool bglRasterPos4sv;
        public bool bglReadBuffer;
        public bool bglReadInstrumentsSGIX;
        public bool bglReadPixels;
        public bool bglRectd;
        public bool bglRectdv;
        public bool bglRectf;
        public bool bglRectfv;
        public bool bglRecti;
        public bool bglRectiv;
        public bool bglRects;
        public bool bglRectsv;
        public bool bglReferencePlaneSGIX;
        public bool bglRenderbufferStorageEXT;
        public bool bglRenderMode;
        public bool bglReplacementCodePointerSUN;
        public bool bglReplacementCodeubSUN;
        public bool bglReplacementCodeubvSUN;
        public bool bglReplacementCodeuiColor3fVertex3fSUN;
        public bool bglReplacementCodeuiColor3fVertex3fvSUN;
        public bool bglReplacementCodeuiColor4fNormal3fVertex3fSUN;
        public bool bglReplacementCodeuiColor4fNormal3fVertex3fvSUN;
        public bool bglReplacementCodeuiColor4ubVertex3fSUN;
        public bool bglReplacementCodeuiColor4ubVertex3fvSUN;
        public bool bglReplacementCodeuiNormal3fVertex3fSUN;
        public bool bglReplacementCodeuiNormal3fVertex3fvSUN;
        public bool bglReplacementCodeuiSUN;
        public bool bglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
        public bool bglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
        public bool bglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
        public bool bglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
        public bool bglReplacementCodeuiTexCoord2fVertex3fSUN;
        public bool bglReplacementCodeuiTexCoord2fVertex3fvSUN;
        public bool bglReplacementCodeuiVertex3fSUN;
        public bool bglReplacementCodeuiVertex3fvSUN;
        public bool bglReplacementCodeuivSUN;
        public bool bglReplacementCodeusSUN;
        public bool bglReplacementCodeusvSUN;
        public bool bglRequestResidentProgramsNV;
        public bool bglResetHistogram;
        public bool bglResetHistogramEXT;
        public bool bglResetMinmax;
        public bool bglResetMinmaxEXT;
        public bool bglResizeBuffersMESA;
        public bool bglRotated;
        public bool bglRotatef;
        public bool bglSampleCoverage;
        public bool bglSampleCoverageARB;
        public bool bglSampleMapATI;
        public bool bglSampleMaskEXT;
        public bool bglSampleMaskSGIS;
        public bool bglSamplePatternEXT;
        public bool bglSamplePatternSGIS;
        public bool bglScaled;
        public bool bglScalef;
        public bool bglScissor;
        public bool bglSecondaryColor3b;
        public bool bglSecondaryColor3bEXT;
        public bool bglSecondaryColor3bv;
        public bool bglSecondaryColor3bvEXT;
        public bool bglSecondaryColor3d;
        public bool bglSecondaryColor3dEXT;
        public bool bglSecondaryColor3dv;
        public bool bglSecondaryColor3dvEXT;
        public bool bglSecondaryColor3f;
        public bool bglSecondaryColor3fEXT;
        public bool bglSecondaryColor3fv;
        public bool bglSecondaryColor3fvEXT;
        public bool bglSecondaryColor3hNV;
        public bool bglSecondaryColor3hvNV;
        public bool bglSecondaryColor3i;
        public bool bglSecondaryColor3iEXT;
        public bool bglSecondaryColor3iv;
        public bool bglSecondaryColor3ivEXT;
        public bool bglSecondaryColor3s;
        public bool bglSecondaryColor3sEXT;
        public bool bglSecondaryColor3sv;
        public bool bglSecondaryColor3svEXT;
        public bool bglSecondaryColor3ub;
        public bool bglSecondaryColor3ubEXT;
        public bool bglSecondaryColor3ubv;
        public bool bglSecondaryColor3ubvEXT;
        public bool bglSecondaryColor3ui;
        public bool bglSecondaryColor3uiEXT;
        public bool bglSecondaryColor3uiv;
        public bool bglSecondaryColor3uivEXT;
        public bool bglSecondaryColor3us;
        public bool bglSecondaryColor3usEXT;
        public bool bglSecondaryColor3usv;
        public bool bglSecondaryColor3usvEXT;
        public bool bglSecondaryColorPointer;
        public bool bglSecondaryColorPointerEXT;
        public bool bglSecondaryColorPointerListIBM;
        public bool bglSelectBuffer;
        public bool bglSeparableFilter2D;
        public bool bglSeparableFilter2DEXT;
        public bool bglSetFenceAPPLE;
        public bool bglSetFenceNV;
        public bool bglSetFragmentShaderConstantATI;
        public bool bglSetInvariantEXT;
        public bool bglSetLocalConstantEXT;
        public bool bglShadeModel;
        public bool bglShaderOp1EXT;
        public bool bglShaderOp2EXT;
        public bool bglShaderOp3EXT;
        public bool bglShaderSource;
        public bool bglShaderSourceARB;
        public bool bglSharpenTexFuncSGIS;
        public bool bglSpriteParameterfSGIX;
        public bool bglSpriteParameterfvSGIX;
        public bool bglSpriteParameteriSGIX;
        public bool bglSpriteParameterivSGIX;
        public bool bglStartInstrumentsSGIX;
        public bool bglStencilFunc;
        public bool bglStencilFuncSeparate;
        public bool bglStencilFuncSeparateATI;
        public bool bglStencilMask;
        public bool bglStencilMaskSeparate;
        public bool bglStencilOp;
        public bool bglStencilOpSeparate;
        public bool bglStencilOpSeparateATI;
        public bool bglStopInstrumentsSGIX;
        public bool bglStringMarkerGREMEDY;
        public bool bglSwizzleEXT;
        public bool bglTagSampleBufferSGIX;
        public bool bglTangent3bEXT;
        public bool bglTangent3bvEXT;
        public bool bglTangent3dEXT;
        public bool bglTangent3dvEXT;
        public bool bglTangent3fEXT;
        public bool bglTangent3fvEXT;
        public bool bglTangent3iEXT;
        public bool bglTangent3ivEXT;
        public bool bglTangent3sEXT;
        public bool bglTangent3svEXT;
        public bool bglTangentPointerEXT;
        public bool bglTbufferMask3DFX;
        public bool bglTestFenceAPPLE;
        public bool bglTestFenceNV;
        public bool bglTestObjectAPPLE;
        public bool bglTexBumpParameterfvATI;
        public bool bglTexBumpParameterivATI;
        public bool bglTexCoord1d;
        public bool bglTexCoord1dv;
        public bool bglTexCoord1f;
        public bool bglTexCoord1fv;
        public bool bglTexCoord1hNV;
        public bool bglTexCoord1hvNV;
        public bool bglTexCoord1i;
        public bool bglTexCoord1iv;
        public bool bglTexCoord1s;
        public bool bglTexCoord1sv;
        public bool bglTexCoord2d;
        public bool bglTexCoord2dv;
        public bool bglTexCoord2f;
        public bool bglTexCoord2fColor3fVertex3fSUN;
        public bool bglTexCoord2fColor3fVertex3fvSUN;
        public bool bglTexCoord2fColor4fNormal3fVertex3fSUN;
        public bool bglTexCoord2fColor4fNormal3fVertex3fvSUN;
        public bool bglTexCoord2fColor4ubVertex3fSUN;
        public bool bglTexCoord2fColor4ubVertex3fvSUN;
        public bool bglTexCoord2fNormal3fVertex3fSUN;
        public bool bglTexCoord2fNormal3fVertex3fvSUN;
        public bool bglTexCoord2fv;
        public bool bglTexCoord2fVertex3fSUN;
        public bool bglTexCoord2fVertex3fvSUN;
        public bool bglTexCoord2hNV;
        public bool bglTexCoord2hvNV;
        public bool bglTexCoord2i;
        public bool bglTexCoord2iv;
        public bool bglTexCoord2s;
        public bool bglTexCoord2sv;
        public bool bglTexCoord3d;
        public bool bglTexCoord3dv;
        public bool bglTexCoord3f;
        public bool bglTexCoord3fv;
        public bool bglTexCoord3hNV;
        public bool bglTexCoord3hvNV;
        public bool bglTexCoord3i;
        public bool bglTexCoord3iv;
        public bool bglTexCoord3s;
        public bool bglTexCoord3sv;
        public bool bglTexCoord4d;
        public bool bglTexCoord4dv;
        public bool bglTexCoord4f;
        public bool bglTexCoord4fColor4fNormal3fVertex4fSUN;
        public bool bglTexCoord4fColor4fNormal3fVertex4fvSUN;
        public bool bglTexCoord4fv;
        public bool bglTexCoord4fVertex4fSUN;
        public bool bglTexCoord4fVertex4fvSUN;
        public bool bglTexCoord4hNV;
        public bool bglTexCoord4hvNV;
        public bool bglTexCoord4i;
        public bool bglTexCoord4iv;
        public bool bglTexCoord4s;
        public bool bglTexCoord4sv;
        public bool bglTexCoordPointer;
        public bool bglTexCoordPointerEXT;
        public bool bglTexCoordPointerListIBM;
        public bool bglTexCoordPointervINTEL;
        public bool bglTexEnvf;
        public bool bglTexEnvfv;
        public bool bglTexEnvi;
        public bool bglTexEnviv;
        public bool bglTexFilterFuncSGIS;
        public bool bglTexGend;
        public bool bglTexGendv;
        public bool bglTexGenf;
        public bool bglTexGenfv;
        public bool bglTexGeni;
        public bool bglTexGeniv;
        public bool bglTexImage1D;
        public bool bglTexImage2D;
        public bool bglTexImage3D;
        public bool bglTexImage3DEXT;
        public bool bglTexImage4DSGIS;
        public bool bglTexParameterf;
        public bool bglTexParameterfv;
        public bool bglTexParameteri;
        public bool bglTexParameteriv;
        public bool bglTexSubImage1D;
        public bool bglTexSubImage1DEXT;
        public bool bglTexSubImage2D;
        public bool bglTexSubImage2DEXT;
        public bool bglTexSubImage3D;
        public bool bglTexSubImage3DEXT;
        public bool bglTexSubImage4DSGIS;
        public bool bglTextureColorMaskSGIS;
        public bool bglTextureLightEXT;
        public bool bglTextureMaterialEXT;
        public bool bglTextureNormalEXT;
        public bool bglTrackMatrixNV;
        public bool bglTranslated;
        public bool bglTranslatef;
        public bool bgluBeginCurve;
        public bool bgluBeginPolygon;
        public bool bgluBeginSurface;
        public bool bgluBeginTrim;
        public bool bgluBuild1DMipmaps;
        public bool bgluBuild2DMipmaps;
        public bool bgluCylinder;
        public bool bgluDeleteNurbsRenderer;
        public bool bgluDeleteQuadric;
        public bool bgluDeleteTess;
        public bool bgluDisk;
        public bool bgluEndCurve;
        public bool bgluEndPolygon;
        public bool bgluEndSurface;
        public bool bgluEndTrim;
        public bool bgluErrorString;
        public bool bgluErrorUnicodeStringEXT;
        public bool bgluGetNurbsProperty;
        public bool bgluGetString;
        public bool bgluGetTessProperty;
        public bool bgluLoadSamplingMatrices;
        public bool bgluLookAt;
        public bool bgluNewNurbsRenderer;
        public bool bgluNewQuadric;
        public bool bgluNewTess;
        public bool bgluNextContour;
        public bool bglUniform1f;
        public bool bglUniform1fARB;
        public bool bglUniform1fv;
        public bool bglUniform1fvARB;
        public bool bglUniform1i;
        public bool bglUniform1iARB;
        public bool bglUniform1iv;
        public bool bglUniform1ivARB;
        public bool bglUniform2f;
        public bool bglUniform2fARB;
        public bool bglUniform2fv;
        public bool bglUniform2fvARB;
        public bool bglUniform2i;
        public bool bglUniform2iARB;
        public bool bglUniform2iv;
        public bool bglUniform2ivARB;
        public bool bglUniform3f;
        public bool bglUniform3fARB;
        public bool bglUniform3fv;
        public bool bglUniform3fvARB;
        public bool bglUniform3i;
        public bool bglUniform3iARB;
        public bool bglUniform3iv;
        public bool bglUniform3ivARB;
        public bool bglUniform4f;
        public bool bglUniform4fARB;
        public bool bglUniform4fv;
        public bool bglUniform4fvARB;
        public bool bglUniform4i;
        public bool bglUniform4iARB;
        public bool bglUniform4iv;
        public bool bglUniform4ivARB;
        public bool bglUniformMatrix2fv;
        public bool bglUniformMatrix2fvARB;
        public bool bglUniformMatrix3fv;
        public bool bglUniformMatrix3fvARB;
        public bool bglUniformMatrix4fv;
        public bool bglUniformMatrix4fvARB;
        public bool bglUnlockArraysEXT;
        public bool bglUnmapBuffer;
        public bool bglUnmapBufferARB;
        public bool bglUnmapObjectBufferATI;
        public bool bgluNurbsCallback;
        public bool bgluNurbsCurve;
        public bool bgluNurbsProperty;
        public bool bgluNurbsSurface;
        public bool bgluOrtho2D;
        public bool bgluPartialDisk;
        public bool bglUpdateObjectBufferATI;
        public bool bgluPerspective;
        public bool bgluPickMatrix;
        public bool bgluProject;
        public bool bgluPwlCurve;
        public bool bgluQuadricCallback;
        public bool bgluQuadricDrawStyle;
        public bool bgluQuadricNormals;
        public bool bgluQuadricOrientation;
        public bool bgluQuadricTexture;
        public bool bgluScaleImage;
        public bool bglUseProgram;
        public bool bglUseProgramObjectARB;
        public bool bgluSphere;
        public bool bgluTessBeginContour;
        public bool bgluTessBeginPolygon;
        public bool bgluTessCallback;
        public bool bgluTessEndContour;
        public bool bgluTessEndPolygon;
        public bool bgluTessNormal;
        public bool bgluTessProperty;
        public bool bgluTessVertex;
        public bool bgluUnProject;
        public bool bglValidateProgram;
        public bool bglValidateProgramARB;
        public bool bglVariantArrayObjectATI;
        public bool bglVariantbvEXT;
        public bool bglVariantdvEXT;
        public bool bglVariantfvEXT;
        public bool bglVariantivEXT;
        public bool bglVariantPointerEXT;
        public bool bglVariantsvEXT;
        public bool bglVariantubvEXT;
        public bool bglVariantuivEXT;
        public bool bglVariantusvEXT;
        public bool bglVertex2d;
        public bool bglVertex2dv;
        public bool bglVertex2f;
        public bool bglVertex2fv;
        public bool bglVertex2hNV;
        public bool bglVertex2hvNV;
        public bool bglVertex2i;
        public bool bglVertex2iv;
        public bool bglVertex2s;
        public bool bglVertex2sv;
        public bool bglVertex3d;
        public bool bglVertex3dv;
        public bool bglVertex3f;
        public bool bglVertex3fv;
        public bool bglVertex3hNV;
        public bool bglVertex3hvNV;
        public bool bglVertex3i;
        public bool bglVertex3iv;
        public bool bglVertex3s;
        public bool bglVertex3sv;
        public bool bglVertex4d;
        public bool bglVertex4dv;
        public bool bglVertex4f;
        public bool bglVertex4fv;
        public bool bglVertex4hNV;
        public bool bglVertex4hvNV;
        public bool bglVertex4i;
        public bool bglVertex4iv;
        public bool bglVertex4s;
        public bool bglVertex4sv;
        public bool bglVertexArrayParameteriAPPLE;
        public bool bglVertexArrayRangeAPPLE;
        public bool bglVertexArrayRangeNV;
        public bool bglVertexAttrib1d;
        public bool bglVertexAttrib1dARB;
        public bool bglVertexAttrib1dNV;
        public bool bglVertexAttrib1dv;
        public bool bglVertexAttrib1dvARB;
        public bool bglVertexAttrib1dvNV;
        public bool bglVertexAttrib1f;
        public bool bglVertexAttrib1fARB;
        public bool bglVertexAttrib1fNV;
        public bool bglVertexAttrib1fv;
        public bool bglVertexAttrib1fvARB;
        public bool bglVertexAttrib1fvNV;
        public bool bglVertexAttrib1hNV;
        public bool bglVertexAttrib1hvNV;
        public bool bglVertexAttrib1s;
        public bool bglVertexAttrib1sARB;
        public bool bglVertexAttrib1sNV;
        public bool bglVertexAttrib1sv;
        public bool bglVertexAttrib1svARB;
        public bool bglVertexAttrib1svNV;
        public bool bglVertexAttrib2d;
        public bool bglVertexAttrib2dARB;
        public bool bglVertexAttrib2dNV;
        public bool bglVertexAttrib2dv;
        public bool bglVertexAttrib2dvARB;
        public bool bglVertexAttrib2dvNV;
        public bool bglVertexAttrib2f;
        public bool bglVertexAttrib2fARB;
        public bool bglVertexAttrib2fNV;
        public bool bglVertexAttrib2fv;
        public bool bglVertexAttrib2fvARB;
        public bool bglVertexAttrib2fvNV;
        public bool bglVertexAttrib2hNV;
        public bool bglVertexAttrib2hvNV;
        public bool bglVertexAttrib2s;
        public bool bglVertexAttrib2sARB;
        public bool bglVertexAttrib2sNV;
        public bool bglVertexAttrib2sv;
        public bool bglVertexAttrib2svARB;
        public bool bglVertexAttrib2svNV;
        public bool bglVertexAttrib3d;
        public bool bglVertexAttrib3dARB;
        public bool bglVertexAttrib3dNV;
        public bool bglVertexAttrib3dv;
        public bool bglVertexAttrib3dvARB;
        public bool bglVertexAttrib3dvNV;
        public bool bglVertexAttrib3f;
        public bool bglVertexAttrib3fARB;
        public bool bglVertexAttrib3fNV;
        public bool bglVertexAttrib3fv;
        public bool bglVertexAttrib3fvARB;
        public bool bglVertexAttrib3fvNV;
        public bool bglVertexAttrib3hNV;
        public bool bglVertexAttrib3hvNV;
        public bool bglVertexAttrib3s;
        public bool bglVertexAttrib3sARB;
        public bool bglVertexAttrib3sNV;
        public bool bglVertexAttrib3sv;
        public bool bglVertexAttrib3svARB;
        public bool bglVertexAttrib3svNV;
        public bool bglVertexAttrib4bv;
        public bool bglVertexAttrib4bvARB;
        public bool bglVertexAttrib4d;
        public bool bglVertexAttrib4dARB;
        public bool bglVertexAttrib4dNV;
        public bool bglVertexAttrib4dv;
        public bool bglVertexAttrib4dvARB;
        public bool bglVertexAttrib4dvNV;
        public bool bglVertexAttrib4f;
        public bool bglVertexAttrib4fARB;
        public bool bglVertexAttrib4fNV;
        public bool bglVertexAttrib4fv;
        public bool bglVertexAttrib4fvARB;
        public bool bglVertexAttrib4fvNV;
        public bool bglVertexAttrib4hNV;
        public bool bglVertexAttrib4hvNV;
        public bool bglVertexAttrib4iv;
        public bool bglVertexAttrib4ivARB;
        public bool bglVertexAttrib4Nbv;
        public bool bglVertexAttrib4NbvARB;
        public bool bglVertexAttrib4Niv;
        public bool bglVertexAttrib4NivARB;
        public bool bglVertexAttrib4Nsv;
        public bool bglVertexAttrib4NsvARB;
        public bool bglVertexAttrib4Nub;
        public bool bglVertexAttrib4NubARB;
        public bool bglVertexAttrib4Nubv;
        public bool bglVertexAttrib4NubvARB;
        public bool bglVertexAttrib4Nuiv;
        public bool bglVertexAttrib4NuivARB;
        public bool bglVertexAttrib4Nusv;
        public bool bglVertexAttrib4NusvARB;
        public bool bglVertexAttrib4s;
        public bool bglVertexAttrib4sARB;
        public bool bglVertexAttrib4sNV;
        public bool bglVertexAttrib4sv;
        public bool bglVertexAttrib4svARB;
        public bool bglVertexAttrib4svNV;
        public bool bglVertexAttrib4ubNV;
        public bool bglVertexAttrib4ubv;
        public bool bglVertexAttrib4ubvARB;
        public bool bglVertexAttrib4ubvNV;
        public bool bglVertexAttrib4uiv;
        public bool bglVertexAttrib4uivARB;
        public bool bglVertexAttrib4usv;
        public bool bglVertexAttrib4usvARB;
        public bool bglVertexAttribArrayObjectATI;
        public bool bglVertexAttribPointer;
        public bool bglVertexAttribPointerARB;
        public bool bglVertexAttribPointerNV;
        public bool bglVertexAttribs1dvNV;
        public bool bglVertexAttribs1fvNV;
        public bool bglVertexAttribs1hvNV;
        public bool bglVertexAttribs1svNV;
        public bool bglVertexAttribs2dvNV;
        public bool bglVertexAttribs2fvNV;
        public bool bglVertexAttribs2hvNV;
        public bool bglVertexAttribs2svNV;
        public bool bglVertexAttribs3dvNV;
        public bool bglVertexAttribs3fvNV;
        public bool bglVertexAttribs3hvNV;
        public bool bglVertexAttribs3svNV;
        public bool bglVertexAttribs4dvNV;
        public bool bglVertexAttribs4fvNV;
        public bool bglVertexAttribs4hvNV;
        public bool bglVertexAttribs4svNV;
        public bool bglVertexAttribs4ubvNV;
        public bool bglVertexBlendARB;
        public bool bglVertexBlendEnvfATI;
        public bool bglVertexBlendEnviATI;
        public bool bglVertexPointer;
        public bool bglVertexPointerEXT;
        public bool bglVertexPointerListIBM;
        public bool bglVertexPointervINTEL;
        public bool bglVertexStream1dATI;
        public bool bglVertexStream1dvATI;
        public bool bglVertexStream1fATI;
        public bool bglVertexStream1fvATI;
        public bool bglVertexStream1iATI;
        public bool bglVertexStream1ivATI;
        public bool bglVertexStream1sATI;
        public bool bglVertexStream1svATI;
        public bool bglVertexStream2dATI;
        public bool bglVertexStream2dvATI;
        public bool bglVertexStream2fATI;
        public bool bglVertexStream2fvATI;
        public bool bglVertexStream2iATI;
        public bool bglVertexStream2ivATI;
        public bool bglVertexStream2sATI;
        public bool bglVertexStream2svATI;
        public bool bglVertexStream3dATI;
        public bool bglVertexStream3dvATI;
        public bool bglVertexStream3fATI;
        public bool bglVertexStream3fvATI;
        public bool bglVertexStream3iATI;
        public bool bglVertexStream3ivATI;
        public bool bglVertexStream3sATI;
        public bool bglVertexStream3svATI;
        public bool bglVertexStream4dATI;
        public bool bglVertexStream4dvATI;
        public bool bglVertexStream4fATI;
        public bool bglVertexStream4fvATI;
        public bool bglVertexStream4iATI;
        public bool bglVertexStream4ivATI;
        public bool bglVertexStream4sATI;
        public bool bglVertexStream4svATI;
        public bool bglVertexWeightfEXT;
        public bool bglVertexWeightfvEXT;
        public bool bglVertexWeighthNV;
        public bool bglVertexWeighthvNV;
        public bool bglVertexWeightPointerEXT;
        public bool bglViewport;
        public bool bglWeightbvARB;
        public bool bglWeightdvARB;
        public bool bglWeightfvARB;
        public bool bglWeightivARB;
        public bool bglWeightPointerARB;
        public bool bglWeightsvARB;
        public bool bglWeightubvARB;
        public bool bglWeightuivARB;
        public bool bglWeightusvARB;
        public bool bglWindowPos2d;
        public bool bglWindowPos2dARB;
        public bool bglWindowPos2dMESA;
        public bool bglWindowPos2dv;
        public bool bglWindowPos2dvARB;
        public bool bglWindowPos2dvMESA;
        public bool bglWindowPos2f;
        public bool bglWindowPos2fARB;
        public bool bglWindowPos2fMESA;
        public bool bglWindowPos2fv;
        public bool bglWindowPos2fvARB;
        public bool bglWindowPos2fvMESA;
        public bool bglWindowPos2i;
        public bool bglWindowPos2iARB;
        public bool bglWindowPos2iMESA;
        public bool bglWindowPos2iv;
        public bool bglWindowPos2ivARB;
        public bool bglWindowPos2ivMESA;
        public bool bglWindowPos2s;
        public bool bglWindowPos2sARB;
        public bool bglWindowPos2sMESA;
        public bool bglWindowPos2sv;
        public bool bglWindowPos2svARB;
        public bool bglWindowPos2svMESA;
        public bool bglWindowPos3d;
        public bool bglWindowPos3dARB;
        public bool bglWindowPos3dMESA;
        public bool bglWindowPos3dv;
        public bool bglWindowPos3dvARB;
        public bool bglWindowPos3dvMESA;
        public bool bglWindowPos3f;
        public bool bglWindowPos3fARB;
        public bool bglWindowPos3fMESA;
        public bool bglWindowPos3fv;
        public bool bglWindowPos3fvARB;
        public bool bglWindowPos3fvMESA;
        public bool bglWindowPos3i;
        public bool bglWindowPos3iARB;
        public bool bglWindowPos3iMESA;
        public bool bglWindowPos3iv;
        public bool bglWindowPos3ivARB;
        public bool bglWindowPos3ivMESA;
        public bool bglWindowPos3s;
        public bool bglWindowPos3sARB;
        public bool bglWindowPos3sMESA;
        public bool bglWindowPos3sv;
        public bool bglWindowPos3svARB;
        public bool bglWindowPos3svMESA;
        public bool bglWindowPos4dMESA;
        public bool bglWindowPos4dvMESA;
        public bool bglWindowPos4fMESA;
        public bool bglWindowPos4fvMESA;
        public bool bglWindowPos4iMESA;
        public bool bglWindowPos4ivMESA;
        public bool bglWindowPos4sMESA;
        public bool bglWindowPos4svMESA;
        public bool bglWriteMaskEXT;
        public bool bSwapBuffers;
        public bool bwglAllocateMemoryNV;
        public bool bwglAssociateImageBufferEventsI3D;
        public bool bwglBeginFrameTrackingI3D;
        public bool bwglBindDisplayColorTableEXT;
        public bool bwglBindTexImageARB;
        public bool bwglChoosePixelFormatARB;
        public bool bwglChoosePixelFormatEXT;
        public bool bwglCopyContext;
        public bool bwglCreateBufferRegionARB;
        public bool bwglCreateContext;
        public bool bwglCreateDisplayColorTableEXT;
        public bool bwglCreateImageBufferI3D;
        public bool bwglCreateLayerContext;
        public bool bwglCreatePbufferARB;
        public bool bwglCreatePbufferEXT;
        public bool bwglDeleteBufferRegionARB;
        public bool bwglDeleteContext;
        public bool bwglDescribeLayerPlane;
        public bool bwglDestroyDisplayColorTableEXT;
        public bool bwglDestroyImageBufferI3D;
        public bool bwglDestroyPbufferARB;
        public bool bwglDestroyPbufferEXT;
        public bool bwglDisableFrameLockI3D;
        public bool bwglDisableGenlockI3D;
        public bool bwglEnableFrameLockI3D;
        public bool bwglEnableGenlockI3D;
        public bool bwglEndFrameTrackingI3D;
        public bool bwglFreeMemoryNV;
        public bool bwglGenlockSampleRateI3D;
        public bool bwglGenlockSourceDelayI3D;
        public bool bwglGenlockSourceEdgeI3D;
        public bool bwglGenlockSourceI3D;
        public bool bwglGetCurrentContext;
        public bool bwglGetCurrentDC;
        public bool bwglGetCurrentReadDCARB;
        public bool bwglGetCurrentReadDCEXT;
        public bool bwglGetDigitalVideoParametersI3D;
        public bool bwglGetExtensionsStringARB;
        public bool bwglGetExtensionsStringEXT;
        public bool bwglGetFrameUsageI3D;
        public bool bwglGetGammaTableI3D;
        public bool bwglGetGammaTableParametersI3D;
        public bool bwglGetGenlockSampleRateI3D;
        public bool bwglGetGenlockSourceDelayI3D;
        public bool bwglGetGenlockSourceEdgeI3D;
        public bool bwglGetGenlockSourceI3D;
        public bool bwglGetLayerPaletteEntries;
        public bool bwglGetMscRateOML;
        public bool bwglGetPbufferDCARB;
        public bool bwglGetPbufferDCEXT;
        public bool bwglGetPixelFormatAttribfvARB;
        public bool bwglGetPixelFormatAttribfvEXT;
        public bool bwglGetPixelFormatAttribivARB;
        public bool bwglGetPixelFormatAttribivEXT;
        public bool bwglGetProcAddress;
        public bool bwglGetSwapIntervalEXT;
        public bool bwglGetSyncValuesOML;
        public bool bwglIsEnabledFrameLockI3D;
        public bool bwglIsEnabledGenlockI3D;
        public bool bwglLoadDisplayColorTableEXT;
        public bool bwglMakeContextCurrentARB;
        public bool bwglMakeContextCurrentEXT;
        public bool bwglMakeCurrent;
        public bool bwglQueryFrameLockMasterI3D;
        public bool bwglQueryFrameTrackingI3D;
        public bool bwglQueryGenlockMaxSourceDelayI3D;
        public bool bwglQueryPbufferARB;
        public bool bwglQueryPbufferEXT;
        public bool bwglRealizeLayerPalette;
        public bool bwglReleaseImageBufferEventsI3D;
        public bool bwglReleasePbufferDCARB;
        public bool bwglReleasePbufferDCEXT;
        public bool bwglReleaseTexImageARB;
        public bool bwglRestoreBufferRegionARB;
        public bool bwglSaveBufferRegionARB;
        public bool bwglSetDigitalVideoParametersI3D;
        public bool bwglSetGammaTableI3D;
        public bool bwglSetGammaTableParametersI3D;
        public bool bwglSetLayerPaletteEntries;
        public bool bwglSetPbufferAttribARB;
        public bool bwglShareLists;
        public bool bwglSwapBuffers;
        public bool bwglSwapBuffersMscOML;
        public bool bwglSwapIntervalEXT;
        public bool bwglSwapLayerBuffers;
        public bool bwglSwapLayerBuffersMscOML;
        public bool bwglSwapMultipleBuffers;
        public bool bwglUseFontBitmapsA;
        public bool bwglUseFontBitmapsW;
        public bool bwglUseFontOutlinesA;
        public bool bwglUseFontOutlinesW;
        public bool bwglWaitForMscOML;
        public bool bwglWaitForSbcOML;
















        public void glAccum( int op, float value )
        {
            mDglAccum_IF( op, value );
        }

        public void glActiveStencilFaceEXT( int face )
        {
            mDglActiveStencilFaceEXT_I( face );
        }

        public void glActiveTexture( int texture )
        {
            mDglActiveTexture_I( texture );
        }

        public void glActiveTextureARB( int texture )
        {
            mDglActiveTextureARB_I( texture );
        }

        public void glAddSwapHintRectWIN( int x, int y, int width, int height )
        {
            mDglAddSwapHintRectWIN_IIII( x, y, width, height );
        }

        public void glAlphaFragmentOp1ATI( int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod )
        {
            mDglAlphaFragmentOp1ATI_IIIIII( op, dst, dstMod, arg1, arg1Rep, arg1Mod );
        }

        public void glAlphaFragmentOp2ATI( int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod )
        {
            mDglAlphaFragmentOp2ATI_IIIIIIIII( op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod );
        }

        public void glAlphaFragmentOp3ATI( int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod )
        {
            mDglAlphaFragmentOp3ATI_IIIIIIIIIIII( op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod );
        }

        public void glAlphaFunc( int func, float fref )
        {
            mDglAlphaFunc_IF( func, fref );
        }

        public void glApplyTextureEXT( int mode )
        {
            mDglApplyTextureEXT_I( mode );
        }

        public byte glAreProgramsResidentNV( int n, int[] programs, byte[] residences )
        {
            return (mDglAreProgramsResidentNV_IaIaB( n, programs, residences ));
        }

        public byte glAreProgramsResidentNV( int n, IntPtr programs, IntPtr residences )
        {
            return (mDglAreProgramsResidentNV_IPP( n, programs, residences ));
        }

        public byte glAreTexturesResident( int n, int[] textures, byte[] residences )
        {
            return (mDglAreTexturesResident_IaIaB( n, textures, residences ));
        }

        public byte glAreTexturesResident( int n, IntPtr textures, IntPtr residences )
        {
            return (mDglAreTexturesResident_IPP( n, textures, residences ));
        }

        public byte glAreTexturesResidentEXT( int n, int[] textures, byte[] residences )
        {
            return (mDglAreTexturesResidentEXT_IaIaB( n, textures, residences ));
        }

        public byte glAreTexturesResidentEXT( int n, IntPtr textures, IntPtr residences )
        {
            return (mDglAreTexturesResidentEXT_IPP( n, textures, residences ));
        }

        public void glArrayElement( int i )
        {
            mDglArrayElement_I( i );
        }

        public void glArrayElementArrayEXT( int mode, int count, byte[] pi )
        {
            mDglArrayElementArrayEXT_IIaB( mode, count, pi );
        }

        public void glArrayElementArrayEXT( int mode, int count, IntPtr pi )
        {
            mDglArrayElementArrayEXT_IIP( mode, count, pi );
        }

        public void glArrayElementEXT( int i )
        {
            mDglArrayElementEXT_I( i );
        }

        public void glArrayObjectATI( int array, int size, int itype, int stride, int buffer, int offset )
        {
            mDglArrayObjectATI_IIIIII( array, size, itype, stride, buffer, offset );
        }

        public void glAsyncMarkerSGIX( int marker )
        {
            mDglAsyncMarkerSGIX_I( marker );
        }

        public void glAttachObjectARB( int containerObj, int obj )
        {
            mDglAttachObjectARB_II( containerObj, obj );
        }

        public void glAttachShader( int program, int shader )
        {
            mDglAttachShader_II( program, shader );
        }

        public void glBegin( int mode )
        {
            mDglBegin_I( mode );
        }

        public void glBeginFragmentShaderATI()
        {
            mDglBeginFragmentShaderATI_V();
        }

        public void glBeginOcclusionQueryNV( int id )
        {
            mDglBeginOcclusionQueryNV_I( id );
        }

        public void glBeginQuery( int target, int id )
        {
            mDglBeginQuery_II( target, id );
        }

        public void glBeginQueryARB( int target, int id )
        {
            mDglBeginQueryARB_II( target, id );
        }

        public void glBeginVertexShaderEXT()
        {
            mDglBeginVertexShaderEXT_V();
        }

        public void glBindAttribLocation( int program, int index, String name )
        {
            mDglBindAttribLocation_IIS( program, index, name );
        }

        public void glBindAttribLocationARB( int programObj, int index, String name )
        {
            mDglBindAttribLocationARB_IIS( programObj, index, name );
        }

        public void glBindBuffer( int target, int buffer )
        {
            mDglBindBuffer_II( target, buffer );
        }

        public void glBindBufferARB( int target, int buffer )
        {
            mDglBindBufferARB_II( target, buffer );
        }

        public void glBindFragmentShaderATI( int id )
        {
            mDglBindFragmentShaderATI_I( id );
        }

        public void glBindFramebufferEXT( int target, int framebuffer )
        {
            mDglBindFramebufferEXT_II( target, framebuffer );
        }

        public int glBindLightParameterEXT( int light, int value )
        {
            return (mDglBindLightParameterEXT_II( light, value ));
        }

        public int glBindMaterialParameterEXT( int face, int value )
        {
            return (mDglBindMaterialParameterEXT_II( face, value ));
        }

        public int glBindParameterEXT( int value )
        {
            return (mDglBindParameterEXT_I( value ));
        }

        public void glBindProgramARB( int target, int program )
        {
            mDglBindProgramARB_II( target, program );
        }

        public void glBindProgramNV( int target, int id )
        {
            mDglBindProgramNV_II( target, id );
        }

        public void glBindRenderbufferEXT( int target, int renderbuffer )
        {
            mDglBindRenderbufferEXT_II( target, renderbuffer );
        }

        public int glBindTexGenParameterEXT( int unit, int coord, int value )
        {
            return (mDglBindTexGenParameterEXT_III( unit, coord, value ));
        }

        public void glBindTexture( int target, int texture )
        {
            mDglBindTexture_II( target, texture );
        }

        public void glBindTextureEXT( int target, int texture )
        {
            mDglBindTextureEXT_II( target, texture );
        }

        public int glBindTextureUnitParameterEXT( int unit, int value )
        {
            return (mDglBindTextureUnitParameterEXT_II( unit, value ));
        }

        public void glBindVertexArrayAPPLE( int array )
        {
            mDglBindVertexArrayAPPLE_I( array );
        }

        public void glBindVertexShaderEXT( int id )
        {
            mDglBindVertexShaderEXT_I( id );
        }

        public void glBinormal3bEXT( byte bx, byte by, byte bz )
        {
            mDglBinormal3bEXT_BBB( bx, by, bz );
        }

        public void glBinormal3bvEXT( byte[] v )
        {
            mDglBinormal3bvEXT_aB( v );
        }

        public void glBinormal3bvEXT( IntPtr v )
        {
            mDglBinormal3bvEXT_P( v );
        }

        public void glBinormal3dEXT( double bx, double by, double bz )
        {
            mDglBinormal3dEXT_DDD( bx, by, bz );
        }

        public void glBinormal3dvEXT( double[] v )
        {
            mDglBinormal3dvEXT_aD( v );
        }

        public void glBinormal3dvEXT( IntPtr v )
        {
            mDglBinormal3dvEXT_P( v );
        }

        public void glBinormal3fEXT( float bx, float by, float bz )
        {
            mDglBinormal3fEXT_FFF( bx, by, bz );
        }

        public void glBinormal3fvEXT( float[] v )
        {
            mDglBinormal3fvEXT_aF( v );
        }

        public void glBinormal3fvEXT( IntPtr v )
        {
            mDglBinormal3fvEXT_P( v );
        }

        public void glBinormal3iEXT( int bx, int by, int bz )
        {
            mDglBinormal3iEXT_III( bx, by, bz );
        }

        public void glBinormal3ivEXT( int[] v )
        {
            mDglBinormal3ivEXT_aI( v );
        }

        public void glBinormal3ivEXT( IntPtr v )
        {
            mDglBinormal3ivEXT_P( v );
        }

        public void glBinormal3sEXT( short bx, short by, short bz )
        {
            mDglBinormal3sEXT_HHH( bx, by, bz );
        }

        public void glBinormal3svEXT( short[] v )
        {
            mDglBinormal3svEXT_aH( v );
        }

        public void glBinormal3svEXT( IntPtr v )
        {
            mDglBinormal3svEXT_P( v );
        }

        public void glBinormalPointerEXT( int itype, int stride, float[] pointer )
        {
            mDglBinormalPointerEXT_IIaF( itype, stride, pointer );
        }

        public void glBinormalPointerEXT( int itype, int stride, IntPtr pointer )
        {
            mDglBinormalPointerEXT_IIP( itype, stride, pointer );
        }

        public void glBitmap( int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap )
        {
            mDglBitmap_IIFFFFaB( width, height, xorig, yorig, xmove, ymove, bitmap );
        }

        public void glBitmap( int width, int height, float xorig, float yorig, float xmove, float ymove, IntPtr bitmap )
        {
            mDglBitmap_IIFFFFP( width, height, xorig, yorig, xmove, ymove, bitmap );
        }

        public void glBlendColor( float red, float green, float blue, float alpha )
        {
            mDglBlendColor_FFFF( red, green, blue, alpha );
        }

        public void glBlendColorEXT( float red, float green, float blue, float alpha )
        {
            mDglBlendColorEXT_FFFF( red, green, blue, alpha );
        }

        public void glBlendEquation( int mode )
        {
            mDglBlendEquation_I( mode );
        }

        public void glBlendEquationEXT( int mode )
        {
            mDglBlendEquationEXT_I( mode );
        }

        public void glBlendEquationSeparate( int modeRGB, int modeAlpha )
        {
            mDglBlendEquationSeparate_II( modeRGB, modeAlpha );
        }

        public void glBlendEquationSeparateEXT( int modeRGB, int modeAlpha )
        {
            mDglBlendEquationSeparateEXT_II( modeRGB, modeAlpha );
        }

        public void glBlendFunc( int sfactor, int dfactor )
        {
            mDglBlendFunc_II( sfactor, dfactor );
        }

        public void glBlendFuncSeparate( int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha )
        {
            mDglBlendFuncSeparate_IIII( sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha );
        }

        public void glBlendFuncSeparateEXT( int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha )
        {
            mDglBlendFuncSeparateEXT_IIII( sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha );
        }

        public void glBlendFuncSeparateINGR( int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha )
        {
            mDglBlendFuncSeparateINGR_IIII( sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha );
        }

        public void glBufferData( int target, int size, byte[] data, int usage )
        {
            mDglBufferData_IIaBI( target, size, data, usage );
        }

        public void glBufferData( int target, int size, IntPtr data, int usage )
        {
            mDglBufferData_IIPI( target, size, data, usage );
        }

        public void glBufferDataARB( int target, int size, byte[] data, int usage )
        {
            mDglBufferDataARB_IIaBI( target, size, data, usage );
        }

        public void glBufferDataARB( int target, int size, IntPtr data, int usage )
        {
            mDglBufferDataARB_IIPI( target, size, data, usage );
        }

        public void glBufferSubData( int target, int offset, int size, byte[] data )
        {
            mDglBufferSubData_IIIaB( target, offset, size, data );
        }

        public void glBufferSubData( int target, int offset, int size, IntPtr data )
        {
            mDglBufferSubData_IIIP( target, offset, size, data );
        }

        public void glBufferSubDataARB( int target, int offset, int size, byte[] data )
        {
            mDglBufferSubDataARB_IIIaB( target, offset, size, data );
        }

        public void glBufferSubDataARB( int target, int offset, int size, IntPtr data )
        {
            mDglBufferSubDataARB_IIIP( target, offset, size, data );
        }

        public void glCallList( int list )
        {
            mDglCallList_I( list );
        }

        public void glCallLists( int n, int itype, byte[] lists )
        {
            mDglCallLists_IIaB( n, itype, lists );
        }

        public void glCallLists( int n, int itype, short[] lists )
        {
            mDglCallLists_IIaH( n, itype, lists );
        }

        public void glCallLists( int n, int itype, int[] lists )
        {
            mDglCallLists_IIaI( n, itype, lists );
        }

        public void glCallLists( int n, int itype, float[] lists )
        {
            mDglCallLists_IIaF( n, itype, lists );
        }

        public void glCallLists( int n, int itype, IntPtr lists )
        {
            mDglCallLists_IIP( n, itype, lists );
        }

        public int glCheckFramebufferStatusEXT( int target )
        {
            return (mDglCheckFramebufferStatusEXT_I( target ));
        }

        public void glClampColorARB( int target, int clamp )
        {
            mDglClampColorARB_II( target, clamp );
        }

        public void glClear( int mask )
        {
            mDglClear_I( mask );
        }

        public void glClearAccum( float red, float green, float blue, float alpha )
        {
            mDglClearAccum_FFFF( red, green, blue, alpha );
        }

        public void glClearColor( float red, float green, float blue, float alpha )
        {
            mDglClearColor_FFFF( red, green, blue, alpha );
        }

        public void glClearDepth( double depth )
        {
            mDglClearDepth_D( depth );
        }

        public void glClearIndex( float c )
        {
            mDglClearIndex_F( c );
        }

        public void glClearStencil( int s )
        {
            mDglClearStencil_I( s );
        }

        public void glClientActiveTexture( int texture )
        {
            mDglClientActiveTexture_I( texture );
        }

        public void glClientActiveTextureARB( int texture )
        {
            mDglClientActiveTextureARB_I( texture );
        }

        public void glClientActiveVertexStreamATI( int stream )
        {
            mDglClientActiveVertexStreamATI_I( stream );
        }

        public void glClipPlane( int plane, double[] equation )
        {
            mDglClipPlane_IaD( plane, equation );
        }

        public void glClipPlane( int plane, IntPtr equation )
        {
            mDglClipPlane_IP( plane, equation );
        }

        public void glColor3b( byte red, byte green, byte blue )
        {
            mDglColor3b_BBB( red, green, blue );
        }

        public void glColor3bv( byte[] v )
        {
            mDglColor3bv_aB( v );
        }

        public void glColor3bv( IntPtr v )
        {
            mDglColor3bv_P( v );
        }

        public void glColor3d( double red, double green, double blue )
        {
            mDglColor3d_DDD( red, green, blue );
        }

        public void glColor3dv( double[] v )
        {
            mDglColor3dv_aD( v );
        }

        public void glColor3dv( IntPtr v )
        {
            mDglColor3dv_P( v );
        }

        public void glColor3f( float red, float green, float blue )
        {
            mDglColor3f_FFF( red, green, blue );
        }

        public void glColor3fv( float[] v )
        {
            mDglColor3fv_aF( v );
        }

        public void glColor3fv( IntPtr v )
        {
            mDglColor3fv_P( v );
        }

        public void glColor3fVertex3fSUN( float r, float g, float b, float x, float y, float z )
        {
            mDglColor3fVertex3fSUN_FFFFFF( r, g, b, x, y, z );
        }

        public void glColor3fVertex3fvSUN( float[] c, float[] v )
        {
            mDglColor3fVertex3fvSUN_aFaF( c, v );
        }

        public void glColor3fVertex3fvSUN( float[] c, IntPtr v )
        {
            mDglColor3fVertex3fvSUN_aFP( c, v );
        }

        public void glColor3fVertex3fvSUN( IntPtr c, float[] v )
        {
            mDglColor3fVertex3fvSUN_PaF( c, v );
        }

        public void glColor3fVertex3fvSUN( IntPtr c, IntPtr v )
        {
            mDglColor3fVertex3fvSUN_PP( c, v );
        }

        public void glColor3hNV( short red, short green, short blue )
        {
            mDglColor3hNV_HHH( red, green, blue );
        }

        public void glColor3hvNV( short[] v )
        {
            mDglColor3hvNV_aH( v );
        }

        public void glColor3hvNV( IntPtr v )
        {
            mDglColor3hvNV_P( v );
        }

        public void glColor3i( int red, int green, int blue )
        {
            mDglColor3i_III( red, green, blue );
        }

        public void glColor3iv( int[] v )
        {
            mDglColor3iv_aI( v );
        }

        public void glColor3iv( IntPtr v )
        {
            mDglColor3iv_P( v );
        }

        public void glColor3s( short red, short green, short blue )
        {
            mDglColor3s_HHH( red, green, blue );
        }

        public void glColor3sv( short[] v )
        {
            mDglColor3sv_aH( v );
        }

        public void glColor3sv( IntPtr v )
        {
            mDglColor3sv_P( v );
        }

        public void glColor3ub( byte red, byte green, byte blue )
        {
            mDglColor3ub_BBB( red, green, blue );
        }

        public void glColor3ubv( byte[] v )
        {
            mDglColor3ubv_aB( v );
        }

        public void glColor3ubv( IntPtr v )
        {
            mDglColor3ubv_P( v );
        }

        public void glColor3ui( int red, int green, int blue )
        {
            mDglColor3ui_III( red, green, blue );
        }

        public void glColor3uiv( int[] v )
        {
            mDglColor3uiv_aI( v );
        }

        public void glColor3uiv( IntPtr v )
        {
            mDglColor3uiv_P( v );
        }

        public void glColor3us( short red, short green, short blue )
        {
            mDglColor3us_HHH( red, green, blue );
        }

        public void glColor3usv( short[] v )
        {
            mDglColor3usv_aH( v );
        }

        public void glColor3usv( IntPtr v )
        {
            mDglColor3usv_P( v );
        }

        public void glColor4b( byte red, byte green, byte blue, byte alpha )
        {
            mDglColor4b_BBBB( red, green, blue, alpha );
        }

        public void glColor4bv( byte[] v )
        {
            mDglColor4bv_aB( v );
        }

        public void glColor4bv( IntPtr v )
        {
            mDglColor4bv_P( v );
        }

        public void glColor4d( double red, double green, double blue, double alpha )
        {
            mDglColor4d_DDDD( red, green, blue, alpha );
        }

        public void glColor4dv( double[] v )
        {
            mDglColor4dv_aD( v );
        }

        public void glColor4dv( IntPtr v )
        {
            mDglColor4dv_P( v );
        }

        public void glColor4f( float red, float green, float blue, float alpha )
        {
            mDglColor4f_FFFF( red, green, blue, alpha );
        }

        public void glColor4fNormal3fVertex3fSUN( float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z )
        {
            mDglColor4fNormal3fVertex3fSUN_FFFFFFFFFF( r, g, b, a, nx, ny, nz, x, y, z );
        }

        public void glColor4fNormal3fVertex3fvSUN( float[] c, float[] n, float[] v )
        {
            mDglColor4fNormal3fVertex3fvSUN_aFaFaF( c, n, v );
        }

        public void glColor4fNormal3fVertex3fvSUN( IntPtr c, IntPtr n, IntPtr v )
        {
            mDglColor4fNormal3fVertex3fvSUN_PPP( c, n, v );
        }

        public void glColor4fv( float[] v )
        {
            mDglColor4fv_aF( v );
        }

        public void glColor4fv( IntPtr v )
        {
            mDglColor4fv_P( v );
        }

        public void glColor4hNV( short red, short green, short blue, short alpha )
        {
            mDglColor4hNV_HHHH( red, green, blue, alpha );
        }

        public void glColor4hvNV( short[] v )
        {
            mDglColor4hvNV_aH( v );
        }

        public void glColor4hvNV( IntPtr v )
        {
            mDglColor4hvNV_P( v );
        }

        public void glColor4i( int red, int green, int blue, int alpha )
        {
            mDglColor4i_IIII( red, green, blue, alpha );
        }

        public void glColor4iv( int[] v )
        {
            mDglColor4iv_aI( v );
        }

        public void glColor4iv( IntPtr v )
        {
            mDglColor4iv_P( v );
        }

        public void glColor4s( short red, short green, short blue, short alpha )
        {
            mDglColor4s_HHHH( red, green, blue, alpha );
        }

        public void glColor4sv( short[] v )
        {
            mDglColor4sv_aH( v );
        }

        public void glColor4sv( IntPtr v )
        {
            mDglColor4sv_P( v );
        }

        public void glColor4ub( byte red, byte green, byte blue, byte alpha )
        {
            mDglColor4ub_BBBB( red, green, blue, alpha );
        }

        public void glColor4ubv( byte[] v )
        {
            mDglColor4ubv_aB( v );
        }

        public void glColor4ubv( IntPtr v )
        {
            mDglColor4ubv_P( v );
        }

        public void glColor4ubVertex2fSUN( byte r, byte g, byte b, byte a, float x, float y )
        {
            mDglColor4ubVertex2fSUN_BBBBFF( r, g, b, a, x, y );
        }

        public void glColor4ubVertex2fvSUN( byte[] c, float[] v )
        {
            mDglColor4ubVertex2fvSUN_aBaF( c, v );
        }

        public void glColor4ubVertex2fvSUN( byte[] c, IntPtr v )
        {
            mDglColor4ubVertex2fvSUN_aBP( c, v );
        }

        public void glColor4ubVertex2fvSUN( IntPtr c, float[] v )
        {
            mDglColor4ubVertex2fvSUN_PaF( c, v );
        }

        public void glColor4ubVertex2fvSUN( IntPtr c, IntPtr v )
        {
            mDglColor4ubVertex2fvSUN_PP( c, v );
        }

        public void glColor4ubVertex3fSUN( byte r, byte g, byte b, byte a, float x, float y, float z )
        {
            mDglColor4ubVertex3fSUN_BBBBFFF( r, g, b, a, x, y, z );
        }

        public void glColor4ubVertex3fvSUN( byte[] c, float[] v )
        {
            mDglColor4ubVertex3fvSUN_aBaF( c, v );
        }

        public void glColor4ubVertex3fvSUN( byte[] c, IntPtr v )
        {
            mDglColor4ubVertex3fvSUN_aBP( c, v );
        }

        public void glColor4ubVertex3fvSUN( IntPtr c, float[] v )
        {
            mDglColor4ubVertex3fvSUN_PaF( c, v );
        }

        public void glColor4ubVertex3fvSUN( IntPtr c, IntPtr v )
        {
            mDglColor4ubVertex3fvSUN_PP( c, v );
        }

        public void glColor4ui( int red, int green, int blue, int alpha )
        {
            mDglColor4ui_IIII( red, green, blue, alpha );
        }

        public void glColor4uiv( int[] v )
        {
            mDglColor4uiv_aI( v );
        }

        public void glColor4uiv( IntPtr v )
        {
            mDglColor4uiv_P( v );
        }

        public void glColor4us( short red, short green, short blue, short alpha )
        {
            mDglColor4us_HHHH( red, green, blue, alpha );
        }

        public void glColor4usv( short[] v )
        {
            mDglColor4usv_aH( v );
        }

        public void glColor4usv( IntPtr v )
        {
            mDglColor4usv_P( v );
        }

        public void glColorFragmentOp1ATI( int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod )
        {
            mDglColorFragmentOp1ATI_IIIIIII( op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod );
        }

        public void glColorFragmentOp2ATI( int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod )
        {
            mDglColorFragmentOp2ATI_IIIIIIIIII( op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod );
        }

        public void glColorFragmentOp3ATI( int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod )
        {
            mDglColorFragmentOp3ATI_IIIIIIIIIIIII( op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod );
        }

        public void glColorMask( byte red, byte green, byte blue, byte alpha )
        {
            mDglColorMask_BBBB( red, green, blue, alpha );
        }

        public void glColorMaterial( int face, int mode )
        {
            mDglColorMaterial_II( face, mode );
        }

        public void glColorPointer( int size, int itype, int stride, byte[] pointer )
        {
            mDglColorPointer_IIIaB( size, itype, stride, pointer );
        }

        public void glColorPointer( int size, int itype, int stride, short[] pointer )
        {
            mDglColorPointer_IIIaH( size, itype, stride, pointer );
        }

        public void glColorPointer( int size, int itype, int stride, int[] pointer )
        {
            mDglColorPointer_IIIaI( size, itype, stride, pointer );
        }

        public void glColorPointer( int size, int itype, int stride, float[] pointer )
        {
            mDglColorPointer_IIIaF( size, itype, stride, pointer );
        }

        public void glColorPointer( int size, int itype, int stride, double[] pointer )
        {
            mDglColorPointer_IIIaD( size, itype, stride, pointer );
        }

        public void glColorPointer( int size, int itype, int stride, IntPtr pointer )
        {
            mDglColorPointer_IIIP( size, itype, stride, pointer );
        }

        public void glColorPointerEXT( int size, int itype, int stride, int count, byte[] pointer )
        {
            mDglColorPointerEXT_IIIIaB( size, itype, stride, count, pointer );
        }

        public void glColorPointerEXT( int size, int itype, int stride, int count, short[] pointer )
        {
            mDglColorPointerEXT_IIIIaH( size, itype, stride, count, pointer );
        }

        public void glColorPointerEXT( int size, int itype, int stride, int count, int[] pointer )
        {
            mDglColorPointerEXT_IIIIaI( size, itype, stride, count, pointer );
        }

        public void glColorPointerEXT( int size, int itype, int stride, int count, float[] pointer )
        {
            mDglColorPointerEXT_IIIIaF( size, itype, stride, count, pointer );
        }

        public void glColorPointerEXT( int size, int itype, int stride, int count, double[] pointer )
        {
            mDglColorPointerEXT_IIIIaD( size, itype, stride, count, pointer );
        }

        public void glColorPointerEXT( int size, int itype, int stride, int count, IntPtr pointer )
        {
            mDglColorPointerEXT_IIIIP( size, itype, stride, count, pointer );
        }

        public void glColorPointerListIBM( int size, int itype, int stride, ref IntPtr pointer, int ptrstride )
        {
            mDglColorPointerListIBM_IIIrPI( size, itype, stride, ref pointer, ptrstride );
        }

        public void glColorPointervINTEL( int size, int itype, ref IntPtr pointer )
        {
            mDglColorPointervINTEL_IIrP( size, itype, ref pointer );
        }

        public void glColorSubTable( int target, int start, int count, int format, int itype, byte[] data )
        {
            mDglColorSubTable_IIIIIaB( target, start, count, format, itype, data );
        }

        public void glColorSubTable( int target, int start, int count, int format, int itype, short[] data )
        {
            mDglColorSubTable_IIIIIaH( target, start, count, format, itype, data );
        }

        public void glColorSubTable( int target, int start, int count, int format, int itype, int[] data )
        {
            mDglColorSubTable_IIIIIaI( target, start, count, format, itype, data );
        }

        public void glColorSubTable( int target, int start, int count, int format, int itype, float[] data )
        {
            mDglColorSubTable_IIIIIaF( target, start, count, format, itype, data );
        }

        public void glColorSubTable( int target, int start, int count, int format, int itype, IntPtr data )
        {
            mDglColorSubTable_IIIIIP( target, start, count, format, itype, data );
        }

        public void glColorSubTableEXT( int target, int start, int count, int format, int itype, byte[] data )
        {
            mDglColorSubTableEXT_IIIIIaB( target, start, count, format, itype, data );
        }

        public void glColorSubTableEXT( int target, int start, int count, int format, int itype, short[] data )
        {
            mDglColorSubTableEXT_IIIIIaH( target, start, count, format, itype, data );
        }

        public void glColorSubTableEXT( int target, int start, int count, int format, int itype, int[] data )
        {
            mDglColorSubTableEXT_IIIIIaI( target, start, count, format, itype, data );
        }

        public void glColorSubTableEXT( int target, int start, int count, int format, int itype, float[] data )
        {
            mDglColorSubTableEXT_IIIIIaF( target, start, count, format, itype, data );
        }

        public void glColorSubTableEXT( int target, int start, int count, int format, int itype, IntPtr data )
        {
            mDglColorSubTableEXT_IIIIIP( target, start, count, format, itype, data );
        }

        public void glColorTable( int target, int internalformat, int width, int format, int itype, byte[] table )
        {
            mDglColorTable_IIIIIaB( target, internalformat, width, format, itype, table );
        }

        public void glColorTable( int target, int internalformat, int width, int format, int itype, short[] table )
        {
            mDglColorTable_IIIIIaH( target, internalformat, width, format, itype, table );
        }

        public void glColorTable( int target, int internalformat, int width, int format, int itype, int[] table )
        {
            mDglColorTable_IIIIIaI( target, internalformat, width, format, itype, table );
        }

        public void glColorTable( int target, int internalformat, int width, int format, int itype, float[] table )
        {
            mDglColorTable_IIIIIaF( target, internalformat, width, format, itype, table );
        }

        public void glColorTable( int target, int internalformat, int width, int format, int itype, IntPtr table )
        {
            mDglColorTable_IIIIIP( target, internalformat, width, format, itype, table );
        }

        public void glColorTableEXT( int target, int internalFormat, int width, int format, int itype, byte[] table )
        {
            mDglColorTableEXT_IIIIIaB( target, internalFormat, width, format, itype, table );
        }

        public void glColorTableEXT( int target, int internalFormat, int width, int format, int itype, short[] table )
        {
            mDglColorTableEXT_IIIIIaH( target, internalFormat, width, format, itype, table );
        }

        public void glColorTableEXT( int target, int internalFormat, int width, int format, int itype, int[] table )
        {
            mDglColorTableEXT_IIIIIaI( target, internalFormat, width, format, itype, table );
        }

        public void glColorTableEXT( int target, int internalFormat, int width, int format, int itype, float[] table )
        {
            mDglColorTableEXT_IIIIIaF( target, internalFormat, width, format, itype, table );
        }

        public void glColorTableEXT( int target, int internalFormat, int width, int format, int itype, IntPtr table )
        {
            mDglColorTableEXT_IIIIIP( target, internalFormat, width, format, itype, table );
        }

        public void glColorTableParameterfv( int target, int pname, float[] rfparams )
        {
            mDglColorTableParameterfv_IIaF( target, pname, rfparams );
        }

        public void glColorTableParameterfv( int target, int pname, IntPtr rfparams )
        {
            mDglColorTableParameterfv_IIP( target, pname, rfparams );
        }

        public void glColorTableParameterfvSGI( int target, int pname, float[] rfparams )
        {
            mDglColorTableParameterfvSGI_IIaF( target, pname, rfparams );
        }

        public void glColorTableParameterfvSGI( int target, int pname, IntPtr rfparams )
        {
            mDglColorTableParameterfvSGI_IIP( target, pname, rfparams );
        }

        public void glColorTableParameteriv( int target, int pname, int[] riparams )
        {
            mDglColorTableParameteriv_IIaI( target, pname, riparams );
        }

        public void glColorTableParameteriv( int target, int pname, IntPtr riparams )
        {
            mDglColorTableParameteriv_IIP( target, pname, riparams );
        }

        public void glColorTableParameterivSGI( int target, int pname, int[] riparams )
        {
            mDglColorTableParameterivSGI_IIaI( target, pname, riparams );
        }

        public void glColorTableParameterivSGI( int target, int pname, IntPtr riparams )
        {
            mDglColorTableParameterivSGI_IIP( target, pname, riparams );
        }

        public void glColorTableSGI( int target, int internalformat, int width, int format, int itype, byte[] table )
        {
            mDglColorTableSGI_IIIIIaB( target, internalformat, width, format, itype, table );
        }

        public void glColorTableSGI( int target, int internalformat, int width, int format, int itype, short[] table )
        {
            mDglColorTableSGI_IIIIIaH( target, internalformat, width, format, itype, table );
        }

        public void glColorTableSGI( int target, int internalformat, int width, int format, int itype, int[] table )
        {
            mDglColorTableSGI_IIIIIaI( target, internalformat, width, format, itype, table );
        }

        public void glColorTableSGI( int target, int internalformat, int width, int format, int itype, float[] table )
        {
            mDglColorTableSGI_IIIIIaF( target, internalformat, width, format, itype, table );
        }

        public void glColorTableSGI( int target, int internalformat, int width, int format, int itype, IntPtr table )
        {
            mDglColorTableSGI_IIIIIP( target, internalformat, width, format, itype, table );
        }

        public void glCombinerInputNV( int stage, int portion, int variable, int input, int mapping, int componentUsage )
        {
            mDglCombinerInputNV_IIIIII( stage, portion, variable, input, mapping, componentUsage );
        }

        public void glCombinerOutputNV( int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, byte abDotProduct, byte cdDotProduct, byte muxSum )
        {
            mDglCombinerOutputNV_IIIIIIIBBB( stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum );
        }

        public void glCombinerParameterfNV( int pname, float fparam )
        {
            mDglCombinerParameterfNV_IF( pname, fparam );
        }

        public void glCombinerParameterfvNV( int pname, float[] rfparams )
        {
            mDglCombinerParameterfvNV_IaF( pname, rfparams );
        }

        public void glCombinerParameterfvNV( int pname, IntPtr rfparams )
        {
            mDglCombinerParameterfvNV_IP( pname, rfparams );
        }

        public void glCombinerParameteriNV( int pname, int iparam )
        {
            mDglCombinerParameteriNV_II( pname, iparam );
        }

        public void glCombinerParameterivNV( int pname, int[] riparams )
        {
            mDglCombinerParameterivNV_IaI( pname, riparams );
        }

        public void glCombinerParameterivNV( int pname, IntPtr riparams )
        {
            mDglCombinerParameterivNV_IP( pname, riparams );
        }

        public void glCombinerStageParameterfvNV( int stage, int pname, float[] rfparams )
        {
            mDglCombinerStageParameterfvNV_IIaF( stage, pname, rfparams );
        }

        public void glCombinerStageParameterfvNV( int stage, int pname, IntPtr rfparams )
        {
            mDglCombinerStageParameterfvNV_IIP( stage, pname, rfparams );
        }

        public void glCompileShader( int shader )
        {
            mDglCompileShader_I( shader );
        }

        public void glCompileShaderARB( int shaderObj )
        {
            mDglCompileShaderARB_I( shaderObj );
        }

        public void glCompressedTexImage1D( int target, int level, int internalformat, int width, int border, int imageSize, byte[] data )
        {
            mDglCompressedTexImage1D_IIIIIIaB( target, level, internalformat, width, border, imageSize, data );
        }

        public void glCompressedTexImage1D( int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data )
        {
            mDglCompressedTexImage1D_IIIIIIP( target, level, internalformat, width, border, imageSize, data );
        }

        public void glCompressedTexImage1DARB( int target, int level, int internalformat, int width, int border, int imageSize, byte[] data )
        {
            mDglCompressedTexImage1DARB_IIIIIIaB( target, level, internalformat, width, border, imageSize, data );
        }

        public void glCompressedTexImage1DARB( int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data )
        {
            mDglCompressedTexImage1DARB_IIIIIIP( target, level, internalformat, width, border, imageSize, data );
        }

        public void glCompressedTexImage2D( int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[] data )
        {
            mDglCompressedTexImage2D_IIIIIIIaB( target, level, internalformat, width, height, border, imageSize, data );
        }

        public void glCompressedTexImage2D( int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data )
        {
            mDglCompressedTexImage2D_IIIIIIIP( target, level, internalformat, width, height, border, imageSize, data );
        }

        public void glCompressedTexImage2DARB( int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[] data )
        {
            mDglCompressedTexImage2DARB_IIIIIIIaB( target, level, internalformat, width, height, border, imageSize, data );
        }

        public void glCompressedTexImage2DARB( int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data )
        {
            mDglCompressedTexImage2DARB_IIIIIIIP( target, level, internalformat, width, height, border, imageSize, data );
        }

        public void glCompressedTexImage3D( int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[] data )
        {
            mDglCompressedTexImage3D_IIIIIIIIaB( target, level, internalformat, width, height, depth, border, imageSize, data );
        }

        public void glCompressedTexImage3D( int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data )
        {
            mDglCompressedTexImage3D_IIIIIIIIP( target, level, internalformat, width, height, depth, border, imageSize, data );
        }

        public void glCompressedTexImage3DARB( int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[] data )
        {
            mDglCompressedTexImage3DARB_IIIIIIIIaB( target, level, internalformat, width, height, depth, border, imageSize, data );
        }

        public void glCompressedTexImage3DARB( int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data )
        {
            mDglCompressedTexImage3DARB_IIIIIIIIP( target, level, internalformat, width, height, depth, border, imageSize, data );
        }

        public void glCompressedTexSubImage1D( int target, int level, int xoffset, int width, int format, int imageSize, byte[] data )
        {
            mDglCompressedTexSubImage1D_IIIIIIaB( target, level, xoffset, width, format, imageSize, data );
        }

        public void glCompressedTexSubImage1D( int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data )
        {
            mDglCompressedTexSubImage1D_IIIIIIP( target, level, xoffset, width, format, imageSize, data );
        }

        public void glCompressedTexSubImage1DARB( int target, int level, int xoffset, int width, int format, int imageSize, byte[] data )
        {
            mDglCompressedTexSubImage1DARB_IIIIIIaB( target, level, xoffset, width, format, imageSize, data );
        }

        public void glCompressedTexSubImage1DARB( int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data )
        {
            mDglCompressedTexSubImage1DARB_IIIIIIP( target, level, xoffset, width, format, imageSize, data );
        }

        public void glCompressedTexSubImage2D( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[] data )
        {
            mDglCompressedTexSubImage2D_IIIIIIIIaB( target, level, xoffset, yoffset, width, height, format, imageSize, data );
        }

        public void glCompressedTexSubImage2D( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data )
        {
            mDglCompressedTexSubImage2D_IIIIIIIIP( target, level, xoffset, yoffset, width, height, format, imageSize, data );
        }

        public void glCompressedTexSubImage2DARB( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[] data )
        {
            mDglCompressedTexSubImage2DARB_IIIIIIIIaB( target, level, xoffset, yoffset, width, height, format, imageSize, data );
        }

        public void glCompressedTexSubImage2DARB( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data )
        {
            mDglCompressedTexSubImage2DARB_IIIIIIIIP( target, level, xoffset, yoffset, width, height, format, imageSize, data );
        }

        public void glCompressedTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[] data )
        {
            mDglCompressedTexSubImage3D_IIIIIIIIIIaB( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
        }

        public void glCompressedTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data )
        {
            mDglCompressedTexSubImage3D_IIIIIIIIIIP( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
        }

        public void glCompressedTexSubImage3DARB( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[] data )
        {
            mDglCompressedTexSubImage3DARB_IIIIIIIIIIaB( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
        }

        public void glCompressedTexSubImage3DARB( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data )
        {
            mDglCompressedTexSubImage3DARB_IIIIIIIIIIP( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
        }

        public void glConvolutionFilter1D( int target, int internalformat, int width, int format, int itype, byte[] image )
        {
            mDglConvolutionFilter1D_IIIIIaB( target, internalformat, width, format, itype, image );
        }

        public void glConvolutionFilter1D( int target, int internalformat, int width, int format, int itype, short[] image )
        {
            mDglConvolutionFilter1D_IIIIIaH( target, internalformat, width, format, itype, image );
        }

        public void glConvolutionFilter1D( int target, int internalformat, int width, int format, int itype, int[] image )
        {
            mDglConvolutionFilter1D_IIIIIaI( target, internalformat, width, format, itype, image );
        }

        public void glConvolutionFilter1D( int target, int internalformat, int width, int format, int itype, float[] image )
        {
            mDglConvolutionFilter1D_IIIIIaF( target, internalformat, width, format, itype, image );
        }

        public void glConvolutionFilter1D( int target, int internalformat, int width, int format, int itype, IntPtr image )
        {
            mDglConvolutionFilter1D_IIIIIP( target, internalformat, width, format, itype, image );
        }

        public void glConvolutionFilter1DEXT( int target, int internalformat, int width, int format, int itype, byte[] image )
        {
            mDglConvolutionFilter1DEXT_IIIIIaB( target, internalformat, width, format, itype, image );
        }

        public void glConvolutionFilter1DEXT( int target, int internalformat, int width, int format, int itype, short[] image )
        {
            mDglConvolutionFilter1DEXT_IIIIIaH( target, internalformat, width, format, itype, image );
        }

        public void glConvolutionFilter1DEXT( int target, int internalformat, int width, int format, int itype, int[] image )
        {
            mDglConvolutionFilter1DEXT_IIIIIaI( target, internalformat, width, format, itype, image );
        }

        public void glConvolutionFilter1DEXT( int target, int internalformat, int width, int format, int itype, float[] image )
        {
            mDglConvolutionFilter1DEXT_IIIIIaF( target, internalformat, width, format, itype, image );
        }

        public void glConvolutionFilter1DEXT( int target, int internalformat, int width, int format, int itype, IntPtr image )
        {
            mDglConvolutionFilter1DEXT_IIIIIP( target, internalformat, width, format, itype, image );
        }

        public void glConvolutionFilter2D( int target, int internalformat, int width, int height, int format, int itype, byte[] image )
        {
            mDglConvolutionFilter2D_IIIIIIaB( target, internalformat, width, height, format, itype, image );
        }

        public void glConvolutionFilter2D( int target, int internalformat, int width, int height, int format, int itype, short[] image )
        {
            mDglConvolutionFilter2D_IIIIIIaH( target, internalformat, width, height, format, itype, image );
        }

        public void glConvolutionFilter2D( int target, int internalformat, int width, int height, int format, int itype, int[] image )
        {
            mDglConvolutionFilter2D_IIIIIIaI( target, internalformat, width, height, format, itype, image );
        }

        public void glConvolutionFilter2D( int target, int internalformat, int width, int height, int format, int itype, float[] image )
        {
            mDglConvolutionFilter2D_IIIIIIaF( target, internalformat, width, height, format, itype, image );
        }

        public void glConvolutionFilter2D( int target, int internalformat, int width, int height, int format, int itype, IntPtr image )
        {
            mDglConvolutionFilter2D_IIIIIIP( target, internalformat, width, height, format, itype, image );
        }

        public void glConvolutionFilter2DEXT( int target, int internalformat, int width, int height, int format, int itype, byte[] image )
        {
            mDglConvolutionFilter2DEXT_IIIIIIaB( target, internalformat, width, height, format, itype, image );
        }

        public void glConvolutionFilter2DEXT( int target, int internalformat, int width, int height, int format, int itype, short[] image )
        {
            mDglConvolutionFilter2DEXT_IIIIIIaH( target, internalformat, width, height, format, itype, image );
        }

        public void glConvolutionFilter2DEXT( int target, int internalformat, int width, int height, int format, int itype, int[] image )
        {
            mDglConvolutionFilter2DEXT_IIIIIIaI( target, internalformat, width, height, format, itype, image );
        }

        public void glConvolutionFilter2DEXT( int target, int internalformat, int width, int height, int format, int itype, float[] image )
        {
            mDglConvolutionFilter2DEXT_IIIIIIaF( target, internalformat, width, height, format, itype, image );
        }

        public void glConvolutionFilter2DEXT( int target, int internalformat, int width, int height, int format, int itype, IntPtr image )
        {
            mDglConvolutionFilter2DEXT_IIIIIIP( target, internalformat, width, height, format, itype, image );
        }

        public void glConvolutionParameterf( int target, int pname, float fparams )
        {
            mDglConvolutionParameterf_IIF( target, pname, fparams );
        }

        public void glConvolutionParameterfEXT( int target, int pname, float fparams )
        {
            mDglConvolutionParameterfEXT_IIF( target, pname, fparams );
        }

        public void glConvolutionParameterfv( int target, int pname, float[] rfparams )
        {
            mDglConvolutionParameterfv_IIaF( target, pname, rfparams );
        }

        public void glConvolutionParameterfv( int target, int pname, IntPtr rfparams )
        {
            mDglConvolutionParameterfv_IIP( target, pname, rfparams );
        }

        public void glConvolutionParameterfvEXT( int target, int pname, float[] rfparams )
        {
            mDglConvolutionParameterfvEXT_IIaF( target, pname, rfparams );
        }

        public void glConvolutionParameterfvEXT( int target, int pname, IntPtr rfparams )
        {
            mDglConvolutionParameterfvEXT_IIP( target, pname, rfparams );
        }

        public void glConvolutionParameteri( int target, int pname, int iparams )
        {
            mDglConvolutionParameteri_III( target, pname, iparams );
        }

        public void glConvolutionParameteriEXT( int target, int pname, int iparams )
        {
            mDglConvolutionParameteriEXT_III( target, pname, iparams );
        }

        public void glConvolutionParameteriv( int target, int pname, int[] riparams )
        {
            mDglConvolutionParameteriv_IIaI( target, pname, riparams );
        }

        public void glConvolutionParameteriv( int target, int pname, IntPtr riparams )
        {
            mDglConvolutionParameteriv_IIP( target, pname, riparams );
        }

        public void glConvolutionParameterivEXT( int target, int pname, int[] riparams )
        {
            mDglConvolutionParameterivEXT_IIaI( target, pname, riparams );
        }

        public void glConvolutionParameterivEXT( int target, int pname, IntPtr riparams )
        {
            mDglConvolutionParameterivEXT_IIP( target, pname, riparams );
        }

        public void glCopyColorSubTable( int target, int start, int x, int y, int width )
        {
            mDglCopyColorSubTable_IIIII( target, start, x, y, width );
        }

        public void glCopyColorSubTableEXT( int target, int start, int x, int y, int width )
        {
            mDglCopyColorSubTableEXT_IIIII( target, start, x, y, width );
        }

        public void glCopyColorTable( int target, int internalformat, int x, int y, int width )
        {
            mDglCopyColorTable_IIIII( target, internalformat, x, y, width );
        }

        public void glCopyColorTableSGI( int target, int internalformat, int x, int y, int width )
        {
            mDglCopyColorTableSGI_IIIII( target, internalformat, x, y, width );
        }

        public void glCopyConvolutionFilter1D( int target, int internalformat, int x, int y, int width )
        {
            mDglCopyConvolutionFilter1D_IIIII( target, internalformat, x, y, width );
        }

        public void glCopyConvolutionFilter1DEXT( int target, int internalformat, int x, int y, int width )
        {
            mDglCopyConvolutionFilter1DEXT_IIIII( target, internalformat, x, y, width );
        }

        public void glCopyConvolutionFilter2D( int target, int internalformat, int x, int y, int width, int height )
        {
            mDglCopyConvolutionFilter2D_IIIIII( target, internalformat, x, y, width, height );
        }

        public void glCopyConvolutionFilter2DEXT( int target, int internalformat, int x, int y, int width, int height )
        {
            mDglCopyConvolutionFilter2DEXT_IIIIII( target, internalformat, x, y, width, height );
        }

        public void glCopyPixels( int x, int y, int width, int height, int itype )
        {
            mDglCopyPixels_IIIII( x, y, width, height, itype );
        }

        public void glCopyTexImage1D( int target, int level, int internalFormat, int x, int y, int width, int border )
        {
            mDglCopyTexImage1D_IIIIIII( target, level, internalFormat, x, y, width, border );
        }

        public void glCopyTexImage1DEXT( int target, int level, int internalformat, int x, int y, int width, int border )
        {
            mDglCopyTexImage1DEXT_IIIIIII( target, level, internalformat, x, y, width, border );
        }

        public void glCopyTexImage2D( int target, int level, int internalFormat, int x, int y, int width, int height, int border )
        {
            mDglCopyTexImage2D_IIIIIIII( target, level, internalFormat, x, y, width, height, border );
        }

        public void glCopyTexImage2DEXT( int target, int level, int internalformat, int x, int y, int width, int height, int border )
        {
            mDglCopyTexImage2DEXT_IIIIIIII( target, level, internalformat, x, y, width, height, border );
        }

        public void glCopyTexSubImage1D( int target, int level, int xoffset, int x, int y, int width )
        {
            mDglCopyTexSubImage1D_IIIIII( target, level, xoffset, x, y, width );
        }

        public void glCopyTexSubImage1DEXT( int target, int level, int xoffset, int x, int y, int width )
        {
            mDglCopyTexSubImage1DEXT_IIIIII( target, level, xoffset, x, y, width );
        }

        public void glCopyTexSubImage2D( int target, int level, int xoffset, int yoffset, int x, int y, int width, int height )
        {
            mDglCopyTexSubImage2D_IIIIIIII( target, level, xoffset, yoffset, x, y, width, height );
        }

        public void glCopyTexSubImage2DEXT( int target, int level, int xoffset, int yoffset, int x, int y, int width, int height )
        {
            mDglCopyTexSubImage2DEXT_IIIIIIII( target, level, xoffset, yoffset, x, y, width, height );
        }

        public void glCopyTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height )
        {
            mDglCopyTexSubImage3D_IIIIIIIII( target, level, xoffset, yoffset, zoffset, x, y, width, height );
        }

        public void glCopyTexSubImage3DEXT( int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height )
        {
            mDglCopyTexSubImage3DEXT_IIIIIIIII( target, level, xoffset, yoffset, zoffset, x, y, width, height );
        }

        public int glCreateProgram()
        {
            return (mDglCreateProgram_V());
        }

        public int glCreateProgramObjectARB()
        {
            return (mDglCreateProgramObjectARB_V());
        }

        public int glCreateShader( int itype )
        {
            return (mDglCreateShader_I( itype ));
        }

        public int glCreateShaderObjectARB( int shaderType )
        {
            return (mDglCreateShaderObjectARB_I( shaderType ));
        }

        public void glCullFace( int mode )
        {
            mDglCullFace_I( mode );
        }

        public void glCullParameterdvEXT( int pname, double[] rdparams )
        {
            mDglCullParameterdvEXT_IaD( pname, rdparams );
        }

        public void glCullParameterdvEXT( int pname, IntPtr rdparams )
        {
            mDglCullParameterdvEXT_IP( pname, rdparams );
        }

        public void glCullParameterfvEXT( int pname, float[] rfparams )
        {
            mDglCullParameterfvEXT_IaF( pname, rfparams );
        }

        public void glCullParameterfvEXT( int pname, IntPtr rfparams )
        {
            mDglCullParameterfvEXT_IP( pname, rfparams );
        }

        public void glCurrentPaletteMatrixARB( int index )
        {
            mDglCurrentPaletteMatrixARB_I( index );
        }

        public void glDeformationMap3dSGIX( int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points )
        {
            mDglDeformationMap3dSGIX_IDDIIDDIIDDIIaD( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points );
        }

        public void glDeformationMap3dSGIX( int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, IntPtr points )
        {
            mDglDeformationMap3dSGIX_IDDIIDDIIDDIIP( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points );
        }

        public void glDeformationMap3fSGIX( int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points )
        {
            mDglDeformationMap3fSGIX_IFFIIFFIIFFIIaF( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points );
        }

        public void glDeformationMap3fSGIX( int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, IntPtr points )
        {
            mDglDeformationMap3fSGIX_IFFIIFFIIFFIIP( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points );
        }

        public void glDeformSGIX( int mask )
        {
            mDglDeformSGIX_I( mask );
        }

        public void glDeleteAsyncMarkersSGIX( int marker, int range )
        {
            mDglDeleteAsyncMarkersSGIX_II( marker, range );
        }

        public void glDeleteBuffers( int n, int[] buffers )
        {
            mDglDeleteBuffers_IaI( n, buffers );
        }

        public void glDeleteBuffers( int n, IntPtr buffers )
        {
            mDglDeleteBuffers_IP( n, buffers );
        }

        public void glDeleteBuffersARB( int n, int[] buffers )
        {
            mDglDeleteBuffersARB_IaI( n, buffers );
        }

        public void glDeleteBuffersARB( int n, IntPtr buffers )
        {
            mDglDeleteBuffersARB_IP( n, buffers );
        }

        public void glDeleteFencesAPPLE( int n, int[] fences )
        {
            mDglDeleteFencesAPPLE_IaI( n, fences );
        }

        public void glDeleteFencesAPPLE( int n, IntPtr fences )
        {
            mDglDeleteFencesAPPLE_IP( n, fences );
        }

        public void glDeleteFencesNV( int n, int[] fences )
        {
            mDglDeleteFencesNV_IaI( n, fences );
        }

        public void glDeleteFencesNV( int n, IntPtr fences )
        {
            mDglDeleteFencesNV_IP( n, fences );
        }

        public void glDeleteFragmentShaderATI( int id )
        {
            mDglDeleteFragmentShaderATI_I( id );
        }

        public void glDeleteFramebuffersEXT( int n, int[] framebuffers )
        {
            mDglDeleteFramebuffersEXT_IaI( n, framebuffers );
        }

        public void glDeleteFramebuffersEXT( int n, IntPtr framebuffers )
        {
            mDglDeleteFramebuffersEXT_IP( n, framebuffers );
        }

        public void glDeleteLists( int list, int range )
        {
            mDglDeleteLists_II( list, range );
        }

        public void glDeleteObjectARB( int obj )
        {
            mDglDeleteObjectARB_I( obj );
        }

        public void glDeleteOcclusionQueriesNV( int n, int[] ids )
        {
            mDglDeleteOcclusionQueriesNV_IaI( n, ids );
        }

        public void glDeleteOcclusionQueriesNV( int n, IntPtr ids )
        {
            mDglDeleteOcclusionQueriesNV_IP( n, ids );
        }

        public void glDeleteProgram( int program )
        {
            mDglDeleteProgram_I( program );
        }

        public void glDeleteProgramsARB( int n, int[] programs )
        {
            mDglDeleteProgramsARB_IaI( n, programs );
        }

        public void glDeleteProgramsARB( int n, IntPtr programs )
        {
            mDglDeleteProgramsARB_IP( n, programs );
        }

        public void glDeleteProgramsNV( int n, int[] programs )
        {
            mDglDeleteProgramsNV_IaI( n, programs );
        }

        public void glDeleteProgramsNV( int n, IntPtr programs )
        {
            mDglDeleteProgramsNV_IP( n, programs );
        }

        public void glDeleteQueries( int n, int[] ids )
        {
            mDglDeleteQueries_IaI( n, ids );
        }

        public void glDeleteQueries( int n, IntPtr ids )
        {
            mDglDeleteQueries_IP( n, ids );
        }

        public void glDeleteQueriesARB( int n, int[] ids )
        {
            mDglDeleteQueriesARB_IaI( n, ids );
        }

        public void glDeleteQueriesARB( int n, IntPtr ids )
        {
            mDglDeleteQueriesARB_IP( n, ids );
        }

        public void glDeleteRenderbuffersEXT( int n, int[] renderbuffers )
        {
            mDglDeleteRenderbuffersEXT_IaI( n, renderbuffers );
        }

        public void glDeleteRenderbuffersEXT( int n, IntPtr renderbuffers )
        {
            mDglDeleteRenderbuffersEXT_IP( n, renderbuffers );
        }

        public void glDeleteShader( int shader )
        {
            mDglDeleteShader_I( shader );
        }

        public void glDeleteTextures( int n, int[] textures )
        {
            mDglDeleteTextures_IaI( n, textures );
        }

        public void glDeleteTextures( int n, IntPtr textures )
        {
            mDglDeleteTextures_IP( n, textures );
        }

        public void glDeleteTexturesEXT( int n, int[] textures )
        {
            mDglDeleteTexturesEXT_IaI( n, textures );
        }

        public void glDeleteTexturesEXT( int n, IntPtr textures )
        {
            mDglDeleteTexturesEXT_IP( n, textures );
        }

        public void glDeleteVertexArraysAPPLE( int n, int[] arrays )
        {
            mDglDeleteVertexArraysAPPLE_IaI( n, arrays );
        }

        public void glDeleteVertexArraysAPPLE( int n, IntPtr arrays )
        {
            mDglDeleteVertexArraysAPPLE_IP( n, arrays );
        }

        public void glDeleteVertexShaderEXT( int id )
        {
            mDglDeleteVertexShaderEXT_I( id );
        }

        public void glDepthBoundsEXT( double zmin, double zmax )
        {
            mDglDepthBoundsEXT_DD( zmin, zmax );
        }

        public void glDepthFunc( int func )
        {
            mDglDepthFunc_I( func );
        }

        public void glDepthMask( byte flag )
        {
            mDglDepthMask_B( flag );
        }

        public void glDepthRange( double zNear, double zFar )
        {
            mDglDepthRange_DD( zNear, zFar );
        }

        public void glDetachObjectARB( int containerObj, int attachedObj )
        {
            mDglDetachObjectARB_II( containerObj, attachedObj );
        }

        public void glDetachShader( int program, int shader )
        {
            mDglDetachShader_II( program, shader );
        }

        public void glDetailTexFuncSGIS( int target, int n, float[] points )
        {
            mDglDetailTexFuncSGIS_IIaF( target, n, points );
        }

        public void glDetailTexFuncSGIS( int target, int n, IntPtr points )
        {
            mDglDetailTexFuncSGIS_IIP( target, n, points );
        }

        public void glDisable( int cap )
        {
            mDglDisable_I( cap );
        }

        public void glDisableClientState( int array )
        {
            mDglDisableClientState_I( array );
        }

        public void glDisableVariantClientStateEXT( int id )
        {
            mDglDisableVariantClientStateEXT_I( id );
        }

        public void glDisableVertexAttribArray( int index )
        {
            mDglDisableVertexAttribArray_I( index );
        }

        public void glDisableVertexAttribArrayARB( int index )
        {
            mDglDisableVertexAttribArrayARB_I( index );
        }

        public void glDrawArrays( int mode, int first, int count )
        {
            mDglDrawArrays_III( mode, first, count );
        }

        public void glDrawArraysEXT( int mode, int first, int count )
        {
            mDglDrawArraysEXT_III( mode, first, count );
        }

        public void glDrawBuffer( int mode )
        {
            mDglDrawBuffer_I( mode );
        }

        public void glDrawBuffers( int n, int[] bufs )
        {
            mDglDrawBuffers_IaI( n, bufs );
        }

        public void glDrawBuffers( int n, IntPtr bufs )
        {
            mDglDrawBuffers_IP( n, bufs );
        }

        public void glDrawBuffersARB( int n, int[] bufs )
        {
            mDglDrawBuffersARB_IaI( n, bufs );
        }

        public void glDrawBuffersARB( int n, IntPtr bufs )
        {
            mDglDrawBuffersARB_IP( n, bufs );
        }

        public void glDrawBuffersATI( int n, int[] bufs )
        {
            mDglDrawBuffersATI_IaI( n, bufs );
        }

        public void glDrawBuffersATI( int n, IntPtr bufs )
        {
            mDglDrawBuffersATI_IP( n, bufs );
        }

        public void glDrawElementArrayAPPLE( int mode, int first, int count )
        {
            mDglDrawElementArrayAPPLE_III( mode, first, count );
        }

        public void glDrawElementArrayATI( int mode, int count )
        {
            mDglDrawElementArrayATI_II( mode, count );
        }

        public void glDrawElements( int mode, int count, int itype, byte[] indices )
        {
            mDglDrawElements_IIIaB( mode, count, itype, indices );
        }

        public void glDrawElements( int mode, int count, int itype, short[] indices )
        {
            mDglDrawElements_IIIaH( mode, count, itype, indices );
        }

        public void glDrawElements( int mode, int count, int itype, int[] indices )
        {
            mDglDrawElements_IIIaI( mode, count, itype, indices );
        }

        public void glDrawElements( int mode, int count, int itype, IntPtr indices )
        {
            mDglDrawElements_IIIP( mode, count, itype, indices );
        }

        public void glDrawMeshArraysSUN( int mode, int first, int count, int width )
        {
            mDglDrawMeshArraysSUN_IIII( mode, first, count, width );
        }

        public void glDrawPixels( int width, int height, int format, int itype, byte[] pixels )
        {
            mDglDrawPixels_IIIIaB( width, height, format, itype, pixels );
        }

        public void glDrawPixels( int width, int height, int format, int itype, short[] pixels )
        {
            mDglDrawPixels_IIIIaH( width, height, format, itype, pixels );
        }

        public void glDrawPixels( int width, int height, int format, int itype, int[] pixels )
        {
            mDglDrawPixels_IIIIaI( width, height, format, itype, pixels );
        }

        public void glDrawPixels( int width, int height, int format, int itype, float[] pixels )
        {
            mDglDrawPixels_IIIIaF( width, height, format, itype, pixels );
        }

        public void glDrawPixels( int width, int height, int format, int itype, IntPtr pixels )
        {
            mDglDrawPixels_IIIIP( width, height, format, itype, pixels );
        }

        public void glDrawRangeElementArrayAPPLE( int mode, int start, int end, int first, int count )
        {
            mDglDrawRangeElementArrayAPPLE_IIIII( mode, start, end, first, count );
        }

        public void glDrawRangeElementArrayATI( int mode, int start, int end, int count )
        {
            mDglDrawRangeElementArrayATI_IIII( mode, start, end, count );
        }

        public void glDrawRangeElements( int mode, int start, int end, int count, int itype, byte[] indices )
        {
            mDglDrawRangeElements_IIIIIaB( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElements( int mode, int start, int end, int count, int itype, short[] indices )
        {
            mDglDrawRangeElements_IIIIIaH( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElements( int mode, int start, int end, int count, int itype, int[] indices )
        {
            mDglDrawRangeElements_IIIIIaI( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElements( int mode, int start, int end, int count, int itype, IntPtr indices )
        {
            mDglDrawRangeElements_IIIIIP( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElementsEXT( int mode, int start, int end, int count, int itype, byte[] indices )
        {
            mDglDrawRangeElementsEXT_IIIIIaB( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElementsEXT( int mode, int start, int end, int count, int itype, short[] indices )
        {
            mDglDrawRangeElementsEXT_IIIIIaH( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElementsEXT( int mode, int start, int end, int count, int itype, int[] indices )
        {
            mDglDrawRangeElementsEXT_IIIIIaI( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElementsEXT( int mode, int start, int end, int count, int itype, IntPtr indices )
        {
            mDglDrawRangeElementsEXT_IIIIIP( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElementsWIN( int mode, int start, int end, int count, int itype, byte[] indices )
        {
            mDglDrawRangeElementsWIN_IIIIIaB( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElementsWIN( int mode, int start, int end, int count, int itype, short[] indices )
        {
            mDglDrawRangeElementsWIN_IIIIIaH( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElementsWIN( int mode, int start, int end, int count, int itype, int[] indices )
        {
            mDglDrawRangeElementsWIN_IIIIIaI( mode, start, end, count, itype, indices );
        }

        public void glDrawRangeElementsWIN( int mode, int start, int end, int count, int itype, IntPtr indices )
        {
            mDglDrawRangeElementsWIN_IIIIIP( mode, start, end, count, itype, indices );
        }

        public void glEdgeFlag( byte flag )
        {
            mDglEdgeFlag_B( flag );
        }

        public void glEdgeFlagPointer( int stride, byte[] pointer )
        {
            mDglEdgeFlagPointer_IaB( stride, pointer );
        }

        public void glEdgeFlagPointer( int stride, IntPtr pointer )
        {
            mDglEdgeFlagPointer_IP( stride, pointer );
        }

        public void glEdgeFlagPointerEXT( int stride, int count, byte[] pointer )
        {
            mDglEdgeFlagPointerEXT_IIaB( stride, count, pointer );
        }

        public void glEdgeFlagPointerEXT( int stride, int count, IntPtr pointer )
        {
            mDglEdgeFlagPointerEXT_IIP( stride, count, pointer );
        }

        public void glEdgeFlagPointerListIBM( int stride, ref IntPtr pointer, int ptrstride )
        {
            mDglEdgeFlagPointerListIBM_IrPI( stride, ref pointer, ptrstride );
        }

        public void glEdgeFlagv( byte[] flag )
        {
            mDglEdgeFlagv_aB( flag );
        }

        public void glEdgeFlagv( IntPtr flag )
        {
            mDglEdgeFlagv_P( flag );
        }

        public void glElementPointerAPPLE( int itype, byte[] pointer )
        {
            mDglElementPointerAPPLE_IaB( itype, pointer );
        }

        public void glElementPointerAPPLE( int itype, IntPtr pointer )
        {
            mDglElementPointerAPPLE_IP( itype, pointer );
        }

        public void glElementPointerATI( int itype, byte[] pointer )
        {
            mDglElementPointerATI_IaB( itype, pointer );
        }

        public void glElementPointerATI( int itype, IntPtr pointer )
        {
            mDglElementPointerATI_IP( itype, pointer );
        }

        public void glEnable( int cap )
        {
            mDglEnable_I( cap );
        }

        public void glEnableClientState( int array )
        {
            mDglEnableClientState_I( array );
        }

        public void glEnableVariantClientStateEXT( int id )
        {
            mDglEnableVariantClientStateEXT_I( id );
        }

        public void glEnableVertexAttribArray( int index )
        {
            mDglEnableVertexAttribArray_I( index );
        }

        public void glEnableVertexAttribArrayARB( int index )
        {
            mDglEnableVertexAttribArrayARB_I( index );
        }

        public void glEnd()
        {
            mDglEnd_V();
        }

        public void glEndFragmentShaderATI()
        {
            mDglEndFragmentShaderATI_V();
        }

        public void glEndList()
        {
            mDglEndList_V();
        }

        public void glEndOcclusionQueryNV()
        {
            mDglEndOcclusionQueryNV_V();
        }

        public void glEndQuery( int target )
        {
            mDglEndQuery_I( target );
        }

        public void glEndQueryARB( int target )
        {
            mDglEndQueryARB_I( target );
        }

        public void glEndVertexShaderEXT()
        {
            mDglEndVertexShaderEXT_V();
        }

        public void glEvalCoord1d( double u )
        {
            mDglEvalCoord1d_D( u );
        }

        public void glEvalCoord1dv( double[] u )
        {
            mDglEvalCoord1dv_aD( u );
        }

        public void glEvalCoord1dv( IntPtr u )
        {
            mDglEvalCoord1dv_P( u );
        }

        public void glEvalCoord1f( float u )
        {
            mDglEvalCoord1f_F( u );
        }

        public void glEvalCoord1fv( float[] u )
        {
            mDglEvalCoord1fv_aF( u );
        }

        public void glEvalCoord1fv( IntPtr u )
        {
            mDglEvalCoord1fv_P( u );
        }

        public void glEvalCoord2d( double u, double v )
        {
            mDglEvalCoord2d_DD( u, v );
        }

        public void glEvalCoord2dv( double[] u )
        {
            mDglEvalCoord2dv_aD( u );
        }

        public void glEvalCoord2dv( IntPtr u )
        {
            mDglEvalCoord2dv_P( u );
        }

        public void glEvalCoord2f( float u, float v )
        {
            mDglEvalCoord2f_FF( u, v );
        }

        public void glEvalCoord2fv( float[] u )
        {
            mDglEvalCoord2fv_aF( u );
        }

        public void glEvalCoord2fv( IntPtr u )
        {
            mDglEvalCoord2fv_P( u );
        }

        public void glEvalMapsNV( int target, int mode )
        {
            mDglEvalMapsNV_II( target, mode );
        }

        public void glEvalMesh1( int mode, int i1, int i2 )
        {
            mDglEvalMesh1_III( mode, i1, i2 );
        }

        public void glEvalMesh2( int mode, int i1, int i2, int j1, int j2 )
        {
            mDglEvalMesh2_IIIII( mode, i1, i2, j1, j2 );
        }

        public void glEvalPoint1( int i )
        {
            mDglEvalPoint1_I( i );
        }

        public void glEvalPoint2( int i, int j )
        {
            mDglEvalPoint2_II( i, j );
        }

        public void glExecuteProgramNV( int target, int id, float[] rfparams )
        {
            mDglExecuteProgramNV_IIaF( target, id, rfparams );
        }

        public void glExecuteProgramNV( int target, int id, IntPtr rfparams )
        {
            mDglExecuteProgramNV_IIP( target, id, rfparams );
        }

        public void glExtractComponentEXT( int res, int src, int num )
        {
            mDglExtractComponentEXT_III( res, src, num );
        }

        public void glFeedbackBuffer( int size, int itype, float[] buffer )
        {
            mDglFeedbackBuffer_IIaF( size, itype, buffer );
        }

        public void glFeedbackBuffer( int size, int itype, IntPtr buffer )
        {
            mDglFeedbackBuffer_IIP( size, itype, buffer );
        }

        public void glFinalCombinerInputNV( int variable, int input, int mapping, int componentUsage )
        {
            mDglFinalCombinerInputNV_IIII( variable, input, mapping, componentUsage );
        }

        public void glFinish()
        {
            mDglFinish_V();
        }

        public int glFinishAsyncSGIX( ref int markerp )
        {
            return (mDglFinishAsyncSGIX_rI( ref markerp ));
        }

        public void glFinishFenceAPPLE( int fence )
        {
            mDglFinishFenceAPPLE_I( fence );
        }

        public void glFinishFenceNV( int fence )
        {
            mDglFinishFenceNV_I( fence );
        }

        public void glFinishObjectAPPLE( int iobject, int name )
        {
            mDglFinishObjectAPPLE_II( iobject, name );
        }

        public void glFinishTextureSUNX()
        {
            mDglFinishTextureSUNX_V();
        }

        public void glFlush()
        {
            mDglFlush_V();
        }

        public void glFlushPixelDataRangeNV( int target )
        {
            mDglFlushPixelDataRangeNV_I( target );
        }

        public void glFlushRasterSGIX()
        {
            mDglFlushRasterSGIX_V();
        }

        public void glFlushVertexArrayRangeAPPLE( int length, byte[] pointer )
        {
            mDglFlushVertexArrayRangeAPPLE_IaB( length, pointer );
        }

        public void glFlushVertexArrayRangeAPPLE( int length, IntPtr pointer )
        {
            mDglFlushVertexArrayRangeAPPLE_IP( length, pointer );
        }

        public void glFlushVertexArrayRangeNV()
        {
            mDglFlushVertexArrayRangeNV_V();
        }

        public void glFogCoordd( double coord )
        {
            mDglFogCoordd_D( coord );
        }

        public void glFogCoorddEXT( double coord )
        {
            mDglFogCoorddEXT_D( coord );
        }

        public void glFogCoorddv( double[] coord )
        {
            mDglFogCoorddv_aD( coord );
        }

        public void glFogCoorddv( IntPtr coord )
        {
            mDglFogCoorddv_P( coord );
        }

        public void glFogCoorddvEXT( double[] coord )
        {
            mDglFogCoorddvEXT_aD( coord );
        }

        public void glFogCoorddvEXT( IntPtr coord )
        {
            mDglFogCoorddvEXT_P( coord );
        }

        public void glFogCoordf( float coord )
        {
            mDglFogCoordf_F( coord );
        }

        public void glFogCoordfEXT( float coord )
        {
            mDglFogCoordfEXT_F( coord );
        }

        public void glFogCoordfv( float[] coord )
        {
            mDglFogCoordfv_aF( coord );
        }

        public void glFogCoordfv( IntPtr coord )
        {
            mDglFogCoordfv_P( coord );
        }

        public void glFogCoordfvEXT( float[] coord )
        {
            mDglFogCoordfvEXT_aF( coord );
        }

        public void glFogCoordfvEXT( IntPtr coord )
        {
            mDglFogCoordfvEXT_P( coord );
        }

        public void glFogCoordhNV( short fog )
        {
            mDglFogCoordhNV_H( fog );
        }

        public void glFogCoordhvNV( short[] fog )
        {
            mDglFogCoordhvNV_aH( fog );
        }

        public void glFogCoordhvNV( IntPtr fog )
        {
            mDglFogCoordhvNV_P( fog );
        }

        public void glFogCoordPointer( int itype, int stride, float[] pointer )
        {
            mDglFogCoordPointer_IIaF( itype, stride, pointer );
        }

        public void glFogCoordPointer( int itype, int stride, double[] pointer )
        {
            mDglFogCoordPointer_IIaD( itype, stride, pointer );
        }

        public void glFogCoordPointer( int itype, int stride, IntPtr pointer )
        {
            mDglFogCoordPointer_IIP( itype, stride, pointer );
        }

        public void glFogCoordPointerEXT( int itype, int stride, float[] pointer )
        {
            mDglFogCoordPointerEXT_IIaF( itype, stride, pointer );
        }

        public void glFogCoordPointerEXT( int itype, int stride, double[] pointer )
        {
            mDglFogCoordPointerEXT_IIaD( itype, stride, pointer );
        }

        public void glFogCoordPointerEXT( int itype, int stride, IntPtr pointer )
        {
            mDglFogCoordPointerEXT_IIP( itype, stride, pointer );
        }

        public void glFogCoordPointerListIBM( int itype, int stride, ref IntPtr pointer, int ptrstride )
        {
            mDglFogCoordPointerListIBM_IIrPI( itype, stride, ref pointer, ptrstride );
        }

        public void glFogf( int pname, float fparam )
        {
            mDglFogf_IF( pname, fparam );
        }

        public void glFogFuncSGIS( int n, float[] points )
        {
            mDglFogFuncSGIS_IaF( n, points );
        }

        public void glFogFuncSGIS( int n, IntPtr points )
        {
            mDglFogFuncSGIS_IP( n, points );
        }

        public void glFogfv( int pname, float[] rfparams )
        {
            mDglFogfv_IaF( pname, rfparams );
        }

        public void glFogfv( int pname, IntPtr rfparams )
        {
            mDglFogfv_IP( pname, rfparams );
        }

        public void glFogi( int pname, int iparam )
        {
            mDglFogi_II( pname, iparam );
        }

        public void glFogiv( int pname, int[] riparams )
        {
            mDglFogiv_IaI( pname, riparams );
        }

        public void glFogiv( int pname, IntPtr riparams )
        {
            mDglFogiv_IP( pname, riparams );
        }

        public void glFragmentColorMaterialSGIX( int face, int mode )
        {
            mDglFragmentColorMaterialSGIX_II( face, mode );
        }

        public void glFragmentLightfSGIX( int light, int pname, float fparam )
        {
            mDglFragmentLightfSGIX_IIF( light, pname, fparam );
        }

        public void glFragmentLightfvSGIX( int light, int pname, float[] rfparams )
        {
            mDglFragmentLightfvSGIX_IIaF( light, pname, rfparams );
        }

        public void glFragmentLightfvSGIX( int light, int pname, IntPtr rfparams )
        {
            mDglFragmentLightfvSGIX_IIP( light, pname, rfparams );
        }

        public void glFragmentLightiSGIX( int light, int pname, int iparam )
        {
            mDglFragmentLightiSGIX_III( light, pname, iparam );
        }

        public void glFragmentLightivSGIX( int light, int pname, int[] riparams )
        {
            mDglFragmentLightivSGIX_IIaI( light, pname, riparams );
        }

        public void glFragmentLightivSGIX( int light, int pname, IntPtr riparams )
        {
            mDglFragmentLightivSGIX_IIP( light, pname, riparams );
        }

        public void glFragmentLightModelfSGIX( int pname, float fparam )
        {
            mDglFragmentLightModelfSGIX_IF( pname, fparam );
        }

        public void glFragmentLightModelfvSGIX( int pname, float[] rfparams )
        {
            mDglFragmentLightModelfvSGIX_IaF( pname, rfparams );
        }

        public void glFragmentLightModelfvSGIX( int pname, IntPtr rfparams )
        {
            mDglFragmentLightModelfvSGIX_IP( pname, rfparams );
        }

        public void glFragmentLightModeliSGIX( int pname, int iparam )
        {
            mDglFragmentLightModeliSGIX_II( pname, iparam );
        }

        public void glFragmentLightModelivSGIX( int pname, int[] riparams )
        {
            mDglFragmentLightModelivSGIX_IaI( pname, riparams );
        }

        public void glFragmentLightModelivSGIX( int pname, IntPtr riparams )
        {
            mDglFragmentLightModelivSGIX_IP( pname, riparams );
        }

        public void glFragmentMaterialfSGIX( int face, int pname, float fparam )
        {
            mDglFragmentMaterialfSGIX_IIF( face, pname, fparam );
        }

        public void glFragmentMaterialfvSGIX( int face, int pname, float[] rfparams )
        {
            mDglFragmentMaterialfvSGIX_IIaF( face, pname, rfparams );
        }

        public void glFragmentMaterialfvSGIX( int face, int pname, IntPtr rfparams )
        {
            mDglFragmentMaterialfvSGIX_IIP( face, pname, rfparams );
        }

        public void glFragmentMaterialiSGIX( int face, int pname, int iparam )
        {
            mDglFragmentMaterialiSGIX_III( face, pname, iparam );
        }

        public void glFragmentMaterialivSGIX( int face, int pname, int[] riparams )
        {
            mDglFragmentMaterialivSGIX_IIaI( face, pname, riparams );
        }

        public void glFragmentMaterialivSGIX( int face, int pname, IntPtr riparams )
        {
            mDglFragmentMaterialivSGIX_IIP( face, pname, riparams );
        }

        public void glFramebufferRenderbufferEXT( int target, int attachment, int renderbuffertarget, int renderbuffer )
        {
            mDglFramebufferRenderbufferEXT_IIII( target, attachment, renderbuffertarget, renderbuffer );
        }

        public void glFramebufferTexture1DEXT( int target, int attachment, int textarget, int texture, int level )
        {
            mDglFramebufferTexture1DEXT_IIIII( target, attachment, textarget, texture, level );
        }

        public void glFramebufferTexture2DEXT( int target, int attachment, int textarget, int texture, int level )
        {
            mDglFramebufferTexture2DEXT_IIIII( target, attachment, textarget, texture, level );
        }

        public void glFramebufferTexture3DEXT( int target, int attachment, int textarget, int texture, int level, int zoffset )
        {
            mDglFramebufferTexture3DEXT_IIIIII( target, attachment, textarget, texture, level, zoffset );
        }

        public void glFrameZoomSGIX( int factor )
        {
            mDglFrameZoomSGIX_I( factor );
        }

        public void glFreeObjectBufferATI( int buffer )
        {
            mDglFreeObjectBufferATI_I( buffer );
        }

        public void glFrontFace( int mode )
        {
            mDglFrontFace_I( mode );
        }

        public void glFrustum( double left, double right, double bottom, double top, double zNear, double zFar )
        {
            mDglFrustum_DDDDDD( left, right, bottom, top, zNear, zFar );
        }

        public int glGenAsyncMarkersSGIX( int range )
        {
            return (mDglGenAsyncMarkersSGIX_I( range ));
        }

        public void glGenBuffers( int n, int[] buffers )
        {
            mDglGenBuffers_IaI( n, buffers );
        }

        public void glGenBuffers( int n, IntPtr buffers )
        {
            mDglGenBuffers_IP( n, buffers );
        }

        public void glGenBuffersARB( int n, int[] buffers )
        {
            mDglGenBuffersARB_IaI( n, buffers );
        }

        public void glGenBuffersARB( int n, IntPtr buffers )
        {
            mDglGenBuffersARB_IP( n, buffers );
        }

        public void glGenerateMipmapEXT( int target )
        {
            mDglGenerateMipmapEXT_I( target );
        }

        public void glGenFencesAPPLE( int n, int[] fences )
        {
            mDglGenFencesAPPLE_IaI( n, fences );
        }

        public void glGenFencesAPPLE( int n, IntPtr fences )
        {
            mDglGenFencesAPPLE_IP( n, fences );
        }

        public void glGenFencesNV( int n, int[] fences )
        {
            mDglGenFencesNV_IaI( n, fences );
        }

        public void glGenFencesNV( int n, IntPtr fences )
        {
            mDglGenFencesNV_IP( n, fences );
        }

        public int glGenFragmentShadersATI( int range )
        {
            return (mDglGenFragmentShadersATI_I( range ));
        }

        public void glGenFramebuffersEXT( int n, int[] framebuffers )
        {
            mDglGenFramebuffersEXT_IaI( n, framebuffers );
        }

        public void glGenFramebuffersEXT( int n, IntPtr framebuffers )
        {
            mDglGenFramebuffersEXT_IP( n, framebuffers );
        }

        public int glGenLists( int range )
        {
            return (mDglGenLists_I( range ));
        }

        public void glGenOcclusionQueriesNV( int n, int[] ids )
        {
            mDglGenOcclusionQueriesNV_IaI( n, ids );
        }

        public void glGenOcclusionQueriesNV( int n, IntPtr ids )
        {
            mDglGenOcclusionQueriesNV_IP( n, ids );
        }

        public void glGenProgramsARB( int n, int[] programs )
        {
            mDglGenProgramsARB_IaI( n, programs );
        }

        public void glGenProgramsARB( int n, IntPtr programs )
        {
            mDglGenProgramsARB_IP( n, programs );
        }

        public void glGenProgramsNV( int n, int[] programs )
        {
            mDglGenProgramsNV_IaI( n, programs );
        }

        public void glGenProgramsNV( int n, IntPtr programs )
        {
            mDglGenProgramsNV_IP( n, programs );
        }

        public void glGenQueries( int n, int[] ids )
        {
            mDglGenQueries_IaI( n, ids );
        }

        public void glGenQueries( int n, IntPtr ids )
        {
            mDglGenQueries_IP( n, ids );
        }

        public void glGenQueriesARB( int n, int[] ids )
        {
            mDglGenQueriesARB_IaI( n, ids );
        }

        public void glGenQueriesARB( int n, IntPtr ids )
        {
            mDglGenQueriesARB_IP( n, ids );
        }

        public void glGenRenderbuffersEXT( int n, int[] renderbuffers )
        {
            mDglGenRenderbuffersEXT_IaI( n, renderbuffers );
        }

        public void glGenRenderbuffersEXT( int n, IntPtr renderbuffers )
        {
            mDglGenRenderbuffersEXT_IP( n, renderbuffers );
        }

        public int glGenSymbolsEXT( int datatype, int storagetype, int range, int components )
        {
            return (mDglGenSymbolsEXT_IIII( datatype, storagetype, range, components ));
        }

        public void glGenTextures( int n, int[] textures )
        {
            mDglGenTextures_IaI( n, textures );
        }

        public void glGenTextures( int n, IntPtr textures )
        {
            mDglGenTextures_IP( n, textures );
        }

        public void glGenTexturesEXT( int n, int[] textures )
        {
            mDglGenTexturesEXT_IaI( n, textures );
        }

        public void glGenTexturesEXT( int n, IntPtr textures )
        {
            mDglGenTexturesEXT_IP( n, textures );
        }

        public void glGenVertexArraysAPPLE( int n, int[] arrays )
        {
            mDglGenVertexArraysAPPLE_IaI( n, arrays );
        }

        public void glGenVertexArraysAPPLE( int n, IntPtr arrays )
        {
            mDglGenVertexArraysAPPLE_IP( n, arrays );
        }

        public int glGenVertexShadersEXT( int range )
        {
            return (mDglGenVertexShadersEXT_I( range ));
        }

        public void glGetActiveAttrib( int program, int index, int bufSize, ref int length, ref int size, ref int ritype, String name )
        {
            mDglGetActiveAttrib_IIIrIrIrIS( program, index, bufSize, ref length, ref size, ref ritype, name );
        }

        public void glGetActiveAttribARB( int programObj, int index, int maxLength, ref int length, ref int size, ref int ritype, String name )
        {
            mDglGetActiveAttribARB_IIIrIrIrIS( programObj, index, maxLength, ref length, ref size, ref ritype, name );
        }

        public void glGetActiveUniform( int program, int index, int bufSize, ref int length, ref int size, ref int ritype, String name )
        {
            mDglGetActiveUniform_IIIrIrIrIS( program, index, bufSize, ref length, ref size, ref ritype, name );
        }

        public void glGetActiveUniformARB( int programObj, int index, int maxLength, ref int length, ref int size, ref int ritype, String name )
        {
            mDglGetActiveUniformARB_IIIrIrIrIS( programObj, index, maxLength, ref length, ref size, ref ritype, name );
        }

        public void glGetArrayObjectfvATI( int array, int pname, float[] rfparams )
        {
            mDglGetArrayObjectfvATI_IIaF( array, pname, rfparams );
        }

        public void glGetArrayObjectfvATI( int array, int pname, IntPtr rfparams )
        {
            mDglGetArrayObjectfvATI_IIP( array, pname, rfparams );
        }

        public void glGetArrayObjectivATI( int array, int pname, int[] riparams )
        {
            mDglGetArrayObjectivATI_IIaI( array, pname, riparams );
        }

        public void glGetArrayObjectivATI( int array, int pname, IntPtr riparams )
        {
            mDglGetArrayObjectivATI_IIP( array, pname, riparams );
        }

        public void glGetAttachedObjectsARB( int containerObj, int maxCount, ref int count, ref int obj )
        {
            mDglGetAttachedObjectsARB_IIrIrI( containerObj, maxCount, ref count, ref obj );
        }

        public void glGetAttachedShaders( int program, int maxCount, ref int count, ref int obj )
        {
            mDglGetAttachedShaders_IIrIrI( program, maxCount, ref count, ref obj );
        }

        public int glGetAttribLocation( int program, String name )
        {
            return (mDglGetAttribLocation_IS( program, name ));
        }

        public int glGetAttribLocationARB( int programObj, String name )
        {
            return (mDglGetAttribLocationARB_IS( programObj, name ));
        }

        public void glGetBooleanv( int pname, byte[] rbparams )
        {
            mDglGetBooleanv_IaB( pname, rbparams );
        }

        public void glGetBooleanv( int pname, IntPtr rbparams )
        {
            mDglGetBooleanv_IP( pname, rbparams );
        }

        public void glGetBufferParameteriv( int target, int pname, int[] riparams )
        {
            mDglGetBufferParameteriv_IIaI( target, pname, riparams );
        }

        public void glGetBufferParameteriv( int target, int pname, IntPtr riparams )
        {
            mDglGetBufferParameteriv_IIP( target, pname, riparams );
        }

        public void glGetBufferParameterivARB( int target, int pname, int[] riparams )
        {
            mDglGetBufferParameterivARB_IIaI( target, pname, riparams );
        }

        public void glGetBufferParameterivARB( int target, int pname, IntPtr riparams )
        {
            mDglGetBufferParameterivARB_IIP( target, pname, riparams );
        }

        public void glGetBufferPointerv( int target, int pname, ref IntPtr rvparams )
        {
            mDglGetBufferPointerv_IIrP( target, pname, ref rvparams );
        }

        public void glGetBufferPointervARB( int target, int pname, ref IntPtr rvparams )
        {
            mDglGetBufferPointervARB_IIrP( target, pname, ref rvparams );
        }

        public void glGetBufferSubData( int target, int offset, int size, byte[] data )
        {
            mDglGetBufferSubData_IIIaB( target, offset, size, data );
        }

        public void glGetBufferSubData( int target, int offset, int size, IntPtr data )
        {
            mDglGetBufferSubData_IIIP( target, offset, size, data );
        }

        public void glGetBufferSubDataARB( int target, int offset, int size, byte[] data )
        {
            mDglGetBufferSubDataARB_IIIaB( target, offset, size, data );
        }

        public void glGetBufferSubDataARB( int target, int offset, int size, IntPtr data )
        {
            mDglGetBufferSubDataARB_IIIP( target, offset, size, data );
        }

        public void glGetClipPlane( int plane, double[] equation )
        {
            mDglGetClipPlane_IaD( plane, equation );
        }

        public void glGetClipPlane( int plane, IntPtr equation )
        {
            mDglGetClipPlane_IP( plane, equation );
        }

        public void glGetColorTable( int target, int format, int itype, byte[] table )
        {
            mDglGetColorTable_IIIaB( target, format, itype, table );
        }

        public void glGetColorTable( int target, int format, int itype, short[] table )
        {
            mDglGetColorTable_IIIaH( target, format, itype, table );
        }

        public void glGetColorTable( int target, int format, int itype, int[] table )
        {
            mDglGetColorTable_IIIaI( target, format, itype, table );
        }

        public void glGetColorTable( int target, int format, int itype, float[] table )
        {
            mDglGetColorTable_IIIaF( target, format, itype, table );
        }

        public void glGetColorTable( int target, int format, int itype, IntPtr table )
        {
            mDglGetColorTable_IIIP( target, format, itype, table );
        }

        public void glGetColorTableEXT( int target, int format, int itype, byte[] data )
        {
            mDglGetColorTableEXT_IIIaB( target, format, itype, data );
        }

        public void glGetColorTableEXT( int target, int format, int itype, short[] data )
        {
            mDglGetColorTableEXT_IIIaH( target, format, itype, data );
        }

        public void glGetColorTableEXT( int target, int format, int itype, int[] data )
        {
            mDglGetColorTableEXT_IIIaI( target, format, itype, data );
        }

        public void glGetColorTableEXT( int target, int format, int itype, float[] data )
        {
            mDglGetColorTableEXT_IIIaF( target, format, itype, data );
        }

        public void glGetColorTableEXT( int target, int format, int itype, IntPtr data )
        {
            mDglGetColorTableEXT_IIIP( target, format, itype, data );
        }

        public void glGetColorTableParameterfv( int target, int pname, float[] rfparams )
        {
            mDglGetColorTableParameterfv_IIaF( target, pname, rfparams );
        }

        public void glGetColorTableParameterfv( int target, int pname, IntPtr rfparams )
        {
            mDglGetColorTableParameterfv_IIP( target, pname, rfparams );
        }

        public void glGetColorTableParameterfvEXT( int target, int pname, float[] rfparams )
        {
            mDglGetColorTableParameterfvEXT_IIaF( target, pname, rfparams );
        }

        public void glGetColorTableParameterfvEXT( int target, int pname, IntPtr rfparams )
        {
            mDglGetColorTableParameterfvEXT_IIP( target, pname, rfparams );
        }

        public void glGetColorTableParameterfvSGI( int target, int pname, float[] rfparams )
        {
            mDglGetColorTableParameterfvSGI_IIaF( target, pname, rfparams );
        }

        public void glGetColorTableParameterfvSGI( int target, int pname, IntPtr rfparams )
        {
            mDglGetColorTableParameterfvSGI_IIP( target, pname, rfparams );
        }

        public void glGetColorTableParameteriv( int target, int pname, int[] riparams )
        {
            mDglGetColorTableParameteriv_IIaI( target, pname, riparams );
        }

        public void glGetColorTableParameteriv( int target, int pname, IntPtr riparams )
        {
            mDglGetColorTableParameteriv_IIP( target, pname, riparams );
        }

        public void glGetColorTableParameterivEXT( int target, int pname, int[] riparams )
        {
            mDglGetColorTableParameterivEXT_IIaI( target, pname, riparams );
        }

        public void glGetColorTableParameterivEXT( int target, int pname, IntPtr riparams )
        {
            mDglGetColorTableParameterivEXT_IIP( target, pname, riparams );
        }

        public void glGetColorTableParameterivSGI( int target, int pname, int[] riparams )
        {
            mDglGetColorTableParameterivSGI_IIaI( target, pname, riparams );
        }

        public void glGetColorTableParameterivSGI( int target, int pname, IntPtr riparams )
        {
            mDglGetColorTableParameterivSGI_IIP( target, pname, riparams );
        }

        public void glGetColorTableSGI( int target, int format, int itype, byte[] table )
        {
            mDglGetColorTableSGI_IIIaB( target, format, itype, table );
        }

        public void glGetColorTableSGI( int target, int format, int itype, short[] table )
        {
            mDglGetColorTableSGI_IIIaH( target, format, itype, table );
        }

        public void glGetColorTableSGI( int target, int format, int itype, int[] table )
        {
            mDglGetColorTableSGI_IIIaI( target, format, itype, table );
        }

        public void glGetColorTableSGI( int target, int format, int itype, float[] table )
        {
            mDglGetColorTableSGI_IIIaF( target, format, itype, table );
        }

        public void glGetColorTableSGI( int target, int format, int itype, IntPtr table )
        {
            mDglGetColorTableSGI_IIIP( target, format, itype, table );
        }

        public void glGetCombinerInputParameterfvNV( int stage, int portion, int variable, int pname, float[] rfparams )
        {
            mDglGetCombinerInputParameterfvNV_IIIIaF( stage, portion, variable, pname, rfparams );
        }

        public void glGetCombinerInputParameterfvNV( int stage, int portion, int variable, int pname, IntPtr rfparams )
        {
            mDglGetCombinerInputParameterfvNV_IIIIP( stage, portion, variable, pname, rfparams );
        }

        public void glGetCombinerInputParameterivNV( int stage, int portion, int variable, int pname, int[] riparams )
        {
            mDglGetCombinerInputParameterivNV_IIIIaI( stage, portion, variable, pname, riparams );
        }

        public void glGetCombinerInputParameterivNV( int stage, int portion, int variable, int pname, IntPtr riparams )
        {
            mDglGetCombinerInputParameterivNV_IIIIP( stage, portion, variable, pname, riparams );
        }

        public void glGetCombinerOutputParameterfvNV( int stage, int portion, int pname, float[] rfparams )
        {
            mDglGetCombinerOutputParameterfvNV_IIIaF( stage, portion, pname, rfparams );
        }

        public void glGetCombinerOutputParameterfvNV( int stage, int portion, int pname, IntPtr rfparams )
        {
            mDglGetCombinerOutputParameterfvNV_IIIP( stage, portion, pname, rfparams );
        }

        public void glGetCombinerOutputParameterivNV( int stage, int portion, int pname, int[] riparams )
        {
            mDglGetCombinerOutputParameterivNV_IIIaI( stage, portion, pname, riparams );
        }

        public void glGetCombinerOutputParameterivNV( int stage, int portion, int pname, IntPtr riparams )
        {
            mDglGetCombinerOutputParameterivNV_IIIP( stage, portion, pname, riparams );
        }

        public void glGetCombinerStageParameterfvNV( int stage, int pname, float[] rfparams )
        {
            mDglGetCombinerStageParameterfvNV_IIaF( stage, pname, rfparams );
        }

        public void glGetCombinerStageParameterfvNV( int stage, int pname, IntPtr rfparams )
        {
            mDglGetCombinerStageParameterfvNV_IIP( stage, pname, rfparams );
        }

        public void glGetCompressedTexImage( int target, int level, byte[] img )
        {
            mDglGetCompressedTexImage_IIaB( target, level, img );
        }

        public void glGetCompressedTexImage( int target, int level, IntPtr img )
        {
            mDglGetCompressedTexImage_IIP( target, level, img );
        }

        public void glGetCompressedTexImageARB( int target, int level, byte[] img )
        {
            mDglGetCompressedTexImageARB_IIaB( target, level, img );
        }

        public void glGetCompressedTexImageARB( int target, int level, IntPtr img )
        {
            mDglGetCompressedTexImageARB_IIP( target, level, img );
        }

        public void glGetConvolutionFilter( int target, int format, int itype, byte[] image )
        {
            mDglGetConvolutionFilter_IIIaB( target, format, itype, image );
        }

        public void glGetConvolutionFilter( int target, int format, int itype, short[] image )
        {
            mDglGetConvolutionFilter_IIIaH( target, format, itype, image );
        }

        public void glGetConvolutionFilter( int target, int format, int itype, int[] image )
        {
            mDglGetConvolutionFilter_IIIaI( target, format, itype, image );
        }

        public void glGetConvolutionFilter( int target, int format, int itype, float[] image )
        {
            mDglGetConvolutionFilter_IIIaF( target, format, itype, image );
        }

        public void glGetConvolutionFilter( int target, int format, int itype, IntPtr image )
        {
            mDglGetConvolutionFilter_IIIP( target, format, itype, image );
        }

        public void glGetConvolutionFilterEXT( int target, int format, int itype, byte[] image )
        {
            mDglGetConvolutionFilterEXT_IIIaB( target, format, itype, image );
        }

        public void glGetConvolutionFilterEXT( int target, int format, int itype, short[] image )
        {
            mDglGetConvolutionFilterEXT_IIIaH( target, format, itype, image );
        }

        public void glGetConvolutionFilterEXT( int target, int format, int itype, int[] image )
        {
            mDglGetConvolutionFilterEXT_IIIaI( target, format, itype, image );
        }

        public void glGetConvolutionFilterEXT( int target, int format, int itype, float[] image )
        {
            mDglGetConvolutionFilterEXT_IIIaF( target, format, itype, image );
        }

        public void glGetConvolutionFilterEXT( int target, int format, int itype, IntPtr image )
        {
            mDglGetConvolutionFilterEXT_IIIP( target, format, itype, image );
        }

        public void glGetConvolutionParameterfv( int target, int pname, float[] rfparams )
        {
            mDglGetConvolutionParameterfv_IIaF( target, pname, rfparams );
        }

        public void glGetConvolutionParameterfv( int target, int pname, IntPtr rfparams )
        {
            mDglGetConvolutionParameterfv_IIP( target, pname, rfparams );
        }

        public void glGetConvolutionParameterfvEXT( int target, int pname, float[] rfparams )
        {
            mDglGetConvolutionParameterfvEXT_IIaF( target, pname, rfparams );
        }

        public void glGetConvolutionParameterfvEXT( int target, int pname, IntPtr rfparams )
        {
            mDglGetConvolutionParameterfvEXT_IIP( target, pname, rfparams );
        }

        public void glGetConvolutionParameteriv( int target, int pname, int[] riparams )
        {
            mDglGetConvolutionParameteriv_IIaI( target, pname, riparams );
        }

        public void glGetConvolutionParameteriv( int target, int pname, IntPtr riparams )
        {
            mDglGetConvolutionParameteriv_IIP( target, pname, riparams );
        }

        public void glGetConvolutionParameterivEXT( int target, int pname, int[] riparams )
        {
            mDglGetConvolutionParameterivEXT_IIaI( target, pname, riparams );
        }

        public void glGetConvolutionParameterivEXT( int target, int pname, IntPtr riparams )
        {
            mDglGetConvolutionParameterivEXT_IIP( target, pname, riparams );
        }

        public void glGetDetailTexFuncSGIS( int target, float[] points )
        {
            mDglGetDetailTexFuncSGIS_IaF( target, points );
        }

        public void glGetDetailTexFuncSGIS( int target, IntPtr points )
        {
            mDglGetDetailTexFuncSGIS_IP( target, points );
        }

        public void glGetDoublev( int pname, double[] rdparams )
        {
            mDglGetDoublev_IaD( pname, rdparams );
        }

        public void glGetDoublev( int pname, IntPtr rdparams )
        {
            mDglGetDoublev_IP( pname, rdparams );
        }

        public int glGetError()
        {
            return (mDglGetError_V());
        }

        public void glGetFenceivNV( int fence, int pname, int[] riparams )
        {
            mDglGetFenceivNV_IIaI( fence, pname, riparams );
        }

        public void glGetFenceivNV( int fence, int pname, IntPtr riparams )
        {
            mDglGetFenceivNV_IIP( fence, pname, riparams );
        }

        public void glGetFinalCombinerInputParameterfvNV( int variable, int pname, float[] rfparams )
        {
            mDglGetFinalCombinerInputParameterfvNV_IIaF( variable, pname, rfparams );
        }

        public void glGetFinalCombinerInputParameterfvNV( int variable, int pname, IntPtr rfparams )
        {
            mDglGetFinalCombinerInputParameterfvNV_IIP( variable, pname, rfparams );
        }

        public void glGetFinalCombinerInputParameterivNV( int variable, int pname, int[] riparams )
        {
            mDglGetFinalCombinerInputParameterivNV_IIaI( variable, pname, riparams );
        }

        public void glGetFinalCombinerInputParameterivNV( int variable, int pname, IntPtr riparams )
        {
            mDglGetFinalCombinerInputParameterivNV_IIP( variable, pname, riparams );
        }

        public void glGetFloatv( int pname, float[] rfparams )
        {
            mDglGetFloatv_IaF( pname, rfparams );
        }

        public void glGetFloatv( int pname, IntPtr rfparams )
        {
            mDglGetFloatv_IP( pname, rfparams );
        }

        public void glGetFogFuncSGIS( float[] points )
        {
            mDglGetFogFuncSGIS_aF( points );
        }

        public void glGetFogFuncSGIS( IntPtr points )
        {
            mDglGetFogFuncSGIS_P( points );
        }

        public void glGetFragmentLightfvSGIX( int light, int pname, float[] rfparams )
        {
            mDglGetFragmentLightfvSGIX_IIaF( light, pname, rfparams );
        }

        public void glGetFragmentLightfvSGIX( int light, int pname, IntPtr rfparams )
        {
            mDglGetFragmentLightfvSGIX_IIP( light, pname, rfparams );
        }

        public void glGetFragmentLightivSGIX( int light, int pname, int[] riparams )
        {
            mDglGetFragmentLightivSGIX_IIaI( light, pname, riparams );
        }

        public void glGetFragmentLightivSGIX( int light, int pname, IntPtr riparams )
        {
            mDglGetFragmentLightivSGIX_IIP( light, pname, riparams );
        }

        public void glGetFragmentMaterialfvSGIX( int face, int pname, float[] rfparams )
        {
            mDglGetFragmentMaterialfvSGIX_IIaF( face, pname, rfparams );
        }

        public void glGetFragmentMaterialfvSGIX( int face, int pname, IntPtr rfparams )
        {
            mDglGetFragmentMaterialfvSGIX_IIP( face, pname, rfparams );
        }

        public void glGetFragmentMaterialivSGIX( int face, int pname, int[] riparams )
        {
            mDglGetFragmentMaterialivSGIX_IIaI( face, pname, riparams );
        }

        public void glGetFragmentMaterialivSGIX( int face, int pname, IntPtr riparams )
        {
            mDglGetFragmentMaterialivSGIX_IIP( face, pname, riparams );
        }

        public void glGetFramebufferAttachmentParameterivEXT( int target, int attachment, int pname, int[] riparams )
        {
            mDglGetFramebufferAttachmentParameterivEXT_IIIaI( target, attachment, pname, riparams );
        }

        public void glGetFramebufferAttachmentParameterivEXT( int target, int attachment, int pname, IntPtr riparams )
        {
            mDglGetFramebufferAttachmentParameterivEXT_IIIP( target, attachment, pname, riparams );
        }

        public int glGetHandleARB( int pname )
        {
            return (mDglGetHandleARB_I( pname ));
        }

        public void glGetHistogram( int target, byte reset, int format, int itype, byte[] values )
        {
            mDglGetHistogram_IBIIaB( target, reset, format, itype, values );
        }

        public void glGetHistogram( int target, byte reset, int format, int itype, short[] values )
        {
            mDglGetHistogram_IBIIaH( target, reset, format, itype, values );
        }

        public void glGetHistogram( int target, byte reset, int format, int itype, int[] values )
        {
            mDglGetHistogram_IBIIaI( target, reset, format, itype, values );
        }

        public void glGetHistogram( int target, byte reset, int format, int itype, float[] values )
        {
            mDglGetHistogram_IBIIaF( target, reset, format, itype, values );
        }

        public void glGetHistogram( int target, byte reset, int format, int itype, IntPtr values )
        {
            mDglGetHistogram_IBIIP( target, reset, format, itype, values );
        }

        public void glGetHistogramEXT( int target, byte reset, int format, int itype, byte[] values )
        {
            mDglGetHistogramEXT_IBIIaB( target, reset, format, itype, values );
        }

        public void glGetHistogramEXT( int target, byte reset, int format, int itype, short[] values )
        {
            mDglGetHistogramEXT_IBIIaH( target, reset, format, itype, values );
        }

        public void glGetHistogramEXT( int target, byte reset, int format, int itype, int[] values )
        {
            mDglGetHistogramEXT_IBIIaI( target, reset, format, itype, values );
        }

        public void glGetHistogramEXT( int target, byte reset, int format, int itype, float[] values )
        {
            mDglGetHistogramEXT_IBIIaF( target, reset, format, itype, values );
        }

        public void glGetHistogramEXT( int target, byte reset, int format, int itype, IntPtr values )
        {
            mDglGetHistogramEXT_IBIIP( target, reset, format, itype, values );
        }

        public void glGetHistogramParameterfv( int target, int pname, float[] rfparams )
        {
            mDglGetHistogramParameterfv_IIaF( target, pname, rfparams );
        }

        public void glGetHistogramParameterfv( int target, int pname, IntPtr rfparams )
        {
            mDglGetHistogramParameterfv_IIP( target, pname, rfparams );
        }

        public void glGetHistogramParameterfvEXT( int target, int pname, float[] rfparams )
        {
            mDglGetHistogramParameterfvEXT_IIaF( target, pname, rfparams );
        }

        public void glGetHistogramParameterfvEXT( int target, int pname, IntPtr rfparams )
        {
            mDglGetHistogramParameterfvEXT_IIP( target, pname, rfparams );
        }

        public void glGetHistogramParameteriv( int target, int pname, int[] riparams )
        {
            mDglGetHistogramParameteriv_IIaI( target, pname, riparams );
        }

        public void glGetHistogramParameteriv( int target, int pname, IntPtr riparams )
        {
            mDglGetHistogramParameteriv_IIP( target, pname, riparams );
        }

        public void glGetHistogramParameterivEXT( int target, int pname, int[] riparams )
        {
            mDglGetHistogramParameterivEXT_IIaI( target, pname, riparams );
        }

        public void glGetHistogramParameterivEXT( int target, int pname, IntPtr riparams )
        {
            mDglGetHistogramParameterivEXT_IIP( target, pname, riparams );
        }

        public void glGetImageTransformParameterfvHP( int target, int pname, float[] rfparams )
        {
            mDglGetImageTransformParameterfvHP_IIaF( target, pname, rfparams );
        }

        public void glGetImageTransformParameterfvHP( int target, int pname, IntPtr rfparams )
        {
            mDglGetImageTransformParameterfvHP_IIP( target, pname, rfparams );
        }

        public void glGetImageTransformParameterivHP( int target, int pname, int[] riparams )
        {
            mDglGetImageTransformParameterivHP_IIaI( target, pname, riparams );
        }

        public void glGetImageTransformParameterivHP( int target, int pname, IntPtr riparams )
        {
            mDglGetImageTransformParameterivHP_IIP( target, pname, riparams );
        }

        public void glGetInfoLogARB( int obj, int maxLength, ref int length, String infoLog )
        {
            mDglGetInfoLogARB_IIrIS( obj, maxLength, ref length, infoLog );
        }

        public int glGetInstrumentsSGIX()
        {
            return (mDglGetInstrumentsSGIX_V());
        }

        public void glGetIntegerv( int pname, int[] riparams )
        {
            mDglGetIntegerv_IaI( pname, riparams );
        }

        public void glGetIntegerv( int pname, IntPtr riparams )
        {
            mDglGetIntegerv_IP( pname, riparams );
        }

        public void glGetInvariantBooleanvEXT( int id, int value, byte[] data )
        {
            mDglGetInvariantBooleanvEXT_IIaB( id, value, data );
        }

        public void glGetInvariantBooleanvEXT( int id, int value, IntPtr data )
        {
            mDglGetInvariantBooleanvEXT_IIP( id, value, data );
        }

        public void glGetInvariantFloatvEXT( int id, int value, float[] data )
        {
            mDglGetInvariantFloatvEXT_IIaF( id, value, data );
        }

        public void glGetInvariantFloatvEXT( int id, int value, IntPtr data )
        {
            mDglGetInvariantFloatvEXT_IIP( id, value, data );
        }

        public void glGetInvariantIntegervEXT( int id, int value, int[] data )
        {
            mDglGetInvariantIntegervEXT_IIaI( id, value, data );
        }

        public void glGetInvariantIntegervEXT( int id, int value, IntPtr data )
        {
            mDglGetInvariantIntegervEXT_IIP( id, value, data );
        }

        public void glGetLightfv( int light, int pname, float[] rfparams )
        {
            mDglGetLightfv_IIaF( light, pname, rfparams );
        }

        public void glGetLightfv( int light, int pname, IntPtr rfparams )
        {
            mDglGetLightfv_IIP( light, pname, rfparams );
        }

        public void glGetLightiv( int light, int pname, int[] riparams )
        {
            mDglGetLightiv_IIaI( light, pname, riparams );
        }

        public void glGetLightiv( int light, int pname, IntPtr riparams )
        {
            mDglGetLightiv_IIP( light, pname, riparams );
        }

        public void glGetListParameterfvSGIX( int list, int pname, float[] rfparams )
        {
            mDglGetListParameterfvSGIX_IIaF( list, pname, rfparams );
        }

        public void glGetListParameterfvSGIX( int list, int pname, IntPtr rfparams )
        {
            mDglGetListParameterfvSGIX_IIP( list, pname, rfparams );
        }

        public void glGetListParameterivSGIX( int list, int pname, int[] riparams )
        {
            mDglGetListParameterivSGIX_IIaI( list, pname, riparams );
        }

        public void glGetListParameterivSGIX( int list, int pname, IntPtr riparams )
        {
            mDglGetListParameterivSGIX_IIP( list, pname, riparams );
        }

        public void glGetLocalConstantBooleanvEXT( int id, int value, byte[] data )
        {
            mDglGetLocalConstantBooleanvEXT_IIaB( id, value, data );
        }

        public void glGetLocalConstantBooleanvEXT( int id, int value, IntPtr data )
        {
            mDglGetLocalConstantBooleanvEXT_IIP( id, value, data );
        }

        public void glGetLocalConstantFloatvEXT( int id, int value, float[] data )
        {
            mDglGetLocalConstantFloatvEXT_IIaF( id, value, data );
        }

        public void glGetLocalConstantFloatvEXT( int id, int value, IntPtr data )
        {
            mDglGetLocalConstantFloatvEXT_IIP( id, value, data );
        }

        public void glGetLocalConstantIntegervEXT( int id, int value, int[] data )
        {
            mDglGetLocalConstantIntegervEXT_IIaI( id, value, data );
        }

        public void glGetLocalConstantIntegervEXT( int id, int value, IntPtr data )
        {
            mDglGetLocalConstantIntegervEXT_IIP( id, value, data );
        }

        public void glGetMapAttribParameterfvNV( int target, int index, int pname, float[] rfparams )
        {
            mDglGetMapAttribParameterfvNV_IIIaF( target, index, pname, rfparams );
        }

        public void glGetMapAttribParameterfvNV( int target, int index, int pname, IntPtr rfparams )
        {
            mDglGetMapAttribParameterfvNV_IIIP( target, index, pname, rfparams );
        }

        public void glGetMapAttribParameterivNV( int target, int index, int pname, int[] riparams )
        {
            mDglGetMapAttribParameterivNV_IIIaI( target, index, pname, riparams );
        }

        public void glGetMapAttribParameterivNV( int target, int index, int pname, IntPtr riparams )
        {
            mDglGetMapAttribParameterivNV_IIIP( target, index, pname, riparams );
        }

        public void glGetMapControlPointsNV( int target, int index, int itype, int ustride, int vstride, byte packed, byte[] points )
        {
            mDglGetMapControlPointsNV_IIIIIBaB( target, index, itype, ustride, vstride, packed, points );
        }

        public void glGetMapControlPointsNV( int target, int index, int itype, int ustride, int vstride, byte packed, IntPtr points )
        {
            mDglGetMapControlPointsNV_IIIIIBP( target, index, itype, ustride, vstride, packed, points );
        }

        public void glGetMapdv( int target, int query, double[] v )
        {
            mDglGetMapdv_IIaD( target, query, v );
        }

        public void glGetMapdv( int target, int query, IntPtr v )
        {
            mDglGetMapdv_IIP( target, query, v );
        }

        public void glGetMapfv( int target, int query, float[] v )
        {
            mDglGetMapfv_IIaF( target, query, v );
        }

        public void glGetMapfv( int target, int query, IntPtr v )
        {
            mDglGetMapfv_IIP( target, query, v );
        }

        public void glGetMapiv( int target, int query, int[] v )
        {
            mDglGetMapiv_IIaI( target, query, v );
        }

        public void glGetMapiv( int target, int query, IntPtr v )
        {
            mDglGetMapiv_IIP( target, query, v );
        }

        public void glGetMapParameterfvNV( int target, int pname, float[] rfparams )
        {
            mDglGetMapParameterfvNV_IIaF( target, pname, rfparams );
        }

        public void glGetMapParameterfvNV( int target, int pname, IntPtr rfparams )
        {
            mDglGetMapParameterfvNV_IIP( target, pname, rfparams );
        }

        public void glGetMapParameterivNV( int target, int pname, int[] riparams )
        {
            mDglGetMapParameterivNV_IIaI( target, pname, riparams );
        }

        public void glGetMapParameterivNV( int target, int pname, IntPtr riparams )
        {
            mDglGetMapParameterivNV_IIP( target, pname, riparams );
        }

        public void glGetMaterialfv( int face, int pname, float[] rfparams )
        {
            mDglGetMaterialfv_IIaF( face, pname, rfparams );
        }

        public void glGetMaterialfv( int face, int pname, IntPtr rfparams )
        {
            mDglGetMaterialfv_IIP( face, pname, rfparams );
        }

        public void glGetMaterialiv( int face, int pname, int[] riparams )
        {
            mDglGetMaterialiv_IIaI( face, pname, riparams );
        }

        public void glGetMaterialiv( int face, int pname, IntPtr riparams )
        {
            mDglGetMaterialiv_IIP( face, pname, riparams );
        }

        public void glGetMinmax( int target, byte reset, int format, int itype, byte[] values )
        {
            mDglGetMinmax_IBIIaB( target, reset, format, itype, values );
        }

        public void glGetMinmax( int target, byte reset, int format, int itype, short[] values )
        {
            mDglGetMinmax_IBIIaH( target, reset, format, itype, values );
        }

        public void glGetMinmax( int target, byte reset, int format, int itype, int[] values )
        {
            mDglGetMinmax_IBIIaI( target, reset, format, itype, values );
        }

        public void glGetMinmax( int target, byte reset, int format, int itype, float[] values )
        {
            mDglGetMinmax_IBIIaF( target, reset, format, itype, values );
        }

        public void glGetMinmax( int target, byte reset, int format, int itype, IntPtr values )
        {
            mDglGetMinmax_IBIIP( target, reset, format, itype, values );
        }

        public void glGetMinmaxEXT( int target, byte reset, int format, int itype, byte[] values )
        {
            mDglGetMinmaxEXT_IBIIaB( target, reset, format, itype, values );
        }

        public void glGetMinmaxEXT( int target, byte reset, int format, int itype, short[] values )
        {
            mDglGetMinmaxEXT_IBIIaH( target, reset, format, itype, values );
        }

        public void glGetMinmaxEXT( int target, byte reset, int format, int itype, int[] values )
        {
            mDglGetMinmaxEXT_IBIIaI( target, reset, format, itype, values );
        }

        public void glGetMinmaxEXT( int target, byte reset, int format, int itype, float[] values )
        {
            mDglGetMinmaxEXT_IBIIaF( target, reset, format, itype, values );
        }

        public void glGetMinmaxEXT( int target, byte reset, int format, int itype, IntPtr values )
        {
            mDglGetMinmaxEXT_IBIIP( target, reset, format, itype, values );
        }

        public void glGetMinmaxParameterfv( int target, int pname, float[] rfparams )
        {
            mDglGetMinmaxParameterfv_IIaF( target, pname, rfparams );
        }

        public void glGetMinmaxParameterfv( int target, int pname, IntPtr rfparams )
        {
            mDglGetMinmaxParameterfv_IIP( target, pname, rfparams );
        }

        public void glGetMinmaxParameterfvEXT( int target, int pname, float[] rfparams )
        {
            mDglGetMinmaxParameterfvEXT_IIaF( target, pname, rfparams );
        }

        public void glGetMinmaxParameterfvEXT( int target, int pname, IntPtr rfparams )
        {
            mDglGetMinmaxParameterfvEXT_IIP( target, pname, rfparams );
        }

        public void glGetMinmaxParameteriv( int target, int pname, int[] riparams )
        {
            mDglGetMinmaxParameteriv_IIaI( target, pname, riparams );
        }

        public void glGetMinmaxParameteriv( int target, int pname, IntPtr riparams )
        {
            mDglGetMinmaxParameteriv_IIP( target, pname, riparams );
        }

        public void glGetMinmaxParameterivEXT( int target, int pname, int[] riparams )
        {
            mDglGetMinmaxParameterivEXT_IIaI( target, pname, riparams );
        }

        public void glGetMinmaxParameterivEXT( int target, int pname, IntPtr riparams )
        {
            mDglGetMinmaxParameterivEXT_IIP( target, pname, riparams );
        }

        public void glGetObjectBufferfvATI( int buffer, int pname, float[] rfparams )
        {
            mDglGetObjectBufferfvATI_IIaF( buffer, pname, rfparams );
        }

        public void glGetObjectBufferfvATI( int buffer, int pname, IntPtr rfparams )
        {
            mDglGetObjectBufferfvATI_IIP( buffer, pname, rfparams );
        }

        public void glGetObjectBufferivATI( int buffer, int pname, int[] riparams )
        {
            mDglGetObjectBufferivATI_IIaI( buffer, pname, riparams );
        }

        public void glGetObjectBufferivATI( int buffer, int pname, IntPtr riparams )
        {
            mDglGetObjectBufferivATI_IIP( buffer, pname, riparams );
        }

        public void glGetObjectParameterfvARB( int obj, int pname, float[] rfparams )
        {
            mDglGetObjectParameterfvARB_IIaF( obj, pname, rfparams );
        }

        public void glGetObjectParameterfvARB( int obj, int pname, IntPtr rfparams )
        {
            mDglGetObjectParameterfvARB_IIP( obj, pname, rfparams );
        }

        public void glGetObjectParameterivARB( int obj, int pname, int[] riparams )
        {
            mDglGetObjectParameterivARB_IIaI( obj, pname, riparams );
        }

        public void glGetObjectParameterivARB( int obj, int pname, IntPtr riparams )
        {
            mDglGetObjectParameterivARB_IIP( obj, pname, riparams );
        }

        public void glGetOcclusionQueryivNV( int id, int pname, int[] riparams )
        {
            mDglGetOcclusionQueryivNV_IIaI( id, pname, riparams );
        }

        public void glGetOcclusionQueryivNV( int id, int pname, IntPtr riparams )
        {
            mDglGetOcclusionQueryivNV_IIP( id, pname, riparams );
        }

        public void glGetOcclusionQueryuivNV( int id, int pname, int[] riparams )
        {
            mDglGetOcclusionQueryuivNV_IIaI( id, pname, riparams );
        }

        public void glGetOcclusionQueryuivNV( int id, int pname, IntPtr riparams )
        {
            mDglGetOcclusionQueryuivNV_IIP( id, pname, riparams );
        }

        public void glGetPixelMapfv( int map, float[] values )
        {
            mDglGetPixelMapfv_IaF( map, values );
        }

        public void glGetPixelMapfv( int map, IntPtr values )
        {
            mDglGetPixelMapfv_IP( map, values );
        }

        public void glGetPixelMapuiv( int map, int[] values )
        {
            mDglGetPixelMapuiv_IaI( map, values );
        }

        public void glGetPixelMapuiv( int map, IntPtr values )
        {
            mDglGetPixelMapuiv_IP( map, values );
        }

        public void glGetPixelMapusv( int map, short[] values )
        {
            mDglGetPixelMapusv_IaH( map, values );
        }

        public void glGetPixelMapusv( int map, IntPtr values )
        {
            mDglGetPixelMapusv_IP( map, values );
        }

        public void glGetPixelTexGenParameterfvSGIS( int pname, float[] rfparams )
        {
            mDglGetPixelTexGenParameterfvSGIS_IaF( pname, rfparams );
        }

        public void glGetPixelTexGenParameterfvSGIS( int pname, IntPtr rfparams )
        {
            mDglGetPixelTexGenParameterfvSGIS_IP( pname, rfparams );
        }

        public void glGetPixelTexGenParameterivSGIS( int pname, int[] riparams )
        {
            mDglGetPixelTexGenParameterivSGIS_IaI( pname, riparams );
        }

        public void glGetPixelTexGenParameterivSGIS( int pname, IntPtr riparams )
        {
            mDglGetPixelTexGenParameterivSGIS_IP( pname, riparams );
        }

        public void glGetPointerv( int pname, ref IntPtr rvparams )
        {
            mDglGetPointerv_IrP( pname, ref rvparams );
        }

        public void glGetPointervEXT( int pname, ref IntPtr rvparams )
        {
            mDglGetPointervEXT_IrP( pname, ref rvparams );
        }

        public void glGetPolygonStipple( byte[] mask )
        {
            mDglGetPolygonStipple_aB( mask );
        }

        public void glGetPolygonStipple( IntPtr mask )
        {
            mDglGetPolygonStipple_P( mask );
        }

        public void glGetProgramEnvParameterdvARB( int target, int index, double[] rdparams )
        {
            mDglGetProgramEnvParameterdvARB_IIaD( target, index, rdparams );
        }

        public void glGetProgramEnvParameterdvARB( int target, int index, IntPtr rdparams )
        {
            mDglGetProgramEnvParameterdvARB_IIP( target, index, rdparams );
        }

        public void glGetProgramEnvParameterfvARB( int target, int index, float[] rfparams )
        {
            mDglGetProgramEnvParameterfvARB_IIaF( target, index, rfparams );
        }

        public void glGetProgramEnvParameterfvARB( int target, int index, IntPtr rfparams )
        {
            mDglGetProgramEnvParameterfvARB_IIP( target, index, rfparams );
        }

        public void glGetProgramInfoLog( int program, int bufSize, ref int length, System.Text.StringBuilder infoLog )
        {
            mDglGetProgramInfoLog_IIrIS( program, bufSize, ref length, infoLog );
        }

        public void glGetProgramiv( int program, int pname, int[] riparams )
        {
            mDglGetProgramiv_IIaI( program, pname, riparams );
        }

        public void glGetProgramiv( int program, int pname, IntPtr riparams )
        {
            mDglGetProgramiv_IIP( program, pname, riparams );
        }

        public void glGetProgramivARB( int target, int pname, int[] riparams )
        {
            mDglGetProgramivARB_IIaI( target, pname, riparams );
        }

        public void glGetProgramivARB( int target, int pname, IntPtr riparams )
        {
            mDglGetProgramivARB_IIP( target, pname, riparams );
        }

        public void glGetProgramivNV( int id, int pname, int[] riparams )
        {
            mDglGetProgramivNV_IIaI( id, pname, riparams );
        }

        public void glGetProgramivNV( int id, int pname, IntPtr riparams )
        {
            mDglGetProgramivNV_IIP( id, pname, riparams );
        }

        public void glGetProgramLocalParameterdvARB( int target, int index, double[] rdparams )
        {
            mDglGetProgramLocalParameterdvARB_IIaD( target, index, rdparams );
        }

        public void glGetProgramLocalParameterdvARB( int target, int index, IntPtr rdparams )
        {
            mDglGetProgramLocalParameterdvARB_IIP( target, index, rdparams );
        }

        public void glGetProgramLocalParameterfvARB( int target, int index, float[] rfparams )
        {
            mDglGetProgramLocalParameterfvARB_IIaF( target, index, rfparams );
        }

        public void glGetProgramLocalParameterfvARB( int target, int index, IntPtr rfparams )
        {
            mDglGetProgramLocalParameterfvARB_IIP( target, index, rfparams );
        }

        public void glGetProgramNamedParameterdvNV( int id, int len, String name, double[] rdparams )
        {
            mDglGetProgramNamedParameterdvNV_IISaD( id, len, name, rdparams );
        }

        public void glGetProgramNamedParameterdvNV( int id, int len, String name, IntPtr rdparams )
        {
            mDglGetProgramNamedParameterdvNV_IISP( id, len, name, rdparams );
        }

        public void glGetProgramNamedParameterfvNV( int id, int len, String name, float[] rfparams )
        {
            mDglGetProgramNamedParameterfvNV_IISaF( id, len, name, rfparams );
        }

        public void glGetProgramNamedParameterfvNV( int id, int len, String name, IntPtr rfparams )
        {
            mDglGetProgramNamedParameterfvNV_IISP( id, len, name, rfparams );
        }

        public void glGetProgramParameterdvNV( int target, int index, int pname, double[] rdparams )
        {
            mDglGetProgramParameterdvNV_IIIaD( target, index, pname, rdparams );
        }

        public void glGetProgramParameterdvNV( int target, int index, int pname, IntPtr rdparams )
        {
            mDglGetProgramParameterdvNV_IIIP( target, index, pname, rdparams );
        }

        public void glGetProgramParameterfvNV( int target, int index, int pname, float[] rfparams )
        {
            mDglGetProgramParameterfvNV_IIIaF( target, index, pname, rfparams );
        }

        public void glGetProgramParameterfvNV( int target, int index, int pname, IntPtr rfparams )
        {
            mDglGetProgramParameterfvNV_IIIP( target, index, pname, rfparams );
        }

        public void glGetProgramStringARB( int target, int pname, byte[] rvstring )
        {
            mDglGetProgramStringARB_IIaB( target, pname, rvstring );
        }

        public void glGetProgramStringARB( int target, int pname, IntPtr rvstring )
        {
            mDglGetProgramStringARB_IIP( target, pname, rvstring );
        }

        public void glGetProgramStringNV( int id, int pname, byte[] program )
        {
            mDglGetProgramStringNV_IIaB( id, pname, program );
        }

        public void glGetProgramStringNV( int id, int pname, IntPtr program )
        {
            mDglGetProgramStringNV_IIP( id, pname, program );
        }

        public void glGetQueryiv( int target, int pname, int[] riparams )
        {
            mDglGetQueryiv_IIaI( target, pname, riparams );
        }

        public void glGetQueryiv( int target, int pname, IntPtr riparams )
        {
            mDglGetQueryiv_IIP( target, pname, riparams );
        }

        public void glGetQueryivARB( int target, int pname, int[] riparams )
        {
            mDglGetQueryivARB_IIaI( target, pname, riparams );
        }

        public void glGetQueryivARB( int target, int pname, IntPtr riparams )
        {
            mDglGetQueryivARB_IIP( target, pname, riparams );
        }

        public void glGetQueryObjectiv( int id, int pname, int[] riparams )
        {
            mDglGetQueryObjectiv_IIaI( id, pname, riparams );
        }

        public void glGetQueryObjectiv( int id, int pname, IntPtr riparams )
        {
            mDglGetQueryObjectiv_IIP( id, pname, riparams );
        }

        public void glGetQueryObjectivARB( int id, int pname, int[] riparams )
        {
            mDglGetQueryObjectivARB_IIaI( id, pname, riparams );
        }

        public void glGetQueryObjectivARB( int id, int pname, IntPtr riparams )
        {
            mDglGetQueryObjectivARB_IIP( id, pname, riparams );
        }

        public void glGetQueryObjectuiv( int id, int pname, int[] riparams )
        {
            mDglGetQueryObjectuiv_IIaI( id, pname, riparams );
        }

        public void glGetQueryObjectuiv( int id, int pname, IntPtr riparams )
        {
            mDglGetQueryObjectuiv_IIP( id, pname, riparams );
        }

        public void glGetQueryObjectuivARB( int id, int pname, int[] riparams )
        {
            mDglGetQueryObjectuivARB_IIaI( id, pname, riparams );
        }

        public void glGetQueryObjectuivARB( int id, int pname, IntPtr riparams )
        {
            mDglGetQueryObjectuivARB_IIP( id, pname, riparams );
        }

        public void glGetRenderbufferParameterivEXT( int target, int pname, int[] riparams )
        {
            mDglGetRenderbufferParameterivEXT_IIaI( target, pname, riparams );
        }

        public void glGetRenderbufferParameterivEXT( int target, int pname, IntPtr riparams )
        {
            mDglGetRenderbufferParameterivEXT_IIP( target, pname, riparams );
        }

        public void glGetSeparableFilter( int target, int format, int itype, byte[] row, byte[] column, byte[] span )
        {
            mDglGetSeparableFilter_IIIaBaBaB( target, format, itype, row, column, span );
        }

        public void glGetSeparableFilter( int target, int format, int itype, short[] row, short[] column, short[] span )
        {
            mDglGetSeparableFilter_IIIaHaHaH( target, format, itype, row, column, span );
        }

        public void glGetSeparableFilter( int target, int format, int itype, int[] row, int[] column, int[] span )
        {
            mDglGetSeparableFilter_IIIaIaIaI( target, format, itype, row, column, span );
        }

        public void glGetSeparableFilter( int target, int format, int itype, float[] row, float[] column, float[] span )
        {
            mDglGetSeparableFilter_IIIaFaFaF( target, format, itype, row, column, span );
        }

        public void glGetSeparableFilter( int target, int format, int itype, IntPtr row, IntPtr column, IntPtr span )
        {
            mDglGetSeparableFilter_IIIPPP( target, format, itype, row, column, span );
        }

        public void glGetSeparableFilterEXT( int target, int format, int itype, byte[] row, byte[] column, byte[] span )
        {
            mDglGetSeparableFilterEXT_IIIaBaBaB( target, format, itype, row, column, span );
        }

        public void glGetSeparableFilterEXT( int target, int format, int itype, short[] row, short[] column, short[] span )
        {
            mDglGetSeparableFilterEXT_IIIaHaHaH( target, format, itype, row, column, span );
        }

        public void glGetSeparableFilterEXT( int target, int format, int itype, int[] row, int[] column, int[] span )
        {
            mDglGetSeparableFilterEXT_IIIaIaIaI( target, format, itype, row, column, span );
        }

        public void glGetSeparableFilterEXT( int target, int format, int itype, float[] row, float[] column, float[] span )
        {
            mDglGetSeparableFilterEXT_IIIaFaFaF( target, format, itype, row, column, span );
        }

        public void glGetSeparableFilterEXT( int target, int format, int itype, IntPtr row, IntPtr column, IntPtr span )
        {
            mDglGetSeparableFilterEXT_IIIPPP( target, format, itype, row, column, span );
        }

        public void glGetShaderInfoLog( int shader, int bufSize, ref int length, System.Text.StringBuilder infoLog )
        {
            mDglGetShaderInfoLog_IIrIS( shader, bufSize, ref length, infoLog );
        }

        public void glGetShaderiv( int shader, int pname, int[] riparams )
        {
            mDglGetShaderiv_IIaI( shader, pname, riparams );
        }

        public void glGetShaderiv( int shader, int pname, IntPtr riparams )
        {
            mDglGetShaderiv_IIP( shader, pname, riparams );
        }

        public void glGetShaderSource( int shader, int bufSize, ref int length, String source )
        {
            mDglGetShaderSource_IIrIS( shader, bufSize, ref length, source );
        }

        public void glGetShaderSourceARB( int obj, int maxLength, ref int length, String source )
        {
            mDglGetShaderSourceARB_IIrIS( obj, maxLength, ref length, source );
        }

        public void glGetSharpenTexFuncSGIS( int target, float[] points )
        {
            mDglGetSharpenTexFuncSGIS_IaF( target, points );
        }

        public void glGetSharpenTexFuncSGIS( int target, IntPtr points )
        {
            mDglGetSharpenTexFuncSGIS_IP( target, points );
        }

        public String glGetString( int name )
        {
            return (Marshal.PtrToStringAnsi(mDglGetString_I( name )));
        }

        public void glGetTexBumpParameterfvATI( int pname, float[] rfparam )
        {
            mDglGetTexBumpParameterfvATI_IaF( pname, rfparam );
        }

        public void glGetTexBumpParameterfvATI( int pname, IntPtr rfparam )
        {
            mDglGetTexBumpParameterfvATI_IP( pname, rfparam );
        }

        public void glGetTexBumpParameterivATI( int pname, int[] riparam )
        {
            mDglGetTexBumpParameterivATI_IaI( pname, riparam );
        }

        public void glGetTexBumpParameterivATI( int pname, IntPtr riparam )
        {
            mDglGetTexBumpParameterivATI_IP( pname, riparam );
        }

        public void glGetTexEnvfv( int target, int pname, float[] rfparams )
        {
            mDglGetTexEnvfv_IIaF( target, pname, rfparams );
        }

        public void glGetTexEnvfv( int target, int pname, IntPtr rfparams )
        {
            mDglGetTexEnvfv_IIP( target, pname, rfparams );
        }

        public void glGetTexEnviv( int target, int pname, int[] riparams )
        {
            mDglGetTexEnviv_IIaI( target, pname, riparams );
        }

        public void glGetTexEnviv( int target, int pname, IntPtr riparams )
        {
            mDglGetTexEnviv_IIP( target, pname, riparams );
        }

        public void glGetTexFilterFuncSGIS( int target, int filter, float[] weights )
        {
            mDglGetTexFilterFuncSGIS_IIaF( target, filter, weights );
        }

        public void glGetTexFilterFuncSGIS( int target, int filter, IntPtr weights )
        {
            mDglGetTexFilterFuncSGIS_IIP( target, filter, weights );
        }

        public void glGetTexGendv( int coord, int pname, double[] rdparams )
        {
            mDglGetTexGendv_IIaD( coord, pname, rdparams );
        }

        public void glGetTexGendv( int coord, int pname, IntPtr rdparams )
        {
            mDglGetTexGendv_IIP( coord, pname, rdparams );
        }

        public void glGetTexGenfv( int coord, int pname, float[] rfparams )
        {
            mDglGetTexGenfv_IIaF( coord, pname, rfparams );
        }

        public void glGetTexGenfv( int coord, int pname, IntPtr rfparams )
        {
            mDglGetTexGenfv_IIP( coord, pname, rfparams );
        }

        public void glGetTexGeniv( int coord, int pname, int[] riparams )
        {
            mDglGetTexGeniv_IIaI( coord, pname, riparams );
        }

        public void glGetTexGeniv( int coord, int pname, IntPtr riparams )
        {
            mDglGetTexGeniv_IIP( coord, pname, riparams );
        }

        public void glGetTexImage( int target, int level, int format, int itype, byte[] pixels )
        {
            mDglGetTexImage_IIIIaB( target, level, format, itype, pixels );
        }

        public void glGetTexImage( int target, int level, int format, int itype, short[] pixels )
        {
            mDglGetTexImage_IIIIaH( target, level, format, itype, pixels );
        }

        public void glGetTexImage( int target, int level, int format, int itype, int[] pixels )
        {
            mDglGetTexImage_IIIIaI( target, level, format, itype, pixels );
        }

        public void glGetTexImage( int target, int level, int format, int itype, float[] pixels )
        {
            mDglGetTexImage_IIIIaF( target, level, format, itype, pixels );
        }

        public void glGetTexImage( int target, int level, int format, int itype, IntPtr pixels )
        {
            mDglGetTexImage_IIIIP( target, level, format, itype, pixels );
        }

        public void glGetTexLevelParameterfv( int target, int level, int pname, float[] rfparams )
        {
            mDglGetTexLevelParameterfv_IIIaF( target, level, pname, rfparams );
        }

        public void glGetTexLevelParameterfv( int target, int level, int pname, IntPtr rfparams )
        {
            mDglGetTexLevelParameterfv_IIIP( target, level, pname, rfparams );
        }

        public void glGetTexLevelParameteriv( int target, int level, int pname, int[] riparams )
        {
            mDglGetTexLevelParameteriv_IIIaI( target, level, pname, riparams );
        }

        public void glGetTexLevelParameteriv( int target, int level, int pname, IntPtr riparams )
        {
            mDglGetTexLevelParameteriv_IIIP( target, level, pname, riparams );
        }

        public void glGetTexParameterfv( int target, int pname, float[] rfparams )
        {
            mDglGetTexParameterfv_IIaF( target, pname, rfparams );
        }

        public void glGetTexParameterfv( int target, int pname, IntPtr rfparams )
        {
            mDglGetTexParameterfv_IIP( target, pname, rfparams );
        }

        public void glGetTexParameteriv( int target, int pname, int[] riparams )
        {
            mDglGetTexParameteriv_IIaI( target, pname, riparams );
        }

        public void glGetTexParameteriv( int target, int pname, IntPtr riparams )
        {
            mDglGetTexParameteriv_IIP( target, pname, riparams );
        }

        public void glGetTrackMatrixivNV( int target, int address, int pname, int[] riparams )
        {
            mDglGetTrackMatrixivNV_IIIaI( target, address, pname, riparams );
        }

        public void glGetTrackMatrixivNV( int target, int address, int pname, IntPtr riparams )
        {
            mDglGetTrackMatrixivNV_IIIP( target, address, pname, riparams );
        }

        public void glGetUniformfv( int program, int location, float[] rfparams )
        {
            mDglGetUniformfv_IIaF( program, location, rfparams );
        }

        public void glGetUniformfv( int program, int location, IntPtr rfparams )
        {
            mDglGetUniformfv_IIP( program, location, rfparams );
        }

        public void glGetUniformfvARB( int programObj, int location, float[] rfparams )
        {
            mDglGetUniformfvARB_IIaF( programObj, location, rfparams );
        }

        public void glGetUniformfvARB( int programObj, int location, IntPtr rfparams )
        {
            mDglGetUniformfvARB_IIP( programObj, location, rfparams );
        }

        public void glGetUniformiv( int program, int location, int[] riparams )
        {
            mDglGetUniformiv_IIaI( program, location, riparams );
        }

        public void glGetUniformiv( int program, int location, IntPtr riparams )
        {
            mDglGetUniformiv_IIP( program, location, riparams );
        }

        public void glGetUniformivARB( int programObj, int location, int[] riparams )
        {
            mDglGetUniformivARB_IIaI( programObj, location, riparams );
        }

        public void glGetUniformivARB( int programObj, int location, IntPtr riparams )
        {
            mDglGetUniformivARB_IIP( programObj, location, riparams );
        }

        public int glGetUniformLocation( int program, String name )
        {
            return (mDglGetUniformLocation_IS( program, name ));
        }

        public int glGetUniformLocationARB( int programObj, String name )
        {
            return (mDglGetUniformLocationARB_IS( programObj, name ));
        }

        public void glGetVariantArrayObjectfvATI( int id, int pname, float[] rfparams )
        {
            mDglGetVariantArrayObjectfvATI_IIaF( id, pname, rfparams );
        }

        public void glGetVariantArrayObjectfvATI( int id, int pname, IntPtr rfparams )
        {
            mDglGetVariantArrayObjectfvATI_IIP( id, pname, rfparams );
        }

        public void glGetVariantArrayObjectivATI( int id, int pname, int[] riparams )
        {
            mDglGetVariantArrayObjectivATI_IIaI( id, pname, riparams );
        }

        public void glGetVariantArrayObjectivATI( int id, int pname, IntPtr riparams )
        {
            mDglGetVariantArrayObjectivATI_IIP( id, pname, riparams );
        }

        public void glGetVariantBooleanvEXT( int id, int value, byte[] data )
        {
            mDglGetVariantBooleanvEXT_IIaB( id, value, data );
        }

        public void glGetVariantBooleanvEXT( int id, int value, IntPtr data )
        {
            mDglGetVariantBooleanvEXT_IIP( id, value, data );
        }

        public void glGetVariantFloatvEXT( int id, int value, float[] data )
        {
            mDglGetVariantFloatvEXT_IIaF( id, value, data );
        }

        public void glGetVariantFloatvEXT( int id, int value, IntPtr data )
        {
            mDglGetVariantFloatvEXT_IIP( id, value, data );
        }

        public void glGetVariantIntegervEXT( int id, int value, int[] data )
        {
            mDglGetVariantIntegervEXT_IIaI( id, value, data );
        }

        public void glGetVariantIntegervEXT( int id, int value, IntPtr data )
        {
            mDglGetVariantIntegervEXT_IIP( id, value, data );
        }

        public void glGetVariantPointervEXT( int id, int value, ref IntPtr data )
        {
            mDglGetVariantPointervEXT_IIrP( id, value, ref data );
        }

        public void glGetVertexAttribArrayObjectfvATI( int index, int pname, float[] rfparams )
        {
            mDglGetVertexAttribArrayObjectfvATI_IIaF( index, pname, rfparams );
        }

        public void glGetVertexAttribArrayObjectfvATI( int index, int pname, IntPtr rfparams )
        {
            mDglGetVertexAttribArrayObjectfvATI_IIP( index, pname, rfparams );
        }

        public void glGetVertexAttribArrayObjectivATI( int index, int pname, int[] riparams )
        {
            mDglGetVertexAttribArrayObjectivATI_IIaI( index, pname, riparams );
        }

        public void glGetVertexAttribArrayObjectivATI( int index, int pname, IntPtr riparams )
        {
            mDglGetVertexAttribArrayObjectivATI_IIP( index, pname, riparams );
        }

        public void glGetVertexAttribdv( int index, int pname, double[] rdparams )
        {
            mDglGetVertexAttribdv_IIaD( index, pname, rdparams );
        }

        public void glGetVertexAttribdv( int index, int pname, IntPtr rdparams )
        {
            mDglGetVertexAttribdv_IIP( index, pname, rdparams );
        }

        public void glGetVertexAttribdvARB( int index, int pname, double[] rdparams )
        {
            mDglGetVertexAttribdvARB_IIaD( index, pname, rdparams );
        }

        public void glGetVertexAttribdvARB( int index, int pname, IntPtr rdparams )
        {
            mDglGetVertexAttribdvARB_IIP( index, pname, rdparams );
        }

        public void glGetVertexAttribdvNV( int index, int pname, double[] rdparams )
        {
            mDglGetVertexAttribdvNV_IIaD( index, pname, rdparams );
        }

        public void glGetVertexAttribdvNV( int index, int pname, IntPtr rdparams )
        {
            mDglGetVertexAttribdvNV_IIP( index, pname, rdparams );
        }

        public void glGetVertexAttribfv( int index, int pname, float[] rfparams )
        {
            mDglGetVertexAttribfv_IIaF( index, pname, rfparams );
        }

        public void glGetVertexAttribfv( int index, int pname, IntPtr rfparams )
        {
            mDglGetVertexAttribfv_IIP( index, pname, rfparams );
        }

        public void glGetVertexAttribfvARB( int index, int pname, float[] rfparams )
        {
            mDglGetVertexAttribfvARB_IIaF( index, pname, rfparams );
        }

        public void glGetVertexAttribfvARB( int index, int pname, IntPtr rfparams )
        {
            mDglGetVertexAttribfvARB_IIP( index, pname, rfparams );
        }

        public void glGetVertexAttribfvNV( int index, int pname, float[] rfparams )
        {
            mDglGetVertexAttribfvNV_IIaF( index, pname, rfparams );
        }

        public void glGetVertexAttribfvNV( int index, int pname, IntPtr rfparams )
        {
            mDglGetVertexAttribfvNV_IIP( index, pname, rfparams );
        }

        public void glGetVertexAttribiv( int index, int pname, int[] riparams )
        {
            mDglGetVertexAttribiv_IIaI( index, pname, riparams );
        }

        public void glGetVertexAttribiv( int index, int pname, IntPtr riparams )
        {
            mDglGetVertexAttribiv_IIP( index, pname, riparams );
        }

        public void glGetVertexAttribivARB( int index, int pname, int[] riparams )
        {
            mDglGetVertexAttribivARB_IIaI( index, pname, riparams );
        }

        public void glGetVertexAttribivARB( int index, int pname, IntPtr riparams )
        {
            mDglGetVertexAttribivARB_IIP( index, pname, riparams );
        }

        public void glGetVertexAttribivNV( int index, int pname, int[] riparams )
        {
            mDglGetVertexAttribivNV_IIaI( index, pname, riparams );
        }

        public void glGetVertexAttribivNV( int index, int pname, IntPtr riparams )
        {
            mDglGetVertexAttribivNV_IIP( index, pname, riparams );
        }

        public void glGetVertexAttribPointerv( int index, int pname, ref IntPtr pointer )
        {
            mDglGetVertexAttribPointerv_IIrP( index, pname, ref pointer );
        }

        public void glGetVertexAttribPointervARB( int index, int pname, ref IntPtr pointer )
        {
            mDglGetVertexAttribPointervARB_IIrP( index, pname, ref pointer );
        }

        public void glGetVertexAttribPointervNV( int index, int pname, ref IntPtr pointer )
        {
            mDglGetVertexAttribPointervNV_IIrP( index, pname, ref pointer );
        }

        public void glGlobalAlphaFactorbSUN( byte factor )
        {
            mDglGlobalAlphaFactorbSUN_B( factor );
        }

        public void glGlobalAlphaFactordSUN( double factor )
        {
            mDglGlobalAlphaFactordSUN_D( factor );
        }

        public void glGlobalAlphaFactorfSUN( float factor )
        {
            mDglGlobalAlphaFactorfSUN_F( factor );
        }

        public void glGlobalAlphaFactoriSUN( int factor )
        {
            mDglGlobalAlphaFactoriSUN_I( factor );
        }

        public void glGlobalAlphaFactorsSUN( short factor )
        {
            mDglGlobalAlphaFactorsSUN_H( factor );
        }

        public void glGlobalAlphaFactorubSUN( byte factor )
        {
            mDglGlobalAlphaFactorubSUN_B( factor );
        }

        public void glGlobalAlphaFactoruiSUN( int factor )
        {
            mDglGlobalAlphaFactoruiSUN_I( factor );
        }

        public void glGlobalAlphaFactorusSUN( short factor )
        {
            mDglGlobalAlphaFactorusSUN_H( factor );
        }

        public void glHint( int target, int mode )
        {
            mDglHint_II( target, mode );
        }

        public void glHintPGI( int target, int mode )
        {
            mDglHintPGI_II( target, mode );
        }

        public void glHistogram( int target, int width, int internalformat, byte sink )
        {
            mDglHistogram_IIIB( target, width, internalformat, sink );
        }

        public void glHistogramEXT( int target, int width, int internalformat, byte sink )
        {
            mDglHistogramEXT_IIIB( target, width, internalformat, sink );
        }

        public void glIglooInterfaceSGIX( int pname, byte[] rvparams )
        {
            mDglIglooInterfaceSGIX_IaB( pname, rvparams );
        }

        public void glIglooInterfaceSGIX( int pname, IntPtr rvparams )
        {
            mDglIglooInterfaceSGIX_IP( pname, rvparams );
        }

        public void glImageTransformParameterfHP( int target, int pname, float fparam )
        {
            mDglImageTransformParameterfHP_IIF( target, pname, fparam );
        }

        public void glImageTransformParameterfvHP( int target, int pname, float[] rfparams )
        {
            mDglImageTransformParameterfvHP_IIaF( target, pname, rfparams );
        }

        public void glImageTransformParameterfvHP( int target, int pname, IntPtr rfparams )
        {
            mDglImageTransformParameterfvHP_IIP( target, pname, rfparams );
        }

        public void glImageTransformParameteriHP( int target, int pname, int iparam )
        {
            mDglImageTransformParameteriHP_III( target, pname, iparam );
        }

        public void glImageTransformParameterivHP( int target, int pname, int[] riparams )
        {
            mDglImageTransformParameterivHP_IIaI( target, pname, riparams );
        }

        public void glImageTransformParameterivHP( int target, int pname, IntPtr riparams )
        {
            mDglImageTransformParameterivHP_IIP( target, pname, riparams );
        }

        public void glIndexd( double c )
        {
            mDglIndexd_D( c );
        }

        public void glIndexdv( double[] c )
        {
            mDglIndexdv_aD( c );
        }

        public void glIndexdv( IntPtr c )
        {
            mDglIndexdv_P( c );
        }

        public void glIndexf( float c )
        {
            mDglIndexf_F( c );
        }

        public void glIndexFuncEXT( int func, float fref )
        {
            mDglIndexFuncEXT_IF( func, fref );
        }

        public void glIndexfv( float[] c )
        {
            mDglIndexfv_aF( c );
        }

        public void glIndexfv( IntPtr c )
        {
            mDglIndexfv_P( c );
        }

        public void glIndexi( int c )
        {
            mDglIndexi_I( c );
        }

        public void glIndexiv( int[] c )
        {
            mDglIndexiv_aI( c );
        }

        public void glIndexiv( IntPtr c )
        {
            mDglIndexiv_P( c );
        }

        public void glIndexMask( int mask )
        {
            mDglIndexMask_I( mask );
        }

        public void glIndexMaterialEXT( int face, int mode )
        {
            mDglIndexMaterialEXT_II( face, mode );
        }

        public void glIndexPointer( int itype, int stride, byte[] pointer )
        {
            mDglIndexPointer_IIaB( itype, stride, pointer );
        }

        public void glIndexPointer( int itype, int stride, short[] pointer )
        {
            mDglIndexPointer_IIaH( itype, stride, pointer );
        }

        public void glIndexPointer( int itype, int stride, int[] pointer )
        {
            mDglIndexPointer_IIaI( itype, stride, pointer );
        }

        public void glIndexPointer( int itype, int stride, float[] pointer )
        {
            mDglIndexPointer_IIaF( itype, stride, pointer );
        }

        public void glIndexPointer( int itype, int stride, double[] pointer )
        {
            mDglIndexPointer_IIaD( itype, stride, pointer );
        }

        public void glIndexPointer( int itype, int stride, IntPtr pointer )
        {
            mDglIndexPointer_IIP( itype, stride, pointer );
        }

        public void glIndexPointerEXT( int itype, int stride, int count, byte[] pointer )
        {
            mDglIndexPointerEXT_IIIaB( itype, stride, count, pointer );
        }

        public void glIndexPointerEXT( int itype, int stride, int count, short[] pointer )
        {
            mDglIndexPointerEXT_IIIaH( itype, stride, count, pointer );
        }

        public void glIndexPointerEXT( int itype, int stride, int count, int[] pointer )
        {
            mDglIndexPointerEXT_IIIaI( itype, stride, count, pointer );
        }

        public void glIndexPointerEXT( int itype, int stride, int count, float[] pointer )
        {
            mDglIndexPointerEXT_IIIaF( itype, stride, count, pointer );
        }

        public void glIndexPointerEXT( int itype, int stride, int count, double[] pointer )
        {
            mDglIndexPointerEXT_IIIaD( itype, stride, count, pointer );
        }

        public void glIndexPointerEXT( int itype, int stride, int count, IntPtr pointer )
        {
            mDglIndexPointerEXT_IIIP( itype, stride, count, pointer );
        }

        public void glIndexPointerListIBM( int itype, int stride, ref IntPtr pointer, byte[] ptrstride )
        {
            mDglIndexPointerListIBM_IIrPaB( itype, stride, ref pointer, ptrstride );
        }

        public void glIndexPointerListIBM( int itype, int stride, ref IntPtr pointer, short[] ptrstride )
        {
            mDglIndexPointerListIBM_IIrPaH( itype, stride, ref pointer, ptrstride );
        }

        public void glIndexPointerListIBM( int itype, int stride, ref IntPtr pointer, int[] ptrstride )
        {
            mDglIndexPointerListIBM_IIrPaI( itype, stride, ref pointer, ptrstride );
        }

        public void glIndexPointerListIBM( int itype, int stride, ref IntPtr pointer, float[] ptrstride )
        {
            mDglIndexPointerListIBM_IIrPaF( itype, stride, ref pointer, ptrstride );
        }

        public void glIndexPointerListIBM( int itype, int stride, ref IntPtr pointer, double[] ptrstride )
        {
            mDglIndexPointerListIBM_IIrPaD( itype, stride, ref pointer, ptrstride );
        }

        public void glIndexPointerListIBM( int itype, int stride, ref IntPtr pointer, IntPtr ptrstride )
        {
            mDglIndexPointerListIBM_IIrPP( itype, stride, ref pointer, ptrstride );
        }

        public void glIndexs( short c )
        {
            mDglIndexs_H( c );
        }

        public void glIndexsv( short[] c )
        {
            mDglIndexsv_aH( c );
        }

        public void glIndexsv( IntPtr c )
        {
            mDglIndexsv_P( c );
        }

        public void glIndexub( byte c )
        {
            mDglIndexub_B( c );
        }

        public void glIndexubv( byte[] c )
        {
            mDglIndexubv_aB( c );
        }

        public void glIndexubv( IntPtr c )
        {
            mDglIndexubv_P( c );
        }

        public void glInitNames()
        {
            mDglInitNames_V();
        }

        public void glInsertComponentEXT( int res, int src, int num )
        {
            mDglInsertComponentEXT_III( res, src, num );
        }

        public void glInstrumentsBufferSGIX( int size, int[] buffer )
        {
            mDglInstrumentsBufferSGIX_IaI( size, buffer );
        }

        public void glInstrumentsBufferSGIX( int size, IntPtr buffer )
        {
            mDglInstrumentsBufferSGIX_IP( size, buffer );
        }

        public void glInterleavedArrays( int format, int stride, byte[] pointer )
        {
            mDglInterleavedArrays_IIaB( format, stride, pointer );
        }

        public void glInterleavedArrays( int format, int stride, float[] pointer )
        {
            mDglInterleavedArrays_IIaF( format, stride, pointer );
        }

        public void glInterleavedArrays( int format, int stride, IntPtr pointer )
        {
            mDglInterleavedArrays_IIP( format, stride, pointer );
        }

        public byte glIsAsyncMarkerSGIX( int marker )
        {
            return (mDglIsAsyncMarkerSGIX_I( marker ));
        }

        public byte glIsBuffer( int buffer )
        {
            return (mDglIsBuffer_I( buffer ));
        }

        public byte glIsBufferARB( int buffer )
        {
            return (mDglIsBufferARB_I( buffer ));
        }

        public byte glIsEnabled( int cap )
        {
            return (mDglIsEnabled_I( cap ));
        }

        public byte glIsFenceAPPLE( int fence )
        {
            return (mDglIsFenceAPPLE_I( fence ));
        }

        public byte glIsFenceNV( int fence )
        {
            return (mDglIsFenceNV_I( fence ));
        }

        public byte glIsFramebufferEXT( int framebuffer )
        {
            return (mDglIsFramebufferEXT_I( framebuffer ));
        }

        public byte glIsList( int list )
        {
            return (mDglIsList_I( list ));
        }

        public byte glIsObjectBufferATI( int buffer )
        {
            return (mDglIsObjectBufferATI_I( buffer ));
        }

        public byte glIsOcclusionQueryNV( int id )
        {
            return (mDglIsOcclusionQueryNV_I( id ));
        }

        public byte glIsProgram( int program )
        {
            return (mDglIsProgram_I( program ));
        }

        public byte glIsProgramARB( int program )
        {
            return (mDglIsProgramARB_I( program ));
        }

        public byte glIsProgramNV( int id )
        {
            return (mDglIsProgramNV_I( id ));
        }

        public byte glIsQuery( int id )
        {
            return (mDglIsQuery_I( id ));
        }

        public byte glIsQueryARB( int id )
        {
            return (mDglIsQueryARB_I( id ));
        }

        public byte glIsRenderbufferEXT( int renderbuffer )
        {
            return (mDglIsRenderbufferEXT_I( renderbuffer ));
        }

        public byte glIsShader( int shader )
        {
            return (mDglIsShader_I( shader ));
        }

        public byte glIsTexture( int texture )
        {
            return (mDglIsTexture_I( texture ));
        }

        public byte glIsTextureEXT( int texture )
        {
            return (mDglIsTextureEXT_I( texture ));
        }

        public byte glIsVariantEnabledEXT( int id, int cap )
        {
            return (mDglIsVariantEnabledEXT_II( id, cap ));
        }

        public byte glIsVertexArrayAPPLE( int array )
        {
            return (mDglIsVertexArrayAPPLE_I( array ));
        }

        public void glLightEnviSGIX( int pname, int iparam )
        {
            mDglLightEnviSGIX_II( pname, iparam );
        }

        public void glLightf( int light, int pname, float fparam )
        {
            mDglLightf_IIF( light, pname, fparam );
        }

        public void glLightfv( int light, int pname, float[] rfparams )
        {
            mDglLightfv_IIaF( light, pname, rfparams );
        }

        public void glLightfv( int light, int pname, IntPtr rfparams )
        {
            mDglLightfv_IIP( light, pname, rfparams );
        }

        public void glLighti( int light, int pname, int iparam )
        {
            mDglLighti_III( light, pname, iparam );
        }

        public void glLightiv( int light, int pname, int[] riparams )
        {
            mDglLightiv_IIaI( light, pname, riparams );
        }

        public void glLightiv( int light, int pname, IntPtr riparams )
        {
            mDglLightiv_IIP( light, pname, riparams );
        }

        public void glLightModelf( int pname, float fparam )
        {
            mDglLightModelf_IF( pname, fparam );
        }

        public void glLightModelfv( int pname, float[] rfparams )
        {
            mDglLightModelfv_IaF( pname, rfparams );
        }

        public void glLightModelfv( int pname, IntPtr rfparams )
        {
            mDglLightModelfv_IP( pname, rfparams );
        }

        public void glLightModeli( int pname, int iparam )
        {
            mDglLightModeli_II( pname, iparam );
        }

        public void glLightModeliv( int pname, int[] riparams )
        {
            mDglLightModeliv_IaI( pname, riparams );
        }

        public void glLightModeliv( int pname, IntPtr riparams )
        {
            mDglLightModeliv_IP( pname, riparams );
        }

        public void glLineStipple( int factor, short pattern )
        {
            mDglLineStipple_IH( factor, pattern );
        }

        public void glLineWidth( float width )
        {
            mDglLineWidth_F( width );
        }

        public void glLinkProgram( int program )
        {
            mDglLinkProgram_I( program );
        }

        public void glLinkProgramARB( int programObj )
        {
            mDglLinkProgramARB_I( programObj );
        }

        public void glListBase( int ibase )
        {
            mDglListBase_I( ibase );
        }

        public void glListParameterfSGIX( int list, int pname, float fparam )
        {
            mDglListParameterfSGIX_IIF( list, pname, fparam );
        }

        public void glListParameterfvSGIX( int list, int pname, float[] rfparams )
        {
            mDglListParameterfvSGIX_IIaF( list, pname, rfparams );
        }

        public void glListParameterfvSGIX( int list, int pname, IntPtr rfparams )
        {
            mDglListParameterfvSGIX_IIP( list, pname, rfparams );
        }

        public void glListParameteriSGIX( int list, int pname, int iparam )
        {
            mDglListParameteriSGIX_III( list, pname, iparam );
        }

        public void glListParameterivSGIX( int list, int pname, int[] riparams )
        {
            mDglListParameterivSGIX_IIaI( list, pname, riparams );
        }

        public void glListParameterivSGIX( int list, int pname, IntPtr riparams )
        {
            mDglListParameterivSGIX_IIP( list, pname, riparams );
        }

        public void glLoadIdentity()
        {
            mDglLoadIdentity_V();
        }

        public void glLoadIdentityDeformationMapSGIX( int mask )
        {
            mDglLoadIdentityDeformationMapSGIX_I( mask );
        }

        public void glLoadMatrixd( double[] m )
        {
            mDglLoadMatrixd_aD( m );
        }

        public void glLoadMatrixd( IntPtr m )
        {
            mDglLoadMatrixd_P( m );
        }

        public void glLoadMatrixf( float[] m )
        {
            mDglLoadMatrixf_aF( m );
        }

        public void glLoadMatrixf( IntPtr m )
        {
            mDglLoadMatrixf_P( m );
        }

        public void glLoadName( int name )
        {
            mDglLoadName_I( name );
        }

        public void glLoadProgramNV( int target, int id, int len, byte[] program )
        {
            mDglLoadProgramNV_IIIaB( target, id, len, program );
        }

        public void glLoadProgramNV( int target, int id, int len, IntPtr program )
        {
            mDglLoadProgramNV_IIIP( target, id, len, program );
        }

        public void glLoadTransposeMatrixd( double[] m )
        {
            mDglLoadTransposeMatrixd_aD( m );
        }

        public void glLoadTransposeMatrixd( IntPtr m )
        {
            mDglLoadTransposeMatrixd_P( m );
        }

        public void glLoadTransposeMatrixdARB( double[] m )
        {
            mDglLoadTransposeMatrixdARB_aD( m );
        }

        public void glLoadTransposeMatrixdARB( IntPtr m )
        {
            mDglLoadTransposeMatrixdARB_P( m );
        }

        public void glLoadTransposeMatrixf( float[] m )
        {
            mDglLoadTransposeMatrixf_aF( m );
        }

        public void glLoadTransposeMatrixf( IntPtr m )
        {
            mDglLoadTransposeMatrixf_P( m );
        }

        public void glLoadTransposeMatrixfARB( float[] m )
        {
            mDglLoadTransposeMatrixfARB_aF( m );
        }

        public void glLoadTransposeMatrixfARB( IntPtr m )
        {
            mDglLoadTransposeMatrixfARB_P( m );
        }

        public void glLockArraysEXT( int first, int count )
        {
            mDglLockArraysEXT_II( first, count );
        }

        public void glLogicOp( int opcode )
        {
            mDglLogicOp_I( opcode );
        }

        public void glMap1d( int target, double u1, double u2, int stride, int order, double[] points )
        {
            mDglMap1d_IDDIIaD( target, u1, u2, stride, order, points );
        }

        public void glMap1d( int target, double u1, double u2, int stride, int order, IntPtr points )
        {
            mDglMap1d_IDDIIP( target, u1, u2, stride, order, points );
        }

        public void glMap1f( int target, float u1, float u2, int stride, int order, float[] points )
        {
            mDglMap1f_IFFIIaF( target, u1, u2, stride, order, points );
        }

        public void glMap1f( int target, float u1, float u2, int stride, int order, IntPtr points )
        {
            mDglMap1f_IFFIIP( target, u1, u2, stride, order, points );
        }

        public void glMap2d( int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points )
        {
            mDglMap2d_IDDIIDDIIaD( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points );
        }

        public void glMap2d( int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, IntPtr points )
        {
            mDglMap2d_IDDIIDDIIP( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points );
        }

        public void glMap2f( int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points )
        {
            mDglMap2f_IFFIIFFIIaF( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points );
        }

        public void glMap2f( int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, IntPtr points )
        {
            mDglMap2f_IFFIIFFIIP( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points );
        }

        public IntPtr glMapBuffer( int target, int access )
        {
            return (mDglMapBuffer_II( target, access ));
        }

        public IntPtr glMapBufferARB( int target, int access )
        {
            return (mDglMapBufferARB_II( target, access ));
        }

        public void glMapControlPointsNV( int target, int index, int itype, int ustride, int vstride, int uorder, int vorder, byte packed, byte[] points )
        {
            mDglMapControlPointsNV_IIIIIIIBaB( target, index, itype, ustride, vstride, uorder, vorder, packed, points );
        }

        public void glMapControlPointsNV( int target, int index, int itype, int ustride, int vstride, int uorder, int vorder, byte packed, float[] points )
        {
            mDglMapControlPointsNV_IIIIIIIBaF( target, index, itype, ustride, vstride, uorder, vorder, packed, points );
        }

        public void glMapControlPointsNV( int target, int index, int itype, int ustride, int vstride, int uorder, int vorder, byte packed, IntPtr points )
        {
            mDglMapControlPointsNV_IIIIIIIBP( target, index, itype, ustride, vstride, uorder, vorder, packed, points );
        }

        public void glMapGrid1d( int un, double u1, double u2 )
        {
            mDglMapGrid1d_IDD( un, u1, u2 );
        }

        public void glMapGrid1f( int un, float u1, float u2 )
        {
            mDglMapGrid1f_IFF( un, u1, u2 );
        }

        public void glMapGrid2d( int un, double u1, double u2, int vn, double v1, double v2 )
        {
            mDglMapGrid2d_IDDIDD( un, u1, u2, vn, v1, v2 );
        }

        public void glMapGrid2f( int un, float u1, float u2, int vn, float v1, float v2 )
        {
            mDglMapGrid2f_IFFIFF( un, u1, u2, vn, v1, v2 );
        }

        public IntPtr glMapObjectBufferATI( int buffer )
        {
            return (mDglMapObjectBufferATI_I( buffer ));
        }

        public void glMapParameterfvNV( int target, int pname, float[] rfparams )
        {
            mDglMapParameterfvNV_IIaF( target, pname, rfparams );
        }

        public void glMapParameterfvNV( int target, int pname, IntPtr rfparams )
        {
            mDglMapParameterfvNV_IIP( target, pname, rfparams );
        }

        public void glMapParameterivNV( int target, int pname, int[] riparams )
        {
            mDglMapParameterivNV_IIaI( target, pname, riparams );
        }

        public void glMapParameterivNV( int target, int pname, IntPtr riparams )
        {
            mDglMapParameterivNV_IIP( target, pname, riparams );
        }

        public void glMaterialf( int face, int pname, float param )
        {
            mDglMaterialf_IIF( face, pname, param );
        }

        public void glMaterialfv( int face, int pname, float[] rfparams )
        {
            mDglMaterialfv_IIaF( face, pname, rfparams );
        }

        public void glMaterialfv( int face, int pname, IntPtr rfparams )
        {
            mDglMaterialfv_IIP( face, pname, rfparams );
        }

        public void glMateriali( int face, int pname, int iparam )
        {
            mDglMateriali_III( face, pname, iparam );
        }

        public void glMaterialiv( int face, int pname, int[] riparams )
        {
            mDglMaterialiv_IIaI( face, pname, riparams );
        }

        public void glMaterialiv( int face, int pname, IntPtr riparams )
        {
            mDglMaterialiv_IIP( face, pname, riparams );
        }

        public void glMatrixIndexPointerARB( int size, int itype, int stride, int[] pointer )
        {
            mDglMatrixIndexPointerARB_IIIaI( size, itype, stride, pointer );
        }

        public void glMatrixIndexPointerARB( int size, int itype, int stride, IntPtr pointer )
        {
            mDglMatrixIndexPointerARB_IIIP( size, itype, stride, pointer );
        }

        public void glMatrixIndexubvARB( int size, byte[] indices )
        {
            mDglMatrixIndexubvARB_IaB( size, indices );
        }

        public void glMatrixIndexubvARB( int size, IntPtr indices )
        {
            mDglMatrixIndexubvARB_IP( size, indices );
        }

        public void glMatrixIndexuivARB( int size, int[] indices )
        {
            mDglMatrixIndexuivARB_IaI( size, indices );
        }

        public void glMatrixIndexuivARB( int size, IntPtr indices )
        {
            mDglMatrixIndexuivARB_IP( size, indices );
        }

        public void glMatrixIndexusvARB( int size, short[] indices )
        {
            mDglMatrixIndexusvARB_IaH( size, indices );
        }

        public void glMatrixIndexusvARB( int size, IntPtr indices )
        {
            mDglMatrixIndexusvARB_IP( size, indices );
        }

        public void glMatrixMode( int mode )
        {
            mDglMatrixMode_I( mode );
        }

        public void glMinmax( int target, int internalformat, byte sink )
        {
            mDglMinmax_IIB( target, internalformat, sink );
        }

        public void glMinmaxEXT( int target, int internalformat, byte sink )
        {
            mDglMinmaxEXT_IIB( target, internalformat, sink );
        }

        public void glMultiDrawArrays( int mode, ref int first, ref int count, int primcount )
        {
            mDglMultiDrawArrays_IrIrII( mode, ref first, ref count, primcount );
        }

        public void glMultiDrawArraysEXT( int mode, ref int first, ref int count, int primcount )
        {
            mDglMultiDrawArraysEXT_IrIrII( mode, ref first, ref count, primcount );
        }

        public void glMultiDrawElementArrayAPPLE( int mode, ref int first, ref int count, int primcount )
        {
            mDglMultiDrawElementArrayAPPLE_IrIrII( mode, ref first, ref count, primcount );
        }

        public void glMultiDrawElements( int mode, ref int count, int itype, ref IntPtr indices, int primcount )
        {
            mDglMultiDrawElements_IrIIrPI( mode, ref count, itype, ref indices, primcount );
        }

        public void glMultiDrawElementsEXT( int mode, ref int count, int itype, ref IntPtr indices, int primcount )
        {
            mDglMultiDrawElementsEXT_IrIIrPI( mode, ref count, itype, ref indices, primcount );
        }

        public void glMultiDrawRangeElementArrayAPPLE( int mode, int start, int end, ref int first, ref int count, int primcount )
        {
            mDglMultiDrawRangeElementArrayAPPLE_IIIrIrII( mode, start, end, ref first, ref count, primcount );
        }

        public void glMultiModeDrawArraysIBM( ref int mode, ref int first, ref int count, int primcount, int modestride )
        {
            mDglMultiModeDrawArraysIBM_rIrIrIII( ref mode, ref first, ref count, primcount, modestride );
        }

        public void glMultiModeDrawElementsIBM( ref int mode, ref int count, int itype, ref IntPtr indices, int primcount, int modestride )
        {
            mDglMultiModeDrawElementsIBM_rIrIIrPII( ref mode, ref count, itype, ref indices, primcount, modestride );
        }

        public void glMultiTexCoord1d( int target, double s )
        {
            mDglMultiTexCoord1d_ID( target, s );
        }

        public void glMultiTexCoord1dARB( int target, double s )
        {
            mDglMultiTexCoord1dARB_ID( target, s );
        }

        public void glMultiTexCoord1dv( int target, double[] v )
        {
            mDglMultiTexCoord1dv_IaD( target, v );
        }

        public void glMultiTexCoord1dv( int target, IntPtr v )
        {
            mDglMultiTexCoord1dv_IP( target, v );
        }

        public void glMultiTexCoord1dvARB( int target, double[] v )
        {
            mDglMultiTexCoord1dvARB_IaD( target, v );
        }

        public void glMultiTexCoord1dvARB( int target, IntPtr v )
        {
            mDglMultiTexCoord1dvARB_IP( target, v );
        }

        public void glMultiTexCoord1f( int target, float s )
        {
            mDglMultiTexCoord1f_IF( target, s );
        }

        public void glMultiTexCoord1fARB( int target, float s )
        {
            mDglMultiTexCoord1fARB_IF( target, s );
        }

        public void glMultiTexCoord1fv( int target, float[] v )
        {
            mDglMultiTexCoord1fv_IaF( target, v );
        }

        public void glMultiTexCoord1fv( int target, IntPtr v )
        {
            mDglMultiTexCoord1fv_IP( target, v );
        }

        public void glMultiTexCoord1fvARB( int target, float[] v )
        {
            mDglMultiTexCoord1fvARB_IaF( target, v );
        }

        public void glMultiTexCoord1fvARB( int target, IntPtr v )
        {
            mDglMultiTexCoord1fvARB_IP( target, v );
        }

        public void glMultiTexCoord1hNV( int target, short s )
        {
            mDglMultiTexCoord1hNV_IH( target, s );
        }

        public void glMultiTexCoord1hvNV( int target, short[] v )
        {
            mDglMultiTexCoord1hvNV_IaH( target, v );
        }

        public void glMultiTexCoord1hvNV( int target, IntPtr v )
        {
            mDglMultiTexCoord1hvNV_IP( target, v );
        }

        public void glMultiTexCoord1i( int target, int s )
        {
            mDglMultiTexCoord1i_II( target, s );
        }

        public void glMultiTexCoord1iARB( int target, int s )
        {
            mDglMultiTexCoord1iARB_II( target, s );
        }

        public void glMultiTexCoord1iv( int target, int[] v )
        {
            mDglMultiTexCoord1iv_IaI( target, v );
        }

        public void glMultiTexCoord1iv( int target, IntPtr v )
        {
            mDglMultiTexCoord1iv_IP( target, v );
        }

        public void glMultiTexCoord1ivARB( int target, int[] v )
        {
            mDglMultiTexCoord1ivARB_IaI( target, v );
        }

        public void glMultiTexCoord1ivARB( int target, IntPtr v )
        {
            mDglMultiTexCoord1ivARB_IP( target, v );
        }

        public void glMultiTexCoord1s( int target, short s )
        {
            mDglMultiTexCoord1s_IH( target, s );
        }

        public void glMultiTexCoord1sARB( int target, short s )
        {
            mDglMultiTexCoord1sARB_IH( target, s );
        }

        public void glMultiTexCoord1sv( int target, short[] v )
        {
            mDglMultiTexCoord1sv_IaH( target, v );
        }

        public void glMultiTexCoord1sv( int target, IntPtr v )
        {
            mDglMultiTexCoord1sv_IP( target, v );
        }

        public void glMultiTexCoord1svARB( int target, short[] v )
        {
            mDglMultiTexCoord1svARB_IaH( target, v );
        }

        public void glMultiTexCoord1svARB( int target, IntPtr v )
        {
            mDglMultiTexCoord1svARB_IP( target, v );
        }

        public void glMultiTexCoord2d( int target, double s, double t )
        {
            mDglMultiTexCoord2d_IDD( target, s, t );
        }

        public void glMultiTexCoord2dARB( int target, double s, double t )
        {
            mDglMultiTexCoord2dARB_IDD( target, s, t );
        }

        public void glMultiTexCoord2dv( int target, double[] v )
        {
            mDglMultiTexCoord2dv_IaD( target, v );
        }

        public void glMultiTexCoord2dv( int target, IntPtr v )
        {
            mDglMultiTexCoord2dv_IP( target, v );
        }

        public void glMultiTexCoord2dvARB( int target, double[] v )
        {
            mDglMultiTexCoord2dvARB_IaD( target, v );
        }

        public void glMultiTexCoord2dvARB( int target, IntPtr v )
        {
            mDglMultiTexCoord2dvARB_IP( target, v );
        }

        public void glMultiTexCoord2f( int target, float s, float t )
        {
            mDglMultiTexCoord2f_IFF( target, s, t );
        }

        public void glMultiTexCoord2fARB( int target, float s, float t )
        {
            mDglMultiTexCoord2fARB_IFF( target, s, t );
        }

        public void glMultiTexCoord2fv( int target, float[] v )
        {
            mDglMultiTexCoord2fv_IaF( target, v );
        }

        public void glMultiTexCoord2fv( int target, IntPtr v )
        {
            mDglMultiTexCoord2fv_IP( target, v );
        }

        public void glMultiTexCoord2fvARB( int target, float[] v )
        {
            mDglMultiTexCoord2fvARB_IaF( target, v );
        }

        public void glMultiTexCoord2fvARB( int target, IntPtr v )
        {
            mDglMultiTexCoord2fvARB_IP( target, v );
        }

        public void glMultiTexCoord2hNV( int target, short s, short t )
        {
            mDglMultiTexCoord2hNV_IHH( target, s, t );
        }

        public void glMultiTexCoord2hvNV( int target, short[] v )
        {
            mDglMultiTexCoord2hvNV_IaH( target, v );
        }

        public void glMultiTexCoord2hvNV( int target, IntPtr v )
        {
            mDglMultiTexCoord2hvNV_IP( target, v );
        }

        public void glMultiTexCoord2i( int target, int s, int t )
        {
            mDglMultiTexCoord2i_III( target, s, t );
        }

        public void glMultiTexCoord2iARB( int target, int s, int t )
        {
            mDglMultiTexCoord2iARB_III( target, s, t );
        }

        public void glMultiTexCoord2iv( int target, int[] v )
        {
            mDglMultiTexCoord2iv_IaI( target, v );
        }

        public void glMultiTexCoord2iv( int target, IntPtr v )
        {
            mDglMultiTexCoord2iv_IP( target, v );
        }

        public void glMultiTexCoord2ivARB( int target, int[] v )
        {
            mDglMultiTexCoord2ivARB_IaI( target, v );
        }

        public void glMultiTexCoord2ivARB( int target, IntPtr v )
        {
            mDglMultiTexCoord2ivARB_IP( target, v );
        }

        public void glMultiTexCoord2s( int target, short s, short t )
        {
            mDglMultiTexCoord2s_IHH( target, s, t );
        }

        public void glMultiTexCoord2sARB( int target, short s, short t )
        {
            mDglMultiTexCoord2sARB_IHH( target, s, t );
        }

        public void glMultiTexCoord2sv( int target, short[] v )
        {
            mDglMultiTexCoord2sv_IaH( target, v );
        }

        public void glMultiTexCoord2sv( int target, IntPtr v )
        {
            mDglMultiTexCoord2sv_IP( target, v );
        }

        public void glMultiTexCoord2svARB( int target, short[] v )
        {
            mDglMultiTexCoord2svARB_IaH( target, v );
        }

        public void glMultiTexCoord2svARB( int target, IntPtr v )
        {
            mDglMultiTexCoord2svARB_IP( target, v );
        }

        public void glMultiTexCoord3d( int target, double s, double t, double r )
        {
            mDglMultiTexCoord3d_IDDD( target, s, t, r );
        }

        public void glMultiTexCoord3dARB( int target, double s, double t, double r )
        {
            mDglMultiTexCoord3dARB_IDDD( target, s, t, r );
        }

        public void glMultiTexCoord3dv( int target, double[] v )
        {
            mDglMultiTexCoord3dv_IaD( target, v );
        }

        public void glMultiTexCoord3dv( int target, IntPtr v )
        {
            mDglMultiTexCoord3dv_IP( target, v );
        }

        public void glMultiTexCoord3dvARB( int target, double[] v )
        {
            mDglMultiTexCoord3dvARB_IaD( target, v );
        }

        public void glMultiTexCoord3dvARB( int target, IntPtr v )
        {
            mDglMultiTexCoord3dvARB_IP( target, v );
        }

        public void glMultiTexCoord3f( int target, float s, float t, float r )
        {
            mDglMultiTexCoord3f_IFFF( target, s, t, r );
        }

        public void glMultiTexCoord3fARB( int target, float s, float t, float r )
        {
            mDglMultiTexCoord3fARB_IFFF( target, s, t, r );
        }

        public void glMultiTexCoord3fv( int target, float[] v )
        {
            mDglMultiTexCoord3fv_IaF( target, v );
        }

        public void glMultiTexCoord3fv( int target, IntPtr v )
        {
            mDglMultiTexCoord3fv_IP( target, v );
        }

        public void glMultiTexCoord3fvARB( int target, float[] v )
        {
            mDglMultiTexCoord3fvARB_IaF( target, v );
        }

        public void glMultiTexCoord3fvARB( int target, IntPtr v )
        {
            mDglMultiTexCoord3fvARB_IP( target, v );
        }

        public void glMultiTexCoord3hNV( int target, short s, short t, short r )
        {
            mDglMultiTexCoord3hNV_IHHH( target, s, t, r );
        }

        public void glMultiTexCoord3hvNV( int target, short[] v )
        {
            mDglMultiTexCoord3hvNV_IaH( target, v );
        }

        public void glMultiTexCoord3hvNV( int target, IntPtr v )
        {
            mDglMultiTexCoord3hvNV_IP( target, v );
        }

        public void glMultiTexCoord3i( int target, int s, int t, int r )
        {
            mDglMultiTexCoord3i_IIII( target, s, t, r );
        }

        public void glMultiTexCoord3iARB( int target, int s, int t, int r )
        {
            mDglMultiTexCoord3iARB_IIII( target, s, t, r );
        }

        public void glMultiTexCoord3iv( int target, int[] v )
        {
            mDglMultiTexCoord3iv_IaI( target, v );
        }

        public void glMultiTexCoord3iv( int target, IntPtr v )
        {
            mDglMultiTexCoord3iv_IP( target, v );
        }

        public void glMultiTexCoord3ivARB( int target, int[] v )
        {
            mDglMultiTexCoord3ivARB_IaI( target, v );
        }

        public void glMultiTexCoord3ivARB( int target, IntPtr v )
        {
            mDglMultiTexCoord3ivARB_IP( target, v );
        }

        public void glMultiTexCoord3s( int target, short s, short t, short r )
        {
            mDglMultiTexCoord3s_IHHH( target, s, t, r );
        }

        public void glMultiTexCoord3sARB( int target, short s, short t, short r )
        {
            mDglMultiTexCoord3sARB_IHHH( target, s, t, r );
        }

        public void glMultiTexCoord3sv( int target, short[] v )
        {
            mDglMultiTexCoord3sv_IaH( target, v );
        }

        public void glMultiTexCoord3sv( int target, IntPtr v )
        {
            mDglMultiTexCoord3sv_IP( target, v );
        }

        public void glMultiTexCoord3svARB( int target, short[] v )
        {
            mDglMultiTexCoord3svARB_IaH( target, v );
        }

        public void glMultiTexCoord3svARB( int target, IntPtr v )
        {
            mDglMultiTexCoord3svARB_IP( target, v );
        }

        public void glMultiTexCoord4d( int target, double s, double t, double r, double q )
        {
            mDglMultiTexCoord4d_IDDDD( target, s, t, r, q );
        }

        public void glMultiTexCoord4dARB( int target, double s, double t, double r, double q )
        {
            mDglMultiTexCoord4dARB_IDDDD( target, s, t, r, q );
        }

        public void glMultiTexCoord4dv( int target, double[] v )
        {
            mDglMultiTexCoord4dv_IaD( target, v );
        }

        public void glMultiTexCoord4dv( int target, IntPtr v )
        {
            mDglMultiTexCoord4dv_IP( target, v );
        }

        public void glMultiTexCoord4dvARB( int target, double[] v )
        {
            mDglMultiTexCoord4dvARB_IaD( target, v );
        }

        public void glMultiTexCoord4dvARB( int target, IntPtr v )
        {
            mDglMultiTexCoord4dvARB_IP( target, v );
        }

        public void glMultiTexCoord4f( int target, float s, float t, float r, float q )
        {
            mDglMultiTexCoord4f_IFFFF( target, s, t, r, q );
        }

        public void glMultiTexCoord4fARB( int target, float s, float t, float r, float q )
        {
            mDglMultiTexCoord4fARB_IFFFF( target, s, t, r, q );
        }

        public void glMultiTexCoord4fv( int target, float[] v )
        {
            mDglMultiTexCoord4fv_IaF( target, v );
        }

        public void glMultiTexCoord4fv( int target, IntPtr v )
        {
            mDglMultiTexCoord4fv_IP( target, v );
        }

        public void glMultiTexCoord4fvARB( int target, float[] v )
        {
            mDglMultiTexCoord4fvARB_IaF( target, v );
        }

        public void glMultiTexCoord4fvARB( int target, IntPtr v )
        {
            mDglMultiTexCoord4fvARB_IP( target, v );
        }

        public void glMultiTexCoord4hNV( int target, short s, short t, short r, short q )
        {
            mDglMultiTexCoord4hNV_IHHHH( target, s, t, r, q );
        }

        public void glMultiTexCoord4hvNV( int target, short[] v )
        {
            mDglMultiTexCoord4hvNV_IaH( target, v );
        }

        public void glMultiTexCoord4hvNV( int target, IntPtr v )
        {
            mDglMultiTexCoord4hvNV_IP( target, v );
        }

        public void glMultiTexCoord4i( int target, int s, int t, int r, int q )
        {
            mDglMultiTexCoord4i_IIIII( target, s, t, r, q );
        }

        public void glMultiTexCoord4iARB( int target, int s, int t, int r, int q )
        {
            mDglMultiTexCoord4iARB_IIIII( target, s, t, r, q );
        }

        public void glMultiTexCoord4iv( int target, int[] v )
        {
            mDglMultiTexCoord4iv_IaI( target, v );
        }

        public void glMultiTexCoord4iv( int target, IntPtr v )
        {
            mDglMultiTexCoord4iv_IP( target, v );
        }

        public void glMultiTexCoord4ivARB( int target, int[] v )
        {
            mDglMultiTexCoord4ivARB_IaI( target, v );
        }

        public void glMultiTexCoord4ivARB( int target, IntPtr v )
        {
            mDglMultiTexCoord4ivARB_IP( target, v );
        }

        public void glMultiTexCoord4s( int target, short s, short t, short r, short q )
        {
            mDglMultiTexCoord4s_IHHHH( target, s, t, r, q );
        }

        public void glMultiTexCoord4sARB( int target, short s, short t, short r, short q )
        {
            mDglMultiTexCoord4sARB_IHHHH( target, s, t, r, q );
        }

        public void glMultiTexCoord4sv( int target, short[] v )
        {
            mDglMultiTexCoord4sv_IaH( target, v );
        }

        public void glMultiTexCoord4sv( int target, IntPtr v )
        {
            mDglMultiTexCoord4sv_IP( target, v );
        }

        public void glMultiTexCoord4svARB( int target, short[] v )
        {
            mDglMultiTexCoord4svARB_IaH( target, v );
        }

        public void glMultiTexCoord4svARB( int target, IntPtr v )
        {
            mDglMultiTexCoord4svARB_IP( target, v );
        }

        public void glMultMatrixd( double[] m )
        {
            mDglMultMatrixd_aD( m );
        }

        public void glMultMatrixd( IntPtr m )
        {
            mDglMultMatrixd_P( m );
        }

        public void glMultMatrixf( float[] m )
        {
            mDglMultMatrixf_aF( m );
        }

        public void glMultMatrixf( IntPtr m )
        {
            mDglMultMatrixf_P( m );
        }

        public void glMultTransposeMatrixd( double[] m )
        {
            mDglMultTransposeMatrixd_aD( m );
        }

        public void glMultTransposeMatrixd( IntPtr m )
        {
            mDglMultTransposeMatrixd_P( m );
        }

        public void glMultTransposeMatrixdARB( double[] m )
        {
            mDglMultTransposeMatrixdARB_aD( m );
        }

        public void glMultTransposeMatrixdARB( IntPtr m )
        {
            mDglMultTransposeMatrixdARB_P( m );
        }

        public void glMultTransposeMatrixf( float[] m )
        {
            mDglMultTransposeMatrixf_aF( m );
        }

        public void glMultTransposeMatrixf( IntPtr m )
        {
            mDglMultTransposeMatrixf_P( m );
        }

        public void glMultTransposeMatrixfARB( float[] m )
        {
            mDglMultTransposeMatrixfARB_aF( m );
        }

        public void glMultTransposeMatrixfARB( IntPtr m )
        {
            mDglMultTransposeMatrixfARB_P( m );
        }

        public void glNewList( int list, int mode )
        {
            mDglNewList_II( list, mode );
        }

        public int glNewObjectBufferATI( int size, byte[] pointer, int usage )
        {
            return (mDglNewObjectBufferATI_IaBI( size, pointer, usage ));
        }

        public int glNewObjectBufferATI( int size, IntPtr pointer, int usage )
        {
            return (mDglNewObjectBufferATI_IPI( size, pointer, usage ));
        }

        public void glNormal3b( byte nx, byte ny, byte nz )
        {
            mDglNormal3b_BBB( nx, ny, nz );
        }

        public void glNormal3bv( byte[] v )
        {
            mDglNormal3bv_aB( v );
        }

        public void glNormal3bv( IntPtr v )
        {
            mDglNormal3bv_P( v );
        }

        public void glNormal3d( double nx, double ny, double nz )
        {
            mDglNormal3d_DDD( nx, ny, nz );
        }

        public void glNormal3dv( double[] v )
        {
            mDglNormal3dv_aD( v );
        }

        public void glNormal3dv( IntPtr v )
        {
            mDglNormal3dv_P( v );
        }

        public void glNormal3f( float nx, float ny, float nz )
        {
            mDglNormal3f_FFF( nx, ny, nz );
        }

        public void glNormal3fv( float[] v )
        {
            mDglNormal3fv_aF( v );
        }

        public void glNormal3fv( IntPtr v )
        {
            mDglNormal3fv_P( v );
        }

        public void glNormal3fVertex3fSUN( float nx, float ny, float nz, float x, float y, float z )
        {
            mDglNormal3fVertex3fSUN_FFFFFF( nx, ny, nz, x, y, z );
        }

        public void glNormal3fVertex3fvSUN( float[] n, float[] v )
        {
            mDglNormal3fVertex3fvSUN_aFaF( n, v );
        }

        public void glNormal3fVertex3fvSUN( IntPtr n, IntPtr v )
        {
            mDglNormal3fVertex3fvSUN_PP( n, v );
        }

        public void glNormal3hNV( short nx, short ny, short nz )
        {
            mDglNormal3hNV_HHH( nx, ny, nz );
        }

        public void glNormal3hvNV( short[] v )
        {
            mDglNormal3hvNV_aH( v );
        }

        public void glNormal3hvNV( IntPtr v )
        {
            mDglNormal3hvNV_P( v );
        }

        public void glNormal3i( int nx, int ny, int nz )
        {
            mDglNormal3i_III( nx, ny, nz );
        }

        public void glNormal3iv( int[] v )
        {
            mDglNormal3iv_aI( v );
        }

        public void glNormal3iv( IntPtr v )
        {
            mDglNormal3iv_P( v );
        }

        public void glNormal3s( short nx, short ny, short nz )
        {
            mDglNormal3s_HHH( nx, ny, nz );
        }

        public void glNormal3sv( short[] v )
        {
            mDglNormal3sv_aH( v );
        }

        public void glNormal3sv( IntPtr v )
        {
            mDglNormal3sv_P( v );
        }

        public void glNormalPointer( int itype, int stride, byte[] pointer )
        {
            mDglNormalPointer_IIaB( itype, stride, pointer );
        }

        public void glNormalPointer( int itype, int stride, short[] pointer )
        {
            mDglNormalPointer_IIaH( itype, stride, pointer );
        }

        public void glNormalPointer( int itype, int stride, int[] pointer )
        {
            mDglNormalPointer_IIaI( itype, stride, pointer );
        }

        public void glNormalPointer( int itype, int stride, float[] pointer )
        {
            mDglNormalPointer_IIaF( itype, stride, pointer );
        }

        public void glNormalPointer( int itype, int stride, double[] pointer )
        {
            mDglNormalPointer_IIaD( itype, stride, pointer );
        }

        public void glNormalPointer( int itype, int stride, IntPtr pointer )
        {
            mDglNormalPointer_IIP( itype, stride, pointer );
        }

        public void glNormalPointerEXT( int itype, int stride, int count, byte[] pointer )
        {
            mDglNormalPointerEXT_IIIaB( itype, stride, count, pointer );
        }

        public void glNormalPointerEXT( int itype, int stride, int count, short[] pointer )
        {
            mDglNormalPointerEXT_IIIaH( itype, stride, count, pointer );
        }

        public void glNormalPointerEXT( int itype, int stride, int count, int[] pointer )
        {
            mDglNormalPointerEXT_IIIaI( itype, stride, count, pointer );
        }

        public void glNormalPointerEXT( int itype, int stride, int count, float[] pointer )
        {
            mDglNormalPointerEXT_IIIaF( itype, stride, count, pointer );
        }

        public void glNormalPointerEXT( int itype, int stride, int count, double[] pointer )
        {
            mDglNormalPointerEXT_IIIaD( itype, stride, count, pointer );
        }

        public void glNormalPointerEXT( int itype, int stride, int count, IntPtr pointer )
        {
            mDglNormalPointerEXT_IIIP( itype, stride, count, pointer );
        }

        public void glNormalPointerListIBM( int itype, int stride, ref IntPtr pointer, int ptrstride )
        {
            mDglNormalPointerListIBM_IIrPI( itype, stride, ref pointer, ptrstride );
        }

        public void glNormalPointervINTEL( int itype, ref IntPtr pointer )
        {
            mDglNormalPointervINTEL_IrP( itype, ref pointer );
        }

        public void glNormalStream3bATI( int stream, byte nx, byte ny, byte nz )
        {
            mDglNormalStream3bATI_IBBB( stream, nx, ny, nz );
        }

        public void glNormalStream3bvATI( int stream, byte[] coords )
        {
            mDglNormalStream3bvATI_IaB( stream, coords );
        }

        public void glNormalStream3bvATI( int stream, IntPtr coords )
        {
            mDglNormalStream3bvATI_IP( stream, coords );
        }

        public void glNormalStream3dATI( int stream, double nx, double ny, double nz )
        {
            mDglNormalStream3dATI_IDDD( stream, nx, ny, nz );
        }

        public void glNormalStream3dvATI( int stream, double[] coords )
        {
            mDglNormalStream3dvATI_IaD( stream, coords );
        }

        public void glNormalStream3dvATI( int stream, IntPtr coords )
        {
            mDglNormalStream3dvATI_IP( stream, coords );
        }

        public void glNormalStream3fATI( int stream, float nx, float ny, float nz )
        {
            mDglNormalStream3fATI_IFFF( stream, nx, ny, nz );
        }

        public void glNormalStream3fvATI( int stream, float[] coords )
        {
            mDglNormalStream3fvATI_IaF( stream, coords );
        }

        public void glNormalStream3fvATI( int stream, IntPtr coords )
        {
            mDglNormalStream3fvATI_IP( stream, coords );
        }

        public void glNormalStream3iATI( int stream, int nx, int ny, int nz )
        {
            mDglNormalStream3iATI_IIII( stream, nx, ny, nz );
        }

        public void glNormalStream3ivATI( int stream, int[] coords )
        {
            mDglNormalStream3ivATI_IaI( stream, coords );
        }

        public void glNormalStream3ivATI( int stream, IntPtr coords )
        {
            mDglNormalStream3ivATI_IP( stream, coords );
        }

        public void glNormalStream3sATI( int stream, short nx, short ny, short nz )
        {
            mDglNormalStream3sATI_IHHH( stream, nx, ny, nz );
        }

        public void glNormalStream3svATI( int stream, short[] coords )
        {
            mDglNormalStream3svATI_IaH( stream, coords );
        }

        public void glNormalStream3svATI( int stream, IntPtr coords )
        {
            mDglNormalStream3svATI_IP( stream, coords );
        }

        public void glOrtho( double left, double right, double bottom, double top, double zNear, double zFar )
        {
            mDglOrtho_DDDDDD( left, right, bottom, top, zNear, zFar );
        }

        public void glPassTexCoordATI( int dst, int coord, int swizzle )
        {
            mDglPassTexCoordATI_III( dst, coord, swizzle );
        }

        public void glPassThrough( float token )
        {
            mDglPassThrough_F( token );
        }

        public void glPixelDataRangeNV( int target, int length, byte[] pointer )
        {
            mDglPixelDataRangeNV_IIaB( target, length, pointer );
        }

        public void glPixelDataRangeNV( int target, int length, IntPtr pointer )
        {
            mDglPixelDataRangeNV_IIP( target, length, pointer );
        }

        public void glPixelMapfv( int map, int mapsize, float[] values )
        {
            mDglPixelMapfv_IIaF( map, mapsize, values );
        }

        public void glPixelMapfv( int map, int mapsize, IntPtr values )
        {
            mDglPixelMapfv_IIP( map, mapsize, values );
        }

        public void glPixelMapuiv( int map, int mapsize, int[] values )
        {
            mDglPixelMapuiv_IIaI( map, mapsize, values );
        }

        public void glPixelMapuiv( int map, int mapsize, IntPtr values )
        {
            mDglPixelMapuiv_IIP( map, mapsize, values );
        }

        public void glPixelMapusv( int map, int mapsize, short[] values )
        {
            mDglPixelMapusv_IIaH( map, mapsize, values );
        }

        public void glPixelMapusv( int map, int mapsize, IntPtr values )
        {
            mDglPixelMapusv_IIP( map, mapsize, values );
        }

        public void glPixelStoref( int pname, float param )
        {
            mDglPixelStoref_IF( pname, param );
        }

        public void glPixelStorei( int pname, int param )
        {
            mDglPixelStorei_II( pname, param );
        }

        public void glPixelTexGenParameterfSGIS( int pname, float fparam )
        {
            mDglPixelTexGenParameterfSGIS_IF( pname, fparam );
        }

        public void glPixelTexGenParameterfvSGIS( int pname, float[] rfparams )
        {
            mDglPixelTexGenParameterfvSGIS_IaF( pname, rfparams );
        }

        public void glPixelTexGenParameterfvSGIS( int pname, IntPtr rfparams )
        {
            mDglPixelTexGenParameterfvSGIS_IP( pname, rfparams );
        }

        public void glPixelTexGenParameteriSGIS( int pname, int iparam )
        {
            mDglPixelTexGenParameteriSGIS_II( pname, iparam );
        }

        public void glPixelTexGenParameterivSGIS( int pname, int[] riparams )
        {
            mDglPixelTexGenParameterivSGIS_IaI( pname, riparams );
        }

        public void glPixelTexGenParameterivSGIS( int pname, IntPtr riparams )
        {
            mDglPixelTexGenParameterivSGIS_IP( pname, riparams );
        }

        public void glPixelTexGenSGIX( int mode )
        {
            mDglPixelTexGenSGIX_I( mode );
        }

        public void glPixelTransferf( int pname, float param )
        {
            mDglPixelTransferf_IF( pname, param );
        }

        public void glPixelTransferi( int pname, int param )
        {
            mDglPixelTransferi_II( pname, param );
        }

        public void glPixelTransformParameterfEXT( int target, int pname, float fparam )
        {
            mDglPixelTransformParameterfEXT_IIF( target, pname, fparam );
        }

        public void glPixelTransformParameterfvEXT( int target, int pname, float[] rfparams )
        {
            mDglPixelTransformParameterfvEXT_IIaF( target, pname, rfparams );
        }

        public void glPixelTransformParameterfvEXT( int target, int pname, IntPtr rfparams )
        {
            mDglPixelTransformParameterfvEXT_IIP( target, pname, rfparams );
        }

        public void glPixelTransformParameteriEXT( int target, int pname, int iparam )
        {
            mDglPixelTransformParameteriEXT_III( target, pname, iparam );
        }

        public void glPixelTransformParameterivEXT( int target, int pname, int[] riparams )
        {
            mDglPixelTransformParameterivEXT_IIaI( target, pname, riparams );
        }

        public void glPixelTransformParameterivEXT( int target, int pname, IntPtr riparams )
        {
            mDglPixelTransformParameterivEXT_IIP( target, pname, riparams );
        }

        public void glPixelZoom( float xfactor, float yfactor )
        {
            mDglPixelZoom_FF( xfactor, yfactor );
        }

        public void glPNTrianglesfATI( int pname, float fparam )
        {
            mDglPNTrianglesfATI_IF( pname, fparam );
        }

        public void glPNTrianglesiATI( int pname, int iparam )
        {
            mDglPNTrianglesiATI_II( pname, iparam );
        }

        public void glPointParameterf( int pname, float fparam )
        {
            mDglPointParameterf_IF( pname, fparam );
        }

        public void glPointParameterfARB( int pname, float fparam )
        {
            mDglPointParameterfARB_IF( pname, fparam );
        }

        public void glPointParameterfEXT( int pname, float fparam )
        {
            mDglPointParameterfEXT_IF( pname, fparam );
        }

        public void glPointParameterfSGIS( int pname, float fparam )
        {
            mDglPointParameterfSGIS_IF( pname, fparam );
        }

        public void glPointParameterfv( int pname, float[] rfparams )
        {
            mDglPointParameterfv_IaF( pname, rfparams );
        }

        public void glPointParameterfv( int pname, IntPtr rfparams )
        {
            mDglPointParameterfv_IP( pname, rfparams );
        }

        public void glPointParameterfvARB( int pname, float[] rfparams )
        {
            mDglPointParameterfvARB_IaF( pname, rfparams );
        }

        public void glPointParameterfvARB( int pname, IntPtr rfparams )
        {
            mDglPointParameterfvARB_IP( pname, rfparams );
        }

        public void glPointParameterfvEXT( int pname, float[] rfparams )
        {
            mDglPointParameterfvEXT_IaF( pname, rfparams );
        }

        public void glPointParameterfvEXT( int pname, IntPtr rfparams )
        {
            mDglPointParameterfvEXT_IP( pname, rfparams );
        }

        public void glPointParameterfvSGIS( int pname, float[] rfparams )
        {
            mDglPointParameterfvSGIS_IaF( pname, rfparams );
        }

        public void glPointParameterfvSGIS( int pname, IntPtr rfparams )
        {
            mDglPointParameterfvSGIS_IP( pname, rfparams );
        }

        public void glPointParameteri( int pname, int iparam )
        {
            mDglPointParameteri_II( pname, iparam );
        }

        public void glPointParameteriNV( int pname, int iparam )
        {
            mDglPointParameteriNV_II( pname, iparam );
        }

        public void glPointParameteriv( int pname, int[] riparams )
        {
            mDglPointParameteriv_IaI( pname, riparams );
        }

        public void glPointParameteriv( int pname, IntPtr riparams )
        {
            mDglPointParameteriv_IP( pname, riparams );
        }

        public void glPointParameterivNV( int pname, int[] riparams )
        {
            mDglPointParameterivNV_IaI( pname, riparams );
        }

        public void glPointParameterivNV( int pname, IntPtr riparams )
        {
            mDglPointParameterivNV_IP( pname, riparams );
        }

        public void glPointSize( float size )
        {
            mDglPointSize_F( size );
        }

        public int glPollAsyncSGIX( ref int markerp )
        {
            return (mDglPollAsyncSGIX_rI( ref markerp ));
        }

        public int glPollInstrumentsSGIX( ref int marker_p )
        {
            return (mDglPollInstrumentsSGIX_rI( ref marker_p ));
        }

        public void glPolygonMode( int face, int mode )
        {
            mDglPolygonMode_II( face, mode );
        }

        public void glPolygonOffset( float factor, float units )
        {
            mDglPolygonOffset_FF( factor, units );
        }

        public void glPolygonOffsetEXT( float factor, float bias )
        {
            mDglPolygonOffsetEXT_FF( factor, bias );
        }

        public void glPolygonStipple( byte[] mask )
        {
            mDglPolygonStipple_aB( mask );
        }

        public void glPolygonStipple( IntPtr mask )
        {
            mDglPolygonStipple_P( mask );
        }

        public void glPopAttrib()
        {
            mDglPopAttrib_V();
        }

        public void glPopClientAttrib()
        {
            mDglPopClientAttrib_V();
        }

        public void glPopMatrix()
        {
            mDglPopMatrix_V();
        }

        public void glPopName()
        {
            mDglPopName_V();
        }

        public void glPrimitiveRestartIndexNV( int index )
        {
            mDglPrimitiveRestartIndexNV_I( index );
        }

        public void glPrimitiveRestartNV()
        {
            mDglPrimitiveRestartNV_V();
        }

        public void glPrioritizeTextures( int n, int[] textures, float[] priorities )
        {
            mDglPrioritizeTextures_IaIaF( n, textures, priorities );
        }

        public void glPrioritizeTextures( int n, IntPtr textures, IntPtr priorities )
        {
            mDglPrioritizeTextures_IPP( n, textures, priorities );
        }

        public void glPrioritizeTexturesEXT( int n, int[] textures, float[] priorities )
        {
            mDglPrioritizeTexturesEXT_IaIaF( n, textures, priorities );
        }

        public void glPrioritizeTexturesEXT( int n, IntPtr textures, IntPtr priorities )
        {
            mDglPrioritizeTexturesEXT_IPP( n, textures, priorities );
        }

        public void glProgramEnvParameter4dARB( int target, int index, double x, double y, double z, double w )
        {
            mDglProgramEnvParameter4dARB_IIDDDD( target, index, x, y, z, w );
        }

        public void glProgramEnvParameter4dvARB( int target, int index, double[] rdparams )
        {
            mDglProgramEnvParameter4dvARB_IIaD( target, index, rdparams );
        }

        public void glProgramEnvParameter4dvARB( int target, int index, IntPtr rdparams )
        {
            mDglProgramEnvParameter4dvARB_IIP( target, index, rdparams );
        }

        public void glProgramEnvParameter4fARB( int target, int index, float x, float y, float z, float w )
        {
            mDglProgramEnvParameter4fARB_IIFFFF( target, index, x, y, z, w );
        }

        public void glProgramEnvParameter4fvARB( int target, int index, float[] rfparams )
        {
            mDglProgramEnvParameter4fvARB_IIaF( target, index, rfparams );
        }

        public void glProgramEnvParameter4fvARB( int target, int index, IntPtr rfparams )
        {
            mDglProgramEnvParameter4fvARB_IIP( target, index, rfparams );
        }

        public void glProgramLocalParameter4dARB( int target, int index, double x, double y, double z, double w )
        {
            mDglProgramLocalParameter4dARB_IIDDDD( target, index, x, y, z, w );
        }

        public void glProgramLocalParameter4dvARB( int target, int index, double[] rdparams )
        {
            mDglProgramLocalParameter4dvARB_IIaD( target, index, rdparams );
        }

        public void glProgramLocalParameter4dvARB( int target, int index, IntPtr rdparams )
        {
            mDglProgramLocalParameter4dvARB_IIP( target, index, rdparams );
        }

        public void glProgramLocalParameter4fARB( int target, int index, float x, float y, float z, float w )
        {
            mDglProgramLocalParameter4fARB_IIFFFF( target, index, x, y, z, w );
        }

        public void glProgramLocalParameter4fvARB( int target, int index, float[] rfparams )
        {
            mDglProgramLocalParameter4fvARB_IIaF( target, index, rfparams );
        }

        public void glProgramLocalParameter4fvARB( int target, int index, IntPtr rfparams )
        {
            mDglProgramLocalParameter4fvARB_IIP( target, index, rfparams );
        }

        public void glProgramNamedParameter4dNV( int id, int len, byte[] name, double x, double y, double z, double w )
        {
            mDglProgramNamedParameter4dNV_IIaBDDDD( id, len, name, x, y, z, w );
        }

        public void glProgramNamedParameter4dNV( int id, int len, IntPtr name, double x, double y, double z, double w )
        {
            mDglProgramNamedParameter4dNV_IIPDDDD( id, len, name, x, y, z, w );
        }

        public void glProgramNamedParameter4dvNV( int id, int len, byte[] name, double[] v )
        {
            mDglProgramNamedParameter4dvNV_IIaBaD( id, len, name, v );
        }

        public void glProgramNamedParameter4dvNV( int id, int len, IntPtr name, IntPtr v )
        {
            mDglProgramNamedParameter4dvNV_IIPP( id, len, name, v );
        }

        public void glProgramNamedParameter4fNV( int id, int len, byte[] name, float x, float y, float z, float w )
        {
            mDglProgramNamedParameter4fNV_IIaBFFFF( id, len, name, x, y, z, w );
        }

        public void glProgramNamedParameter4fNV( int id, int len, IntPtr name, float x, float y, float z, float w )
        {
            mDglProgramNamedParameter4fNV_IIPFFFF( id, len, name, x, y, z, w );
        }

        public void glProgramNamedParameter4fvNV( int id, int len, byte[] name, float[] v )
        {
            mDglProgramNamedParameter4fvNV_IIaBaF( id, len, name, v );
        }

        public void glProgramNamedParameter4fvNV( int id, int len, IntPtr name, IntPtr v )
        {
            mDglProgramNamedParameter4fvNV_IIPP( id, len, name, v );
        }

        public void glProgramParameter4dNV( int target, int index, double x, double y, double z, double w )
        {
            mDglProgramParameter4dNV_IIDDDD( target, index, x, y, z, w );
        }

        public void glProgramParameter4dvNV( int target, int index, double[] v )
        {
            mDglProgramParameter4dvNV_IIaD( target, index, v );
        }

        public void glProgramParameter4dvNV( int target, int index, IntPtr v )
        {
            mDglProgramParameter4dvNV_IIP( target, index, v );
        }

        public void glProgramParameter4fNV( int target, int index, float x, float y, float z, float w )
        {
            mDglProgramParameter4fNV_IIFFFF( target, index, x, y, z, w );
        }

        public void glProgramParameter4fvNV( int target, int index, float[] v )
        {
            mDglProgramParameter4fvNV_IIaF( target, index, v );
        }

        public void glProgramParameter4fvNV( int target, int index, IntPtr v )
        {
            mDglProgramParameter4fvNV_IIP( target, index, v );
        }

        public void glProgramParameters4dvNV( int target, int index, int count, double[] v )
        {
            mDglProgramParameters4dvNV_IIIaD( target, index, count, v );
        }

        public void glProgramParameters4dvNV( int target, int index, int count, IntPtr v )
        {
            mDglProgramParameters4dvNV_IIIP( target, index, count, v );
        }

        public void glProgramParameters4fvNV( int target, int index, int count, float[] v )
        {
            mDglProgramParameters4fvNV_IIIaF( target, index, count, v );
        }

        public void glProgramParameters4fvNV( int target, int index, int count, IntPtr v )
        {
            mDglProgramParameters4fvNV_IIIP( target, index, count, v );
        }

        public void glProgramStringARB( int target, int format, int len, String rvstring )
        {
            mDglProgramStringARB_IIIS( target, format, len, rvstring );
        }

        public void glPushAttrib( int mask )
        {
            mDglPushAttrib_I( mask );
        }

        public void glPushClientAttrib( int mask )
        {
            mDglPushClientAttrib_I( mask );
        }

        public void glPushMatrix()
        {
            mDglPushMatrix_V();
        }

        public void glPushName( int name )
        {
            mDglPushName_I( name );
        }

        public void glRasterPos2d( double x, double y )
        {
            mDglRasterPos2d_DD( x, y );
        }

        public void glRasterPos2dv( double[] v )
        {
            mDglRasterPos2dv_aD( v );
        }

        public void glRasterPos2dv( IntPtr v )
        {
            mDglRasterPos2dv_P( v );
        }

        public void glRasterPos2f( float x, float y )
        {
            mDglRasterPos2f_FF( x, y );
        }

        public void glRasterPos2fv( float[] v )
        {
            mDglRasterPos2fv_aF( v );
        }

        public void glRasterPos2fv( IntPtr v )
        {
            mDglRasterPos2fv_P( v );
        }

        public void glRasterPos2i( int x, int y )
        {
            mDglRasterPos2i_II( x, y );
        }

        public void glRasterPos2iv( int[] v )
        {
            mDglRasterPos2iv_aI( v );
        }

        public void glRasterPos2iv( IntPtr v )
        {
            mDglRasterPos2iv_P( v );
        }

        public void glRasterPos2s( short x, short y )
        {
            mDglRasterPos2s_HH( x, y );
        }

        public void glRasterPos2sv( short[] v )
        {
            mDglRasterPos2sv_aH( v );
        }

        public void glRasterPos2sv( IntPtr v )
        {
            mDglRasterPos2sv_P( v );
        }

        public void glRasterPos3d( double x, double y, double z )
        {
            mDglRasterPos3d_DDD( x, y, z );
        }

        public void glRasterPos3dv( double[] v )
        {
            mDglRasterPos3dv_aD( v );
        }

        public void glRasterPos3dv( IntPtr v )
        {
            mDglRasterPos3dv_P( v );
        }

        public void glRasterPos3f( float x, float y, float z )
        {
            mDglRasterPos3f_FFF( x, y, z );
        }

        public void glRasterPos3fv( float[] v )
        {
            mDglRasterPos3fv_aF( v );
        }

        public void glRasterPos3fv( IntPtr v )
        {
            mDglRasterPos3fv_P( v );
        }

        public void glRasterPos3i( int x, int y, int z )
        {
            mDglRasterPos3i_III( x, y, z );
        }

        public void glRasterPos3iv( int[] v )
        {
            mDglRasterPos3iv_aI( v );
        }

        public void glRasterPos3iv( IntPtr v )
        {
            mDglRasterPos3iv_P( v );
        }

        public void glRasterPos3s( short x, short y, short z )
        {
            mDglRasterPos3s_HHH( x, y, z );
        }

        public void glRasterPos3sv( short[] v )
        {
            mDglRasterPos3sv_aH( v );
        }

        public void glRasterPos3sv( IntPtr v )
        {
            mDglRasterPos3sv_P( v );
        }

        public void glRasterPos4d( double x, double y, double z, double w )
        {
            mDglRasterPos4d_DDDD( x, y, z, w );
        }

        public void glRasterPos4dv( double[] v )
        {
            mDglRasterPos4dv_aD( v );
        }

        public void glRasterPos4dv( IntPtr v )
        {
            mDglRasterPos4dv_P( v );
        }

        public void glRasterPos4f( float x, float y, float z, float w )
        {
            mDglRasterPos4f_FFFF( x, y, z, w );
        }

        public void glRasterPos4fv( float[] v )
        {
            mDglRasterPos4fv_aF( v );
        }

        public void glRasterPos4fv( IntPtr v )
        {
            mDglRasterPos4fv_P( v );
        }

        public void glRasterPos4i( int x, int y, int z, int w )
        {
            mDglRasterPos4i_IIII( x, y, z, w );
        }

        public void glRasterPos4iv( int[] v )
        {
            mDglRasterPos4iv_aI( v );
        }

        public void glRasterPos4iv( IntPtr v )
        {
            mDglRasterPos4iv_P( v );
        }

        public void glRasterPos4s( short x, short y, short z, short w )
        {
            mDglRasterPos4s_HHHH( x, y, z, w );
        }

        public void glRasterPos4sv( short[] v )
        {
            mDglRasterPos4sv_aH( v );
        }

        public void glRasterPos4sv( IntPtr v )
        {
            mDglRasterPos4sv_P( v );
        }

        public void glReadBuffer( int mode )
        {
            mDglReadBuffer_I( mode );
        }

        public void glReadInstrumentsSGIX( int marker )
        {
            mDglReadInstrumentsSGIX_I( marker );
        }

        public void glReadPixels( int x, int y, int width, int height, int format, int itype, byte[] pixels )
        {
            mDglReadPixels_IIIIIIaB( x, y, width, height, format, itype, pixels );
        }

        public void glReadPixels( int x, int y, int width, int height, int format, int itype, short[] pixels )
        {
            mDglReadPixels_IIIIIIaH( x, y, width, height, format, itype, pixels );
        }

        public void glReadPixels( int x, int y, int width, int height, int format, int itype, int[] pixels )
        {
            mDglReadPixels_IIIIIIaI( x, y, width, height, format, itype, pixels );
        }

        public void glReadPixels( int x, int y, int width, int height, int format, int itype, float[] pixels )
        {
            mDglReadPixels_IIIIIIaF( x, y, width, height, format, itype, pixels );
        }

        public void glReadPixels( int x, int y, int width, int height, int format, int itype, IntPtr pixels )
        {
            mDglReadPixels_IIIIIIP( x, y, width, height, format, itype, pixels );
        }

        public void glRectd( double x1, double y1, double x2, double y2 )
        {
            mDglRectd_DDDD( x1, y1, x2, y2 );
        }

        public void glRectdv( double[] v1, double[] v2 )
        {
            mDglRectdv_aDaD( v1, v2 );
        }

        public void glRectdv( IntPtr v1, IntPtr v2 )
        {
            mDglRectdv_PP( v1, v2 );
        }

        public void glRectf( float x1, float y1, float x2, float y2 )
        {
            mDglRectf_FFFF( x1, y1, x2, y2 );
        }

        public void glRectfv( float[] v1, float[] v2 )
        {
            mDglRectfv_aFaF( v1, v2 );
        }

        public void glRectfv( IntPtr v1, IntPtr v2 )
        {
            mDglRectfv_PP( v1, v2 );
        }

        public void glRecti( int x1, int y1, int x2, int y2 )
        {
            mDglRecti_IIII( x1, y1, x2, y2 );
        }

        public void glRectiv( int[] v1, int[] v2 )
        {
            mDglRectiv_aIaI( v1, v2 );
        }

        public void glRectiv( IntPtr v1, IntPtr v2 )
        {
            mDglRectiv_PP( v1, v2 );
        }

        public void glRects( short x1, short y1, short x2, short y2 )
        {
            mDglRects_HHHH( x1, y1, x2, y2 );
        }

        public void glRectsv( short[] v1, short[] v2 )
        {
            mDglRectsv_aHaH( v1, v2 );
        }

        public void glRectsv( IntPtr v1, IntPtr v2 )
        {
            mDglRectsv_PP( v1, v2 );
        }

        public void glReferencePlaneSGIX( double[] equation )
        {
            mDglReferencePlaneSGIX_aD( equation );
        }

        public void glReferencePlaneSGIX( IntPtr equation )
        {
            mDglReferencePlaneSGIX_P( equation );
        }

        public void glRenderbufferStorageEXT( int target, int internalformat, int width, int height )
        {
            mDglRenderbufferStorageEXT_IIII( target, internalformat, width, height );
        }

        public int glRenderMode( int mode )
        {
            return (mDglRenderMode_I( mode ));
        }

        public void glReplacementCodePointerSUN( int itype, int stride, ref IntPtr pointer )
        {
            mDglReplacementCodePointerSUN_IIrP( itype, stride, ref pointer );
        }

        public void glReplacementCodeubSUN( byte code )
        {
            mDglReplacementCodeubSUN_B( code );
        }

        public void glReplacementCodeubvSUN( byte[] code )
        {
            mDglReplacementCodeubvSUN_aB( code );
        }

        public void glReplacementCodeubvSUN( IntPtr code )
        {
            mDglReplacementCodeubvSUN_P( code );
        }

        public void glReplacementCodeuiColor3fVertex3fSUN( int rc, float r, float g, float b, float x, float y, float z )
        {
            mDglReplacementCodeuiColor3fVertex3fSUN_IFFFFFF( rc, r, g, b, x, y, z );
        }

        public void glReplacementCodeuiColor3fVertex3fvSUN( ref int rc, float[] c, float[] v )
        {
            mDglReplacementCodeuiColor3fVertex3fvSUN_rIaFaF( ref rc, c, v );
        }

        public void glReplacementCodeuiColor3fVertex3fvSUN( ref int rc, IntPtr c, IntPtr v )
        {
            mDglReplacementCodeuiColor3fVertex3fvSUN_rIPP( ref rc, c, v );
        }

        public void glReplacementCodeuiColor4fNormal3fVertex3fSUN( int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z )
        {
            mDglReplacementCodeuiColor4fNormal3fVertex3fSUN_IFFFFFFFFFF( rc, r, g, b, a, nx, ny, nz, x, y, z );
        }

        public void glReplacementCodeuiColor4fNormal3fVertex3fvSUN( ref int rc, float[] c, float[] n, float[] v )
        {
            mDglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIaFaFaF( ref rc, c, n, v );
        }

        public void glReplacementCodeuiColor4fNormal3fVertex3fvSUN( ref int rc, IntPtr c, IntPtr n, IntPtr v )
        {
            mDglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIPPP( ref rc, c, n, v );
        }

        public void glReplacementCodeuiColor4ubVertex3fSUN( int rc, byte r, byte g, byte b, byte a, float x, float y, float z )
        {
            mDglReplacementCodeuiColor4ubVertex3fSUN_IBBBBFFF( rc, r, g, b, a, x, y, z );
        }

        public void glReplacementCodeuiColor4ubVertex3fvSUN( ref int rc, byte[] c, float[] v )
        {
            mDglReplacementCodeuiColor4ubVertex3fvSUN_rIaBaF( ref rc, c, v );
        }

        public void glReplacementCodeuiColor4ubVertex3fvSUN( ref int rc, IntPtr c, IntPtr v )
        {
            mDglReplacementCodeuiColor4ubVertex3fvSUN_rIPP( ref rc, c, v );
        }

        public void glReplacementCodeuiNormal3fVertex3fSUN( int rc, float nx, float ny, float nz, float x, float y, float z )
        {
            mDglReplacementCodeuiNormal3fVertex3fSUN_IFFFFFF( rc, nx, ny, nz, x, y, z );
        }

        public void glReplacementCodeuiNormal3fVertex3fvSUN( ref int rc, float[] n, float[] v )
        {
            mDglReplacementCodeuiNormal3fVertex3fvSUN_rIaFaF( ref rc, n, v );
        }

        public void glReplacementCodeuiNormal3fVertex3fvSUN( ref int rc, IntPtr n, IntPtr v )
        {
            mDglReplacementCodeuiNormal3fVertex3fvSUN_rIPP( ref rc, n, v );
        }

        public void glReplacementCodeuiSUN( int code )
        {
            mDglReplacementCodeuiSUN_I( code );
        }

        public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN( int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z )
        {
            mDglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_IFFFFFFFFFFFF( rc, s, t, r, g, b, a, nx, ny, nz, x, y, z );
        }

        public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN( ref int rc, float[] tc, float[] c, float[] n, float[] v )
        {
            mDglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIaFaFaFaF( ref rc, tc, c, n, v );
        }

        public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN( ref int rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v )
        {
            mDglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIPPPP( ref rc, tc, c, n, v );
        }

        public void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN( int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z )
        {
            mDglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_IFFFFFFFF( rc, s, t, nx, ny, nz, x, y, z );
        }

        public void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN( ref int rc, float[] tc, float[] n, float[] v )
        {
            mDglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIaFaFaF( ref rc, tc, n, v );
        }

        public void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN( ref int rc, IntPtr tc, IntPtr n, IntPtr v )
        {
            mDglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIPPP( ref rc, tc, n, v );
        }

        public void glReplacementCodeuiTexCoord2fVertex3fSUN( int rc, float s, float t, float x, float y, float z )
        {
            mDglReplacementCodeuiTexCoord2fVertex3fSUN_IFFFFF( rc, s, t, x, y, z );
        }

        public void glReplacementCodeuiTexCoord2fVertex3fvSUN( ref int rc, float[] tc, float[] v )
        {
            mDglReplacementCodeuiTexCoord2fVertex3fvSUN_rIaFaF( ref rc, tc, v );
        }

        public void glReplacementCodeuiTexCoord2fVertex3fvSUN( ref int rc, IntPtr tc, IntPtr v )
        {
            mDglReplacementCodeuiTexCoord2fVertex3fvSUN_rIPP( ref rc, tc, v );
        }

        public void glReplacementCodeuiVertex3fSUN( int rc, float x, float y, float z )
        {
            mDglReplacementCodeuiVertex3fSUN_IFFF( rc, x, y, z );
        }

        public void glReplacementCodeuiVertex3fvSUN( ref int rc, float[] v )
        {
            mDglReplacementCodeuiVertex3fvSUN_rIaF( ref rc, v );
        }

        public void glReplacementCodeuiVertex3fvSUN( ref int rc, IntPtr v )
        {
            mDglReplacementCodeuiVertex3fvSUN_rIP( ref rc, v );
        }

        public void glReplacementCodeuivSUN( ref int code )
        {
            mDglReplacementCodeuivSUN_rI( ref code );
        }

        public void glReplacementCodeusSUN( short code )
        {
            mDglReplacementCodeusSUN_H( code );
        }

        public void glReplacementCodeusvSUN( ref short code )
        {
            mDglReplacementCodeusvSUN_rH( ref code );
        }

        public void glRequestResidentProgramsNV( int n, int[] programs )
        {
            mDglRequestResidentProgramsNV_IaI( n, programs );
        }

        public void glRequestResidentProgramsNV( int n, IntPtr programs )
        {
            mDglRequestResidentProgramsNV_IP( n, programs );
        }

        public void glResetHistogram( int target )
        {
            mDglResetHistogram_I( target );
        }

        public void glResetHistogramEXT( int target )
        {
            mDglResetHistogramEXT_I( target );
        }

        public void glResetMinmax( int target )
        {
            mDglResetMinmax_I( target );
        }

        public void glResetMinmaxEXT( int target )
        {
            mDglResetMinmaxEXT_I( target );
        }

        public void glResizeBuffersMESA()
        {
            mDglResizeBuffersMESA_V();
        }

        public void glRotated( double angle, double x, double y, double z )
        {
            mDglRotated_DDDD( angle, x, y, z );
        }

        public void glRotatef( float angle, float x, float y, float z )
        {
            mDglRotatef_FFFF( angle, x, y, z );
        }

        public void glSampleCoverage( float value, byte invert )
        {
            mDglSampleCoverage_FB( value, invert );
        }

        public void glSampleCoverageARB( float value, byte invert )
        {
            mDglSampleCoverageARB_FB( value, invert );
        }

        public void glSampleMapATI( int dst, int interp, int swizzle )
        {
            mDglSampleMapATI_III( dst, interp, swizzle );
        }

        public void glSampleMaskEXT( float value, byte invert )
        {
            mDglSampleMaskEXT_FB( value, invert );
        }

        public void glSampleMaskSGIS( float value, byte invert )
        {
            mDglSampleMaskSGIS_FB( value, invert );
        }

        public void glSamplePatternEXT( int pattern )
        {
            mDglSamplePatternEXT_I( pattern );
        }

        public void glSamplePatternSGIS( int pattern )
        {
            mDglSamplePatternSGIS_I( pattern );
        }

        public void glScaled( double x, double y, double z )
        {
            mDglScaled_DDD( x, y, z );
        }

        public void glScalef( float x, float y, float z )
        {
            mDglScalef_FFF( x, y, z );
        }

        public void glScissor( int x, int y, int width, int height )
        {
            mDglScissor_IIII( x, y, width, height );
        }

        public void glSecondaryColor3b( byte red, byte green, byte blue )
        {
            mDglSecondaryColor3b_BBB( red, green, blue );
        }

        public void glSecondaryColor3bEXT( byte red, byte green, byte blue )
        {
            mDglSecondaryColor3bEXT_BBB( red, green, blue );
        }

        public void glSecondaryColor3bv( byte[] v )
        {
            mDglSecondaryColor3bv_aB( v );
        }

        public void glSecondaryColor3bv( IntPtr v )
        {
            mDglSecondaryColor3bv_P( v );
        }

        public void glSecondaryColor3bvEXT( byte[] v )
        {
            mDglSecondaryColor3bvEXT_aB( v );
        }

        public void glSecondaryColor3bvEXT( IntPtr v )
        {
            mDglSecondaryColor3bvEXT_P( v );
        }

        public void glSecondaryColor3d( double red, double green, double blue )
        {
            mDglSecondaryColor3d_DDD( red, green, blue );
        }

        public void glSecondaryColor3dEXT( double red, double green, double blue )
        {
            mDglSecondaryColor3dEXT_DDD( red, green, blue );
        }

        public void glSecondaryColor3dv( double[] v )
        {
            mDglSecondaryColor3dv_aD( v );
        }

        public void glSecondaryColor3dv( IntPtr v )
        {
            mDglSecondaryColor3dv_P( v );
        }

        public void glSecondaryColor3dvEXT( double[] v )
        {
            mDglSecondaryColor3dvEXT_aD( v );
        }

        public void glSecondaryColor3dvEXT( IntPtr v )
        {
            mDglSecondaryColor3dvEXT_P( v );
        }

        public void glSecondaryColor3f( float red, float green, float blue )
        {
            mDglSecondaryColor3f_FFF( red, green, blue );
        }

        public void glSecondaryColor3fEXT( float red, float green, float blue )
        {
            mDglSecondaryColor3fEXT_FFF( red, green, blue );
        }

        public void glSecondaryColor3fv( float[] v )
        {
            mDglSecondaryColor3fv_aF( v );
        }

        public void glSecondaryColor3fv( IntPtr v )
        {
            mDglSecondaryColor3fv_P( v );
        }

        public void glSecondaryColor3fvEXT( float[] v )
        {
            mDglSecondaryColor3fvEXT_aF( v );
        }

        public void glSecondaryColor3fvEXT( IntPtr v )
        {
            mDglSecondaryColor3fvEXT_P( v );
        }

        public void glSecondaryColor3hNV( short red, short green, short blue )
        {
            mDglSecondaryColor3hNV_HHH( red, green, blue );
        }

        public void glSecondaryColor3hvNV( short[] v )
        {
            mDglSecondaryColor3hvNV_aH( v );
        }

        public void glSecondaryColor3hvNV( IntPtr v )
        {
            mDglSecondaryColor3hvNV_P( v );
        }

        public void glSecondaryColor3i( int red, int green, int blue )
        {
            mDglSecondaryColor3i_III( red, green, blue );
        }

        public void glSecondaryColor3iEXT( int red, int green, int blue )
        {
            mDglSecondaryColor3iEXT_III( red, green, blue );
        }

        public void glSecondaryColor3iv( int[] v )
        {
            mDglSecondaryColor3iv_aI( v );
        }

        public void glSecondaryColor3iv( IntPtr v )
        {
            mDglSecondaryColor3iv_P( v );
        }

        public void glSecondaryColor3ivEXT( int[] v )
        {
            mDglSecondaryColor3ivEXT_aI( v );
        }

        public void glSecondaryColor3ivEXT( IntPtr v )
        {
            mDglSecondaryColor3ivEXT_P( v );
        }

        public void glSecondaryColor3s( short red, short green, short blue )
        {
            mDglSecondaryColor3s_HHH( red, green, blue );
        }

        public void glSecondaryColor3sEXT( short red, short green, short blue )
        {
            mDglSecondaryColor3sEXT_HHH( red, green, blue );
        }

        public void glSecondaryColor3sv( short[] v )
        {
            mDglSecondaryColor3sv_aH( v );
        }

        public void glSecondaryColor3sv( IntPtr v )
        {
            mDglSecondaryColor3sv_P( v );
        }

        public void glSecondaryColor3svEXT( short[] v )
        {
            mDglSecondaryColor3svEXT_aH( v );
        }

        public void glSecondaryColor3svEXT( IntPtr v )
        {
            mDglSecondaryColor3svEXT_P( v );
        }

        public void glSecondaryColor3ub( byte red, byte green, byte blue )
        {
            mDglSecondaryColor3ub_BBB( red, green, blue );
        }

        public void glSecondaryColor3ubEXT( byte red, byte green, byte blue )
        {
            mDglSecondaryColor3ubEXT_BBB( red, green, blue );
        }

        public void glSecondaryColor3ubv( byte[] v )
        {
            mDglSecondaryColor3ubv_aB( v );
        }

        public void glSecondaryColor3ubv( IntPtr v )
        {
            mDglSecondaryColor3ubv_P( v );
        }

        public void glSecondaryColor3ubvEXT( byte[] v )
        {
            mDglSecondaryColor3ubvEXT_aB( v );
        }

        public void glSecondaryColor3ubvEXT( IntPtr v )
        {
            mDglSecondaryColor3ubvEXT_P( v );
        }

        public void glSecondaryColor3ui( int red, int green, int blue )
        {
            mDglSecondaryColor3ui_III( red, green, blue );
        }

        public void glSecondaryColor3uiEXT( int red, int green, int blue )
        {
            mDglSecondaryColor3uiEXT_III( red, green, blue );
        }

        public void glSecondaryColor3uiv( int[] v )
        {
            mDglSecondaryColor3uiv_aI( v );
        }

        public void glSecondaryColor3uiv( IntPtr v )
        {
            mDglSecondaryColor3uiv_P( v );
        }

        public void glSecondaryColor3uivEXT( int[] v )
        {
            mDglSecondaryColor3uivEXT_aI( v );
        }

        public void glSecondaryColor3uivEXT( IntPtr v )
        {
            mDglSecondaryColor3uivEXT_P( v );
        }

        public void glSecondaryColor3us( short red, short green, short blue )
        {
            mDglSecondaryColor3us_HHH( red, green, blue );
        }

        public void glSecondaryColor3usEXT( short red, short green, short blue )
        {
            mDglSecondaryColor3usEXT_HHH( red, green, blue );
        }

        public void glSecondaryColor3usv( short[] v )
        {
            mDglSecondaryColor3usv_aH( v );
        }

        public void glSecondaryColor3usv( IntPtr v )
        {
            mDglSecondaryColor3usv_P( v );
        }

        public void glSecondaryColor3usvEXT( short[] v )
        {
            mDglSecondaryColor3usvEXT_aH( v );
        }

        public void glSecondaryColor3usvEXT( IntPtr v )
        {
            mDglSecondaryColor3usvEXT_P( v );
        }

        public void glSecondaryColorPointer( int size, int itype, int stride, byte[] pointer )
        {
            mDglSecondaryColorPointer_IIIaB( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointer( int size, int itype, int stride, short[] pointer )
        {
            mDglSecondaryColorPointer_IIIaH( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointer( int size, int itype, int stride, int[] pointer )
        {
            mDglSecondaryColorPointer_IIIaI( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointer( int size, int itype, int stride, float[] pointer )
        {
            mDglSecondaryColorPointer_IIIaF( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointer( int size, int itype, int stride, double[] pointer )
        {
            mDglSecondaryColorPointer_IIIaD( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointer( int size, int itype, int stride, IntPtr pointer )
        {
            mDglSecondaryColorPointer_IIIP( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointerEXT( int size, int itype, int stride, byte[] pointer )
        {
            mDglSecondaryColorPointerEXT_IIIaB( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointerEXT( int size, int itype, int stride, short[] pointer )
        {
            mDglSecondaryColorPointerEXT_IIIaH( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointerEXT( int size, int itype, int stride, int[] pointer )
        {
            mDglSecondaryColorPointerEXT_IIIaI( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointerEXT( int size, int itype, int stride, float[] pointer )
        {
            mDglSecondaryColorPointerEXT_IIIaF( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointerEXT( int size, int itype, int stride, double[] pointer )
        {
            mDglSecondaryColorPointerEXT_IIIaD( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointerEXT( int size, int itype, int stride, IntPtr pointer )
        {
            mDglSecondaryColorPointerEXT_IIIP( size, itype, stride, pointer );
        }

        public void glSecondaryColorPointerListIBM( int size, int itype, int stride, ref IntPtr pointer, int ptrstride )
        {
            mDglSecondaryColorPointerListIBM_IIIrPI( size, itype, stride, ref pointer, ptrstride );
        }

        public void glSelectBuffer( int size, int[] buffer )
        {
            mDglSelectBuffer_IaI( size, buffer );
        }

        public void glSelectBuffer( int size, IntPtr buffer )
        {
            mDglSelectBuffer_IP( size, buffer );
        }

        public void glSeparableFilter2D( int target, int internalformat, int width, int height, int format, int itype, byte[] row, byte[] column )
        {
            mDglSeparableFilter2D_IIIIIIaBaB( target, internalformat, width, height, format, itype, row, column );
        }

        public void glSeparableFilter2D( int target, int internalformat, int width, int height, int format, int itype, short[] row, short[] column )
        {
            mDglSeparableFilter2D_IIIIIIaHaH( target, internalformat, width, height, format, itype, row, column );
        }

        public void glSeparableFilter2D( int target, int internalformat, int width, int height, int format, int itype, int[] row, int[] column )
        {
            mDglSeparableFilter2D_IIIIIIaIaI( target, internalformat, width, height, format, itype, row, column );
        }

        public void glSeparableFilter2D( int target, int internalformat, int width, int height, int format, int itype, float[] row, float[] column )
        {
            mDglSeparableFilter2D_IIIIIIaFaF( target, internalformat, width, height, format, itype, row, column );
        }

        public void glSeparableFilter2D( int target, int internalformat, int width, int height, int format, int itype, IntPtr row, IntPtr column )
        {
            mDglSeparableFilter2D_IIIIIIPP( target, internalformat, width, height, format, itype, row, column );
        }

        public void glSeparableFilter2DEXT( int target, int internalformat, int width, int height, int format, int itype, byte[] row, byte[] column )
        {
            mDglSeparableFilter2DEXT_IIIIIIaBaB( target, internalformat, width, height, format, itype, row, column );
        }

        public void glSeparableFilter2DEXT( int target, int internalformat, int width, int height, int format, int itype, short[] row, short[] column )
        {
            mDglSeparableFilter2DEXT_IIIIIIaHaH( target, internalformat, width, height, format, itype, row, column );
        }

        public void glSeparableFilter2DEXT( int target, int internalformat, int width, int height, int format, int itype, int[] row, int[] column )
        {
            mDglSeparableFilter2DEXT_IIIIIIaIaI( target, internalformat, width, height, format, itype, row, column );
        }

        public void glSeparableFilter2DEXT( int target, int internalformat, int width, int height, int format, int itype, float[] row, float[] column )
        {
            mDglSeparableFilter2DEXT_IIIIIIaFaF( target, internalformat, width, height, format, itype, row, column );
        }

        public void glSeparableFilter2DEXT( int target, int internalformat, int width, int height, int format, int itype, IntPtr row, IntPtr column )
        {
            mDglSeparableFilter2DEXT_IIIIIIPP( target, internalformat, width, height, format, itype, row, column );
        }

        public void glSetFenceAPPLE( int fence )
        {
            mDglSetFenceAPPLE_I( fence );
        }

        public void glSetFenceNV( int fence, int condition )
        {
            mDglSetFenceNV_II( fence, condition );
        }

        public void glSetFragmentShaderConstantATI( int dst, float[] value )
        {
            mDglSetFragmentShaderConstantATI_IaF( dst, value );
        }

        public void glSetFragmentShaderConstantATI( int dst, IntPtr value )
        {
            mDglSetFragmentShaderConstantATI_IP( dst, value );
        }

        public void glSetInvariantEXT( int id, int itype, byte[] addr )
        {
            mDglSetInvariantEXT_IIaB( id, itype, addr );
        }

        public void glSetInvariantEXT( int id, int itype, short[] addr )
        {
            mDglSetInvariantEXT_IIaH( id, itype, addr );
        }

        public void glSetInvariantEXT( int id, int itype, int[] addr )
        {
            mDglSetInvariantEXT_IIaI( id, itype, addr );
        }

        public void glSetInvariantEXT( int id, int itype, float[] addr )
        {
            mDglSetInvariantEXT_IIaF( id, itype, addr );
        }

        public void glSetInvariantEXT( int id, int itype, double[] addr )
        {
            mDglSetInvariantEXT_IIaD( id, itype, addr );
        }

        public void glSetInvariantEXT( int id, int itype, IntPtr addr )
        {
            mDglSetInvariantEXT_IIP( id, itype, addr );
        }

        public void glSetLocalConstantEXT( int id, int itype, byte[] addr )
        {
            mDglSetLocalConstantEXT_IIaB( id, itype, addr );
        }

        public void glSetLocalConstantEXT( int id, int itype, short[] addr )
        {
            mDglSetLocalConstantEXT_IIaH( id, itype, addr );
        }

        public void glSetLocalConstantEXT( int id, int itype, int[] addr )
        {
            mDglSetLocalConstantEXT_IIaI( id, itype, addr );
        }

        public void glSetLocalConstantEXT( int id, int itype, float[] addr )
        {
            mDglSetLocalConstantEXT_IIaF( id, itype, addr );
        }

        public void glSetLocalConstantEXT( int id, int itype, double[] addr )
        {
            mDglSetLocalConstantEXT_IIaD( id, itype, addr );
        }

        public void glSetLocalConstantEXT( int id, int itype, IntPtr addr )
        {
            mDglSetLocalConstantEXT_IIP( id, itype, addr );
        }

        public void glShadeModel( int mode )
        {
            mDglShadeModel_I( mode );
        }

        public void glShaderOp1EXT( int op, int res, int arg1 )
        {
            mDglShaderOp1EXT_III( op, res, arg1 );
        }

        public void glShaderOp2EXT( int op, int res, int arg1, int arg2 )
        {
            mDglShaderOp2EXT_IIII( op, res, arg1, arg2 );
        }

        public void glShaderOp3EXT( int op, int res, int arg1, int arg2, int arg3 )
        {
            mDglShaderOp3EXT_IIIII( op, res, arg1, arg2, arg3 );
        }

        public void glShaderSource( int shader, int count, String[] textLines, int[] lengths )
        {
            mDglShaderSource_IIaSaI( shader, count, textLines, lengths );
        }

        public void glShaderSource( int shader, int count, String[] textLines, IntPtr lengths )
        {
            mDglShaderSource_IIaSP( shader, count, textLines, lengths );
        }

        public void glShaderSource( int shader, int count, IntPtr textLines, int[] lengths )
        {
            mDglShaderSource_IIPaI( shader, count, textLines, lengths );
        }

        public void glShaderSource( int shader, int count, IntPtr textLines, IntPtr lengths )
        {
            mDglShaderSource_IIPP( shader, count, textLines, lengths );
        }

        public void glShaderSourceARB( int shaderObj, int count, String[] textLines, int[] lengths )
        {
            mDglShaderSourceARB_IIaSaI( shaderObj, count, textLines, lengths );
        }

        public void glShaderSourceARB( int shaderObj, int count, String[] textLines, IntPtr lengths )
        {
            mDglShaderSourceARB_IIaSP( shaderObj, count, textLines, lengths );
        }

        public void glShaderSourceARB( int shaderObj, int count, IntPtr textLines, int[] lengths )
        {
            mDglShaderSourceARB_IIPaI( shaderObj, count, textLines, lengths );
        }

        public void glShaderSourceARB( int shaderObj, int count, IntPtr textLines, IntPtr lengths )
        {
            mDglShaderSourceARB_IIPP( shaderObj, count, textLines, lengths );
        }

        public void glSharpenTexFuncSGIS( int target, int n, float[] points )
        {
            mDglSharpenTexFuncSGIS_IIaF( target, n, points );
        }

        public void glSharpenTexFuncSGIS( int target, int n, IntPtr points )
        {
            mDglSharpenTexFuncSGIS_IIP( target, n, points );
        }

        public void glSpriteParameterfSGIX( int pname, float fparam )
        {
            mDglSpriteParameterfSGIX_IF( pname, fparam );
        }

        public void glSpriteParameterfvSGIX( int pname, float[] rfparams )
        {
            mDglSpriteParameterfvSGIX_IaF( pname, rfparams );
        }

        public void glSpriteParameterfvSGIX( int pname, IntPtr rfparams )
        {
            mDglSpriteParameterfvSGIX_IP( pname, rfparams );
        }

        public void glSpriteParameteriSGIX( int pname, int iparam )
        {
            mDglSpriteParameteriSGIX_II( pname, iparam );
        }

        public void glSpriteParameterivSGIX( int pname, int[] riparams )
        {
            mDglSpriteParameterivSGIX_IaI( pname, riparams );
        }

        public void glSpriteParameterivSGIX( int pname, IntPtr riparams )
        {
            mDglSpriteParameterivSGIX_IP( pname, riparams );
        }

        public void glStartInstrumentsSGIX()
        {
            mDglStartInstrumentsSGIX_V();
        }

        public void glStencilFunc( int func, int iref, int mask )
        {
            mDglStencilFunc_III( func, iref, mask );
        }

        public void glStencilFuncSeparate( int frontfunc, int backfunc, int iref, int mask )
        {
            mDglStencilFuncSeparate_IIII( frontfunc, backfunc, iref, mask );
        }

        public void glStencilFuncSeparateATI( int frontfunc, int backfunc, int iref, int mask )
        {
            mDglStencilFuncSeparateATI_IIII( frontfunc, backfunc, iref, mask );
        }

        public void glStencilMask( int mask )
        {
            mDglStencilMask_I( mask );
        }

        public void glStencilMaskSeparate( int face, int mask )
        {
            mDglStencilMaskSeparate_II( face, mask );
        }

        public void glStencilOp( int fail, int zfail, int zpass )
        {
            mDglStencilOp_III( fail, zfail, zpass );
        }

        public void glStencilOpSeparate( int face, int sfail, int dpfail, int dppass )
        {
            mDglStencilOpSeparate_IIII( face, sfail, dpfail, dppass );
        }

        public void glStencilOpSeparateATI( int face, int sfail, int dpfail, int dppass )
        {
            mDglStencilOpSeparateATI_IIII( face, sfail, dpfail, dppass );
        }

        public void glStopInstrumentsSGIX( int marker )
        {
            mDglStopInstrumentsSGIX_I( marker );
        }

        public void glStringMarkerGREMEDY( int len, byte[] rvstring )
        {
            mDglStringMarkerGREMEDY_IaB( len, rvstring );
        }

        public void glStringMarkerGREMEDY( int len, IntPtr rvstring )
        {
            mDglStringMarkerGREMEDY_IP( len, rvstring );
        }

        public void glSwizzleEXT( int res, int iin, int outX, int outY, int outZ, int outW )
        {
            mDglSwizzleEXT_IIIIII( res, iin, outX, outY, outZ, outW );
        }

        public void glTagSampleBufferSGIX()
        {
            mDglTagSampleBufferSGIX_V();
        }

        public void glTangent3bEXT( byte tx, byte ty, byte tz )
        {
            mDglTangent3bEXT_BBB( tx, ty, tz );
        }

        public void glTangent3bvEXT( byte[] v )
        {
            mDglTangent3bvEXT_aB( v );
        }

        public void glTangent3bvEXT( IntPtr v )
        {
            mDglTangent3bvEXT_P( v );
        }

        public void glTangent3dEXT( double tx, double ty, double tz )
        {
            mDglTangent3dEXT_DDD( tx, ty, tz );
        }

        public void glTangent3dvEXT( double[] v )
        {
            mDglTangent3dvEXT_aD( v );
        }

        public void glTangent3dvEXT( IntPtr v )
        {
            mDglTangent3dvEXT_P( v );
        }

        public void glTangent3fEXT( float tx, float ty, float tz )
        {
            mDglTangent3fEXT_FFF( tx, ty, tz );
        }

        public void glTangent3fvEXT( float[] v )
        {
            mDglTangent3fvEXT_aF( v );
        }

        public void glTangent3fvEXT( IntPtr v )
        {
            mDglTangent3fvEXT_P( v );
        }

        public void glTangent3iEXT( int tx, int ty, int tz )
        {
            mDglTangent3iEXT_III( tx, ty, tz );
        }

        public void glTangent3ivEXT( int[] v )
        {
            mDglTangent3ivEXT_aI( v );
        }

        public void glTangent3ivEXT( IntPtr v )
        {
            mDglTangent3ivEXT_P( v );
        }

        public void glTangent3sEXT( short tx, short ty, short tz )
        {
            mDglTangent3sEXT_HHH( tx, ty, tz );
        }

        public void glTangent3svEXT( short[] v )
        {
            mDglTangent3svEXT_aH( v );
        }

        public void glTangent3svEXT( IntPtr v )
        {
            mDglTangent3svEXT_P( v );
        }

        public void glTangentPointerEXT( int itype, int stride, byte[] pointer )
        {
            mDglTangentPointerEXT_IIaB( itype, stride, pointer );
        }

        public void glTangentPointerEXT( int itype, int stride, short[] pointer )
        {
            mDglTangentPointerEXT_IIaH( itype, stride, pointer );
        }

        public void glTangentPointerEXT( int itype, int stride, int[] pointer )
        {
            mDglTangentPointerEXT_IIaI( itype, stride, pointer );
        }

        public void glTangentPointerEXT( int itype, int stride, float[] pointer )
        {
            mDglTangentPointerEXT_IIaF( itype, stride, pointer );
        }

        public void glTangentPointerEXT( int itype, int stride, double[] pointer )
        {
            mDglTangentPointerEXT_IIaD( itype, stride, pointer );
        }

        public void glTangentPointerEXT( int itype, int stride, IntPtr pointer )
        {
            mDglTangentPointerEXT_IIP( itype, stride, pointer );
        }

        public void glTbufferMask3DFX( int mask )
        {
            mDglTbufferMask3DFX_I( mask );
        }

        public byte glTestFenceAPPLE( int fence )
        {
            return (mDglTestFenceAPPLE_I( fence ));
        }

        public byte glTestFenceNV( int fence )
        {
            return (mDglTestFenceNV_I( fence ));
        }

        public byte glTestObjectAPPLE( int iobject, int name )
        {
            return (mDglTestObjectAPPLE_II( iobject, name ));
        }

        public void glTexBumpParameterfvATI( int pname, float[] rfparam )
        {
            mDglTexBumpParameterfvATI_IaF( pname, rfparam );
        }

        public void glTexBumpParameterfvATI( int pname, IntPtr rfparam )
        {
            mDglTexBumpParameterfvATI_IP( pname, rfparam );
        }

        public void glTexBumpParameterivATI( int pname, int[] riparam )
        {
            mDglTexBumpParameterivATI_IaI( pname, riparam );
        }

        public void glTexBumpParameterivATI( int pname, IntPtr riparam )
        {
            mDglTexBumpParameterivATI_IP( pname, riparam );
        }

        public void glTexCoord1d( double s )
        {
            mDglTexCoord1d_D( s );
        }

        public void glTexCoord1dv( double[] v )
        {
            mDglTexCoord1dv_aD( v );
        }

        public void glTexCoord1dv( IntPtr v )
        {
            mDglTexCoord1dv_P( v );
        }

        public void glTexCoord1f( float s )
        {
            mDglTexCoord1f_F( s );
        }

        public void glTexCoord1fv( float[] v )
        {
            mDglTexCoord1fv_aF( v );
        }

        public void glTexCoord1fv( IntPtr v )
        {
            mDglTexCoord1fv_P( v );
        }

        public void glTexCoord1hNV( short s )
        {
            mDglTexCoord1hNV_H( s );
        }

        public void glTexCoord1hvNV( short[] v )
        {
            mDglTexCoord1hvNV_aH( v );
        }

        public void glTexCoord1hvNV( IntPtr v )
        {
            mDglTexCoord1hvNV_P( v );
        }

        public void glTexCoord1i( int s )
        {
            mDglTexCoord1i_I( s );
        }

        public void glTexCoord1iv( int[] v )
        {
            mDglTexCoord1iv_aI( v );
        }

        public void glTexCoord1iv( IntPtr v )
        {
            mDglTexCoord1iv_P( v );
        }

        public void glTexCoord1s( short s )
        {
            mDglTexCoord1s_H( s );
        }

        public void glTexCoord1sv( short[] v )
        {
            mDglTexCoord1sv_aH( v );
        }

        public void glTexCoord1sv( IntPtr v )
        {
            mDglTexCoord1sv_P( v );
        }

        public void glTexCoord2d( double s, double t )
        {
            mDglTexCoord2d_DD( s, t );
        }

        public void glTexCoord2dv( double[] v )
        {
            mDglTexCoord2dv_aD( v );
        }

        public void glTexCoord2dv( IntPtr v )
        {
            mDglTexCoord2dv_P( v );
        }

        public void glTexCoord2f( float s, float t )
        {
            mDglTexCoord2f_FF( s, t );
        }

        public void glTexCoord2fColor3fVertex3fSUN( float s, float t, float r, float g, float b, float x, float y, float z )
        {
            mDglTexCoord2fColor3fVertex3fSUN_FFFFFFFF( s, t, r, g, b, x, y, z );
        }

        public void glTexCoord2fColor3fVertex3fvSUN( float[] tc, float[] c, float[] v )
        {
            mDglTexCoord2fColor3fVertex3fvSUN_aFaFaF( tc, c, v );
        }

        public void glTexCoord2fColor3fVertex3fvSUN( IntPtr tc, IntPtr c, IntPtr v )
        {
            mDglTexCoord2fColor3fVertex3fvSUN_PPP( tc, c, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fSUN( float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fSUN_FFFFFFFFFFFF( s, t, r, g, b, a, nx, ny, nz, x, y, z );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( float[] tc, float[] c, float[] n, float[] v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFaF( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( float[] tc, float[] c, float[] n, IntPtr v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFP( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( float[] tc, float[] c, IntPtr n, float[] v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPaF( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( float[] tc, float[] c, IntPtr n, IntPtr v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPP( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( float[] tc, IntPtr c, float[] n, float[] v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFaF( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( float[] tc, IntPtr c, float[] n, IntPtr v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFP( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( float[] tc, IntPtr c, IntPtr n, float[] v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPaF( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( float[] tc, IntPtr c, IntPtr n, IntPtr v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPP( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( IntPtr tc, float[] c, float[] n, float[] v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFaF( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( IntPtr tc, float[] c, float[] n, IntPtr v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFP( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( IntPtr tc, float[] c, IntPtr n, float[] v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPaF( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( IntPtr tc, float[] c, IntPtr n, IntPtr v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPP( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( IntPtr tc, IntPtr c, float[] n, float[] v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFaF( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( IntPtr tc, IntPtr c, float[] n, IntPtr v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFP( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( IntPtr tc, IntPtr c, IntPtr n, float[] v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPaF( tc, c, n, v );
        }

        public void glTexCoord2fColor4fNormal3fVertex3fvSUN( IntPtr tc, IntPtr c, IntPtr n, IntPtr v )
        {
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPP( tc, c, n, v );
        }

        public void glTexCoord2fColor4ubVertex3fSUN( float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z )
        {
            mDglTexCoord2fColor4ubVertex3fSUN_FFBBBBFFF( s, t, r, g, b, a, x, y, z );
        }

        public void glTexCoord2fColor4ubVertex3fvSUN( float[] tc, byte[] c, float[] v )
        {
            mDglTexCoord2fColor4ubVertex3fvSUN_aFaBaF( tc, c, v );
        }

        public void glTexCoord2fColor4ubVertex3fvSUN( float[] tc, byte[] c, IntPtr v )
        {
            mDglTexCoord2fColor4ubVertex3fvSUN_aFaBP( tc, c, v );
        }

        public void glTexCoord2fColor4ubVertex3fvSUN( float[] tc, IntPtr c, float[] v )
        {
            mDglTexCoord2fColor4ubVertex3fvSUN_aFPaF( tc, c, v );
        }

        public void glTexCoord2fColor4ubVertex3fvSUN( float[] tc, IntPtr c, IntPtr v )
        {
            mDglTexCoord2fColor4ubVertex3fvSUN_aFPP( tc, c, v );
        }

        public void glTexCoord2fColor4ubVertex3fvSUN( IntPtr tc, byte[] c, float[] v )
        {
            mDglTexCoord2fColor4ubVertex3fvSUN_PaBaF( tc, c, v );
        }

        public void glTexCoord2fColor4ubVertex3fvSUN( IntPtr tc, byte[] c, IntPtr v )
        {
            mDglTexCoord2fColor4ubVertex3fvSUN_PaBP( tc, c, v );
        }

        public void glTexCoord2fColor4ubVertex3fvSUN( IntPtr tc, IntPtr c, float[] v )
        {
            mDglTexCoord2fColor4ubVertex3fvSUN_PPaF( tc, c, v );
        }

        public void glTexCoord2fColor4ubVertex3fvSUN( IntPtr tc, IntPtr c, IntPtr v )
        {
            mDglTexCoord2fColor4ubVertex3fvSUN_PPP( tc, c, v );
        }

        public void glTexCoord2fNormal3fVertex3fSUN( float s, float t, float nx, float ny, float nz, float x, float y, float z )
        {
            mDglTexCoord2fNormal3fVertex3fSUN_FFFFFFFF( s, t, nx, ny, nz, x, y, z );
        }

        public void glTexCoord2fNormal3fVertex3fvSUN( float[] tc, float[] n, float[] v )
        {
            mDglTexCoord2fNormal3fVertex3fvSUN_aFaFaF( tc, n, v );
        }

        public void glTexCoord2fNormal3fVertex3fvSUN( float[] tc, float[] n, IntPtr v )
        {
            mDglTexCoord2fNormal3fVertex3fvSUN_aFaFP( tc, n, v );
        }

        public void glTexCoord2fNormal3fVertex3fvSUN( float[] tc, IntPtr n, float[] v )
        {
            mDglTexCoord2fNormal3fVertex3fvSUN_aFPaF( tc, n, v );
        }

        public void glTexCoord2fNormal3fVertex3fvSUN( float[] tc, IntPtr n, IntPtr v )
        {
            mDglTexCoord2fNormal3fVertex3fvSUN_aFPP( tc, n, v );
        }

        public void glTexCoord2fNormal3fVertex3fvSUN( IntPtr tc, float[] n, float[] v )
        {
            mDglTexCoord2fNormal3fVertex3fvSUN_PaFaF( tc, n, v );
        }

        public void glTexCoord2fNormal3fVertex3fvSUN( IntPtr tc, float[] n, IntPtr v )
        {
            mDglTexCoord2fNormal3fVertex3fvSUN_PaFP( tc, n, v );
        }

        public void glTexCoord2fNormal3fVertex3fvSUN( IntPtr tc, IntPtr n, float[] v )
        {
            mDglTexCoord2fNormal3fVertex3fvSUN_PPaF( tc, n, v );
        }

        public void glTexCoord2fNormal3fVertex3fvSUN( IntPtr tc, IntPtr n, IntPtr v )
        {
            mDglTexCoord2fNormal3fVertex3fvSUN_PPP( tc, n, v );
        }

        public void glTexCoord2fv( float[] v )
        {
            mDglTexCoord2fv_aF( v );
        }

        public void glTexCoord2fv( IntPtr v )
        {
            mDglTexCoord2fv_P( v );
        }

        public void glTexCoord2fVertex3fSUN( float s, float t, float x, float y, float z )
        {
            mDglTexCoord2fVertex3fSUN_FFFFF( s, t, x, y, z );
        }

        public void glTexCoord2fVertex3fvSUN( float[] tc, float[] v )
        {
            mDglTexCoord2fVertex3fvSUN_aFaF( tc, v );
        }

        public void glTexCoord2fVertex3fvSUN( float[] tc, IntPtr v )
        {
            mDglTexCoord2fVertex3fvSUN_aFP( tc, v );
        }

        public void glTexCoord2fVertex3fvSUN( IntPtr tc, float[] v )
        {
            mDglTexCoord2fVertex3fvSUN_PaF( tc, v );
        }

        public void glTexCoord2fVertex3fvSUN( IntPtr tc, IntPtr v )
        {
            mDglTexCoord2fVertex3fvSUN_PP( tc, v );
        }

        public void glTexCoord2hNV( short s, short t )
        {
            mDglTexCoord2hNV_HH( s, t );
        }

        public void glTexCoord2hvNV( short[] v )
        {
            mDglTexCoord2hvNV_aH( v );
        }

        public void glTexCoord2hvNV( IntPtr v )
        {
            mDglTexCoord2hvNV_P( v );
        }

        public void glTexCoord2i( int s, int t )
        {
            mDglTexCoord2i_II( s, t );
        }

        public void glTexCoord2iv( int[] v )
        {
            mDglTexCoord2iv_aI( v );
        }

        public void glTexCoord2iv( IntPtr v )
        {
            mDglTexCoord2iv_P( v );
        }

        public void glTexCoord2s( short s, short t )
        {
            mDglTexCoord2s_HH( s, t );
        }

        public void glTexCoord2sv( short[] v )
        {
            mDglTexCoord2sv_aH( v );
        }

        public void glTexCoord2sv( IntPtr v )
        {
            mDglTexCoord2sv_P( v );
        }

        public void glTexCoord3d( double s, double t, double r )
        {
            mDglTexCoord3d_DDD( s, t, r );
        }

        public void glTexCoord3dv( double[] v )
        {
            mDglTexCoord3dv_aD( v );
        }

        public void glTexCoord3dv( IntPtr v )
        {
            mDglTexCoord3dv_P( v );
        }

        public void glTexCoord3f( float s, float t, float r )
        {
            mDglTexCoord3f_FFF( s, t, r );
        }

        public void glTexCoord3fv( float[] v )
        {
            mDglTexCoord3fv_aF( v );
        }

        public void glTexCoord3fv( IntPtr v )
        {
            mDglTexCoord3fv_P( v );
        }

        public void glTexCoord3hNV( short s, short t, short r )
        {
            mDglTexCoord3hNV_HHH( s, t, r );
        }

        public void glTexCoord3hvNV( short[] v )
        {
            mDglTexCoord3hvNV_aH( v );
        }

        public void glTexCoord3hvNV( IntPtr v )
        {
            mDglTexCoord3hvNV_P( v );
        }

        public void glTexCoord3i( int s, int t, int r )
        {
            mDglTexCoord3i_III( s, t, r );
        }

        public void glTexCoord3iv( int[] v )
        {
            mDglTexCoord3iv_aI( v );
        }

        public void glTexCoord3iv( IntPtr v )
        {
            mDglTexCoord3iv_P( v );
        }

        public void glTexCoord3s( short s, short t, short r )
        {
            mDglTexCoord3s_HHH( s, t, r );
        }

        public void glTexCoord3sv( short[] v )
        {
            mDglTexCoord3sv_aH( v );
        }

        public void glTexCoord3sv( IntPtr v )
        {
            mDglTexCoord3sv_P( v );
        }

        public void glTexCoord4d( double s, double t, double r, double q )
        {
            mDglTexCoord4d_DDDD( s, t, r, q );
        }

        public void glTexCoord4dv( double[] v )
        {
            mDglTexCoord4dv_aD( v );
        }

        public void glTexCoord4dv( IntPtr v )
        {
            mDglTexCoord4dv_P( v );
        }

        public void glTexCoord4f( float s, float t, float r, float q )
        {
            mDglTexCoord4f_FFFF( s, t, r, q );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fSUN( float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fSUN_FFFFFFFFFFFFFFF( s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( float[] tc, float[] c, float[] n, float[] v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFaF( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( float[] tc, float[] c, float[] n, IntPtr v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFP( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( float[] tc, float[] c, IntPtr n, float[] v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPaF( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( float[] tc, float[] c, IntPtr n, IntPtr v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPP( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( float[] tc, IntPtr c, float[] n, float[] v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFaF( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( float[] tc, IntPtr c, float[] n, IntPtr v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFP( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( float[] tc, IntPtr c, IntPtr n, float[] v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPaF( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( float[] tc, IntPtr c, IntPtr n, IntPtr v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPP( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( IntPtr tc, float[] c, float[] n, float[] v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFaF( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( IntPtr tc, float[] c, float[] n, IntPtr v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFP( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( IntPtr tc, float[] c, IntPtr n, float[] v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPaF( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( IntPtr tc, float[] c, IntPtr n, IntPtr v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPP( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( IntPtr tc, IntPtr c, float[] n, float[] v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFaF( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( IntPtr tc, IntPtr c, float[] n, IntPtr v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFP( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( IntPtr tc, IntPtr c, IntPtr n, float[] v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPaF( tc, c, n, v );
        }

        public void glTexCoord4fColor4fNormal3fVertex4fvSUN( IntPtr tc, IntPtr c, IntPtr n, IntPtr v )
        {
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPP( tc, c, n, v );
        }

        public void glTexCoord4fv( float[] v )
        {
            mDglTexCoord4fv_aF( v );
        }

        public void glTexCoord4fv( IntPtr v )
        {
            mDglTexCoord4fv_P( v );
        }

        public void glTexCoord4fVertex4fSUN( float s, float t, float p, float q, float x, float y, float z, float w )
        {
            mDglTexCoord4fVertex4fSUN_FFFFFFFF( s, t, p, q, x, y, z, w );
        }

        public void glTexCoord4fVertex4fvSUN( float[] tc, float[] v )
        {
            mDglTexCoord4fVertex4fvSUN_aFaF( tc, v );
        }

        public void glTexCoord4fVertex4fvSUN( float[] tc, IntPtr v )
        {
            mDglTexCoord4fVertex4fvSUN_aFP( tc, v );
        }

        public void glTexCoord4fVertex4fvSUN( IntPtr tc, float[] v )
        {
            mDglTexCoord4fVertex4fvSUN_PaF( tc, v );
        }

        public void glTexCoord4fVertex4fvSUN( IntPtr tc, IntPtr v )
        {
            mDglTexCoord4fVertex4fvSUN_PP( tc, v );
        }

        public void glTexCoord4hNV( short s, short t, short r, short q )
        {
            mDglTexCoord4hNV_HHHH( s, t, r, q );
        }

        public void glTexCoord4hvNV( short[] v )
        {
            mDglTexCoord4hvNV_aH( v );
        }

        public void glTexCoord4hvNV( IntPtr v )
        {
            mDglTexCoord4hvNV_P( v );
        }

        public void glTexCoord4i( int s, int t, int r, int q )
        {
            mDglTexCoord4i_IIII( s, t, r, q );
        }

        public void glTexCoord4iv( int[] v )
        {
            mDglTexCoord4iv_aI( v );
        }

        public void glTexCoord4iv( IntPtr v )
        {
            mDglTexCoord4iv_P( v );
        }

        public void glTexCoord4s( short s, short t, short r, short q )
        {
            mDglTexCoord4s_HHHH( s, t, r, q );
        }

        public void glTexCoord4sv( short[] v )
        {
            mDglTexCoord4sv_aH( v );
        }

        public void glTexCoord4sv( IntPtr v )
        {
            mDglTexCoord4sv_P( v );
        }

        public void glTexCoordPointer( int size, int itype, int stride, byte[] pointer )
        {
            mDglTexCoordPointer_IIIaB( size, itype, stride, pointer );
        }

        public void glTexCoordPointer( int size, int itype, int stride, short[] pointer )
        {
            mDglTexCoordPointer_IIIaH( size, itype, stride, pointer );
        }

        public void glTexCoordPointer( int size, int itype, int stride, int[] pointer )
        {
            mDglTexCoordPointer_IIIaI( size, itype, stride, pointer );
        }

        public void glTexCoordPointer( int size, int itype, int stride, float[] pointer )
        {
            mDglTexCoordPointer_IIIaF( size, itype, stride, pointer );
        }

        public void glTexCoordPointer( int size, int itype, int stride, double[] pointer )
        {
            mDglTexCoordPointer_IIIaD( size, itype, stride, pointer );
        }

        public void glTexCoordPointer( int size, int itype, int stride, IntPtr pointer )
        {
            mDglTexCoordPointer_IIIP( size, itype, stride, pointer );
        }

        public void glTexCoordPointerEXT( int size, int itype, int stride, int count, byte[] pointer )
        {
            mDglTexCoordPointerEXT_IIIIaB( size, itype, stride, count, pointer );
        }

        public void glTexCoordPointerEXT( int size, int itype, int stride, int count, short[] pointer )
        {
            mDglTexCoordPointerEXT_IIIIaH( size, itype, stride, count, pointer );
        }

        public void glTexCoordPointerEXT( int size, int itype, int stride, int count, int[] pointer )
        {
            mDglTexCoordPointerEXT_IIIIaI( size, itype, stride, count, pointer );
        }

        public void glTexCoordPointerEXT( int size, int itype, int stride, int count, float[] pointer )
        {
            mDglTexCoordPointerEXT_IIIIaF( size, itype, stride, count, pointer );
        }

        public void glTexCoordPointerEXT( int size, int itype, int stride, int count, double[] pointer )
        {
            mDglTexCoordPointerEXT_IIIIaD( size, itype, stride, count, pointer );
        }

        public void glTexCoordPointerEXT( int size, int itype, int stride, int count, IntPtr pointer )
        {
            mDglTexCoordPointerEXT_IIIIP( size, itype, stride, count, pointer );
        }

        public void glTexCoordPointerListIBM( int size, int itype, int stride, ref IntPtr pointer, int ptrstride )
        {
            mDglTexCoordPointerListIBM_IIIrPI( size, itype, stride, ref pointer, ptrstride );
        }

        public void glTexCoordPointervINTEL( int size, int itype, ref IntPtr pointer )
        {
            mDglTexCoordPointervINTEL_IIrP( size, itype, ref pointer );
        }

        public void glTexEnvf( int target, int pname, float param )
        {
            mDglTexEnvf_IIF( target, pname, param );
        }

        public void glTexEnvfv( int target, int pname, float[] rfparams )
        {
            mDglTexEnvfv_IIaF( target, pname, rfparams );
        }

        public void glTexEnvfv( int target, int pname, IntPtr rfparams )
        {
            mDglTexEnvfv_IIP( target, pname, rfparams );
        }

        public void glTexEnvi( int target, int pname, int iparam )
        {
            mDglTexEnvi_III( target, pname, iparam );
        }

        public void glTexEnviv( int target, int pname, int[] riparams )
        {
            mDglTexEnviv_IIaI( target, pname, riparams );
        }

        public void glTexEnviv( int target, int pname, IntPtr riparams )
        {
            mDglTexEnviv_IIP( target, pname, riparams );
        }

        public void glTexFilterFuncSGIS( int target, int filter, int n, float[] weights )
        {
            mDglTexFilterFuncSGIS_IIIaF( target, filter, n, weights );
        }

        public void glTexFilterFuncSGIS( int target, int filter, int n, IntPtr weights )
        {
            mDglTexFilterFuncSGIS_IIIP( target, filter, n, weights );
        }

        public void glTexGend( int coord, int pname, double dparam )
        {
            mDglTexGend_IID( coord, pname, dparam );
        }

        public void glTexGendv( int coord, int pname, double[] rdparams )
        {
            mDglTexGendv_IIaD( coord, pname, rdparams );
        }

        public void glTexGendv( int coord, int pname, IntPtr rdparams )
        {
            mDglTexGendv_IIP( coord, pname, rdparams );
        }

        public void glTexGenf( int coord, int pname, float fparam )
        {
            mDglTexGenf_IIF( coord, pname, fparam );
        }

        public void glTexGenfv( int coord, int pname, float[] rfparams )
        {
            mDglTexGenfv_IIaF( coord, pname, rfparams );
        }

        public void glTexGenfv( int coord, int pname, IntPtr rfparams )
        {
            mDglTexGenfv_IIP( coord, pname, rfparams );
        }

        public void glTexGeni( int coord, int pname, int iparam )
        {
            mDglTexGeni_III( coord, pname, iparam );
        }

        public void glTexGeniv( int coord, int pname, int[] riparams )
        {
            mDglTexGeniv_IIaI( coord, pname, riparams );
        }

        public void glTexGeniv( int coord, int pname, IntPtr riparams )
        {
            mDglTexGeniv_IIP( coord, pname, riparams );
        }

        public void glTexImage1D( int target, int level, int internalformat, int width, int border, int format, int itype, byte[] pixels )
        {
            mDglTexImage1D_IIIIIIIaB( target, level, internalformat, width, border, format, itype, pixels );
        }

        public void glTexImage1D( int target, int level, int internalformat, int width, int border, int format, int itype, short[] pixels )
        {
            mDglTexImage1D_IIIIIIIaH( target, level, internalformat, width, border, format, itype, pixels );
        }

        public void glTexImage1D( int target, int level, int internalformat, int width, int border, int format, int itype, int[] pixels )
        {
            mDglTexImage1D_IIIIIIIaI( target, level, internalformat, width, border, format, itype, pixels );
        }

        public void glTexImage1D( int target, int level, int internalformat, int width, int border, int format, int itype, float[] pixels )
        {
            mDglTexImage1D_IIIIIIIaF( target, level, internalformat, width, border, format, itype, pixels );
        }

        public void glTexImage1D( int target, int level, int internalformat, int width, int border, int format, int itype, IntPtr pixels )
        {
            mDglTexImage1D_IIIIIIIP( target, level, internalformat, width, border, format, itype, pixels );
        }

        public void glTexImage2D( int target, int level, int internalformat, int width, int height, int border, int format, int itype, byte[] pixels )
        {
            mDglTexImage2D_IIIIIIIIaB( target, level, internalformat, width, height, border, format, itype, pixels );
        }

        public void glTexImage2D( int target, int level, int internalformat, int width, int height, int border, int format, int itype, short[] pixels )
        {
            mDglTexImage2D_IIIIIIIIaH( target, level, internalformat, width, height, border, format, itype, pixels );
        }

        public void glTexImage2D( int target, int level, int internalformat, int width, int height, int border, int format, int itype, int[] pixels )
        {
            mDglTexImage2D_IIIIIIIIaI( target, level, internalformat, width, height, border, format, itype, pixels );
        }

        public void glTexImage2D( int target, int level, int internalformat, int width, int height, int border, int format, int itype, float[] pixels )
        {
            mDglTexImage2D_IIIIIIIIaF( target, level, internalformat, width, height, border, format, itype, pixels );
        }

        public void glTexImage2D( int target, int level, int internalformat, int width, int height, int border, int format, int itype, IntPtr pixels )
        {
            mDglTexImage2D_IIIIIIIIP( target, level, internalformat, width, height, border, format, itype, pixels );
        }

        public void glTexImage3D( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, byte[] pixels )
        {
            mDglTexImage3D_IIIIIIIIIaB( target, level, internalformat, width, height, depth, border, format, itype, pixels );
        }

        public void glTexImage3D( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, short[] pixels )
        {
            mDglTexImage3D_IIIIIIIIIaH( target, level, internalformat, width, height, depth, border, format, itype, pixels );
        }

        public void glTexImage3D( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, int[] pixels )
        {
            mDglTexImage3D_IIIIIIIIIaI( target, level, internalformat, width, height, depth, border, format, itype, pixels );
        }

        public void glTexImage3D( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, float[] pixels )
        {
            mDglTexImage3D_IIIIIIIIIaF( target, level, internalformat, width, height, depth, border, format, itype, pixels );
        }

        public void glTexImage3D( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, IntPtr pixels )
        {
            mDglTexImage3D_IIIIIIIIIP( target, level, internalformat, width, height, depth, border, format, itype, pixels );
        }

        public void glTexImage3DEXT( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, byte[] pixels )
        {
            mDglTexImage3DEXT_IIIIIIIIIaB( target, level, internalformat, width, height, depth, border, format, itype, pixels );
        }

        public void glTexImage3DEXT( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, short[] pixels )
        {
            mDglTexImage3DEXT_IIIIIIIIIaH( target, level, internalformat, width, height, depth, border, format, itype, pixels );
        }

        public void glTexImage3DEXT( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, int[] pixels )
        {
            mDglTexImage3DEXT_IIIIIIIIIaI( target, level, internalformat, width, height, depth, border, format, itype, pixels );
        }

        public void glTexImage3DEXT( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, float[] pixels )
        {
            mDglTexImage3DEXT_IIIIIIIIIaF( target, level, internalformat, width, height, depth, border, format, itype, pixels );
        }

        public void glTexImage3DEXT( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int itype, IntPtr pixels )
        {
            mDglTexImage3DEXT_IIIIIIIIIP( target, level, internalformat, width, height, depth, border, format, itype, pixels );
        }

        public void glTexImage4DSGIS( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int itype, byte[] pixels )
        {
            mDglTexImage4DSGIS_IIIIIIIIIIaB( target, level, internalformat, width, height, depth, size4d, border, format, itype, pixels );
        }

        public void glTexImage4DSGIS( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int itype, short[] pixels )
        {
            mDglTexImage4DSGIS_IIIIIIIIIIaH( target, level, internalformat, width, height, depth, size4d, border, format, itype, pixels );
        }

        public void glTexImage4DSGIS( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int itype, int[] pixels )
        {
            mDglTexImage4DSGIS_IIIIIIIIIIaI( target, level, internalformat, width, height, depth, size4d, border, format, itype, pixels );
        }

        public void glTexImage4DSGIS( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int itype, float[] pixels )
        {
            mDglTexImage4DSGIS_IIIIIIIIIIaF( target, level, internalformat, width, height, depth, size4d, border, format, itype, pixels );
        }

        public void glTexImage4DSGIS( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int itype, IntPtr pixels )
        {
            mDglTexImage4DSGIS_IIIIIIIIIIP( target, level, internalformat, width, height, depth, size4d, border, format, itype, pixels );
        }

        public void glTexParameterf( int target, int pname, float param )
        {
            mDglTexParameterf_IIF( target, pname, param );
        }

        public void glTexParameterfv( int target, int pname, float[] rfparams )
        {
            mDglTexParameterfv_IIaF( target, pname, rfparams );
        }

        public void glTexParameterfv( int target, int pname, IntPtr rfparams )
        {
            mDglTexParameterfv_IIP( target, pname, rfparams );
        }

        public void glTexParameteri( int target, int pname, int iparam )
        {
            mDglTexParameteri_III( target, pname, iparam );
        }

        public void glTexParameteriv( int target, int pname, int[] riparams )
        {
            mDglTexParameteriv_IIaI( target, pname, riparams );
        }

        public void glTexParameteriv( int target, int pname, IntPtr riparams )
        {
            mDglTexParameteriv_IIP( target, pname, riparams );
        }

        public void glTexSubImage1D( int target, int level, int xoffset, int width, int format, int itype, byte[] pixels )
        {
            mDglTexSubImage1D_IIIIIIaB( target, level, xoffset, width, format, itype, pixels );
        }

        public void glTexSubImage1D( int target, int level, int xoffset, int width, int format, int itype, short[] pixels )
        {
            mDglTexSubImage1D_IIIIIIaH( target, level, xoffset, width, format, itype, pixels );
        }

        public void glTexSubImage1D( int target, int level, int xoffset, int width, int format, int itype, int[] pixels )
        {
            mDglTexSubImage1D_IIIIIIaI( target, level, xoffset, width, format, itype, pixels );
        }

        public void glTexSubImage1D( int target, int level, int xoffset, int width, int format, int itype, float[] pixels )
        {
            mDglTexSubImage1D_IIIIIIaF( target, level, xoffset, width, format, itype, pixels );
        }

        public void glTexSubImage1D( int target, int level, int xoffset, int width, int format, int itype, IntPtr pixels )
        {
            mDglTexSubImage1D_IIIIIIP( target, level, xoffset, width, format, itype, pixels );
        }

        public void glTexSubImage1DEXT( int target, int level, int xoffset, int width, int format, int itype, byte[] pixels )
        {
            mDglTexSubImage1DEXT_IIIIIIaB( target, level, xoffset, width, format, itype, pixels );
        }

        public void glTexSubImage1DEXT( int target, int level, int xoffset, int width, int format, int itype, short[] pixels )
        {
            mDglTexSubImage1DEXT_IIIIIIaH( target, level, xoffset, width, format, itype, pixels );
        }

        public void glTexSubImage1DEXT( int target, int level, int xoffset, int width, int format, int itype, int[] pixels )
        {
            mDglTexSubImage1DEXT_IIIIIIaI( target, level, xoffset, width, format, itype, pixels );
        }

        public void glTexSubImage1DEXT( int target, int level, int xoffset, int width, int format, int itype, float[] pixels )
        {
            mDglTexSubImage1DEXT_IIIIIIaF( target, level, xoffset, width, format, itype, pixels );
        }

        public void glTexSubImage1DEXT( int target, int level, int xoffset, int width, int format, int itype, IntPtr pixels )
        {
            mDglTexSubImage1DEXT_IIIIIIP( target, level, xoffset, width, format, itype, pixels );
        }

        public void glTexSubImage2D( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, byte[] pixels )
        {
            mDglTexSubImage2D_IIIIIIIIaB( target, level, xoffset, yoffset, width, height, format, itype, pixels );
        }

        public void glTexSubImage2D( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, short[] pixels )
        {
            mDglTexSubImage2D_IIIIIIIIaH( target, level, xoffset, yoffset, width, height, format, itype, pixels );
        }

        public void glTexSubImage2D( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, int[] pixels )
        {
            mDglTexSubImage2D_IIIIIIIIaI( target, level, xoffset, yoffset, width, height, format, itype, pixels );
        }

        public void glTexSubImage2D( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, float[] pixels )
        {
            mDglTexSubImage2D_IIIIIIIIaF( target, level, xoffset, yoffset, width, height, format, itype, pixels );
        }

        public void glTexSubImage2D( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, IntPtr pixels )
        {
            mDglTexSubImage2D_IIIIIIIIP( target, level, xoffset, yoffset, width, height, format, itype, pixels );
        }

        public void glTexSubImage2DEXT( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, byte[] pixels )
        {
            mDglTexSubImage2DEXT_IIIIIIIIaB( target, level, xoffset, yoffset, width, height, format, itype, pixels );
        }

        public void glTexSubImage2DEXT( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, short[] pixels )
        {
            mDglTexSubImage2DEXT_IIIIIIIIaH( target, level, xoffset, yoffset, width, height, format, itype, pixels );
        }

        public void glTexSubImage2DEXT( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, int[] pixels )
        {
            mDglTexSubImage2DEXT_IIIIIIIIaI( target, level, xoffset, yoffset, width, height, format, itype, pixels );
        }

        public void glTexSubImage2DEXT( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, float[] pixels )
        {
            mDglTexSubImage2DEXT_IIIIIIIIaF( target, level, xoffset, yoffset, width, height, format, itype, pixels );
        }

        public void glTexSubImage2DEXT( int target, int level, int xoffset, int yoffset, int width, int height, int format, int itype, IntPtr pixels )
        {
            mDglTexSubImage2DEXT_IIIIIIIIP( target, level, xoffset, yoffset, width, height, format, itype, pixels );
        }

        public void glTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, byte[] pixels )
        {
            mDglTexSubImage3D_IIIIIIIIIIaB( target, level, xoffset, yoffset, zoffset, width, height, depth, format, itype, pixels );
        }

        public void glTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, short[] pixels )
        {
            mDglTexSubImage3D_IIIIIIIIIIaH( target, level, xoffset, yoffset, zoffset, width, height, depth, format, itype, pixels );
        }

        public void glTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, int[] pixels )
        {
            mDglTexSubImage3D_IIIIIIIIIIaI( target, level, xoffset, yoffset, zoffset, width, height, depth, format, itype, pixels );
        }

        public void glTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, float[] pixels )
        {
            mDglTexSubImage3D_IIIIIIIIIIaF( target, level, xoffset, yoffset, zoffset, width, height, depth, format, itype, pixels );
        }

        public void glTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, IntPtr pixels )
        {
            mDglTexSubImage3D_IIIIIIIIIIP( target, level, xoffset, yoffset, zoffset, width, height, depth, format, itype, pixels );
        }

        public void glTexSubImage3DEXT( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, byte[] pixels )
        {
            mDglTexSubImage3DEXT_IIIIIIIIIIaB( target, level, xoffset, yoffset, zoffset, width, height, depth, format, itype, pixels );
        }

        public void glTexSubImage3DEXT( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, short[] pixels )
        {
            mDglTexSubImage3DEXT_IIIIIIIIIIaH( target, level, xoffset, yoffset, zoffset, width, height, depth, format, itype, pixels );
        }

        public void glTexSubImage3DEXT( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, int[] pixels )
        {
            mDglTexSubImage3DEXT_IIIIIIIIIIaI( target, level, xoffset, yoffset, zoffset, width, height, depth, format, itype, pixels );
        }

        public void glTexSubImage3DEXT( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, float[] pixels )
        {
            mDglTexSubImage3DEXT_IIIIIIIIIIaF( target, level, xoffset, yoffset, zoffset, width, height, depth, format, itype, pixels );
        }

        public void glTexSubImage3DEXT( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int itype, IntPtr pixels )
        {
            mDglTexSubImage3DEXT_IIIIIIIIIIP( target, level, xoffset, yoffset, zoffset, width, height, depth, format, itype, pixels );
        }

        public void glTexSubImage4DSGIS( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int itype, byte[] pixels )
        {
            mDglTexSubImage4DSGIS_IIIIIIIIIIIIaB( target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, itype, pixels );
        }

        public void glTexSubImage4DSGIS( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int itype, short[] pixels )
        {
            mDglTexSubImage4DSGIS_IIIIIIIIIIIIaH( target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, itype, pixels );
        }

        public void glTexSubImage4DSGIS( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int itype, int[] pixels )
        {
            mDglTexSubImage4DSGIS_IIIIIIIIIIIIaI( target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, itype, pixels );
        }

        public void glTexSubImage4DSGIS( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int itype, float[] pixels )
        {
            mDglTexSubImage4DSGIS_IIIIIIIIIIIIaF( target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, itype, pixels );
        }

        public void glTexSubImage4DSGIS( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int itype, IntPtr pixels )
        {
            mDglTexSubImage4DSGIS_IIIIIIIIIIIIP( target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, itype, pixels );
        }

        public void glTextureColorMaskSGIS( byte red, byte green, byte blue, byte alpha )
        {
            mDglTextureColorMaskSGIS_BBBB( red, green, blue, alpha );
        }

        public void glTextureLightEXT( int pname )
        {
            mDglTextureLightEXT_I( pname );
        }

        public void glTextureMaterialEXT( int face, int mode )
        {
            mDglTextureMaterialEXT_II( face, mode );
        }

        public void glTextureNormalEXT( int mode )
        {
            mDglTextureNormalEXT_I( mode );
        }

        public void glTrackMatrixNV( int target, int address, int matrix, int transform )
        {
            mDglTrackMatrixNV_IIII( target, address, matrix, transform );
        }

        public void glTranslated( double x, double y, double z )
        {
            mDglTranslated_DDD( x, y, z );
        }

        public void glTranslatef( float x, float y, float z )
        {
            mDglTranslatef_FFF( x, y, z );
        }

        public void gluBeginCurve( IntPtr nobj )
        {
            mDgluBeginCurve_P( nobj );
        }

        public void gluBeginPolygon( IntPtr tess )
        {
            mDgluBeginPolygon_P( tess );
        }

        public void gluBeginSurface( IntPtr nobj )
        {
            mDgluBeginSurface_P( nobj );
        }

        public void gluBeginTrim( IntPtr nobj )
        {
            mDgluBeginTrim_P( nobj );
        }

        public int gluBuild1DMipmaps( int target, int components, int width, int format, int itype, byte[] data )
        {
            return (mDgluBuild1DMipmaps_IIIIIaB( target, components, width, format, itype, data ));
        }

        public int gluBuild1DMipmaps( int target, int components, int width, int format, int itype, short[] data )
        {
            return (mDgluBuild1DMipmaps_IIIIIaH( target, components, width, format, itype, data ));
        }

        public int gluBuild1DMipmaps( int target, int components, int width, int format, int itype, int[] data )
        {
            return (mDgluBuild1DMipmaps_IIIIIaI( target, components, width, format, itype, data ));
        }

        public int gluBuild1DMipmaps( int target, int components, int width, int format, int itype, float[] data )
        {
            return (mDgluBuild1DMipmaps_IIIIIaF( target, components, width, format, itype, data ));
        }

        public int gluBuild1DMipmaps( int target, int components, int width, int format, int itype, IntPtr data )
        {
            return (mDgluBuild1DMipmaps_IIIIIP( target, components, width, format, itype, data ));
        }

        public int gluBuild2DMipmaps( int target, int components, int width, int height, int format, int itype, byte[] data )
        {
            return (mDgluBuild2DMipmaps_IIIIIIaB( target, components, width, height, format, itype, data ));
        }

        public int gluBuild2DMipmaps( int target, int components, int width, int height, int format, int itype, short[] data )
        {
            return (mDgluBuild2DMipmaps_IIIIIIaH( target, components, width, height, format, itype, data ));
        }

        public int gluBuild2DMipmaps( int target, int components, int width, int height, int format, int itype, int[] data )
        {
            return (mDgluBuild2DMipmaps_IIIIIIaI( target, components, width, height, format, itype, data ));
        }

        public int gluBuild2DMipmaps( int target, int components, int width, int height, int format, int itype, float[] data )
        {
            return (mDgluBuild2DMipmaps_IIIIIIaF( target, components, width, height, format, itype, data ));
        }

        public int gluBuild2DMipmaps( int target, int components, int width, int height, int format, int itype, IntPtr data )
        {
            return (mDgluBuild2DMipmaps_IIIIIIP( target, components, width, height, format, itype, data ));
        }

        public void gluCylinder( IntPtr qobj, double baseRadius, double topRadius, double height, int slices, int stacks )
        {
            mDgluCylinder_PDDDII( qobj, baseRadius, topRadius, height, slices, stacks );
        }

        public void gluDeleteNurbsRenderer( IntPtr nobj )
        {
            mDgluDeleteNurbsRenderer_P( nobj );
        }

        public void gluDeleteQuadric( IntPtr state )
        {
            mDgluDeleteQuadric_P( state );
        }

        public void gluDeleteTess( IntPtr tess )
        {
            mDgluDeleteTess_P( tess );
        }

        public void gluDisk( IntPtr qobj, double innerRadius, double outerRadius, int slices, int loops )
        {
            mDgluDisk_PDDII( qobj, innerRadius, outerRadius, slices, loops );
        }

        public void gluEndCurve( IntPtr nobj )
        {
            mDgluEndCurve_P( nobj );
        }

        public void gluEndPolygon( IntPtr tess )
        {
            mDgluEndPolygon_P( tess );
        }

        public void gluEndSurface( IntPtr nobj )
        {
            mDgluEndSurface_P( nobj );
        }

        public void gluEndTrim( IntPtr nobj )
        {
            mDgluEndTrim_P( nobj );
        }

        public String gluErrorString( int errCode )
        {
            return (mDgluErrorString_I( errCode ));
        }

        public String gluErrorUnicodeStringEXT( int errCode )
        {
            return (mDgluErrorUnicodeStringEXT_I( errCode ));
        }

        public void gluGetNurbsProperty( IntPtr nobj, int property, ref float value )
        {
            mDgluGetNurbsProperty_PIrF( nobj, property, ref value );
        }

        public String gluGetString( int name )
        {
            return (mDgluGetString_I( name ));
        }

        public void gluGetTessProperty( IntPtr tess, int which, ref double value )
        {
            mDgluGetTessProperty_PIrD( tess, which, ref value );
        }

        public void gluLoadSamplingMatrices( IntPtr nobj, float[] modelMatrix, float[] projMatrix, int[] viewport )
        {
            mDgluLoadSamplingMatrices_PaFaFaI( nobj, modelMatrix, projMatrix, viewport );
        }

        public void gluLoadSamplingMatrices( IntPtr nobj, float[] modelMatrix, float[] projMatrix, IntPtr viewport )
        {
            mDgluLoadSamplingMatrices_PaFaFP( nobj, modelMatrix, projMatrix, viewport );
        }

        public void gluLoadSamplingMatrices( IntPtr nobj, float[] modelMatrix, IntPtr projMatrix, int[] viewport )
        {
            mDgluLoadSamplingMatrices_PaFPaI( nobj, modelMatrix, projMatrix, viewport );
        }

        public void gluLoadSamplingMatrices( IntPtr nobj, float[] modelMatrix, IntPtr projMatrix, IntPtr viewport )
        {
            mDgluLoadSamplingMatrices_PaFPP( nobj, modelMatrix, projMatrix, viewport );
        }

        public void gluLoadSamplingMatrices( IntPtr nobj, IntPtr modelMatrix, float[] projMatrix, int[] viewport )
        {
            mDgluLoadSamplingMatrices_PPaFaI( nobj, modelMatrix, projMatrix, viewport );
        }

        public void gluLoadSamplingMatrices( IntPtr nobj, IntPtr modelMatrix, float[] projMatrix, IntPtr viewport )
        {
            mDgluLoadSamplingMatrices_PPaFP( nobj, modelMatrix, projMatrix, viewport );
        }

        public void gluLoadSamplingMatrices( IntPtr nobj, IntPtr modelMatrix, IntPtr projMatrix, int[] viewport )
        {
            mDgluLoadSamplingMatrices_PPPaI( nobj, modelMatrix, projMatrix, viewport );
        }

        public void gluLoadSamplingMatrices( IntPtr nobj, IntPtr modelMatrix, IntPtr projMatrix, IntPtr viewport )
        {
            mDgluLoadSamplingMatrices_PPPP( nobj, modelMatrix, projMatrix, viewport );
        }

        public void gluLookAt( double eyex, double eyey, double eyez, double centerx, double centery, double centerz, double upx, double upy, double upz )
        {
            mDgluLookAt_DDDDDDDDD( eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz );
        }

        public IntPtr gluNewNurbsRenderer()
        {
            return (mDgluNewNurbsRenderer_V());
        }

        public IntPtr gluNewQuadric()
        {
            return (mDgluNewQuadric_V());
        }

        public IntPtr gluNewTess()
        {
            return (mDgluNewTess_V());
        }

        public void gluNextContour( IntPtr tess, int itype )
        {
            mDgluNextContour_PI( tess, itype );
        }

        public void glUniform1f( int location, float v0 )
        {
            mDglUniform1f_IF( location, v0 );
        }

        public void glUniform1fARB( int location, float v0 )
        {
            mDglUniform1fARB_IF( location, v0 );
        }

        public void glUniform1fv( int location, int count, float[] value )
        {
            mDglUniform1fv_IIaF( location, count, value );
        }

        public void glUniform1fv( int location, int count, IntPtr value )
        {
            mDglUniform1fv_IIP( location, count, value );
        }

        public void glUniform1fvARB( int location, int count, float[] value )
        {
            mDglUniform1fvARB_IIaF( location, count, value );
        }

        public void glUniform1fvARB( int location, int count, IntPtr value )
        {
            mDglUniform1fvARB_IIP( location, count, value );
        }

        public void glUniform1i( int location, int v0 )
        {
            mDglUniform1i_II( location, v0 );
        }

        public void glUniform1iARB( int location, int v0 )
        {
            mDglUniform1iARB_II( location, v0 );
        }

        public void glUniform1iv( int location, int count, int[] value )
        {
            mDglUniform1iv_IIaI( location, count, value );
        }

        public void glUniform1iv( int location, int count, IntPtr value )
        {
            mDglUniform1iv_IIP( location, count, value );
        }

        public void glUniform1ivARB( int location, int count, int[] value )
        {
            mDglUniform1ivARB_IIaI( location, count, value );
        }

        public void glUniform1ivARB( int location, int count, IntPtr value )
        {
            mDglUniform1ivARB_IIP( location, count, value );
        }

        public void glUniform2f( int location, float v0, float v1 )
        {
            mDglUniform2f_IFF( location, v0, v1 );
        }

        public void glUniform2fARB( int location, float v0, float v1 )
        {
            mDglUniform2fARB_IFF( location, v0, v1 );
        }

        public void glUniform2fv( int location, int count, float[] value )
        {
            mDglUniform2fv_IIaF( location, count, value );
        }

        public void glUniform2fv( int location, int count, IntPtr value )
        {
            mDglUniform2fv_IIP( location, count, value );
        }

        public void glUniform2fvARB( int location, int count, float[] value )
        {
            mDglUniform2fvARB_IIaF( location, count, value );
        }

        public void glUniform2fvARB( int location, int count, IntPtr value )
        {
            mDglUniform2fvARB_IIP( location, count, value );
        }

        public void glUniform2i( int location, int v0, int v1 )
        {
            mDglUniform2i_III( location, v0, v1 );
        }

        public void glUniform2iARB( int location, int v0, int v1 )
        {
            mDglUniform2iARB_III( location, v0, v1 );
        }

        public void glUniform2iv( int location, int count, int[] value )
        {
            mDglUniform2iv_IIaI( location, count, value );
        }

        public void glUniform2iv( int location, int count, IntPtr value )
        {
            mDglUniform2iv_IIP( location, count, value );
        }

        public void glUniform2ivARB( int location, int count, int[] value )
        {
            mDglUniform2ivARB_IIaI( location, count, value );
        }

        public void glUniform2ivARB( int location, int count, IntPtr value )
        {
            mDglUniform2ivARB_IIP( location, count, value );
        }

        public void glUniform3f( int location, float v0, float v1, float v2 )
        {
            mDglUniform3f_IFFF( location, v0, v1, v2 );
        }

        public void glUniform3fARB( int location, float v0, float v1, float v2 )
        {
            mDglUniform3fARB_IFFF( location, v0, v1, v2 );
        }

        public void glUniform3fv( int location, int count, float[] value )
        {
            mDglUniform3fv_IIaF( location, count, value );
        }

        public void glUniform3fv( int location, int count, IntPtr value )
        {
            mDglUniform3fv_IIP( location, count, value );
        }

        public void glUniform3fvARB( int location, int count, float[] value )
        {
            mDglUniform3fvARB_IIaF( location, count, value );
        }

        public void glUniform3fvARB( int location, int count, IntPtr value )
        {
            mDglUniform3fvARB_IIP( location, count, value );
        }

        public void glUniform3i( int location, int v0, int v1, int v2 )
        {
            mDglUniform3i_IIII( location, v0, v1, v2 );
        }

        public void glUniform3iARB( int location, int v0, int v1, int v2 )
        {
            mDglUniform3iARB_IIII( location, v0, v1, v2 );
        }

        public void glUniform3iv( int location, int count, int[] value )
        {
            mDglUniform3iv_IIaI( location, count, value );
        }

        public void glUniform3iv( int location, int count, IntPtr value )
        {
            mDglUniform3iv_IIP( location, count, value );
        }

        public void glUniform3ivARB( int location, int count, int[] value )
        {
            mDglUniform3ivARB_IIaI( location, count, value );
        }

        public void glUniform3ivARB( int location, int count, IntPtr value )
        {
            mDglUniform3ivARB_IIP( location, count, value );
        }

        public void glUniform4f( int location, float v0, float v1, float v2, float v3 )
        {
            mDglUniform4f_IFFFF( location, v0, v1, v2, v3 );
        }

        public void glUniform4fARB( int location, float v0, float v1, float v2, float v3 )
        {
            mDglUniform4fARB_IFFFF( location, v0, v1, v2, v3 );
        }

        public void glUniform4fv( int location, int count, float[] value )
        {
            mDglUniform4fv_IIaF( location, count, value );
        }

        public void glUniform4fv( int location, int count, IntPtr value )
        {
            mDglUniform4fv_IIP( location, count, value );
        }

        public void glUniform4fvARB( int location, int count, float[] value )
        {
            mDglUniform4fvARB_IIaF( location, count, value );
        }

        public void glUniform4fvARB( int location, int count, IntPtr value )
        {
            mDglUniform4fvARB_IIP( location, count, value );
        }

        public void glUniform4i( int location, int v0, int v1, int v2, int v3 )
        {
            mDglUniform4i_IIIII( location, v0, v1, v2, v3 );
        }

        public void glUniform4iARB( int location, int v0, int v1, int v2, int v3 )
        {
            mDglUniform4iARB_IIIII( location, v0, v1, v2, v3 );
        }

        public void glUniform4iv( int location, int count, int[] value )
        {
            mDglUniform4iv_IIaI( location, count, value );
        }

        public void glUniform4iv( int location, int count, IntPtr value )
        {
            mDglUniform4iv_IIP( location, count, value );
        }

        public void glUniform4ivARB( int location, int count, int[] value )
        {
            mDglUniform4ivARB_IIaI( location, count, value );
        }

        public void glUniform4ivARB( int location, int count, IntPtr value )
        {
            mDglUniform4ivARB_IIP( location, count, value );
        }

        public void glUniformMatrix2fv( int location, int count, byte transpose, float[] value )
        {
            mDglUniformMatrix2fv_IIBaF( location, count, transpose, value );
        }

        public void glUniformMatrix2fv( int location, int count, byte transpose, IntPtr value )
        {
            mDglUniformMatrix2fv_IIBP( location, count, transpose, value );
        }

        public void glUniformMatrix2fvARB( int location, int count, byte transpose, float[] value )
        {
            mDglUniformMatrix2fvARB_IIBaF( location, count, transpose, value );
        }

        public void glUniformMatrix2fvARB( int location, int count, byte transpose, IntPtr value )
        {
            mDglUniformMatrix2fvARB_IIBP( location, count, transpose, value );
        }

        public void glUniformMatrix3fv( int location, int count, byte transpose, float[] value )
        {
            mDglUniformMatrix3fv_IIBaF( location, count, transpose, value );
        }

        public void glUniformMatrix3fv( int location, int count, byte transpose, IntPtr value )
        {
            mDglUniformMatrix3fv_IIBP( location, count, transpose, value );
        }

        public void glUniformMatrix3fvARB( int location, int count, byte transpose, float[] value )
        {
            mDglUniformMatrix3fvARB_IIBaF( location, count, transpose, value );
        }

        public void glUniformMatrix3fvARB( int location, int count, byte transpose, IntPtr value )
        {
            mDglUniformMatrix3fvARB_IIBP( location, count, transpose, value );
        }

        public void glUniformMatrix4fv( int location, int count, byte transpose, float[] value )
        {
            mDglUniformMatrix4fv_IIBaF( location, count, transpose, value );
        }

        public void glUniformMatrix4fv( int location, int count, byte transpose, IntPtr value )
        {
            mDglUniformMatrix4fv_IIBP( location, count, transpose, value );
        }

        public void glUniformMatrix4fvARB( int location, int count, byte transpose, float[] value )
        {
            mDglUniformMatrix4fvARB_IIBaF( location, count, transpose, value );
        }

        public void glUniformMatrix4fvARB( int location, int count, byte transpose, IntPtr value )
        {
            mDglUniformMatrix4fvARB_IIBP( location, count, transpose, value );
        }

        public void glUnlockArraysEXT()
        {
            mDglUnlockArraysEXT_V();
        }

        public byte glUnmapBuffer( int target )
        {
            return (mDglUnmapBuffer_I( target ));
        }

        public byte glUnmapBufferARB( int target )
        {
            return (mDglUnmapBufferARB_I( target ));
        }

        public void glUnmapObjectBufferATI( int buffer )
        {
            mDglUnmapObjectBufferATI_I( buffer );
        }

        public void gluNurbsCallback( IntPtr nobj, int which, IntPtr fn )
        {
            mDgluNurbsCallback_PIP( nobj, which, fn );
        }

        public void gluNurbsCurve( IntPtr nobj, int nknots, float[] knot, int stride, float[] ctlarray, int order, int itype )
        {
            mDgluNurbsCurve_PIaFIaFII( nobj, nknots, knot, stride, ctlarray, order, itype );
        }

        public void gluNurbsCurve( IntPtr nobj, int nknots, float[] knot, int stride, IntPtr ctlarray, int order, int itype )
        {
            mDgluNurbsCurve_PIaFIPII( nobj, nknots, knot, stride, ctlarray, order, itype );
        }

        public void gluNurbsCurve( IntPtr nobj, int nknots, IntPtr knot, int stride, float[] ctlarray, int order, int itype )
        {
            mDgluNurbsCurve_PIPIaFII( nobj, nknots, knot, stride, ctlarray, order, itype );
        }

        public void gluNurbsCurve( IntPtr nobj, int nknots, IntPtr knot, int stride, IntPtr ctlarray, int order, int itype )
        {
            mDgluNurbsCurve_PIPIPII( nobj, nknots, knot, stride, ctlarray, order, itype );
        }

        public void gluNurbsProperty( IntPtr nobj, int property, float value )
        {
            mDgluNurbsProperty_PIF( nobj, property, value );
        }

        public void gluNurbsSurface( IntPtr nobj, int sknot_count, float[] sknot, int tknot_count, float[] tknot, int s_stride, int t_stride, float[] ctlarray, int sorder, int torder, int itype )
        {
            mDgluNurbsSurface_PIaFIaFIIaFIII( nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, itype );
        }

        public void gluNurbsSurface( IntPtr nobj, int sknot_count, float[] sknot, int tknot_count, float[] tknot, int s_stride, int t_stride, IntPtr ctlarray, int sorder, int torder, int itype )
        {
            mDgluNurbsSurface_PIaFIaFIIPIII( nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, itype );
        }

        public void gluNurbsSurface( IntPtr nobj, int sknot_count, float[] sknot, int tknot_count, IntPtr tknot, int s_stride, int t_stride, float[] ctlarray, int sorder, int torder, int itype )
        {
            mDgluNurbsSurface_PIaFIPIIaFIII( nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, itype );
        }

        public void gluNurbsSurface( IntPtr nobj, int sknot_count, float[] sknot, int tknot_count, IntPtr tknot, int s_stride, int t_stride, IntPtr ctlarray, int sorder, int torder, int itype )
        {
            mDgluNurbsSurface_PIaFIPIIPIII( nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, itype );
        }

        public void gluNurbsSurface( IntPtr nobj, int sknot_count, IntPtr sknot, int tknot_count, float[] tknot, int s_stride, int t_stride, float[] ctlarray, int sorder, int torder, int itype )
        {
            mDgluNurbsSurface_PIPIaFIIaFIII( nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, itype );
        }

        public void gluNurbsSurface( IntPtr nobj, int sknot_count, IntPtr sknot, int tknot_count, float[] tknot, int s_stride, int t_stride, IntPtr ctlarray, int sorder, int torder, int itype )
        {
            mDgluNurbsSurface_PIPIaFIIPIII( nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, itype );
        }

        public void gluNurbsSurface( IntPtr nobj, int sknot_count, IntPtr sknot, int tknot_count, IntPtr tknot, int s_stride, int t_stride, float[] ctlarray, int sorder, int torder, int itype )
        {
            mDgluNurbsSurface_PIPIPIIaFIII( nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, itype );
        }

        public void gluNurbsSurface( IntPtr nobj, int sknot_count, IntPtr sknot, int tknot_count, IntPtr tknot, int s_stride, int t_stride, IntPtr ctlarray, int sorder, int torder, int itype )
        {
            mDgluNurbsSurface_PIPIPIIPIII( nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, itype );
        }

        public void gluOrtho2D( double left, double right, double bottom, double top )
        {
            mDgluOrtho2D_DDDD( left, right, bottom, top );
        }

        public void gluPartialDisk( IntPtr qobj, double innerRadius, double outerRadius, int slices, int loops, double startAngle, double sweepAngle )
        {
            mDgluPartialDisk_PDDIIDD( qobj, innerRadius, outerRadius, slices, loops, startAngle, sweepAngle );
        }

        public void glUpdateObjectBufferATI( int buffer, int offset, int size, byte[] pointer, int preserve )
        {
            mDglUpdateObjectBufferATI_IIIaBI( buffer, offset, size, pointer, preserve );
        }

        public void glUpdateObjectBufferATI( int buffer, int offset, int size, IntPtr pointer, int preserve )
        {
            mDglUpdateObjectBufferATI_IIIPI( buffer, offset, size, pointer, preserve );
        }

        public void gluPerspective( double fovy, double aspect, double zNear, double zFar )
        {
            mDgluPerspective_DDDD( fovy, aspect, zNear, zFar );
        }

        public void gluPickMatrix( double x, double y, double width, double height, int[] viewport )
        {
            mDgluPickMatrix_DDDDaI( x, y, width, height, viewport );
        }

        public void gluPickMatrix( double x, double y, double width, double height, IntPtr viewport )
        {
            mDgluPickMatrix_DDDDP( x, y, width, height, viewport );
        }

        public int gluProject( double objx, double objy, double objz, double[] modelMatrix, double[] projMatrix, int[] viewport, ref double winx, ref double winy, ref double winz )
        {
            return (mDgluProject_DDDaDaDaIrDrDrD( objx, objy, objz, modelMatrix, projMatrix, viewport, ref winx, ref winy, ref winz ));
        }

        public int gluProject( double objx, double objy, double objz, IntPtr modelMatrix, IntPtr projMatrix, IntPtr viewport, IntPtr winx, IntPtr winy, IntPtr winz )
        {
            return (mDgluProject_DDDPPPPPP( objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz ));
        }

        public void gluPwlCurve( IntPtr nobj, int count, float[] array, int stride, int itype )
        {
            mDgluPwlCurve_PIaFII( nobj, count, array, stride, itype );
        }

        public void gluPwlCurve( IntPtr nobj, int count, IntPtr array, int stride, int itype )
        {
            mDgluPwlCurve_PIPII( nobj, count, array, stride, itype );
        }

        public void gluQuadricCallback( IntPtr qobj, int which, IntPtr fn )
        {
            mDgluQuadricCallback_PIP( qobj, which, fn );
        }

        public void gluQuadricDrawStyle( IntPtr quadObject, int drawStyle )
        {
            mDgluQuadricDrawStyle_PI( quadObject, drawStyle );
        }

        public void gluQuadricNormals( IntPtr quadObject, int normals )
        {
            mDgluQuadricNormals_PI( quadObject, normals );
        }

        public void gluQuadricOrientation( IntPtr quadObject, int orientation )
        {
            mDgluQuadricOrientation_PI( quadObject, orientation );
        }

        public void gluQuadricTexture( IntPtr quadObject, byte textureCoords )
        {
            mDgluQuadricTexture_PB( quadObject, textureCoords );
        }

        public int gluScaleImage( int format, int widthin, int heightin, int typein, byte[] datain, int widthout, int heightout, int typeout, byte[] dataout )
        {
            return (mDgluScaleImage_IIIIaBIIIaB( format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout ));
        }

        public int gluScaleImage( int format, int widthin, int heightin, int typein, byte[] datain, int widthout, int heightout, int typeout, IntPtr dataout )
        {
            return (mDgluScaleImage_IIIIaBIIIP( format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout ));
        }

        public int gluScaleImage( int format, int widthin, int heightin, int typein, IntPtr datain, int widthout, int heightout, int typeout, byte[] dataout )
        {
            return (mDgluScaleImage_IIIIPIIIaB( format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout ));
        }

        public int gluScaleImage( int format, int widthin, int heightin, int typein, IntPtr datain, int widthout, int heightout, int typeout, IntPtr dataout )
        {
            return (mDgluScaleImage_IIIIPIIIP( format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout ));
        }

        public void glUseProgram( int program )
        {
            mDglUseProgram_I( program );
        }

        public void glUseProgramObjectARB( int programObj )
        {
            mDglUseProgramObjectARB_I( programObj );
        }

        public void gluSphere( IntPtr qobj, double radius, int slices, int stacks )
        {
            mDgluSphere_PDII( qobj, radius, slices, stacks );
        }

        public void gluTessBeginContour( IntPtr tess )
        {
            mDgluTessBeginContour_P( tess );
        }

        public void gluTessBeginPolygon( IntPtr tess, byte[] polygon_data )
        {
            mDgluTessBeginPolygon_PaB( tess, polygon_data );
        }

        public void gluTessBeginPolygon( IntPtr tess, IntPtr polygon_data )
        {
            mDgluTessBeginPolygon_PP( tess, polygon_data );
        }

        public void gluTessCallback( IntPtr tess, int which, IntPtr fn )
        {
            mDgluTessCallback_PIP( tess, which, fn );
        }

        public void gluTessEndContour( IntPtr tess )
        {
            mDgluTessEndContour_P( tess );
        }

        public void gluTessEndPolygon( IntPtr tess )
        {
            mDgluTessEndPolygon_P( tess );
        }

        public void gluTessNormal( IntPtr tess, double x, double y, double z )
        {
            mDgluTessNormal_PDDD( tess, x, y, z );
        }

        public void gluTessProperty( IntPtr tess, int which, double value )
        {
            mDgluTessProperty_PID( tess, which, value );
        }

        public void gluTessVertex( IntPtr tess, double[] coords, byte[] data )
        {
            mDgluTessVertex_PaDaB( tess, coords, data );
        }

        public void gluTessVertex( IntPtr tess, double[] coords, IntPtr data )
        {
            mDgluTessVertex_PaDP( tess, coords, data );
        }

        public void gluTessVertex( IntPtr tess, IntPtr coords, byte[] data )
        {
            mDgluTessVertex_PPaB( tess, coords, data );
        }

        public void gluTessVertex( IntPtr tess, IntPtr coords, IntPtr data )
        {
            mDgluTessVertex_PPP( tess, coords, data );
        }

        public int gluUnProject( double winx, double winy, double winz, double[] modelMatrix, double[] projMatrix, int[] viewport, ref double objx, ref double objy, ref double objz )
        {
            return (mDgluUnProject_DDDaDaDaIrDrDrD( winx, winy, winz, modelMatrix, projMatrix, viewport, ref objx, ref objy, ref objz ));
        }

        public int gluUnProject( double winx, double winy, double winz, IntPtr modelMatrix, IntPtr projMatrix, IntPtr viewport, IntPtr objx, IntPtr objy, IntPtr objz )
        {
            return (mDgluUnProject_DDDPPPPPP( winx, winy, winz, modelMatrix, projMatrix, viewport, objx, objy, objz ));
        }

        public void glValidateProgram( int program )
        {
            mDglValidateProgram_I( program );
        }

        public void glValidateProgramARB( int programObj )
        {
            mDglValidateProgramARB_I( programObj );
        }

        public void glVariantArrayObjectATI( int id, int itype, int stride, int buffer, int offset )
        {
            mDglVariantArrayObjectATI_IIIII( id, itype, stride, buffer, offset );
        }

        public void glVariantbvEXT( int id, byte[] addr )
        {
            mDglVariantbvEXT_IaB( id, addr );
        }

        public void glVariantbvEXT( int id, IntPtr addr )
        {
            mDglVariantbvEXT_IP( id, addr );
        }

        public void glVariantdvEXT( int id, double[] addr )
        {
            mDglVariantdvEXT_IaD( id, addr );
        }

        public void glVariantdvEXT( int id, IntPtr addr )
        {
            mDglVariantdvEXT_IP( id, addr );
        }

        public void glVariantfvEXT( int id, float[] addr )
        {
            mDglVariantfvEXT_IaF( id, addr );
        }

        public void glVariantfvEXT( int id, IntPtr addr )
        {
            mDglVariantfvEXT_IP( id, addr );
        }

        public void glVariantivEXT( int id, int[] addr )
        {
            mDglVariantivEXT_IaI( id, addr );
        }

        public void glVariantivEXT( int id, IntPtr addr )
        {
            mDglVariantivEXT_IP( id, addr );
        }

        public void glVariantPointerEXT( int id, int itype, int stride, byte[] addr )
        {
            mDglVariantPointerEXT_IIIaB( id, itype, stride, addr );
        }

        public void glVariantPointerEXT( int id, int itype, int stride, short[] addr )
        {
            mDglVariantPointerEXT_IIIaH( id, itype, stride, addr );
        }

        public void glVariantPointerEXT( int id, int itype, int stride, int[] addr )
        {
            mDglVariantPointerEXT_IIIaI( id, itype, stride, addr );
        }

        public void glVariantPointerEXT( int id, int itype, int stride, float[] addr )
        {
            mDglVariantPointerEXT_IIIaF( id, itype, stride, addr );
        }

        public void glVariantPointerEXT( int id, int itype, int stride, double[] addr )
        {
            mDglVariantPointerEXT_IIIaD( id, itype, stride, addr );
        }

        public void glVariantPointerEXT( int id, int itype, int stride, IntPtr addr )
        {
            mDglVariantPointerEXT_IIIP( id, itype, stride, addr );
        }

        public void glVariantsvEXT( int id, short[] addr )
        {
            mDglVariantsvEXT_IaH( id, addr );
        }

        public void glVariantsvEXT( int id, IntPtr addr )
        {
            mDglVariantsvEXT_IP( id, addr );
        }

        public void glVariantubvEXT( int id, byte[] addr )
        {
            mDglVariantubvEXT_IaB( id, addr );
        }

        public void glVariantubvEXT( int id, IntPtr addr )
        {
            mDglVariantubvEXT_IP( id, addr );
        }

        public void glVariantuivEXT( int id, int[] addr )
        {
            mDglVariantuivEXT_IaI( id, addr );
        }

        public void glVariantuivEXT( int id, IntPtr addr )
        {
            mDglVariantuivEXT_IP( id, addr );
        }

        public void glVariantusvEXT( int id, short[] addr )
        {
            mDglVariantusvEXT_IaH( id, addr );
        }

        public void glVariantusvEXT( int id, IntPtr addr )
        {
            mDglVariantusvEXT_IP( id, addr );
        }

        public void glVertex2d( double x, double y )
        {
            mDglVertex2d_DD( x, y );
        }

        public void glVertex2dv( double[] v )
        {
            mDglVertex2dv_aD( v );
        }

        public void glVertex2dv( IntPtr v )
        {
            mDglVertex2dv_P( v );
        }

        public void glVertex2f( float x, float y )
        {
            mDglVertex2f_FF( x, y );
        }

        public void glVertex2fv( float[] v )
        {
            mDglVertex2fv_aF( v );
        }

        public void glVertex2fv( IntPtr v )
        {
            mDglVertex2fv_P( v );
        }

        public void glVertex2hNV( short x, short y )
        {
            mDglVertex2hNV_HH( x, y );
        }

        public void glVertex2hvNV( short[] v )
        {
            mDglVertex2hvNV_aH( v );
        }

        public void glVertex2hvNV( IntPtr v )
        {
            mDglVertex2hvNV_P( v );
        }

        public void glVertex2i( int x, int y )
        {
            mDglVertex2i_II( x, y );
        }

        public void glVertex2iv( int[] v )
        {
            mDglVertex2iv_aI( v );
        }

        public void glVertex2iv( IntPtr v )
        {
            mDglVertex2iv_P( v );
        }

        public void glVertex2s( short x, short y )
        {
            mDglVertex2s_HH( x, y );
        }

        public void glVertex2sv( short[] v )
        {
            mDglVertex2sv_aH( v );
        }

        public void glVertex2sv( IntPtr v )
        {
            mDglVertex2sv_P( v );
        }

        public void glVertex3d( double x, double y, double z )
        {
            mDglVertex3d_DDD( x, y, z );
        }

        public void glVertex3dv( double[] v )
        {
            mDglVertex3dv_aD( v );
        }

        public void glVertex3dv( IntPtr v )
        {
            mDglVertex3dv_P( v );
        }

        public void glVertex3f( float x, float y, float z )
        {
            mDglVertex3f_FFF( x, y, z );
        }

        public void glVertex3fv( float[] v )
        {
            mDglVertex3fv_aF( v );
        }

        public void glVertex3fv( IntPtr v )
        {
            mDglVertex3fv_P( v );
        }

        public void glVertex3hNV( short x, short y, short z )
        {
            mDglVertex3hNV_HHH( x, y, z );
        }

        public void glVertex3hvNV( short[] v )
        {
            mDglVertex3hvNV_aH( v );
        }

        public void glVertex3hvNV( IntPtr v )
        {
            mDglVertex3hvNV_P( v );
        }

        public void glVertex3i( int x, int y, int z )
        {
            mDglVertex3i_III( x, y, z );
        }

        public void glVertex3iv( int[] v )
        {
            mDglVertex3iv_aI( v );
        }

        public void glVertex3iv( IntPtr v )
        {
            mDglVertex3iv_P( v );
        }

        public void glVertex3s( short x, short y, short z )
        {
            mDglVertex3s_HHH( x, y, z );
        }

        public void glVertex3sv( short[] v )
        {
            mDglVertex3sv_aH( v );
        }

        public void glVertex3sv( IntPtr v )
        {
            mDglVertex3sv_P( v );
        }

        public void glVertex4d( double x, double y, double z, double w )
        {
            mDglVertex4d_DDDD( x, y, z, w );
        }

        public void glVertex4dv( double[] v )
        {
            mDglVertex4dv_aD( v );
        }

        public void glVertex4dv( IntPtr v )
        {
            mDglVertex4dv_P( v );
        }

        public void glVertex4f( float x, float y, float z, float w )
        {
            mDglVertex4f_FFFF( x, y, z, w );
        }

        public void glVertex4fv( float[] v )
        {
            mDglVertex4fv_aF( v );
        }

        public void glVertex4fv( IntPtr v )
        {
            mDglVertex4fv_P( v );
        }

        public void glVertex4hNV( short x, short y, short z, short w )
        {
            mDglVertex4hNV_HHHH( x, y, z, w );
        }

        public void glVertex4hvNV( short[] v )
        {
            mDglVertex4hvNV_aH( v );
        }

        public void glVertex4hvNV( IntPtr v )
        {
            mDglVertex4hvNV_P( v );
        }

        public void glVertex4i( int x, int y, int z, int w )
        {
            mDglVertex4i_IIII( x, y, z, w );
        }

        public void glVertex4iv( int[] v )
        {
            mDglVertex4iv_aI( v );
        }

        public void glVertex4iv( IntPtr v )
        {
            mDglVertex4iv_P( v );
        }

        public void glVertex4s( short x, short y, short z, short w )
        {
            mDglVertex4s_HHHH( x, y, z, w );
        }

        public void glVertex4sv( short[] v )
        {
            mDglVertex4sv_aH( v );
        }

        public void glVertex4sv( IntPtr v )
        {
            mDglVertex4sv_P( v );
        }

        public void glVertexArrayParameteriAPPLE( int pname, int iparam )
        {
            mDglVertexArrayParameteriAPPLE_II( pname, iparam );
        }

        public void glVertexArrayRangeAPPLE( int length, byte[] pointer )
        {
            mDglVertexArrayRangeAPPLE_IaB( length, pointer );
        }

        public void glVertexArrayRangeAPPLE( int length, IntPtr pointer )
        {
            mDglVertexArrayRangeAPPLE_IP( length, pointer );
        }

        public void glVertexArrayRangeNV( int length, byte[] pointer )
        {
            mDglVertexArrayRangeNV_IaB( length, pointer );
        }

        public void glVertexArrayRangeNV( int length, IntPtr pointer )
        {
            mDglVertexArrayRangeNV_IP( length, pointer );
        }

        public void glVertexAttrib1d( int index, double x )
        {
            mDglVertexAttrib1d_ID( index, x );
        }

        public void glVertexAttrib1dARB( int index, double x )
        {
            mDglVertexAttrib1dARB_ID( index, x );
        }

        public void glVertexAttrib1dNV( int index, double x )
        {
            mDglVertexAttrib1dNV_ID( index, x );
        }

        public void glVertexAttrib1dv( int index, double[] v )
        {
            mDglVertexAttrib1dv_IaD( index, v );
        }

        public void glVertexAttrib1dv( int index, IntPtr v )
        {
            mDglVertexAttrib1dv_IP( index, v );
        }

        public void glVertexAttrib1dvARB( int index, double[] v )
        {
            mDglVertexAttrib1dvARB_IaD( index, v );
        }

        public void glVertexAttrib1dvARB( int index, IntPtr v )
        {
            mDglVertexAttrib1dvARB_IP( index, v );
        }

        public void glVertexAttrib1dvNV( int index, double[] v )
        {
            mDglVertexAttrib1dvNV_IaD( index, v );
        }

        public void glVertexAttrib1dvNV( int index, IntPtr v )
        {
            mDglVertexAttrib1dvNV_IP( index, v );
        }

        public void glVertexAttrib1f( int index, float x )
        {
            mDglVertexAttrib1f_IF( index, x );
        }

        public void glVertexAttrib1fARB( int index, float x )
        {
            mDglVertexAttrib1fARB_IF( index, x );
        }

        public void glVertexAttrib1fNV( int index, float x )
        {
            mDglVertexAttrib1fNV_IF( index, x );
        }

        public void glVertexAttrib1fv( int index, float[] v )
        {
            mDglVertexAttrib1fv_IaF( index, v );
        }

        public void glVertexAttrib1fv( int index, IntPtr v )
        {
            mDglVertexAttrib1fv_IP( index, v );
        }

        public void glVertexAttrib1fvARB( int index, float[] v )
        {
            mDglVertexAttrib1fvARB_IaF( index, v );
        }

        public void glVertexAttrib1fvARB( int index, IntPtr v )
        {
            mDglVertexAttrib1fvARB_IP( index, v );
        }

        public void glVertexAttrib1fvNV( int index, float[] v )
        {
            mDglVertexAttrib1fvNV_IaF( index, v );
        }

        public void glVertexAttrib1fvNV( int index, IntPtr v )
        {
            mDglVertexAttrib1fvNV_IP( index, v );
        }

        public void glVertexAttrib1hNV( int index, short x )
        {
            mDglVertexAttrib1hNV_IH( index, x );
        }

        public void glVertexAttrib1hvNV( int index, short[] v )
        {
            mDglVertexAttrib1hvNV_IaH( index, v );
        }

        public void glVertexAttrib1hvNV( int index, IntPtr v )
        {
            mDglVertexAttrib1hvNV_IP( index, v );
        }

        public void glVertexAttrib1s( int index, short x )
        {
            mDglVertexAttrib1s_IH( index, x );
        }

        public void glVertexAttrib1sARB( int index, short x )
        {
            mDglVertexAttrib1sARB_IH( index, x );
        }

        public void glVertexAttrib1sNV( int index, short x )
        {
            mDglVertexAttrib1sNV_IH( index, x );
        }

        public void glVertexAttrib1sv( int index, short[] v )
        {
            mDglVertexAttrib1sv_IaH( index, v );
        }

        public void glVertexAttrib1sv( int index, IntPtr v )
        {
            mDglVertexAttrib1sv_IP( index, v );
        }

        public void glVertexAttrib1svARB( int index, short[] v )
        {
            mDglVertexAttrib1svARB_IaH( index, v );
        }

        public void glVertexAttrib1svARB( int index, IntPtr v )
        {
            mDglVertexAttrib1svARB_IP( index, v );
        }

        public void glVertexAttrib1svNV( int index, short[] v )
        {
            mDglVertexAttrib1svNV_IaH( index, v );
        }

        public void glVertexAttrib1svNV( int index, IntPtr v )
        {
            mDglVertexAttrib1svNV_IP( index, v );
        }

        public void glVertexAttrib2d( int index, double x, double y )
        {
            mDglVertexAttrib2d_IDD( index, x, y );
        }

        public void glVertexAttrib2dARB( int index, double x, double y )
        {
            mDglVertexAttrib2dARB_IDD( index, x, y );
        }

        public void glVertexAttrib2dNV( int index, double x, double y )
        {
            mDglVertexAttrib2dNV_IDD( index, x, y );
        }

        public void glVertexAttrib2dv( int index, double[] v )
        {
            mDglVertexAttrib2dv_IaD( index, v );
        }

        public void glVertexAttrib2dv( int index, IntPtr v )
        {
            mDglVertexAttrib2dv_IP( index, v );
        }

        public void glVertexAttrib2dvARB( int index, double[] v )
        {
            mDglVertexAttrib2dvARB_IaD( index, v );
        }

        public void glVertexAttrib2dvARB( int index, IntPtr v )
        {
            mDglVertexAttrib2dvARB_IP( index, v );
        }

        public void glVertexAttrib2dvNV( int index, double[] v )
        {
            mDglVertexAttrib2dvNV_IaD( index, v );
        }

        public void glVertexAttrib2dvNV( int index, IntPtr v )
        {
            mDglVertexAttrib2dvNV_IP( index, v );
        }

        public void glVertexAttrib2f( int index, float x, float y )
        {
            mDglVertexAttrib2f_IFF( index, x, y );
        }

        public void glVertexAttrib2fARB( int index, float x, float y )
        {
            mDglVertexAttrib2fARB_IFF( index, x, y );
        }

        public void glVertexAttrib2fNV( int index, float x, float y )
        {
            mDglVertexAttrib2fNV_IFF( index, x, y );
        }

        public void glVertexAttrib2fv( int index, float[] v )
        {
            mDglVertexAttrib2fv_IaF( index, v );
        }

        public void glVertexAttrib2fv( int index, IntPtr v )
        {
            mDglVertexAttrib2fv_IP( index, v );
        }

        public void glVertexAttrib2fvARB( int index, float[] v )
        {
            mDglVertexAttrib2fvARB_IaF( index, v );
        }

        public void glVertexAttrib2fvARB( int index, IntPtr v )
        {
            mDglVertexAttrib2fvARB_IP( index, v );
        }

        public void glVertexAttrib2fvNV( int index, float[] v )
        {
            mDglVertexAttrib2fvNV_IaF( index, v );
        }

        public void glVertexAttrib2fvNV( int index, IntPtr v )
        {
            mDglVertexAttrib2fvNV_IP( index, v );
        }

        public void glVertexAttrib2hNV( int index, short x, short y )
        {
            mDglVertexAttrib2hNV_IHH( index, x, y );
        }

        public void glVertexAttrib2hvNV( int index, short[] v )
        {
            mDglVertexAttrib2hvNV_IaH( index, v );
        }

        public void glVertexAttrib2hvNV( int index, IntPtr v )
        {
            mDglVertexAttrib2hvNV_IP( index, v );
        }

        public void glVertexAttrib2s( int index, short x, short y )
        {
            mDglVertexAttrib2s_IHH( index, x, y );
        }

        public void glVertexAttrib2sARB( int index, short x, short y )
        {
            mDglVertexAttrib2sARB_IHH( index, x, y );
        }

        public void glVertexAttrib2sNV( int index, short x, short y )
        {
            mDglVertexAttrib2sNV_IHH( index, x, y );
        }

        public void glVertexAttrib2sv( int index, short[] v )
        {
            mDglVertexAttrib2sv_IaH( index, v );
        }

        public void glVertexAttrib2sv( int index, IntPtr v )
        {
            mDglVertexAttrib2sv_IP( index, v );
        }

        public void glVertexAttrib2svARB( int index, short[] v )
        {
            mDglVertexAttrib2svARB_IaH( index, v );
        }

        public void glVertexAttrib2svARB( int index, IntPtr v )
        {
            mDglVertexAttrib2svARB_IP( index, v );
        }

        public void glVertexAttrib2svNV( int index, short[] v )
        {
            mDglVertexAttrib2svNV_IaH( index, v );
        }

        public void glVertexAttrib2svNV( int index, IntPtr v )
        {
            mDglVertexAttrib2svNV_IP( index, v );
        }

        public void glVertexAttrib3d( int index, double x, double y, double z )
        {
            mDglVertexAttrib3d_IDDD( index, x, y, z );
        }

        public void glVertexAttrib3dARB( int index, double x, double y, double z )
        {
            mDglVertexAttrib3dARB_IDDD( index, x, y, z );
        }

        public void glVertexAttrib3dNV( int index, double x, double y, double z )
        {
            mDglVertexAttrib3dNV_IDDD( index, x, y, z );
        }

        public void glVertexAttrib3dv( int index, double[] v )
        {
            mDglVertexAttrib3dv_IaD( index, v );
        }

        public void glVertexAttrib3dv( int index, IntPtr v )
        {
            mDglVertexAttrib3dv_IP( index, v );
        }

        public void glVertexAttrib3dvARB( int index, double[] v )
        {
            mDglVertexAttrib3dvARB_IaD( index, v );
        }

        public void glVertexAttrib3dvARB( int index, IntPtr v )
        {
            mDglVertexAttrib3dvARB_IP( index, v );
        }

        public void glVertexAttrib3dvNV( int index, double[] v )
        {
            mDglVertexAttrib3dvNV_IaD( index, v );
        }

        public void glVertexAttrib3dvNV( int index, IntPtr v )
        {
            mDglVertexAttrib3dvNV_IP( index, v );
        }

        public void glVertexAttrib3f( int index, float x, float y, float z )
        {
            mDglVertexAttrib3f_IFFF( index, x, y, z );
        }

        public void glVertexAttrib3fARB( int index, float x, float y, float z )
        {
            mDglVertexAttrib3fARB_IFFF( index, x, y, z );
        }

        public void glVertexAttrib3fNV( int index, float x, float y, float z )
        {
            mDglVertexAttrib3fNV_IFFF( index, x, y, z );
        }

        public void glVertexAttrib3fv( int index, float[] v )
        {
            mDglVertexAttrib3fv_IaF( index, v );
        }

        public void glVertexAttrib3fv( int index, IntPtr v )
        {
            mDglVertexAttrib3fv_IP( index, v );
        }

        public void glVertexAttrib3fvARB( int index, float[] v )
        {
            mDglVertexAttrib3fvARB_IaF( index, v );
        }

        public void glVertexAttrib3fvARB( int index, IntPtr v )
        {
            mDglVertexAttrib3fvARB_IP( index, v );
        }

        public void glVertexAttrib3fvNV( int index, float[] v )
        {
            mDglVertexAttrib3fvNV_IaF( index, v );
        }

        public void glVertexAttrib3fvNV( int index, IntPtr v )
        {
            mDglVertexAttrib3fvNV_IP( index, v );
        }

        public void glVertexAttrib3hNV( int index, short x, short y, short z )
        {
            mDglVertexAttrib3hNV_IHHH( index, x, y, z );
        }

        public void glVertexAttrib3hvNV( int index, short[] v )
        {
            mDglVertexAttrib3hvNV_IaH( index, v );
        }

        public void glVertexAttrib3hvNV( int index, IntPtr v )
        {
            mDglVertexAttrib3hvNV_IP( index, v );
        }

        public void glVertexAttrib3s( int index, short x, short y, short z )
        {
            mDglVertexAttrib3s_IHHH( index, x, y, z );
        }

        public void glVertexAttrib3sARB( int index, short x, short y, short z )
        {
            mDglVertexAttrib3sARB_IHHH( index, x, y, z );
        }

        public void glVertexAttrib3sNV( int index, short x, short y, short z )
        {
            mDglVertexAttrib3sNV_IHHH( index, x, y, z );
        }

        public void glVertexAttrib3sv( int index, short[] v )
        {
            mDglVertexAttrib3sv_IaH( index, v );
        }

        public void glVertexAttrib3sv( int index, IntPtr v )
        {
            mDglVertexAttrib3sv_IP( index, v );
        }

        public void glVertexAttrib3svARB( int index, short[] v )
        {
            mDglVertexAttrib3svARB_IaH( index, v );
        }

        public void glVertexAttrib3svARB( int index, IntPtr v )
        {
            mDglVertexAttrib3svARB_IP( index, v );
        }

        public void glVertexAttrib3svNV( int index, short[] v )
        {
            mDglVertexAttrib3svNV_IaH( index, v );
        }

        public void glVertexAttrib3svNV( int index, IntPtr v )
        {
            mDglVertexAttrib3svNV_IP( index, v );
        }

        public void glVertexAttrib4bv( int index, byte[] v )
        {
            mDglVertexAttrib4bv_IaB( index, v );
        }

        public void glVertexAttrib4bv( int index, IntPtr v )
        {
            mDglVertexAttrib4bv_IP( index, v );
        }

        public void glVertexAttrib4bvARB( int index, byte[] v )
        {
            mDglVertexAttrib4bvARB_IaB( index, v );
        }

        public void glVertexAttrib4bvARB( int index, IntPtr v )
        {
            mDglVertexAttrib4bvARB_IP( index, v );
        }

        public void glVertexAttrib4d( int index, double x, double y, double z, double w )
        {
            mDglVertexAttrib4d_IDDDD( index, x, y, z, w );
        }

        public void glVertexAttrib4dARB( int index, double x, double y, double z, double w )
        {
            mDglVertexAttrib4dARB_IDDDD( index, x, y, z, w );
        }

        public void glVertexAttrib4dNV( int index, double x, double y, double z, double w )
        {
            mDglVertexAttrib4dNV_IDDDD( index, x, y, z, w );
        }

        public void glVertexAttrib4dv( int index, double[] v )
        {
            mDglVertexAttrib4dv_IaD( index, v );
        }

        public void glVertexAttrib4dv( int index, IntPtr v )
        {
            mDglVertexAttrib4dv_IP( index, v );
        }

        public void glVertexAttrib4dvARB( int index, double[] v )
        {
            mDglVertexAttrib4dvARB_IaD( index, v );
        }

        public void glVertexAttrib4dvARB( int index, IntPtr v )
        {
            mDglVertexAttrib4dvARB_IP( index, v );
        }

        public void glVertexAttrib4dvNV( int index, double[] v )
        {
            mDglVertexAttrib4dvNV_IaD( index, v );
        }

        public void glVertexAttrib4dvNV( int index, IntPtr v )
        {
            mDglVertexAttrib4dvNV_IP( index, v );
        }

        public void glVertexAttrib4f( int index, float x, float y, float z, float w )
        {
            mDglVertexAttrib4f_IFFFF( index, x, y, z, w );
        }

        public void glVertexAttrib4fARB( int index, float x, float y, float z, float w )
        {
            mDglVertexAttrib4fARB_IFFFF( index, x, y, z, w );
        }

        public void glVertexAttrib4fNV( int index, float x, float y, float z, float w )
        {
            mDglVertexAttrib4fNV_IFFFF( index, x, y, z, w );
        }

        public void glVertexAttrib4fv( int index, float[] v )
        {
            mDglVertexAttrib4fv_IaF( index, v );
        }

        public void glVertexAttrib4fv( int index, IntPtr v )
        {
            mDglVertexAttrib4fv_IP( index, v );
        }

        public void glVertexAttrib4fvARB( int index, float[] v )
        {
            mDglVertexAttrib4fvARB_IaF( index, v );
        }

        public void glVertexAttrib4fvARB( int index, IntPtr v )
        {
            mDglVertexAttrib4fvARB_IP( index, v );
        }

        public void glVertexAttrib4fvNV( int index, float[] v )
        {
            mDglVertexAttrib4fvNV_IaF( index, v );
        }

        public void glVertexAttrib4fvNV( int index, IntPtr v )
        {
            mDglVertexAttrib4fvNV_IP( index, v );
        }

        public void glVertexAttrib4hNV( int index, short x, short y, short z, short w )
        {
            mDglVertexAttrib4hNV_IHHHH( index, x, y, z, w );
        }

        public void glVertexAttrib4hvNV( int index, short[] v )
        {
            mDglVertexAttrib4hvNV_IaH( index, v );
        }

        public void glVertexAttrib4hvNV( int index, IntPtr v )
        {
            mDglVertexAttrib4hvNV_IP( index, v );
        }

        public void glVertexAttrib4iv( int index, int[] v )
        {
            mDglVertexAttrib4iv_IaI( index, v );
        }

        public void glVertexAttrib4iv( int index, IntPtr v )
        {
            mDglVertexAttrib4iv_IP( index, v );
        }

        public void glVertexAttrib4ivARB( int index, int[] v )
        {
            mDglVertexAttrib4ivARB_IaI( index, v );
        }

        public void glVertexAttrib4ivARB( int index, IntPtr v )
        {
            mDglVertexAttrib4ivARB_IP( index, v );
        }

        public void glVertexAttrib4Nbv( int index, byte[] v )
        {
            mDglVertexAttrib4Nbv_IaB( index, v );
        }

        public void glVertexAttrib4Nbv( int index, IntPtr v )
        {
            mDglVertexAttrib4Nbv_IP( index, v );
        }

        public void glVertexAttrib4NbvARB( int index, byte[] v )
        {
            mDglVertexAttrib4NbvARB_IaB( index, v );
        }

        public void glVertexAttrib4NbvARB( int index, IntPtr v )
        {
            mDglVertexAttrib4NbvARB_IP( index, v );
        }

        public void glVertexAttrib4Niv( int index, int[] v )
        {
            mDglVertexAttrib4Niv_IaI( index, v );
        }

        public void glVertexAttrib4Niv( int index, IntPtr v )
        {
            mDglVertexAttrib4Niv_IP( index, v );
        }

        public void glVertexAttrib4NivARB( int index, int[] v )
        {
            mDglVertexAttrib4NivARB_IaI( index, v );
        }

        public void glVertexAttrib4NivARB( int index, IntPtr v )
        {
            mDglVertexAttrib4NivARB_IP( index, v );
        }

        public void glVertexAttrib4Nsv( int index, short[] v )
        {
            mDglVertexAttrib4Nsv_IaH( index, v );
        }

        public void glVertexAttrib4Nsv( int index, IntPtr v )
        {
            mDglVertexAttrib4Nsv_IP( index, v );
        }

        public void glVertexAttrib4NsvARB( int index, short[] v )
        {
            mDglVertexAttrib4NsvARB_IaH( index, v );
        }

        public void glVertexAttrib4NsvARB( int index, IntPtr v )
        {
            mDglVertexAttrib4NsvARB_IP( index, v );
        }

        public void glVertexAttrib4Nub( int index, byte x, byte y, byte z, byte w )
        {
            mDglVertexAttrib4Nub_IBBBB( index, x, y, z, w );
        }

        public void glVertexAttrib4NubARB( int index, byte x, byte y, byte z, byte w )
        {
            mDglVertexAttrib4NubARB_IBBBB( index, x, y, z, w );
        }

        public void glVertexAttrib4Nubv( int index, byte[] v )
        {
            mDglVertexAttrib4Nubv_IaB( index, v );
        }

        public void glVertexAttrib4Nubv( int index, IntPtr v )
        {
            mDglVertexAttrib4Nubv_IP( index, v );
        }

        public void glVertexAttrib4NubvARB( int index, byte[] v )
        {
            mDglVertexAttrib4NubvARB_IaB( index, v );
        }

        public void glVertexAttrib4NubvARB( int index, IntPtr v )
        {
            mDglVertexAttrib4NubvARB_IP( index, v );
        }

        public void glVertexAttrib4Nuiv( int index, int[] v )
        {
            mDglVertexAttrib4Nuiv_IaI( index, v );
        }

        public void glVertexAttrib4Nuiv( int index, IntPtr v )
        {
            mDglVertexAttrib4Nuiv_IP( index, v );
        }

        public void glVertexAttrib4NuivARB( int index, int[] v )
        {
            mDglVertexAttrib4NuivARB_IaI( index, v );
        }

        public void glVertexAttrib4NuivARB( int index, IntPtr v )
        {
            mDglVertexAttrib4NuivARB_IP( index, v );
        }

        public void glVertexAttrib4Nusv( int index, short[] v )
        {
            mDglVertexAttrib4Nusv_IaH( index, v );
        }

        public void glVertexAttrib4Nusv( int index, IntPtr v )
        {
            mDglVertexAttrib4Nusv_IP( index, v );
        }

        public void glVertexAttrib4NusvARB( int index, short[] v )
        {
            mDglVertexAttrib4NusvARB_IaH( index, v );
        }

        public void glVertexAttrib4NusvARB( int index, IntPtr v )
        {
            mDglVertexAttrib4NusvARB_IP( index, v );
        }

        public void glVertexAttrib4s( int index, short x, short y, short z, short w )
        {
            mDglVertexAttrib4s_IHHHH( index, x, y, z, w );
        }

        public void glVertexAttrib4sARB( int index, short x, short y, short z, short w )
        {
            mDglVertexAttrib4sARB_IHHHH( index, x, y, z, w );
        }

        public void glVertexAttrib4sNV( int index, short x, short y, short z, short w )
        {
            mDglVertexAttrib4sNV_IHHHH( index, x, y, z, w );
        }

        public void glVertexAttrib4sv( int index, short[] v )
        {
            mDglVertexAttrib4sv_IaH( index, v );
        }

        public void glVertexAttrib4sv( int index, IntPtr v )
        {
            mDglVertexAttrib4sv_IP( index, v );
        }

        public void glVertexAttrib4svARB( int index, short[] v )
        {
            mDglVertexAttrib4svARB_IaH( index, v );
        }

        public void glVertexAttrib4svARB( int index, IntPtr v )
        {
            mDglVertexAttrib4svARB_IP( index, v );
        }

        public void glVertexAttrib4svNV( int index, short[] v )
        {
            mDglVertexAttrib4svNV_IaH( index, v );
        }

        public void glVertexAttrib4svNV( int index, IntPtr v )
        {
            mDglVertexAttrib4svNV_IP( index, v );
        }

        public void glVertexAttrib4ubNV( int index, byte x, byte y, byte z, byte w )
        {
            mDglVertexAttrib4ubNV_IBBBB( index, x, y, z, w );
        }

        public void glVertexAttrib4ubv( int index, byte[] v )
        {
            mDglVertexAttrib4ubv_IaB( index, v );
        }

        public void glVertexAttrib4ubv( int index, IntPtr v )
        {
            mDglVertexAttrib4ubv_IP( index, v );
        }

        public void glVertexAttrib4ubvARB( int index, byte[] v )
        {
            mDglVertexAttrib4ubvARB_IaB( index, v );
        }

        public void glVertexAttrib4ubvARB( int index, IntPtr v )
        {
            mDglVertexAttrib4ubvARB_IP( index, v );
        }

        public void glVertexAttrib4ubvNV( int index, byte[] v )
        {
            mDglVertexAttrib4ubvNV_IaB( index, v );
        }

        public void glVertexAttrib4ubvNV( int index, IntPtr v )
        {
            mDglVertexAttrib4ubvNV_IP( index, v );
        }

        public void glVertexAttrib4uiv( int index, int[] v )
        {
            mDglVertexAttrib4uiv_IaI( index, v );
        }

        public void glVertexAttrib4uiv( int index, IntPtr v )
        {
            mDglVertexAttrib4uiv_IP( index, v );
        }

        public void glVertexAttrib4uivARB( int index, int[] v )
        {
            mDglVertexAttrib4uivARB_IaI( index, v );
        }

        public void glVertexAttrib4uivARB( int index, IntPtr v )
        {
            mDglVertexAttrib4uivARB_IP( index, v );
        }

        public void glVertexAttrib4usv( int index, short[] v )
        {
            mDglVertexAttrib4usv_IaH( index, v );
        }

        public void glVertexAttrib4usv( int index, IntPtr v )
        {
            mDglVertexAttrib4usv_IP( index, v );
        }

        public void glVertexAttrib4usvARB( int index, short[] v )
        {
            mDglVertexAttrib4usvARB_IaH( index, v );
        }

        public void glVertexAttrib4usvARB( int index, IntPtr v )
        {
            mDglVertexAttrib4usvARB_IP( index, v );
        }

        public void glVertexAttribArrayObjectATI( int index, int size, int itype, byte normalized, int stride, int buffer, int offset )
        {
            mDglVertexAttribArrayObjectATI_IIIBIII( index, size, itype, normalized, stride, buffer, offset );
        }

        public void glVertexAttribPointer( int index, int size, int itype, byte normalized, int stride, byte[] pointer )
        {
            mDglVertexAttribPointer_IIIBIaB( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointer( int index, int size, int itype, byte normalized, int stride, short[] pointer )
        {
            mDglVertexAttribPointer_IIIBIaH( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointer( int index, int size, int itype, byte normalized, int stride, int[] pointer )
        {
            mDglVertexAttribPointer_IIIBIaI( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointer( int index, int size, int itype, byte normalized, int stride, float[] pointer )
        {
            mDglVertexAttribPointer_IIIBIaF( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointer( int index, int size, int itype, byte normalized, int stride, double[] pointer )
        {
            mDglVertexAttribPointer_IIIBIaD( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointer( int index, int size, int itype, byte normalized, int stride, IntPtr pointer )
        {
            mDglVertexAttribPointer_IIIBIP( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointerARB( int index, int size, int itype, byte normalized, int stride, byte[] pointer )
        {
            mDglVertexAttribPointerARB_IIIBIaB( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointerARB( int index, int size, int itype, byte normalized, int stride, short[] pointer )
        {
            mDglVertexAttribPointerARB_IIIBIaH( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointerARB( int index, int size, int itype, byte normalized, int stride, int[] pointer )
        {
            mDglVertexAttribPointerARB_IIIBIaI( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointerARB( int index, int size, int itype, byte normalized, int stride, float[] pointer )
        {
            mDglVertexAttribPointerARB_IIIBIaF( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointerARB( int index, int size, int itype, byte normalized, int stride, double[] pointer )
        {
            mDglVertexAttribPointerARB_IIIBIaD( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointerARB( int index, int size, int itype, byte normalized, int stride, IntPtr pointer )
        {
            mDglVertexAttribPointerARB_IIIBIP( index, size, itype, normalized, stride, pointer );
        }

        public void glVertexAttribPointerNV( int index, int fsize, int itype, int stride, byte[] pointer )
        {
            mDglVertexAttribPointerNV_IIIIaB( index, fsize, itype, stride, pointer );
        }

        public void glVertexAttribPointerNV( int index, int fsize, int itype, int stride, short[] pointer )
        {
            mDglVertexAttribPointerNV_IIIIaH( index, fsize, itype, stride, pointer );
        }

        public void glVertexAttribPointerNV( int index, int fsize, int itype, int stride, int[] pointer )
        {
            mDglVertexAttribPointerNV_IIIIaI( index, fsize, itype, stride, pointer );
        }

        public void glVertexAttribPointerNV( int index, int fsize, int itype, int stride, float[] pointer )
        {
            mDglVertexAttribPointerNV_IIIIaF( index, fsize, itype, stride, pointer );
        }

        public void glVertexAttribPointerNV( int index, int fsize, int itype, int stride, double[] pointer )
        {
            mDglVertexAttribPointerNV_IIIIaD( index, fsize, itype, stride, pointer );
        }

        public void glVertexAttribPointerNV( int index, int fsize, int itype, int stride, IntPtr pointer )
        {
            mDglVertexAttribPointerNV_IIIIP( index, fsize, itype, stride, pointer );
        }

        public void glVertexAttribs1dvNV( int index, int count, double[] v )
        {
            mDglVertexAttribs1dvNV_IIaD( index, count, v );
        }

        public void glVertexAttribs1dvNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs1dvNV_IIP( index, count, v );
        }

        public void glVertexAttribs1fvNV( int index, int count, float[] v )
        {
            mDglVertexAttribs1fvNV_IIaF( index, count, v );
        }

        public void glVertexAttribs1fvNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs1fvNV_IIP( index, count, v );
        }

        public void glVertexAttribs1hvNV( int index, int n, short[] v )
        {
            mDglVertexAttribs1hvNV_IIaH( index, n, v );
        }

        public void glVertexAttribs1hvNV( int index, int n, IntPtr v )
        {
            mDglVertexAttribs1hvNV_IIP( index, n, v );
        }

        public void glVertexAttribs1svNV( int index, int count, short[] v )
        {
            mDglVertexAttribs1svNV_IIaH( index, count, v );
        }

        public void glVertexAttribs1svNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs1svNV_IIP( index, count, v );
        }

        public void glVertexAttribs2dvNV( int index, int count, double[] v )
        {
            mDglVertexAttribs2dvNV_IIaD( index, count, v );
        }

        public void glVertexAttribs2dvNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs2dvNV_IIP( index, count, v );
        }

        public void glVertexAttribs2fvNV( int index, int count, float[] v )
        {
            mDglVertexAttribs2fvNV_IIaF( index, count, v );
        }

        public void glVertexAttribs2fvNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs2fvNV_IIP( index, count, v );
        }

        public void glVertexAttribs2hvNV( int index, int n, short[] v )
        {
            mDglVertexAttribs2hvNV_IIaH( index, n, v );
        }

        public void glVertexAttribs2hvNV( int index, int n, IntPtr v )
        {
            mDglVertexAttribs2hvNV_IIP( index, n, v );
        }

        public void glVertexAttribs2svNV( int index, int count, short[] v )
        {
            mDglVertexAttribs2svNV_IIaH( index, count, v );
        }

        public void glVertexAttribs2svNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs2svNV_IIP( index, count, v );
        }

        public void glVertexAttribs3dvNV( int index, int count, double[] v )
        {
            mDglVertexAttribs3dvNV_IIaD( index, count, v );
        }

        public void glVertexAttribs3dvNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs3dvNV_IIP( index, count, v );
        }

        public void glVertexAttribs3fvNV( int index, int count, float[] v )
        {
            mDglVertexAttribs3fvNV_IIaF( index, count, v );
        }

        public void glVertexAttribs3fvNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs3fvNV_IIP( index, count, v );
        }

        public void glVertexAttribs3hvNV( int index, int n, short[] v )
        {
            mDglVertexAttribs3hvNV_IIaH( index, n, v );
        }

        public void glVertexAttribs3hvNV( int index, int n, IntPtr v )
        {
            mDglVertexAttribs3hvNV_IIP( index, n, v );
        }

        public void glVertexAttribs3svNV( int index, int count, short[] v )
        {
            mDglVertexAttribs3svNV_IIaH( index, count, v );
        }

        public void glVertexAttribs3svNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs3svNV_IIP( index, count, v );
        }

        public void glVertexAttribs4dvNV( int index, int count, double[] v )
        {
            mDglVertexAttribs4dvNV_IIaD( index, count, v );
        }

        public void glVertexAttribs4dvNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs4dvNV_IIP( index, count, v );
        }

        public void glVertexAttribs4fvNV( int index, int count, float[] v )
        {
            mDglVertexAttribs4fvNV_IIaF( index, count, v );
        }

        public void glVertexAttribs4fvNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs4fvNV_IIP( index, count, v );
        }

        public void glVertexAttribs4hvNV( int index, int n, short[] v )
        {
            mDglVertexAttribs4hvNV_IIaH( index, n, v );
        }

        public void glVertexAttribs4hvNV( int index, int n, IntPtr v )
        {
            mDglVertexAttribs4hvNV_IIP( index, n, v );
        }

        public void glVertexAttribs4svNV( int index, int count, short[] v )
        {
            mDglVertexAttribs4svNV_IIaH( index, count, v );
        }

        public void glVertexAttribs4svNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs4svNV_IIP( index, count, v );
        }

        public void glVertexAttribs4ubvNV( int index, int count, byte[] v )
        {
            mDglVertexAttribs4ubvNV_IIaB( index, count, v );
        }

        public void glVertexAttribs4ubvNV( int index, int count, IntPtr v )
        {
            mDglVertexAttribs4ubvNV_IIP( index, count, v );
        }

        public void glVertexBlendARB( int count )
        {
            mDglVertexBlendARB_I( count );
        }

        public void glVertexBlendEnvfATI( int pname, float fparam )
        {
            mDglVertexBlendEnvfATI_IF( pname, fparam );
        }

        public void glVertexBlendEnviATI( int pname, int iparam )
        {
            mDglVertexBlendEnviATI_II( pname, iparam );
        }

        public void glVertexPointer( int size, int itype, int stride, short[] pointer )
        {
            mDglVertexPointer_IIIaH( size, itype, stride, pointer );
        }

        public void glVertexPointer( int size, int itype, int stride, int[] pointer )
        {
            mDglVertexPointer_IIIaI( size, itype, stride, pointer );
        }

        public void glVertexPointer( int size, int itype, int stride, float[] pointer )
        {
            mDglVertexPointer_IIIaF( size, itype, stride, pointer );
        }

        public void glVertexPointer( int size, int itype, int stride, double[] pointer )
        {
            mDglVertexPointer_IIIaD( size, itype, stride, pointer );
        }

        public void glVertexPointer( int size, int itype, int stride, IntPtr pointer )
        {
            mDglVertexPointer_IIIP( size, itype, stride, pointer );
        }

        public void glVertexPointerEXT( int size, int itype, int stride, int count, short[] pointer )
        {
            mDglVertexPointerEXT_IIIIaH( size, itype, stride, count, pointer );
        }

        public void glVertexPointerEXT( int size, int itype, int stride, int count, int[] pointer )
        {
            mDglVertexPointerEXT_IIIIaI( size, itype, stride, count, pointer );
        }

        public void glVertexPointerEXT( int size, int itype, int stride, int count, float[] pointer )
        {
            mDglVertexPointerEXT_IIIIaF( size, itype, stride, count, pointer );
        }

        public void glVertexPointerEXT( int size, int itype, int stride, int count, double[] pointer )
        {
            mDglVertexPointerEXT_IIIIaD( size, itype, stride, count, pointer );
        }

        public void glVertexPointerEXT( int size, int itype, int stride, int count, IntPtr pointer )
        {
            mDglVertexPointerEXT_IIIIP( size, itype, stride, count, pointer );
        }

        public void glVertexPointerListIBM( int size, int itype, int stride, ref IntPtr pointer, int ptrstride )
        {
            mDglVertexPointerListIBM_IIIrPI( size, itype, stride, ref pointer, ptrstride );
        }

        public void glVertexPointervINTEL( int size, int itype, ref IntPtr pointer )
        {
            mDglVertexPointervINTEL_IIrP( size, itype, ref pointer );
        }

        public void glVertexStream1dATI( int stream, double x )
        {
            mDglVertexStream1dATI_ID( stream, x );
        }

        public void glVertexStream1dvATI( int stream, double[] coords )
        {
            mDglVertexStream1dvATI_IaD( stream, coords );
        }

        public void glVertexStream1dvATI( int stream, IntPtr coords )
        {
            mDglVertexStream1dvATI_IP( stream, coords );
        }

        public void glVertexStream1fATI( int stream, float x )
        {
            mDglVertexStream1fATI_IF( stream, x );
        }

        public void glVertexStream1fvATI( int stream, float[] coords )
        {
            mDglVertexStream1fvATI_IaF( stream, coords );
        }

        public void glVertexStream1fvATI( int stream, IntPtr coords )
        {
            mDglVertexStream1fvATI_IP( stream, coords );
        }

        public void glVertexStream1iATI( int stream, int x )
        {
            mDglVertexStream1iATI_II( stream, x );
        }

        public void glVertexStream1ivATI( int stream, int[] coords )
        {
            mDglVertexStream1ivATI_IaI( stream, coords );
        }

        public void glVertexStream1ivATI( int stream, IntPtr coords )
        {
            mDglVertexStream1ivATI_IP( stream, coords );
        }

        public void glVertexStream1sATI( int stream, short x )
        {
            mDglVertexStream1sATI_IH( stream, x );
        }

        public void glVertexStream1svATI( int stream, short[] coords )
        {
            mDglVertexStream1svATI_IaH( stream, coords );
        }

        public void glVertexStream1svATI( int stream, IntPtr coords )
        {
            mDglVertexStream1svATI_IP( stream, coords );
        }

        public void glVertexStream2dATI( int stream, double x, double y )
        {
            mDglVertexStream2dATI_IDD( stream, x, y );
        }

        public void glVertexStream2dvATI( int stream, double[] coords )
        {
            mDglVertexStream2dvATI_IaD( stream, coords );
        }

        public void glVertexStream2dvATI( int stream, IntPtr coords )
        {
            mDglVertexStream2dvATI_IP( stream, coords );
        }

        public void glVertexStream2fATI( int stream, float x, float y )
        {
            mDglVertexStream2fATI_IFF( stream, x, y );
        }

        public void glVertexStream2fvATI( int stream, float[] coords )
        {
            mDglVertexStream2fvATI_IaF( stream, coords );
        }

        public void glVertexStream2fvATI( int stream, IntPtr coords )
        {
            mDglVertexStream2fvATI_IP( stream, coords );
        }

        public void glVertexStream2iATI( int stream, int x, int y )
        {
            mDglVertexStream2iATI_III( stream, x, y );
        }

        public void glVertexStream2ivATI( int stream, int[] coords )
        {
            mDglVertexStream2ivATI_IaI( stream, coords );
        }

        public void glVertexStream2ivATI( int stream, IntPtr coords )
        {
            mDglVertexStream2ivATI_IP( stream, coords );
        }

        public void glVertexStream2sATI( int stream, short x, short y )
        {
            mDglVertexStream2sATI_IHH( stream, x, y );
        }

        public void glVertexStream2svATI( int stream, short[] coords )
        {
            mDglVertexStream2svATI_IaH( stream, coords );
        }

        public void glVertexStream2svATI( int stream, IntPtr coords )
        {
            mDglVertexStream2svATI_IP( stream, coords );
        }

        public void glVertexStream3dATI( int stream, double x, double y, double z )
        {
            mDglVertexStream3dATI_IDDD( stream, x, y, z );
        }

        public void glVertexStream3dvATI( int stream, double[] coords )
        {
            mDglVertexStream3dvATI_IaD( stream, coords );
        }

        public void glVertexStream3dvATI( int stream, IntPtr coords )
        {
            mDglVertexStream3dvATI_IP( stream, coords );
        }

        public void glVertexStream3fATI( int stream, float x, float y, float z )
        {
            mDglVertexStream3fATI_IFFF( stream, x, y, z );
        }

        public void glVertexStream3fvATI( int stream, float[] coords )
        {
            mDglVertexStream3fvATI_IaF( stream, coords );
        }

        public void glVertexStream3fvATI( int stream, IntPtr coords )
        {
            mDglVertexStream3fvATI_IP( stream, coords );
        }

        public void glVertexStream3iATI( int stream, int x, int y, int z )
        {
            mDglVertexStream3iATI_IIII( stream, x, y, z );
        }

        public void glVertexStream3ivATI( int stream, int[] coords )
        {
            mDglVertexStream3ivATI_IaI( stream, coords );
        }

        public void glVertexStream3ivATI( int stream, IntPtr coords )
        {
            mDglVertexStream3ivATI_IP( stream, coords );
        }

        public void glVertexStream3sATI( int stream, short x, short y, short z )
        {
            mDglVertexStream3sATI_IHHH( stream, x, y, z );
        }

        public void glVertexStream3svATI( int stream, short[] coords )
        {
            mDglVertexStream3svATI_IaH( stream, coords );
        }

        public void glVertexStream3svATI( int stream, IntPtr coords )
        {
            mDglVertexStream3svATI_IP( stream, coords );
        }

        public void glVertexStream4dATI( int stream, double x, double y, double z, double w )
        {
            mDglVertexStream4dATI_IDDDD( stream, x, y, z, w );
        }

        public void glVertexStream4dvATI( int stream, double[] coords )
        {
            mDglVertexStream4dvATI_IaD( stream, coords );
        }

        public void glVertexStream4dvATI( int stream, IntPtr coords )
        {
            mDglVertexStream4dvATI_IP( stream, coords );
        }

        public void glVertexStream4fATI( int stream, float x, float y, float z, float w )
        {
            mDglVertexStream4fATI_IFFFF( stream, x, y, z, w );
        }

        public void glVertexStream4fvATI( int stream, float[] coords )
        {
            mDglVertexStream4fvATI_IaF( stream, coords );
        }

        public void glVertexStream4fvATI( int stream, IntPtr coords )
        {
            mDglVertexStream4fvATI_IP( stream, coords );
        }

        public void glVertexStream4iATI( int stream, int x, int y, int z, int w )
        {
            mDglVertexStream4iATI_IIIII( stream, x, y, z, w );
        }

        public void glVertexStream4ivATI( int stream, int[] coords )
        {
            mDglVertexStream4ivATI_IaI( stream, coords );
        }

        public void glVertexStream4ivATI( int stream, IntPtr coords )
        {
            mDglVertexStream4ivATI_IP( stream, coords );
        }

        public void glVertexStream4sATI( int stream, short x, short y, short z, short w )
        {
            mDglVertexStream4sATI_IHHHH( stream, x, y, z, w );
        }

        public void glVertexStream4svATI( int stream, short[] coords )
        {
            mDglVertexStream4svATI_IaH( stream, coords );
        }

        public void glVertexStream4svATI( int stream, IntPtr coords )
        {
            mDglVertexStream4svATI_IP( stream, coords );
        }

        public void glVertexWeightfEXT( float weight )
        {
            mDglVertexWeightfEXT_F( weight );
        }

        public void glVertexWeightfvEXT( float[] weight )
        {
            mDglVertexWeightfvEXT_aF( weight );
        }

        public void glVertexWeightfvEXT( IntPtr weight )
        {
            mDglVertexWeightfvEXT_P( weight );
        }

        public void glVertexWeighthNV( short weight )
        {
            mDglVertexWeighthNV_H( weight );
        }

        public void glVertexWeighthvNV( short[] weight )
        {
            mDglVertexWeighthvNV_aH( weight );
        }

        public void glVertexWeighthvNV( IntPtr weight )
        {
            mDglVertexWeighthvNV_P( weight );
        }

        public void glVertexWeightPointerEXT( int size, int itype, int stride, byte[] pointer )
        {
            mDglVertexWeightPointerEXT_IIIaB( size, itype, stride, pointer );
        }

        public void glVertexWeightPointerEXT( int size, int itype, int stride, short[] pointer )
        {
            mDglVertexWeightPointerEXT_IIIaH( size, itype, stride, pointer );
        }

        public void glVertexWeightPointerEXT( int size, int itype, int stride, int[] pointer )
        {
            mDglVertexWeightPointerEXT_IIIaI( size, itype, stride, pointer );
        }

        public void glVertexWeightPointerEXT( int size, int itype, int stride, float[] pointer )
        {
            mDglVertexWeightPointerEXT_IIIaF( size, itype, stride, pointer );
        }

        public void glVertexWeightPointerEXT( int size, int itype, int stride, double[] pointer )
        {
            mDglVertexWeightPointerEXT_IIIaD( size, itype, stride, pointer );
        }

        public void glVertexWeightPointerEXT( int size, int itype, int stride, IntPtr pointer )
        {
            mDglVertexWeightPointerEXT_IIIP( size, itype, stride, pointer );
        }

        public void glViewport( int x, int y, int width, int height )
        {
            mDglViewport_IIII( x, y, width, height );
        }

        public void glWeightbvARB( int size, byte[] weights )
        {
            mDglWeightbvARB_IaB( size, weights );
        }

        public void glWeightbvARB( int size, IntPtr weights )
        {
            mDglWeightbvARB_IP( size, weights );
        }

        public void glWeightdvARB( int size, double[] weights )
        {
            mDglWeightdvARB_IaD( size, weights );
        }

        public void glWeightdvARB( int size, IntPtr weights )
        {
            mDglWeightdvARB_IP( size, weights );
        }

        public void glWeightfvARB( int size, float[] weights )
        {
            mDglWeightfvARB_IaF( size, weights );
        }

        public void glWeightfvARB( int size, IntPtr weights )
        {
            mDglWeightfvARB_IP( size, weights );
        }

        public void glWeightivARB( int size, int[] weights )
        {
            mDglWeightivARB_IaI( size, weights );
        }

        public void glWeightivARB( int size, IntPtr weights )
        {
            mDglWeightivARB_IP( size, weights );
        }

        public void glWeightPointerARB( int size, int itype, int stride, byte[] pointer )
        {
            mDglWeightPointerARB_IIIaB( size, itype, stride, pointer );
        }

        public void glWeightPointerARB( int size, int itype, int stride, short[] pointer )
        {
            mDglWeightPointerARB_IIIaH( size, itype, stride, pointer );
        }

        public void glWeightPointerARB( int size, int itype, int stride, int[] pointer )
        {
            mDglWeightPointerARB_IIIaI( size, itype, stride, pointer );
        }

        public void glWeightPointerARB( int size, int itype, int stride, float[] pointer )
        {
            mDglWeightPointerARB_IIIaF( size, itype, stride, pointer );
        }

        public void glWeightPointerARB( int size, int itype, int stride, double[] pointer )
        {
            mDglWeightPointerARB_IIIaD( size, itype, stride, pointer );
        }

        public void glWeightPointerARB( int size, int itype, int stride, IntPtr pointer )
        {
            mDglWeightPointerARB_IIIP( size, itype, stride, pointer );
        }

        public void glWeightsvARB( int size, short[] weights )
        {
            mDglWeightsvARB_IaH( size, weights );
        }

        public void glWeightsvARB( int size, IntPtr weights )
        {
            mDglWeightsvARB_IP( size, weights );
        }

        public void glWeightubvARB( int size, byte[] weights )
        {
            mDglWeightubvARB_IaB( size, weights );
        }

        public void glWeightubvARB( int size, IntPtr weights )
        {
            mDglWeightubvARB_IP( size, weights );
        }

        public void glWeightuivARB( int size, int[] weights )
        {
            mDglWeightuivARB_IaI( size, weights );
        }

        public void glWeightuivARB( int size, IntPtr weights )
        {
            mDglWeightuivARB_IP( size, weights );
        }

        public void glWeightusvARB( int size, short[] weights )
        {
            mDglWeightusvARB_IaH( size, weights );
        }

        public void glWeightusvARB( int size, IntPtr weights )
        {
            mDglWeightusvARB_IP( size, weights );
        }

        public void glWindowPos2d( double x, double y )
        {
            mDglWindowPos2d_DD( x, y );
        }

        public void glWindowPos2dARB( double x, double y )
        {
            mDglWindowPos2dARB_DD( x, y );
        }

        public void glWindowPos2dMESA( double x, double y )
        {
            mDglWindowPos2dMESA_DD( x, y );
        }

        public void glWindowPos2dv( double[] v )
        {
            mDglWindowPos2dv_aD( v );
        }

        public void glWindowPos2dv( IntPtr v )
        {
            mDglWindowPos2dv_P( v );
        }

        public void glWindowPos2dvARB( double[] v )
        {
            mDglWindowPos2dvARB_aD( v );
        }

        public void glWindowPos2dvARB( IntPtr v )
        {
            mDglWindowPos2dvARB_P( v );
        }

        public void glWindowPos2dvMESA( double[] v )
        {
            mDglWindowPos2dvMESA_aD( v );
        }

        public void glWindowPos2dvMESA( IntPtr v )
        {
            mDglWindowPos2dvMESA_P( v );
        }

        public void glWindowPos2f( float x, float y )
        {
            mDglWindowPos2f_FF( x, y );
        }

        public void glWindowPos2fARB( float x, float y )
        {
            mDglWindowPos2fARB_FF( x, y );
        }

        public void glWindowPos2fMESA( float x, float y )
        {
            mDglWindowPos2fMESA_FF( x, y );
        }

        public void glWindowPos2fv( float[] v )
        {
            mDglWindowPos2fv_aF( v );
        }

        public void glWindowPos2fv( IntPtr v )
        {
            mDglWindowPos2fv_P( v );
        }

        public void glWindowPos2fvARB( float[] v )
        {
            mDglWindowPos2fvARB_aF( v );
        }

        public void glWindowPos2fvARB( IntPtr v )
        {
            mDglWindowPos2fvARB_P( v );
        }

        public void glWindowPos2fvMESA( float[] v )
        {
            mDglWindowPos2fvMESA_aF( v );
        }

        public void glWindowPos2fvMESA( IntPtr v )
        {
            mDglWindowPos2fvMESA_P( v );
        }

        public void glWindowPos2i( int x, int y )
        {
            mDglWindowPos2i_II( x, y );
        }

        public void glWindowPos2iARB( int x, int y )
        {
            mDglWindowPos2iARB_II( x, y );
        }

        public void glWindowPos2iMESA( int x, int y )
        {
            mDglWindowPos2iMESA_II( x, y );
        }

        public void glWindowPos2iv( int[] v )
        {
            mDglWindowPos2iv_aI( v );
        }

        public void glWindowPos2iv( IntPtr v )
        {
            mDglWindowPos2iv_P( v );
        }

        public void glWindowPos2ivARB( int[] v )
        {
            mDglWindowPos2ivARB_aI( v );
        }

        public void glWindowPos2ivARB( IntPtr v )
        {
            mDglWindowPos2ivARB_P( v );
        }

        public void glWindowPos2ivMESA( int[] v )
        {
            mDglWindowPos2ivMESA_aI( v );
        }

        public void glWindowPos2ivMESA( IntPtr v )
        {
            mDglWindowPos2ivMESA_P( v );
        }

        public void glWindowPos2s( short x, short y )
        {
            mDglWindowPos2s_HH( x, y );
        }

        public void glWindowPos2sARB( short x, short y )
        {
            mDglWindowPos2sARB_HH( x, y );
        }

        public void glWindowPos2sMESA( short x, short y )
        {
            mDglWindowPos2sMESA_HH( x, y );
        }

        public void glWindowPos2sv( short[] v )
        {
            mDglWindowPos2sv_aH( v );
        }

        public void glWindowPos2sv( IntPtr v )
        {
            mDglWindowPos2sv_P( v );
        }

        public void glWindowPos2svARB( short[] v )
        {
            mDglWindowPos2svARB_aH( v );
        }

        public void glWindowPos2svARB( IntPtr v )
        {
            mDglWindowPos2svARB_P( v );
        }

        public void glWindowPos2svMESA( short[] v )
        {
            mDglWindowPos2svMESA_aH( v );
        }

        public void glWindowPos2svMESA( IntPtr v )
        {
            mDglWindowPos2svMESA_P( v );
        }

        public void glWindowPos3d( double x, double y, double z )
        {
            mDglWindowPos3d_DDD( x, y, z );
        }

        public void glWindowPos3dARB( double x, double y, double z )
        {
            mDglWindowPos3dARB_DDD( x, y, z );
        }

        public void glWindowPos3dMESA( double x, double y, double z )
        {
            mDglWindowPos3dMESA_DDD( x, y, z );
        }

        public void glWindowPos3dv( double[] v )
        {
            mDglWindowPos3dv_aD( v );
        }

        public void glWindowPos3dv( IntPtr v )
        {
            mDglWindowPos3dv_P( v );
        }

        public void glWindowPos3dvARB( double[] v )
        {
            mDglWindowPos3dvARB_aD( v );
        }

        public void glWindowPos3dvARB( IntPtr v )
        {
            mDglWindowPos3dvARB_P( v );
        }

        public void glWindowPos3dvMESA( double[] v )
        {
            mDglWindowPos3dvMESA_aD( v );
        }

        public void glWindowPos3dvMESA( IntPtr v )
        {
            mDglWindowPos3dvMESA_P( v );
        }

        public void glWindowPos3f( float x, float y, float z )
        {
            mDglWindowPos3f_FFF( x, y, z );
        }

        public void glWindowPos3fARB( float x, float y, float z )
        {
            mDglWindowPos3fARB_FFF( x, y, z );
        }

        public void glWindowPos3fMESA( float x, float y, float z )
        {
            mDglWindowPos3fMESA_FFF( x, y, z );
        }

        public void glWindowPos3fv( float[] v )
        {
            mDglWindowPos3fv_aF( v );
        }

        public void glWindowPos3fv( IntPtr v )
        {
            mDglWindowPos3fv_P( v );
        }

        public void glWindowPos3fvARB( float[] v )
        {
            mDglWindowPos3fvARB_aF( v );
        }

        public void glWindowPos3fvARB( IntPtr v )
        {
            mDglWindowPos3fvARB_P( v );
        }

        public void glWindowPos3fvMESA( float[] v )
        {
            mDglWindowPos3fvMESA_aF( v );
        }

        public void glWindowPos3fvMESA( IntPtr v )
        {
            mDglWindowPos3fvMESA_P( v );
        }

        public void glWindowPos3i( int x, int y, int z )
        {
            mDglWindowPos3i_III( x, y, z );
        }

        public void glWindowPos3iARB( int x, int y, int z )
        {
            mDglWindowPos3iARB_III( x, y, z );
        }

        public void glWindowPos3iMESA( int x, int y, int z )
        {
            mDglWindowPos3iMESA_III( x, y, z );
        }

        public void glWindowPos3iv( int[] v )
        {
            mDglWindowPos3iv_aI( v );
        }

        public void glWindowPos3iv( IntPtr v )
        {
            mDglWindowPos3iv_P( v );
        }

        public void glWindowPos3ivARB( int[] v )
        {
            mDglWindowPos3ivARB_aI( v );
        }

        public void glWindowPos3ivARB( IntPtr v )
        {
            mDglWindowPos3ivARB_P( v );
        }

        public void glWindowPos3ivMESA( int[] v )
        {
            mDglWindowPos3ivMESA_aI( v );
        }

        public void glWindowPos3ivMESA( IntPtr v )
        {
            mDglWindowPos3ivMESA_P( v );
        }

        public void glWindowPos3s( short x, short y, short z )
        {
            mDglWindowPos3s_HHH( x, y, z );
        }

        public void glWindowPos3sARB( short x, short y, short z )
        {
            mDglWindowPos3sARB_HHH( x, y, z );
        }

        public void glWindowPos3sMESA( short x, short y, short z )
        {
            mDglWindowPos3sMESA_HHH( x, y, z );
        }

        public void glWindowPos3sv( short[] v )
        {
            mDglWindowPos3sv_aH( v );
        }

        public void glWindowPos3sv( IntPtr v )
        {
            mDglWindowPos3sv_P( v );
        }

        public void glWindowPos3svARB( short[] v )
        {
            mDglWindowPos3svARB_aH( v );
        }

        public void glWindowPos3svARB( IntPtr v )
        {
            mDglWindowPos3svARB_P( v );
        }

        public void glWindowPos3svMESA( short[] v )
        {
            mDglWindowPos3svMESA_aH( v );
        }

        public void glWindowPos3svMESA( IntPtr v )
        {
            mDglWindowPos3svMESA_P( v );
        }

        public void glWindowPos4dMESA( double x, double y, double z, double w )
        {
            mDglWindowPos4dMESA_DDDD( x, y, z, w );
        }

        public void glWindowPos4dvMESA( double[] v )
        {
            mDglWindowPos4dvMESA_aD( v );
        }

        public void glWindowPos4dvMESA( IntPtr v )
        {
            mDglWindowPos4dvMESA_P( v );
        }

        public void glWindowPos4fMESA( float x, float y, float z, float w )
        {
            mDglWindowPos4fMESA_FFFF( x, y, z, w );
        }

        public void glWindowPos4fvMESA( float[] v )
        {
            mDglWindowPos4fvMESA_aF( v );
        }

        public void glWindowPos4fvMESA( IntPtr v )
        {
            mDglWindowPos4fvMESA_P( v );
        }

        public void glWindowPos4iMESA( int x, int y, int z, int w )
        {
            mDglWindowPos4iMESA_IIII( x, y, z, w );
        }

        public void glWindowPos4ivMESA( int[] v )
        {
            mDglWindowPos4ivMESA_aI( v );
        }

        public void glWindowPos4ivMESA( IntPtr v )
        {
            mDglWindowPos4ivMESA_P( v );
        }

        public void glWindowPos4sMESA( short x, short y, short z, short w )
        {
            mDglWindowPos4sMESA_HHHH( x, y, z, w );
        }

        public void glWindowPos4svMESA( short[] v )
        {
            mDglWindowPos4svMESA_aH( v );
        }

        public void glWindowPos4svMESA( IntPtr v )
        {
            mDglWindowPos4svMESA_P( v );
        }

        public void glWriteMaskEXT( int res, int iin, int outX, int outY, int outZ, int outW )
        {
            mDglWriteMaskEXT_IIIIII( res, iin, outX, outY, outZ, outW );
        }

        public int SwapBuffers( IntPtr hdc )
        {
            return (mDSwapBuffers_P( hdc ));
        }

        public IntPtr wglAllocateMemoryNV( int size, float readfreq, float writefreq, float priority )
        {
            return (mDwglAllocateMemoryNV_IFFF( size, readfreq, writefreq, priority ));
        }

        public int wglAssociateImageBufferEventsI3D( IntPtr hDC, ref IntPtr pEvent, ref IntPtr pAddress, ref int pSize, int count )
        {
            return (mDwglAssociateImageBufferEventsI3D_PrPrPrII( hDC, ref pEvent, ref pAddress, ref pSize, count ));
        }

        public int wglBeginFrameTrackingI3D()
        {
            return (mDwglBeginFrameTrackingI3D_V());
        }

        public byte wglBindDisplayColorTableEXT( short id )
        {
            return (mDwglBindDisplayColorTableEXT_H( id ));
        }

        public int wglBindTexImageARB( IntPtr hPbuffer, int iBuffer )
        {
            return (mDwglBindTexImageARB_PI( hPbuffer, iBuffer ));
        }

        public int wglChoosePixelFormatARB( IntPtr hdc, int[] piAttribIList, float[] pfAttribFList, int nMaxFormats, int[] piFormats, ref int nNumFormats )
        {
            return (mDwglChoosePixelFormatARB_PaIaFIaIrI( hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, ref nNumFormats ));
        }

        public int wglChoosePixelFormatARB( IntPtr hdc, IntPtr piAttribIList, IntPtr pfAttribFList, int nMaxFormats, IntPtr piFormats, IntPtr nNumFormats )
        {
            return (mDwglChoosePixelFormatARB_PPPIPP( hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats ));
        }

        public int wglChoosePixelFormatEXT( IntPtr hdc, int[] piAttribIList, float[] pfAttribFList, int nMaxFormats, int[] piFormats, ref int nNumFormats )
        {
            return (mDwglChoosePixelFormatEXT_PaIaFIaIrI( hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, ref nNumFormats ));
        }

        public int wglChoosePixelFormatEXT( IntPtr hdc, IntPtr piAttribIList, IntPtr pfAttribFList, int nMaxFormats, IntPtr piFormats, IntPtr nNumFormats )
        {
            return (mDwglChoosePixelFormatEXT_PPPIPP( hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats ));
        }

        public int wglCopyContext( IntPtr hglrcSrc, IntPtr hglrcDst, int mask )
        {
            return (mDwglCopyContext_PPI( hglrcSrc, hglrcDst, mask ));
        }

        public IntPtr wglCreateBufferRegionARB( IntPtr hDC, int iLayerPlane, int uType )
        {
            return (mDwglCreateBufferRegionARB_PII( hDC, iLayerPlane, uType ));
        }

        public IntPtr wglCreateContext( IntPtr hdc )
        {
            return (mDwglCreateContext_P( hdc ));
        }

        public byte wglCreateDisplayColorTableEXT( short id )
        {
            return (mDwglCreateDisplayColorTableEXT_H( id ));
        }

        public IntPtr wglCreateImageBufferI3D( IntPtr hDC, int dwSize, int uFlags )
        {
            return (mDwglCreateImageBufferI3D_PII( hDC, dwSize, uFlags ));
        }

        public IntPtr wglCreateLayerContext( IntPtr hdc, int iLayerPlane )
        {
            return (mDwglCreateLayerContext_PI( hdc, iLayerPlane ));
        }

        public IntPtr wglCreatePbufferARB( IntPtr hDC, int iPixelFormat, int iWidth, int iHeight, int[] piAttribList )
        {
            return (mDwglCreatePbufferARB_PIIIaI( hDC, iPixelFormat, iWidth, iHeight, piAttribList ));
        }

        public IntPtr wglCreatePbufferARB( IntPtr hDC, int iPixelFormat, int iWidth, int iHeight, IntPtr piAttribList )
        {
            return (mDwglCreatePbufferARB_PIIIP( hDC, iPixelFormat, iWidth, iHeight, piAttribList ));
        }

        public IntPtr wglCreatePbufferEXT( IntPtr hDC, int iPixelFormat, int iWidth, int iHeight, int[] piAttribList )
        {
            return (mDwglCreatePbufferEXT_PIIIaI( hDC, iPixelFormat, iWidth, iHeight, piAttribList ));
        }

        public IntPtr wglCreatePbufferEXT( IntPtr hDC, int iPixelFormat, int iWidth, int iHeight, IntPtr piAttribList )
        {
            return (mDwglCreatePbufferEXT_PIIIP( hDC, iPixelFormat, iWidth, iHeight, piAttribList ));
        }

        public void wglDeleteBufferRegionARB( IntPtr hRegion )
        {
            mDwglDeleteBufferRegionARB_P( hRegion );
        }

        public int wglDeleteContext( IntPtr hglrc )
        {
            return (mDwglDeleteContext_P( hglrc ));
        }

        public int wglDescribeLayerPlane( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nBytes, ref LAYERPLANEDESCRIPTOR plpd )
        {
            return (mDwglDescribeLayerPlane_PIIIrX( hdc, iPixelFormat, iLayerPlane, nBytes, ref plpd ));
        }

        public void wglDestroyDisplayColorTableEXT( short id )
        {
            mDwglDestroyDisplayColorTableEXT_H( id );
        }

        public int wglDestroyImageBufferI3D( IntPtr hDC, byte[] pAddress )
        {
            return (mDwglDestroyImageBufferI3D_PaB( hDC, pAddress ));
        }

        public int wglDestroyImageBufferI3D( IntPtr hDC, IntPtr pAddress )
        {
            return (mDwglDestroyImageBufferI3D_PP( hDC, pAddress ));
        }

        public int wglDestroyPbufferARB( IntPtr hPbuffer )
        {
            return (mDwglDestroyPbufferARB_P( hPbuffer ));
        }

        public int wglDestroyPbufferEXT( IntPtr hPbuffer )
        {
            return (mDwglDestroyPbufferEXT_P( hPbuffer ));
        }

        public int wglDisableFrameLockI3D()
        {
            return (mDwglDisableFrameLockI3D_V());
        }

        public int wglDisableGenlockI3D( IntPtr hDC )
        {
            return (mDwglDisableGenlockI3D_P( hDC ));
        }

        public int wglEnableFrameLockI3D()
        {
            return (mDwglEnableFrameLockI3D_V());
        }

        public int wglEnableGenlockI3D( IntPtr hDC )
        {
            return (mDwglEnableGenlockI3D_P( hDC ));
        }

        public int wglEndFrameTrackingI3D()
        {
            return (mDwglEndFrameTrackingI3D_V());
        }

        public void wglFreeMemoryNV( IntPtr pointer )
        {
            mDwglFreeMemoryNV_P( pointer );
        }

        public int wglGenlockSampleRateI3D( IntPtr hDC, int uRate )
        {
            return (mDwglGenlockSampleRateI3D_PI( hDC, uRate ));
        }

        public int wglGenlockSourceDelayI3D( IntPtr hDC, int uDelay )
        {
            return (mDwglGenlockSourceDelayI3D_PI( hDC, uDelay ));
        }

        public int wglGenlockSourceEdgeI3D( IntPtr hDC, int uEdge )
        {
            return (mDwglGenlockSourceEdgeI3D_PI( hDC, uEdge ));
        }

        public int wglGenlockSourceI3D( IntPtr hDC, int uSource )
        {
            return (mDwglGenlockSourceI3D_PI( hDC, uSource ));
        }

        public IntPtr wglGetCurrentContext()
        {
            return (mDwglGetCurrentContext_V());
        }

        public IntPtr wglGetCurrentDC()
        {
            return (mDwglGetCurrentDC_V());
        }

        public IntPtr wglGetCurrentReadDCARB()
        {
            return (mDwglGetCurrentReadDCARB_V());
        }

        public IntPtr wglGetCurrentReadDCEXT()
        {
            return (mDwglGetCurrentReadDCEXT_V());
        }

        public int wglGetDigitalVideoParametersI3D( IntPtr hDC, int iAttribute, ref int piValue )
        {
            return (mDwglGetDigitalVideoParametersI3D_PIrI( hDC, iAttribute, ref piValue ));
        }

        public String wglGetExtensionsStringARB( IntPtr hdc )
        {
            return (mDwglGetExtensionsStringARB_P( hdc ));
        }

        public String wglGetExtensionsStringEXT()
        {
            return (mDwglGetExtensionsStringEXT_V());
        }

        public int wglGetFrameUsageI3D( ref float pUsage )
        {
            return (mDwglGetFrameUsageI3D_rF( ref pUsage ));
        }

        public int wglGetGammaTableI3D( IntPtr hDC, int iEntries, short[] puRed, short[] puGreen, short[] puBlue )
        {
            return (mDwglGetGammaTableI3D_PIaHaHaH( hDC, iEntries, puRed, puGreen, puBlue ));
        }

        public int wglGetGammaTableI3D( IntPtr hDC, int iEntries, IntPtr puRed, IntPtr puGreen, IntPtr puBlue )
        {
            return (mDwglGetGammaTableI3D_PIPPP( hDC, iEntries, puRed, puGreen, puBlue ));
        }

        public int wglGetGammaTableParametersI3D( IntPtr hDC, int iAttribute, ref int piValue )
        {
            return (mDwglGetGammaTableParametersI3D_PIrI( hDC, iAttribute, ref piValue ));
        }

        public int wglGetGenlockSampleRateI3D( IntPtr hDC, ref int uRate )
        {
            return (mDwglGetGenlockSampleRateI3D_PrI( hDC, ref uRate ));
        }

        public int wglGetGenlockSourceDelayI3D( IntPtr hDC, ref int uDelay )
        {
            return (mDwglGetGenlockSourceDelayI3D_PrI( hDC, ref uDelay ));
        }

        public int wglGetGenlockSourceEdgeI3D( IntPtr hDC, ref int uEdge )
        {
            return (mDwglGetGenlockSourceEdgeI3D_PrI( hDC, ref uEdge ));
        }

        public int wglGetGenlockSourceI3D( IntPtr hDC, ref int uSource )
        {
            return (mDwglGetGenlockSourceI3D_PrI( hDC, ref uSource ));
        }

        public int wglGetLayerPaletteEntries( IntPtr hdc, int iLayerPlane, int iStart, int cEntries, int[] rixbgr )
        {
            return (mDwglGetLayerPaletteEntries_PIIIaI( hdc, iLayerPlane, iStart, cEntries, rixbgr ));
        }

        public int wglGetLayerPaletteEntries( IntPtr hdc, int iLayerPlane, int iStart, int cEntries, IntPtr rixbgr )
        {
            return (mDwglGetLayerPaletteEntries_PIIIP( hdc, iLayerPlane, iStart, cEntries, rixbgr ));
        }

        public int wglGetMscRateOML( IntPtr hdc, ref int numerator, ref int denominator )
        {
            return (mDwglGetMscRateOML_PrIrI( hdc, ref numerator, ref denominator ));
        }

        public IntPtr wglGetPbufferDCARB( IntPtr hPbuffer )
        {
            return (mDwglGetPbufferDCARB_P( hPbuffer ));
        }

        public IntPtr wglGetPbufferDCEXT( IntPtr hPbuffer )
        {
            return (mDwglGetPbufferDCEXT_P( hPbuffer ));
        }

        public int wglGetPixelFormatAttribfvARB( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, int[] piAttributes, float[] pfValues )
        {
            return (mDwglGetPixelFormatAttribfvARB_PIIIaIaF( hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues ));
        }

        public int wglGetPixelFormatAttribfvARB( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, IntPtr piAttributes, IntPtr pfValues )
        {
            return (mDwglGetPixelFormatAttribfvARB_PIIIPP( hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues ));
        }

        public int wglGetPixelFormatAttribfvEXT( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, int[] piAttributes, float[] pfValues )
        {
            return (mDwglGetPixelFormatAttribfvEXT_PIIIaIaF( hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues ));
        }

        public int wglGetPixelFormatAttribfvEXT( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, IntPtr piAttributes, IntPtr pfValues )
        {
            return (mDwglGetPixelFormatAttribfvEXT_PIIIPP( hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues ));
        }

        public int wglGetPixelFormatAttribivARB( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, int[] piAttributes, int[] piValues )
        {
            return (mDwglGetPixelFormatAttribivARB_PIIIaIaI( hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues ));
        }

        public int wglGetPixelFormatAttribivARB( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, IntPtr piAttributes, IntPtr piValues )
        {
            return (mDwglGetPixelFormatAttribivARB_PIIIPP( hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues ));
        }

        public int wglGetPixelFormatAttribivEXT( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, int[] piAttributes, int[] piValues )
        {
            return (mDwglGetPixelFormatAttribivEXT_PIIIaIaI( hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues ));
        }

        public int wglGetPixelFormatAttribivEXT( IntPtr hdc, int iPixelFormat, int iLayerPlane, int nAttributes, IntPtr piAttributes, IntPtr piValues )
        {
            return (mDwglGetPixelFormatAttribivEXT_PIIIPP( hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues ));
        }

        public IntPtr wglGetProcAddress( String functionName )
        {
            return (mDwglGetProcAddress_S( functionName ));
        }

        public int wglGetSwapIntervalEXT()
        {
            return (mDwglGetSwapIntervalEXT_V());
        }

        public int wglGetSyncValuesOML( IntPtr hdc, ref long ust, ref long msc, ref long sbc )
        {
            return (mDwglGetSyncValuesOML_PrLrLrL( hdc, ref ust, ref msc, ref sbc ));
        }

        public int wglIsEnabledFrameLockI3D( ref int pFlag )
        {
            return (mDwglIsEnabledFrameLockI3D_rI( ref pFlag ));
        }

        public int wglIsEnabledGenlockI3D( IntPtr hDC, ref int pFlag )
        {
            return (mDwglIsEnabledGenlockI3D_PrI( hDC, ref pFlag ));
        }

        public byte wglLoadDisplayColorTableEXT( short[] table, int length )
        {
            return (mDwglLoadDisplayColorTableEXT_aHI( table, length ));
        }

        public byte wglLoadDisplayColorTableEXT( IntPtr table, int length )
        {
            return (mDwglLoadDisplayColorTableEXT_PI( table, length ));
        }

        public int wglMakeContextCurrentARB( IntPtr hDrawDC, IntPtr hReadDC, IntPtr hglrc )
        {
            return (mDwglMakeContextCurrentARB_PPP( hDrawDC, hReadDC, hglrc ));
        }

        public int wglMakeContextCurrentEXT( IntPtr hDrawDC, IntPtr hReadDC, IntPtr hglrc )
        {
            return (mDwglMakeContextCurrentEXT_PPP( hDrawDC, hReadDC, hglrc ));
        }

        public int wglMakeCurrent( IntPtr hdc, IntPtr hglrc )
        {
            return (mDwglMakeCurrent_PP( hdc, hglrc ));
        }

        public int wglQueryFrameLockMasterI3D( ref int pFlag )
        {
            return (mDwglQueryFrameLockMasterI3D_rI( ref pFlag ));
        }

        public int wglQueryFrameTrackingI3D( ref int pFrameCount, ref int pMissedFrames, ref float pLastMissedUsage )
        {
            return (mDwglQueryFrameTrackingI3D_rIrIrF( ref pFrameCount, ref pMissedFrames, ref pLastMissedUsage ));
        }

        public int wglQueryGenlockMaxSourceDelayI3D( IntPtr hDC, ref int uMaxLineDelay, ref int uMaxPixelDelay )
        {
            return (mDwglQueryGenlockMaxSourceDelayI3D_PrIrI( hDC, ref uMaxLineDelay, ref uMaxPixelDelay ));
        }

        public int wglQueryPbufferARB( IntPtr hPbuffer, int iAttribute, ref int piValue )
        {
            return (mDwglQueryPbufferARB_PIrI( hPbuffer, iAttribute, ref piValue ));
        }

        public int wglQueryPbufferEXT( IntPtr hPbuffer, int iAttribute, ref int piValue )
        {
            return (mDwglQueryPbufferEXT_PIrI( hPbuffer, iAttribute, ref piValue ));
        }

        public int wglRealizeLayerPalette( IntPtr hdc, int iLayerPlane, int bRealize )
        {
            return (mDwglRealizeLayerPalette_PII( hdc, iLayerPlane, bRealize ));
        }

        public int wglReleaseImageBufferEventsI3D( IntPtr hDC, ref IntPtr pAddress, int count )
        {
            return (mDwglReleaseImageBufferEventsI3D_PrPI( hDC, ref pAddress, count ));
        }

        public int wglReleasePbufferDCARB( IntPtr hPbuffer, IntPtr hDC )
        {
            return (mDwglReleasePbufferDCARB_PP( hPbuffer, hDC ));
        }

        public int wglReleasePbufferDCEXT( IntPtr hPbuffer, IntPtr hDC )
        {
            return (mDwglReleasePbufferDCEXT_PP( hPbuffer, hDC ));
        }

        public int wglReleaseTexImageARB( IntPtr hPbuffer, int iBuffer )
        {
            return (mDwglReleaseTexImageARB_PI( hPbuffer, iBuffer ));
        }

        public int wglRestoreBufferRegionARB( IntPtr hRegion, int x, int y, int width, int height, int xSrc, int ySrc )
        {
            return (mDwglRestoreBufferRegionARB_PIIIIII( hRegion, x, y, width, height, xSrc, ySrc ));
        }

        public int wglSaveBufferRegionARB( IntPtr hRegion, int x, int y, int width, int height )
        {
            return (mDwglSaveBufferRegionARB_PIIII( hRegion, x, y, width, height ));
        }

        public int wglSetDigitalVideoParametersI3D( IntPtr hDC, int iAttribute, ref int piValue )
        {
            return (mDwglSetDigitalVideoParametersI3D_PIrI( hDC, iAttribute, ref piValue ));
        }

        public int wglSetGammaTableI3D( IntPtr hDC, int iEntries, short[] puRed, short[] puGreen, short[] puBlue )
        {
            return (mDwglSetGammaTableI3D_PIaHaHaH( hDC, iEntries, puRed, puGreen, puBlue ));
        }

        public int wglSetGammaTableI3D( IntPtr hDC, int iEntries, IntPtr puRed, IntPtr puGreen, IntPtr puBlue )
        {
            return (mDwglSetGammaTableI3D_PIPPP( hDC, iEntries, puRed, puGreen, puBlue ));
        }

        public int wglSetGammaTableParametersI3D( IntPtr hDC, int iAttribute, ref int piValue )
        {
            return (mDwglSetGammaTableParametersI3D_PIrI( hDC, iAttribute, ref piValue ));
        }

        public int wglSetLayerPaletteEntries( IntPtr hdc, int iLayerPlane, int iStart, int cEntries, int[] rixbgr )
        {
            return (mDwglSetLayerPaletteEntries_PIIIaI( hdc, iLayerPlane, iStart, cEntries, rixbgr ));
        }

        public int wglSetLayerPaletteEntries( IntPtr hdc, int iLayerPlane, int iStart, int cEntries, IntPtr rixbgr )
        {
            return (mDwglSetLayerPaletteEntries_PIIIP( hdc, iLayerPlane, iStart, cEntries, rixbgr ));
        }

        public int wglSetPbufferAttribARB( IntPtr hPbuffer, int[] piAttribList )
        {
            return (mDwglSetPbufferAttribARB_PaI( hPbuffer, piAttribList ));
        }

        public int wglSetPbufferAttribARB( IntPtr hPbuffer, IntPtr piAttribList )
        {
            return (mDwglSetPbufferAttribARB_PP( hPbuffer, piAttribList ));
        }

        public int wglShareLists( IntPtr hglrc1, IntPtr hglrc2 )
        {
            return (mDwglShareLists_PP( hglrc1, hglrc2 ));
        }

        public int wglSwapBuffers( IntPtr hdc )
        {
            return (mDwglSwapBuffers_P( hdc ));
        }

        public long wglSwapBuffersMscOML( IntPtr hdc, long target_msc, long divisor, long remainder )
        {
            return (mDwglSwapBuffersMscOML_PLLL( hdc, target_msc, divisor, remainder ));
        }

        public int wglSwapIntervalEXT( int interval )
        {
            return (mDwglSwapIntervalEXT_I( interval ));
        }

        public int wglSwapLayerBuffers( IntPtr hdc, int fuPlanes )
        {
            return (mDwglSwapLayerBuffers_PI( hdc, fuPlanes ));
        }

        public long wglSwapLayerBuffersMscOML( IntPtr hdc, int fuPlanes, long target_msc, long divisor, long remainder )
        {
            return (mDwglSwapLayerBuffersMscOML_PILLL( hdc, fuPlanes, target_msc, divisor, remainder ));
        }

        public int wglSwapMultipleBuffers( int p1, ref WGLSWAP pwglswap )
        {
            return (mDwglSwapMultipleBuffers_IrX( p1, ref pwglswap ));
        }

        public int wglUseFontBitmapsA( IntPtr hdc, int first, int count, int listbase )
        {
            return (mDwglUseFontBitmapsA_PIII( hdc, first, count, listbase ));
        }

        public int wglUseFontBitmapsW( IntPtr hdc, int first, int count, int listbase )
        {
            return (mDwglUseFontBitmapsW_PIII( hdc, first, count, listbase ));
        }

        public int wglUseFontOutlinesA( IntPtr hdc, int first, int count, int listBase, float deviation, float extrusion, int format, [Out, MarshalAs( UnmanagedType.LPArray )] GLYPHMETRICSFLOAT[] gmfarray )
        {
            return (mDwglUseFontOutlinesA_PIIIFFIX( hdc, first, count, listBase, deviation, extrusion, format, gmfarray ));
        }

        public int wglUseFontOutlinesA( IntPtr hdc, int first, int count, int listBase, float deviation, float extrusion, int format, IntPtr gmfarray )
        {
            return (mDwglUseFontOutlinesA_PIIIFFIP( hdc, first, count, listBase, deviation, extrusion, format, gmfarray ));
        }

        public int wglUseFontOutlinesW( IntPtr hdc, int first, int count, int listBase, float deviation, float extrusion, int format, [Out, MarshalAs( UnmanagedType.LPArray )] GLYPHMETRICSFLOAT[] gmfarray )
        {
            return (mDwglUseFontOutlinesW_PIIIFFIX( hdc, first, count, listBase, deviation, extrusion, format, gmfarray ));
        }

        public int wglUseFontOutlinesW( IntPtr hdc, int first, int count, int listBase, float deviation, float extrusion, int format, IntPtr gmfarray )
        {
            return (mDwglUseFontOutlinesW_PIIIFFIP( hdc, first, count, listBase, deviation, extrusion, format, gmfarray ));
        }

        public int wglWaitForMscOML( IntPtr hdc, long target_msc, long divisor, long remainder, ref long ust, ref long msc, ref long sbc )
        {
            return (mDwglWaitForMscOML_PLLLrLrLrL( hdc, target_msc, divisor, remainder, ref ust, ref msc, ref sbc ));
        }

        public int wglWaitForMscOML( IntPtr hdc, long target_msc, long divisor, long remainder, IntPtr ust, IntPtr msc, IntPtr sbc )
        {
            return (mDwglWaitForMscOML_PLLLPPP( hdc, target_msc, divisor, remainder, ust, msc, sbc ));
        }

        public int wglWaitForSbcOML( IntPtr hdc, long target_sbc, IntPtr ust, IntPtr msc, IntPtr sbc )
        {
            return (mDwglWaitForSbcOML_PLPPP( hdc, target_sbc, ust, msc, sbc ));
        }


#endif








        public void BuildFunctionListAssumingGLRCIsCurrent()
        {

            mhModuleGL  = GL.Kernel32_LoadLibrary( "opengl32.dll" );
            mhModuleGLU = GL.Kernel32_LoadLibrary( "glu32.dll" );
            mhModuleGDI = GL.Kernel32_LoadLibrary( "gdi32.dll" );




#if ENABLE_GL_CODE


            mDglAccum_IF = GetDelegate( "glAccum", typeof( DglAccum_IF ), ref bglAccum ) as DglAccum_IF;
            mDglActiveStencilFaceEXT_I = GetDelegate( "glActiveStencilFaceEXT", typeof( DglActiveStencilFaceEXT_I ), ref bglActiveStencilFaceEXT ) as DglActiveStencilFaceEXT_I;
            mDglActiveTexture_I = GetDelegate( "glActiveTexture", typeof( DglActiveTexture_I ), ref bglActiveTexture ) as DglActiveTexture_I;
            mDglActiveTextureARB_I = GetDelegate( "glActiveTextureARB", typeof( DglActiveTextureARB_I ), ref bglActiveTextureARB ) as DglActiveTextureARB_I;
            mDglAddSwapHintRectWIN_IIII = GetDelegate( "glAddSwapHintRectWIN", typeof( DglAddSwapHintRectWIN_IIII ), ref bglAddSwapHintRectWIN ) as DglAddSwapHintRectWIN_IIII;
            mDglAlphaFragmentOp1ATI_IIIIII = GetDelegate( "glAlphaFragmentOp1ATI", typeof( DglAlphaFragmentOp1ATI_IIIIII ), ref bglAlphaFragmentOp1ATI ) as DglAlphaFragmentOp1ATI_IIIIII;
            mDglAlphaFragmentOp2ATI_IIIIIIIII = GetDelegate( "glAlphaFragmentOp2ATI", typeof( DglAlphaFragmentOp2ATI_IIIIIIIII ), ref bglAlphaFragmentOp2ATI ) as DglAlphaFragmentOp2ATI_IIIIIIIII;
            mDglAlphaFragmentOp3ATI_IIIIIIIIIIII = GetDelegate( "glAlphaFragmentOp3ATI", typeof( DglAlphaFragmentOp3ATI_IIIIIIIIIIII ), ref bglAlphaFragmentOp3ATI ) as DglAlphaFragmentOp3ATI_IIIIIIIIIIII;
            mDglAlphaFunc_IF = GetDelegate( "glAlphaFunc", typeof( DglAlphaFunc_IF ), ref bglAlphaFunc ) as DglAlphaFunc_IF;
            mDglApplyTextureEXT_I = GetDelegate( "glApplyTextureEXT", typeof( DglApplyTextureEXT_I ), ref bglApplyTextureEXT ) as DglApplyTextureEXT_I;
            mDglAreProgramsResidentNV_IaIaB = GetDelegate( "glAreProgramsResidentNV", typeof( DglAreProgramsResidentNV_IaIaB ), ref bglAreProgramsResidentNV ) as DglAreProgramsResidentNV_IaIaB;
            mDglAreProgramsResidentNV_IPP = GetDelegate( "glAreProgramsResidentNV", typeof( DglAreProgramsResidentNV_IPP ), ref bglAreProgramsResidentNV ) as DglAreProgramsResidentNV_IPP;
            mDglAreTexturesResident_IaIaB = GetDelegate( "glAreTexturesResident", typeof( DglAreTexturesResident_IaIaB ), ref bglAreTexturesResident ) as DglAreTexturesResident_IaIaB;
            mDglAreTexturesResident_IPP = GetDelegate( "glAreTexturesResident", typeof( DglAreTexturesResident_IPP ), ref bglAreTexturesResident ) as DglAreTexturesResident_IPP;
            mDglAreTexturesResidentEXT_IaIaB = GetDelegate( "glAreTexturesResidentEXT", typeof( DglAreTexturesResidentEXT_IaIaB ), ref bglAreTexturesResidentEXT ) as DglAreTexturesResidentEXT_IaIaB;
            mDglAreTexturesResidentEXT_IPP = GetDelegate( "glAreTexturesResidentEXT", typeof( DglAreTexturesResidentEXT_IPP ), ref bglAreTexturesResidentEXT ) as DglAreTexturesResidentEXT_IPP;
            mDglArrayElement_I = GetDelegate( "glArrayElement", typeof( DglArrayElement_I ), ref bglArrayElement ) as DglArrayElement_I;
            mDglArrayElementArrayEXT_IIaB = GetDelegate( "glArrayElementArrayEXT", typeof( DglArrayElementArrayEXT_IIaB ), ref bglArrayElementArrayEXT ) as DglArrayElementArrayEXT_IIaB;
            mDglArrayElementArrayEXT_IIP = GetDelegate( "glArrayElementArrayEXT", typeof( DglArrayElementArrayEXT_IIP ), ref bglArrayElementArrayEXT ) as DglArrayElementArrayEXT_IIP;
            mDglArrayElementEXT_I = GetDelegate( "glArrayElementEXT", typeof( DglArrayElementEXT_I ), ref bglArrayElementEXT ) as DglArrayElementEXT_I;
            mDglArrayObjectATI_IIIIII = GetDelegate( "glArrayObjectATI", typeof( DglArrayObjectATI_IIIIII ), ref bglArrayObjectATI ) as DglArrayObjectATI_IIIIII;
            mDglAsyncMarkerSGIX_I = GetDelegate( "glAsyncMarkerSGIX", typeof( DglAsyncMarkerSGIX_I ), ref bglAsyncMarkerSGIX ) as DglAsyncMarkerSGIX_I;
            mDglAttachObjectARB_II = GetDelegate( "glAttachObjectARB", typeof( DglAttachObjectARB_II ), ref bglAttachObjectARB ) as DglAttachObjectARB_II;
            mDglAttachShader_II = GetDelegate( "glAttachShader", typeof( DglAttachShader_II ), ref bglAttachShader ) as DglAttachShader_II;
            mDglBegin_I = GetDelegate( "glBegin", typeof( DglBegin_I ), ref bglBegin ) as DglBegin_I;
            mDglBeginFragmentShaderATI_V = GetDelegate( "glBeginFragmentShaderATI", typeof( DglBeginFragmentShaderATI_V ), ref bglBeginFragmentShaderATI ) as DglBeginFragmentShaderATI_V;
            mDglBeginOcclusionQueryNV_I = GetDelegate( "glBeginOcclusionQueryNV", typeof( DglBeginOcclusionQueryNV_I ), ref bglBeginOcclusionQueryNV ) as DglBeginOcclusionQueryNV_I;
            mDglBeginQuery_II = GetDelegate( "glBeginQuery", typeof( DglBeginQuery_II ), ref bglBeginQuery ) as DglBeginQuery_II;
            mDglBeginQueryARB_II = GetDelegate( "glBeginQueryARB", typeof( DglBeginQueryARB_II ), ref bglBeginQueryARB ) as DglBeginQueryARB_II;
            mDglBeginVertexShaderEXT_V = GetDelegate( "glBeginVertexShaderEXT", typeof( DglBeginVertexShaderEXT_V ), ref bglBeginVertexShaderEXT ) as DglBeginVertexShaderEXT_V;
            mDglBindAttribLocation_IIS = GetDelegate( "glBindAttribLocation", typeof( DglBindAttribLocation_IIS ), ref bglBindAttribLocation ) as DglBindAttribLocation_IIS;
            mDglBindAttribLocationARB_IIS = GetDelegate( "glBindAttribLocationARB", typeof( DglBindAttribLocationARB_IIS ), ref bglBindAttribLocationARB ) as DglBindAttribLocationARB_IIS;
            mDglBindBuffer_II = GetDelegate( "glBindBuffer", typeof( DglBindBuffer_II ), ref bglBindBuffer ) as DglBindBuffer_II;
            mDglBindBufferARB_II = GetDelegate( "glBindBufferARB", typeof( DglBindBufferARB_II ), ref bglBindBufferARB ) as DglBindBufferARB_II;
            mDglBindFragmentShaderATI_I = GetDelegate( "glBindFragmentShaderATI", typeof( DglBindFragmentShaderATI_I ), ref bglBindFragmentShaderATI ) as DglBindFragmentShaderATI_I;
            mDglBindFramebufferEXT_II = GetDelegate( "glBindFramebufferEXT", typeof( DglBindFramebufferEXT_II ), ref bglBindFramebufferEXT ) as DglBindFramebufferEXT_II;
            mDglBindLightParameterEXT_II = GetDelegate( "glBindLightParameterEXT", typeof( DglBindLightParameterEXT_II ), ref bglBindLightParameterEXT ) as DglBindLightParameterEXT_II;
            mDglBindMaterialParameterEXT_II = GetDelegate( "glBindMaterialParameterEXT", typeof( DglBindMaterialParameterEXT_II ), ref bglBindMaterialParameterEXT ) as DglBindMaterialParameterEXT_II;
            mDglBindParameterEXT_I = GetDelegate( "glBindParameterEXT", typeof( DglBindParameterEXT_I ), ref bglBindParameterEXT ) as DglBindParameterEXT_I;
            mDglBindProgramARB_II = GetDelegate( "glBindProgramARB", typeof( DglBindProgramARB_II ), ref bglBindProgramARB ) as DglBindProgramARB_II;
            mDglBindProgramNV_II = GetDelegate( "glBindProgramNV", typeof( DglBindProgramNV_II ), ref bglBindProgramNV ) as DglBindProgramNV_II;
            mDglBindRenderbufferEXT_II = GetDelegate( "glBindRenderbufferEXT", typeof( DglBindRenderbufferEXT_II ), ref bglBindRenderbufferEXT ) as DglBindRenderbufferEXT_II;
            mDglBindTexGenParameterEXT_III = GetDelegate( "glBindTexGenParameterEXT", typeof( DglBindTexGenParameterEXT_III ), ref bglBindTexGenParameterEXT ) as DglBindTexGenParameterEXT_III;
            mDglBindTexture_II = GetDelegate( "glBindTexture", typeof( DglBindTexture_II ), ref bglBindTexture ) as DglBindTexture_II;
            mDglBindTextureEXT_II = GetDelegate( "glBindTextureEXT", typeof( DglBindTextureEXT_II ), ref bglBindTextureEXT ) as DglBindTextureEXT_II;
            mDglBindTextureUnitParameterEXT_II = GetDelegate( "glBindTextureUnitParameterEXT", typeof( DglBindTextureUnitParameterEXT_II ), ref bglBindTextureUnitParameterEXT ) as DglBindTextureUnitParameterEXT_II;
            mDglBindVertexArrayAPPLE_I = GetDelegate( "glBindVertexArrayAPPLE", typeof( DglBindVertexArrayAPPLE_I ), ref bglBindVertexArrayAPPLE ) as DglBindVertexArrayAPPLE_I;
            mDglBindVertexShaderEXT_I = GetDelegate( "glBindVertexShaderEXT", typeof( DglBindVertexShaderEXT_I ), ref bglBindVertexShaderEXT ) as DglBindVertexShaderEXT_I;
            mDglBinormal3bEXT_BBB = GetDelegate( "glBinormal3bEXT", typeof( DglBinormal3bEXT_BBB ), ref bglBinormal3bEXT ) as DglBinormal3bEXT_BBB;
            mDglBinormal3bvEXT_aB = GetDelegate( "glBinormal3bvEXT", typeof( DglBinormal3bvEXT_aB ), ref bglBinormal3bvEXT ) as DglBinormal3bvEXT_aB;
            mDglBinormal3bvEXT_P = GetDelegate( "glBinormal3bvEXT", typeof( DglBinormal3bvEXT_P ), ref bglBinormal3bvEXT ) as DglBinormal3bvEXT_P;
            mDglBinormal3dEXT_DDD = GetDelegate( "glBinormal3dEXT", typeof( DglBinormal3dEXT_DDD ), ref bglBinormal3dEXT ) as DglBinormal3dEXT_DDD;
            mDglBinormal3dvEXT_aD = GetDelegate( "glBinormal3dvEXT", typeof( DglBinormal3dvEXT_aD ), ref bglBinormal3dvEXT ) as DglBinormal3dvEXT_aD;
            mDglBinormal3dvEXT_P = GetDelegate( "glBinormal3dvEXT", typeof( DglBinormal3dvEXT_P ), ref bglBinormal3dvEXT ) as DglBinormal3dvEXT_P;
            mDglBinormal3fEXT_FFF = GetDelegate( "glBinormal3fEXT", typeof( DglBinormal3fEXT_FFF ), ref bglBinormal3fEXT ) as DglBinormal3fEXT_FFF;
            mDglBinormal3fvEXT_aF = GetDelegate( "glBinormal3fvEXT", typeof( DglBinormal3fvEXT_aF ), ref bglBinormal3fvEXT ) as DglBinormal3fvEXT_aF;
            mDglBinormal3fvEXT_P = GetDelegate( "glBinormal3fvEXT", typeof( DglBinormal3fvEXT_P ), ref bglBinormal3fvEXT ) as DglBinormal3fvEXT_P;
            mDglBinormal3iEXT_III = GetDelegate( "glBinormal3iEXT", typeof( DglBinormal3iEXT_III ), ref bglBinormal3iEXT ) as DglBinormal3iEXT_III;
            mDglBinormal3ivEXT_aI = GetDelegate( "glBinormal3ivEXT", typeof( DglBinormal3ivEXT_aI ), ref bglBinormal3ivEXT ) as DglBinormal3ivEXT_aI;
            mDglBinormal3ivEXT_P = GetDelegate( "glBinormal3ivEXT", typeof( DglBinormal3ivEXT_P ), ref bglBinormal3ivEXT ) as DglBinormal3ivEXT_P;
            mDglBinormal3sEXT_HHH = GetDelegate( "glBinormal3sEXT", typeof( DglBinormal3sEXT_HHH ), ref bglBinormal3sEXT ) as DglBinormal3sEXT_HHH;
            mDglBinormal3svEXT_aH = GetDelegate( "glBinormal3svEXT", typeof( DglBinormal3svEXT_aH ), ref bglBinormal3svEXT ) as DglBinormal3svEXT_aH;
            mDglBinormal3svEXT_P = GetDelegate( "glBinormal3svEXT", typeof( DglBinormal3svEXT_P ), ref bglBinormal3svEXT ) as DglBinormal3svEXT_P;
            mDglBinormalPointerEXT_IIaF = GetDelegate( "glBinormalPointerEXT", typeof( DglBinormalPointerEXT_IIaF ), ref bglBinormalPointerEXT ) as DglBinormalPointerEXT_IIaF;
            mDglBinormalPointerEXT_IIP = GetDelegate( "glBinormalPointerEXT", typeof( DglBinormalPointerEXT_IIP ), ref bglBinormalPointerEXT ) as DglBinormalPointerEXT_IIP;
            mDglBitmap_IIFFFFaB = GetDelegate( "glBitmap", typeof( DglBitmap_IIFFFFaB ), ref bglBitmap ) as DglBitmap_IIFFFFaB;
            mDglBitmap_IIFFFFP = GetDelegate( "glBitmap", typeof( DglBitmap_IIFFFFP ), ref bglBitmap ) as DglBitmap_IIFFFFP;
            mDglBlendColor_FFFF = GetDelegate( "glBlendColor", typeof( DglBlendColor_FFFF ), ref bglBlendColor ) as DglBlendColor_FFFF;
            mDglBlendColorEXT_FFFF = GetDelegate( "glBlendColorEXT", typeof( DglBlendColorEXT_FFFF ), ref bglBlendColorEXT ) as DglBlendColorEXT_FFFF;
            mDglBlendEquation_I = GetDelegate( "glBlendEquation", typeof( DglBlendEquation_I ), ref bglBlendEquation ) as DglBlendEquation_I;
            mDglBlendEquationEXT_I = GetDelegate( "glBlendEquationEXT", typeof( DglBlendEquationEXT_I ), ref bglBlendEquationEXT ) as DglBlendEquationEXT_I;
            mDglBlendEquationSeparate_II = GetDelegate( "glBlendEquationSeparate", typeof( DglBlendEquationSeparate_II ), ref bglBlendEquationSeparate ) as DglBlendEquationSeparate_II;
            mDglBlendEquationSeparateEXT_II = GetDelegate( "glBlendEquationSeparateEXT", typeof( DglBlendEquationSeparateEXT_II ), ref bglBlendEquationSeparateEXT ) as DglBlendEquationSeparateEXT_II;
            mDglBlendFunc_II = GetDelegate( "glBlendFunc", typeof( DglBlendFunc_II ), ref bglBlendFunc ) as DglBlendFunc_II;
            mDglBlendFuncSeparate_IIII = GetDelegate( "glBlendFuncSeparate", typeof( DglBlendFuncSeparate_IIII ), ref bglBlendFuncSeparate ) as DglBlendFuncSeparate_IIII;
            mDglBlendFuncSeparateEXT_IIII = GetDelegate( "glBlendFuncSeparateEXT", typeof( DglBlendFuncSeparateEXT_IIII ), ref bglBlendFuncSeparateEXT ) as DglBlendFuncSeparateEXT_IIII;
            mDglBlendFuncSeparateINGR_IIII = GetDelegate( "glBlendFuncSeparateINGR", typeof( DglBlendFuncSeparateINGR_IIII ), ref bglBlendFuncSeparateINGR ) as DglBlendFuncSeparateINGR_IIII;
            mDglBufferData_IIaBI = GetDelegate( "glBufferData", typeof( DglBufferData_IIaBI ), ref bglBufferData ) as DglBufferData_IIaBI;
            mDglBufferData_IIPI = GetDelegate( "glBufferData", typeof( DglBufferData_IIPI ), ref bglBufferData ) as DglBufferData_IIPI;
            mDglBufferDataARB_IIaBI = GetDelegate( "glBufferDataARB", typeof( DglBufferDataARB_IIaBI ), ref bglBufferDataARB ) as DglBufferDataARB_IIaBI;
            mDglBufferDataARB_IIPI = GetDelegate( "glBufferDataARB", typeof( DglBufferDataARB_IIPI ), ref bglBufferDataARB ) as DglBufferDataARB_IIPI;
            mDglBufferSubData_IIIaB = GetDelegate( "glBufferSubData", typeof( DglBufferSubData_IIIaB ), ref bglBufferSubData ) as DglBufferSubData_IIIaB;
            mDglBufferSubData_IIIP = GetDelegate( "glBufferSubData", typeof( DglBufferSubData_IIIP ), ref bglBufferSubData ) as DglBufferSubData_IIIP;
            mDglBufferSubDataARB_IIIaB = GetDelegate( "glBufferSubDataARB", typeof( DglBufferSubDataARB_IIIaB ), ref bglBufferSubDataARB ) as DglBufferSubDataARB_IIIaB;
            mDglBufferSubDataARB_IIIP = GetDelegate( "glBufferSubDataARB", typeof( DglBufferSubDataARB_IIIP ), ref bglBufferSubDataARB ) as DglBufferSubDataARB_IIIP;
            mDglCallList_I = GetDelegate( "glCallList", typeof( DglCallList_I ), ref bglCallList ) as DglCallList_I;
            mDglCallLists_IIaB = GetDelegate( "glCallLists", typeof( DglCallLists_IIaB ), ref bglCallLists ) as DglCallLists_IIaB;
            mDglCallLists_IIaH = GetDelegate( "glCallLists", typeof( DglCallLists_IIaH ), ref bglCallLists ) as DglCallLists_IIaH;
            mDglCallLists_IIaI = GetDelegate( "glCallLists", typeof( DglCallLists_IIaI ), ref bglCallLists ) as DglCallLists_IIaI;
            mDglCallLists_IIaF = GetDelegate( "glCallLists", typeof( DglCallLists_IIaF ), ref bglCallLists ) as DglCallLists_IIaF;
            mDglCallLists_IIP = GetDelegate( "glCallLists", typeof( DglCallLists_IIP ), ref bglCallLists ) as DglCallLists_IIP;
            mDglCheckFramebufferStatusEXT_I = GetDelegate( "glCheckFramebufferStatusEXT", typeof( DglCheckFramebufferStatusEXT_I ), ref bglCheckFramebufferStatusEXT ) as DglCheckFramebufferStatusEXT_I;
            mDglClampColorARB_II = GetDelegate( "glClampColorARB", typeof( DglClampColorARB_II ), ref bglClampColorARB ) as DglClampColorARB_II;
            mDglClear_I = GetDelegate( "glClear", typeof( DglClear_I ), ref bglClear ) as DglClear_I;
            mDglClearAccum_FFFF = GetDelegate( "glClearAccum", typeof( DglClearAccum_FFFF ), ref bglClearAccum ) as DglClearAccum_FFFF;
            mDglClearColor_FFFF = GetDelegate( "glClearColor", typeof( DglClearColor_FFFF ), ref bglClearColor ) as DglClearColor_FFFF;
            mDglClearDepth_D = GetDelegate( "glClearDepth", typeof( DglClearDepth_D ), ref bglClearDepth ) as DglClearDepth_D;
            mDglClearIndex_F = GetDelegate( "glClearIndex", typeof( DglClearIndex_F ), ref bglClearIndex ) as DglClearIndex_F;
            mDglClearStencil_I = GetDelegate( "glClearStencil", typeof( DglClearStencil_I ), ref bglClearStencil ) as DglClearStencil_I;
            mDglClientActiveTexture_I = GetDelegate( "glClientActiveTexture", typeof( DglClientActiveTexture_I ), ref bglClientActiveTexture ) as DglClientActiveTexture_I;
            mDglClientActiveTextureARB_I = GetDelegate( "glClientActiveTextureARB", typeof( DglClientActiveTextureARB_I ), ref bglClientActiveTextureARB ) as DglClientActiveTextureARB_I;
            mDglClientActiveVertexStreamATI_I = GetDelegate( "glClientActiveVertexStreamATI", typeof( DglClientActiveVertexStreamATI_I ), ref bglClientActiveVertexStreamATI ) as DglClientActiveVertexStreamATI_I;
            mDglClipPlane_IaD = GetDelegate( "glClipPlane", typeof( DglClipPlane_IaD ), ref bglClipPlane ) as DglClipPlane_IaD;
            mDglClipPlane_IP = GetDelegate( "glClipPlane", typeof( DglClipPlane_IP ), ref bglClipPlane ) as DglClipPlane_IP;
            mDglColor3b_BBB = GetDelegate( "glColor3b", typeof( DglColor3b_BBB ), ref bglColor3b ) as DglColor3b_BBB;
            mDglColor3bv_aB = GetDelegate( "glColor3bv", typeof( DglColor3bv_aB ), ref bglColor3bv ) as DglColor3bv_aB;
            mDglColor3bv_P = GetDelegate( "glColor3bv", typeof( DglColor3bv_P ), ref bglColor3bv ) as DglColor3bv_P;
            mDglColor3d_DDD = GetDelegate( "glColor3d", typeof( DglColor3d_DDD ), ref bglColor3d ) as DglColor3d_DDD;
            mDglColor3dv_aD = GetDelegate( "glColor3dv", typeof( DglColor3dv_aD ), ref bglColor3dv ) as DglColor3dv_aD;
            mDglColor3dv_P = GetDelegate( "glColor3dv", typeof( DglColor3dv_P ), ref bglColor3dv ) as DglColor3dv_P;
            mDglColor3f_FFF = GetDelegate( "glColor3f", typeof( DglColor3f_FFF ), ref bglColor3f ) as DglColor3f_FFF;
            mDglColor3fv_aF = GetDelegate( "glColor3fv", typeof( DglColor3fv_aF ), ref bglColor3fv ) as DglColor3fv_aF;
            mDglColor3fv_P = GetDelegate( "glColor3fv", typeof( DglColor3fv_P ), ref bglColor3fv ) as DglColor3fv_P;
            mDglColor3fVertex3fSUN_FFFFFF = GetDelegate( "glColor3fVertex3fSUN", typeof( DglColor3fVertex3fSUN_FFFFFF ), ref bglColor3fVertex3fSUN ) as DglColor3fVertex3fSUN_FFFFFF;
            mDglColor3fVertex3fvSUN_aFaF = GetDelegate( "glColor3fVertex3fvSUN", typeof( DglColor3fVertex3fvSUN_aFaF ), ref bglColor3fVertex3fvSUN ) as DglColor3fVertex3fvSUN_aFaF;
            mDglColor3fVertex3fvSUN_aFP = GetDelegate( "glColor3fVertex3fvSUN", typeof( DglColor3fVertex3fvSUN_aFP ), ref bglColor3fVertex3fvSUN ) as DglColor3fVertex3fvSUN_aFP;
            mDglColor3fVertex3fvSUN_PaF = GetDelegate( "glColor3fVertex3fvSUN", typeof( DglColor3fVertex3fvSUN_PaF ), ref bglColor3fVertex3fvSUN ) as DglColor3fVertex3fvSUN_PaF;
            mDglColor3fVertex3fvSUN_PP = GetDelegate( "glColor3fVertex3fvSUN", typeof( DglColor3fVertex3fvSUN_PP ), ref bglColor3fVertex3fvSUN ) as DglColor3fVertex3fvSUN_PP;
            mDglColor3hNV_HHH = GetDelegate( "glColor3hNV", typeof( DglColor3hNV_HHH ), ref bglColor3hNV ) as DglColor3hNV_HHH;
            mDglColor3hvNV_aH = GetDelegate( "glColor3hvNV", typeof( DglColor3hvNV_aH ), ref bglColor3hvNV ) as DglColor3hvNV_aH;
            mDglColor3hvNV_P = GetDelegate( "glColor3hvNV", typeof( DglColor3hvNV_P ), ref bglColor3hvNV ) as DglColor3hvNV_P;
            mDglColor3i_III = GetDelegate( "glColor3i", typeof( DglColor3i_III ), ref bglColor3i ) as DglColor3i_III;
            mDglColor3iv_aI = GetDelegate( "glColor3iv", typeof( DglColor3iv_aI ), ref bglColor3iv ) as DglColor3iv_aI;
            mDglColor3iv_P = GetDelegate( "glColor3iv", typeof( DglColor3iv_P ), ref bglColor3iv ) as DglColor3iv_P;
            mDglColor3s_HHH = GetDelegate( "glColor3s", typeof( DglColor3s_HHH ), ref bglColor3s ) as DglColor3s_HHH;
            mDglColor3sv_aH = GetDelegate( "glColor3sv", typeof( DglColor3sv_aH ), ref bglColor3sv ) as DglColor3sv_aH;
            mDglColor3sv_P = GetDelegate( "glColor3sv", typeof( DglColor3sv_P ), ref bglColor3sv ) as DglColor3sv_P;
            mDglColor3ub_BBB = GetDelegate( "glColor3ub", typeof( DglColor3ub_BBB ), ref bglColor3ub ) as DglColor3ub_BBB;
            mDglColor3ubv_aB = GetDelegate( "glColor3ubv", typeof( DglColor3ubv_aB ), ref bglColor3ubv ) as DglColor3ubv_aB;
            mDglColor3ubv_P = GetDelegate( "glColor3ubv", typeof( DglColor3ubv_P ), ref bglColor3ubv ) as DglColor3ubv_P;
            mDglColor3ui_III = GetDelegate( "glColor3ui", typeof( DglColor3ui_III ), ref bglColor3ui ) as DglColor3ui_III;
            mDglColor3uiv_aI = GetDelegate( "glColor3uiv", typeof( DglColor3uiv_aI ), ref bglColor3uiv ) as DglColor3uiv_aI;
            mDglColor3uiv_P = GetDelegate( "glColor3uiv", typeof( DglColor3uiv_P ), ref bglColor3uiv ) as DglColor3uiv_P;
            mDglColor3us_HHH = GetDelegate( "glColor3us", typeof( DglColor3us_HHH ), ref bglColor3us ) as DglColor3us_HHH;
            mDglColor3usv_aH = GetDelegate( "glColor3usv", typeof( DglColor3usv_aH ), ref bglColor3usv ) as DglColor3usv_aH;
            mDglColor3usv_P = GetDelegate( "glColor3usv", typeof( DglColor3usv_P ), ref bglColor3usv ) as DglColor3usv_P;
            mDglColor4b_BBBB = GetDelegate( "glColor4b", typeof( DglColor4b_BBBB ), ref bglColor4b ) as DglColor4b_BBBB;
            mDglColor4bv_aB = GetDelegate( "glColor4bv", typeof( DglColor4bv_aB ), ref bglColor4bv ) as DglColor4bv_aB;
            mDglColor4bv_P = GetDelegate( "glColor4bv", typeof( DglColor4bv_P ), ref bglColor4bv ) as DglColor4bv_P;
            mDglColor4d_DDDD = GetDelegate( "glColor4d", typeof( DglColor4d_DDDD ), ref bglColor4d ) as DglColor4d_DDDD;
            mDglColor4dv_aD = GetDelegate( "glColor4dv", typeof( DglColor4dv_aD ), ref bglColor4dv ) as DglColor4dv_aD;
            mDglColor4dv_P = GetDelegate( "glColor4dv", typeof( DglColor4dv_P ), ref bglColor4dv ) as DglColor4dv_P;
            mDglColor4f_FFFF = GetDelegate( "glColor4f", typeof( DglColor4f_FFFF ), ref bglColor4f ) as DglColor4f_FFFF;
            mDglColor4fNormal3fVertex3fSUN_FFFFFFFFFF = GetDelegate( "glColor4fNormal3fVertex3fSUN", typeof( DglColor4fNormal3fVertex3fSUN_FFFFFFFFFF ), ref bglColor4fNormal3fVertex3fSUN ) as DglColor4fNormal3fVertex3fSUN_FFFFFFFFFF;
            mDglColor4fNormal3fVertex3fvSUN_aFaFaF = GetDelegate( "glColor4fNormal3fVertex3fvSUN", typeof( DglColor4fNormal3fVertex3fvSUN_aFaFaF ), ref bglColor4fNormal3fVertex3fvSUN ) as DglColor4fNormal3fVertex3fvSUN_aFaFaF;
            mDglColor4fNormal3fVertex3fvSUN_PPP = GetDelegate( "glColor4fNormal3fVertex3fvSUN", typeof( DglColor4fNormal3fVertex3fvSUN_PPP ), ref bglColor4fNormal3fVertex3fvSUN ) as DglColor4fNormal3fVertex3fvSUN_PPP;
            mDglColor4fv_aF = GetDelegate( "glColor4fv", typeof( DglColor4fv_aF ), ref bglColor4fv ) as DglColor4fv_aF;
            mDglColor4fv_P = GetDelegate( "glColor4fv", typeof( DglColor4fv_P ), ref bglColor4fv ) as DglColor4fv_P;
            mDglColor4hNV_HHHH = GetDelegate( "glColor4hNV", typeof( DglColor4hNV_HHHH ), ref bglColor4hNV ) as DglColor4hNV_HHHH;
            mDglColor4hvNV_aH = GetDelegate( "glColor4hvNV", typeof( DglColor4hvNV_aH ), ref bglColor4hvNV ) as DglColor4hvNV_aH;
            mDglColor4hvNV_P = GetDelegate( "glColor4hvNV", typeof( DglColor4hvNV_P ), ref bglColor4hvNV ) as DglColor4hvNV_P;
            mDglColor4i_IIII = GetDelegate( "glColor4i", typeof( DglColor4i_IIII ), ref bglColor4i ) as DglColor4i_IIII;
            mDglColor4iv_aI = GetDelegate( "glColor4iv", typeof( DglColor4iv_aI ), ref bglColor4iv ) as DglColor4iv_aI;
            mDglColor4iv_P = GetDelegate( "glColor4iv", typeof( DglColor4iv_P ), ref bglColor4iv ) as DglColor4iv_P;
            mDglColor4s_HHHH = GetDelegate( "glColor4s", typeof( DglColor4s_HHHH ), ref bglColor4s ) as DglColor4s_HHHH;
            mDglColor4sv_aH = GetDelegate( "glColor4sv", typeof( DglColor4sv_aH ), ref bglColor4sv ) as DglColor4sv_aH;
            mDglColor4sv_P = GetDelegate( "glColor4sv", typeof( DglColor4sv_P ), ref bglColor4sv ) as DglColor4sv_P;
            mDglColor4ub_BBBB = GetDelegate( "glColor4ub", typeof( DglColor4ub_BBBB ), ref bglColor4ub ) as DglColor4ub_BBBB;
            mDglColor4ubv_aB = GetDelegate( "glColor4ubv", typeof( DglColor4ubv_aB ), ref bglColor4ubv ) as DglColor4ubv_aB;
            mDglColor4ubv_P = GetDelegate( "glColor4ubv", typeof( DglColor4ubv_P ), ref bglColor4ubv ) as DglColor4ubv_P;
            mDglColor4ubVertex2fSUN_BBBBFF = GetDelegate( "glColor4ubVertex2fSUN", typeof( DglColor4ubVertex2fSUN_BBBBFF ), ref bglColor4ubVertex2fSUN ) as DglColor4ubVertex2fSUN_BBBBFF;
            mDglColor4ubVertex2fvSUN_aBaF = GetDelegate( "glColor4ubVertex2fvSUN", typeof( DglColor4ubVertex2fvSUN_aBaF ), ref bglColor4ubVertex2fvSUN ) as DglColor4ubVertex2fvSUN_aBaF;
            mDglColor4ubVertex2fvSUN_aBP = GetDelegate( "glColor4ubVertex2fvSUN", typeof( DglColor4ubVertex2fvSUN_aBP ), ref bglColor4ubVertex2fvSUN ) as DglColor4ubVertex2fvSUN_aBP;
            mDglColor4ubVertex2fvSUN_PaF = GetDelegate( "glColor4ubVertex2fvSUN", typeof( DglColor4ubVertex2fvSUN_PaF ), ref bglColor4ubVertex2fvSUN ) as DglColor4ubVertex2fvSUN_PaF;
            mDglColor4ubVertex2fvSUN_PP = GetDelegate( "glColor4ubVertex2fvSUN", typeof( DglColor4ubVertex2fvSUN_PP ), ref bglColor4ubVertex2fvSUN ) as DglColor4ubVertex2fvSUN_PP;
            mDglColor4ubVertex3fSUN_BBBBFFF = GetDelegate( "glColor4ubVertex3fSUN", typeof( DglColor4ubVertex3fSUN_BBBBFFF ), ref bglColor4ubVertex3fSUN ) as DglColor4ubVertex3fSUN_BBBBFFF;
            mDglColor4ubVertex3fvSUN_aBaF = GetDelegate( "glColor4ubVertex3fvSUN", typeof( DglColor4ubVertex3fvSUN_aBaF ), ref bglColor4ubVertex3fvSUN ) as DglColor4ubVertex3fvSUN_aBaF;
            mDglColor4ubVertex3fvSUN_aBP = GetDelegate( "glColor4ubVertex3fvSUN", typeof( DglColor4ubVertex3fvSUN_aBP ), ref bglColor4ubVertex3fvSUN ) as DglColor4ubVertex3fvSUN_aBP;
            mDglColor4ubVertex3fvSUN_PaF = GetDelegate( "glColor4ubVertex3fvSUN", typeof( DglColor4ubVertex3fvSUN_PaF ), ref bglColor4ubVertex3fvSUN ) as DglColor4ubVertex3fvSUN_PaF;
            mDglColor4ubVertex3fvSUN_PP = GetDelegate( "glColor4ubVertex3fvSUN", typeof( DglColor4ubVertex3fvSUN_PP ), ref bglColor4ubVertex3fvSUN ) as DglColor4ubVertex3fvSUN_PP;
            mDglColor4ui_IIII = GetDelegate( "glColor4ui", typeof( DglColor4ui_IIII ), ref bglColor4ui ) as DglColor4ui_IIII;
            mDglColor4uiv_aI = GetDelegate( "glColor4uiv", typeof( DglColor4uiv_aI ), ref bglColor4uiv ) as DglColor4uiv_aI;
            mDglColor4uiv_P = GetDelegate( "glColor4uiv", typeof( DglColor4uiv_P ), ref bglColor4uiv ) as DglColor4uiv_P;
            mDglColor4us_HHHH = GetDelegate( "glColor4us", typeof( DglColor4us_HHHH ), ref bglColor4us ) as DglColor4us_HHHH;
            mDglColor4usv_aH = GetDelegate( "glColor4usv", typeof( DglColor4usv_aH ), ref bglColor4usv ) as DglColor4usv_aH;
            mDglColor4usv_P = GetDelegate( "glColor4usv", typeof( DglColor4usv_P ), ref bglColor4usv ) as DglColor4usv_P;
            mDglColorFragmentOp1ATI_IIIIIII = GetDelegate( "glColorFragmentOp1ATI", typeof( DglColorFragmentOp1ATI_IIIIIII ), ref bglColorFragmentOp1ATI ) as DglColorFragmentOp1ATI_IIIIIII;
            mDglColorFragmentOp2ATI_IIIIIIIIII = GetDelegate( "glColorFragmentOp2ATI", typeof( DglColorFragmentOp2ATI_IIIIIIIIII ), ref bglColorFragmentOp2ATI ) as DglColorFragmentOp2ATI_IIIIIIIIII;
            mDglColorFragmentOp3ATI_IIIIIIIIIIIII = GetDelegate( "glColorFragmentOp3ATI", typeof( DglColorFragmentOp3ATI_IIIIIIIIIIIII ), ref bglColorFragmentOp3ATI ) as DglColorFragmentOp3ATI_IIIIIIIIIIIII;
            mDglColorMask_BBBB = GetDelegate( "glColorMask", typeof( DglColorMask_BBBB ), ref bglColorMask ) as DglColorMask_BBBB;
            mDglColorMaterial_II = GetDelegate( "glColorMaterial", typeof( DglColorMaterial_II ), ref bglColorMaterial ) as DglColorMaterial_II;
            mDglColorPointer_IIIaB = GetDelegate( "glColorPointer", typeof( DglColorPointer_IIIaB ), ref bglColorPointer ) as DglColorPointer_IIIaB;
            mDglColorPointer_IIIaH = GetDelegate( "glColorPointer", typeof( DglColorPointer_IIIaH ), ref bglColorPointer ) as DglColorPointer_IIIaH;
            mDglColorPointer_IIIaI = GetDelegate( "glColorPointer", typeof( DglColorPointer_IIIaI ), ref bglColorPointer ) as DglColorPointer_IIIaI;
            mDglColorPointer_IIIaF = GetDelegate( "glColorPointer", typeof( DglColorPointer_IIIaF ), ref bglColorPointer ) as DglColorPointer_IIIaF;
            mDglColorPointer_IIIaD = GetDelegate( "glColorPointer", typeof( DglColorPointer_IIIaD ), ref bglColorPointer ) as DglColorPointer_IIIaD;
            mDglColorPointer_IIIP = GetDelegate( "glColorPointer", typeof( DglColorPointer_IIIP ), ref bglColorPointer ) as DglColorPointer_IIIP;
            mDglColorPointerEXT_IIIIaB = GetDelegate( "glColorPointerEXT", typeof( DglColorPointerEXT_IIIIaB ), ref bglColorPointerEXT ) as DglColorPointerEXT_IIIIaB;
            mDglColorPointerEXT_IIIIaH = GetDelegate( "glColorPointerEXT", typeof( DglColorPointerEXT_IIIIaH ), ref bglColorPointerEXT ) as DglColorPointerEXT_IIIIaH;
            mDglColorPointerEXT_IIIIaI = GetDelegate( "glColorPointerEXT", typeof( DglColorPointerEXT_IIIIaI ), ref bglColorPointerEXT ) as DglColorPointerEXT_IIIIaI;
            mDglColorPointerEXT_IIIIaF = GetDelegate( "glColorPointerEXT", typeof( DglColorPointerEXT_IIIIaF ), ref bglColorPointerEXT ) as DglColorPointerEXT_IIIIaF;
            mDglColorPointerEXT_IIIIaD = GetDelegate( "glColorPointerEXT", typeof( DglColorPointerEXT_IIIIaD ), ref bglColorPointerEXT ) as DglColorPointerEXT_IIIIaD;
            mDglColorPointerEXT_IIIIP = GetDelegate( "glColorPointerEXT", typeof( DglColorPointerEXT_IIIIP ), ref bglColorPointerEXT ) as DglColorPointerEXT_IIIIP;
            mDglColorPointerListIBM_IIIrPI = GetDelegate( "glColorPointerListIBM", typeof( DglColorPointerListIBM_IIIrPI ), ref bglColorPointerListIBM ) as DglColorPointerListIBM_IIIrPI;
            mDglColorPointervINTEL_IIrP = GetDelegate( "glColorPointervINTEL", typeof( DglColorPointervINTEL_IIrP ), ref bglColorPointervINTEL ) as DglColorPointervINTEL_IIrP;
            mDglColorSubTable_IIIIIaB = GetDelegate( "glColorSubTable", typeof( DglColorSubTable_IIIIIaB ), ref bglColorSubTable ) as DglColorSubTable_IIIIIaB;
            mDglColorSubTable_IIIIIaH = GetDelegate( "glColorSubTable", typeof( DglColorSubTable_IIIIIaH ), ref bglColorSubTable ) as DglColorSubTable_IIIIIaH;
            mDglColorSubTable_IIIIIaI = GetDelegate( "glColorSubTable", typeof( DglColorSubTable_IIIIIaI ), ref bglColorSubTable ) as DglColorSubTable_IIIIIaI;
            mDglColorSubTable_IIIIIaF = GetDelegate( "glColorSubTable", typeof( DglColorSubTable_IIIIIaF ), ref bglColorSubTable ) as DglColorSubTable_IIIIIaF;
            mDglColorSubTable_IIIIIP = GetDelegate( "glColorSubTable", typeof( DglColorSubTable_IIIIIP ), ref bglColorSubTable ) as DglColorSubTable_IIIIIP;
            mDglColorSubTableEXT_IIIIIaB = GetDelegate( "glColorSubTableEXT", typeof( DglColorSubTableEXT_IIIIIaB ), ref bglColorSubTableEXT ) as DglColorSubTableEXT_IIIIIaB;
            mDglColorSubTableEXT_IIIIIaH = GetDelegate( "glColorSubTableEXT", typeof( DglColorSubTableEXT_IIIIIaH ), ref bglColorSubTableEXT ) as DglColorSubTableEXT_IIIIIaH;
            mDglColorSubTableEXT_IIIIIaI = GetDelegate( "glColorSubTableEXT", typeof( DglColorSubTableEXT_IIIIIaI ), ref bglColorSubTableEXT ) as DglColorSubTableEXT_IIIIIaI;
            mDglColorSubTableEXT_IIIIIaF = GetDelegate( "glColorSubTableEXT", typeof( DglColorSubTableEXT_IIIIIaF ), ref bglColorSubTableEXT ) as DglColorSubTableEXT_IIIIIaF;
            mDglColorSubTableEXT_IIIIIP = GetDelegate( "glColorSubTableEXT", typeof( DglColorSubTableEXT_IIIIIP ), ref bglColorSubTableEXT ) as DglColorSubTableEXT_IIIIIP;
            mDglColorTable_IIIIIaB = GetDelegate( "glColorTable", typeof( DglColorTable_IIIIIaB ), ref bglColorTable ) as DglColorTable_IIIIIaB;
            mDglColorTable_IIIIIaH = GetDelegate( "glColorTable", typeof( DglColorTable_IIIIIaH ), ref bglColorTable ) as DglColorTable_IIIIIaH;
            mDglColorTable_IIIIIaI = GetDelegate( "glColorTable", typeof( DglColorTable_IIIIIaI ), ref bglColorTable ) as DglColorTable_IIIIIaI;
            mDglColorTable_IIIIIaF = GetDelegate( "glColorTable", typeof( DglColorTable_IIIIIaF ), ref bglColorTable ) as DglColorTable_IIIIIaF;
            mDglColorTable_IIIIIP = GetDelegate( "glColorTable", typeof( DglColorTable_IIIIIP ), ref bglColorTable ) as DglColorTable_IIIIIP;
            mDglColorTableEXT_IIIIIaB = GetDelegate( "glColorTableEXT", typeof( DglColorTableEXT_IIIIIaB ), ref bglColorTableEXT ) as DglColorTableEXT_IIIIIaB;
            mDglColorTableEXT_IIIIIaH = GetDelegate( "glColorTableEXT", typeof( DglColorTableEXT_IIIIIaH ), ref bglColorTableEXT ) as DglColorTableEXT_IIIIIaH;
            mDglColorTableEXT_IIIIIaI = GetDelegate( "glColorTableEXT", typeof( DglColorTableEXT_IIIIIaI ), ref bglColorTableEXT ) as DglColorTableEXT_IIIIIaI;
            mDglColorTableEXT_IIIIIaF = GetDelegate( "glColorTableEXT", typeof( DglColorTableEXT_IIIIIaF ), ref bglColorTableEXT ) as DglColorTableEXT_IIIIIaF;
            mDglColorTableEXT_IIIIIP = GetDelegate( "glColorTableEXT", typeof( DglColorTableEXT_IIIIIP ), ref bglColorTableEXT ) as DglColorTableEXT_IIIIIP;
            mDglColorTableParameterfv_IIaF = GetDelegate( "glColorTableParameterfv", typeof( DglColorTableParameterfv_IIaF ), ref bglColorTableParameterfv ) as DglColorTableParameterfv_IIaF;
            mDglColorTableParameterfv_IIP = GetDelegate( "glColorTableParameterfv", typeof( DglColorTableParameterfv_IIP ), ref bglColorTableParameterfv ) as DglColorTableParameterfv_IIP;
            mDglColorTableParameterfvSGI_IIaF = GetDelegate( "glColorTableParameterfvSGI", typeof( DglColorTableParameterfvSGI_IIaF ), ref bglColorTableParameterfvSGI ) as DglColorTableParameterfvSGI_IIaF;
            mDglColorTableParameterfvSGI_IIP = GetDelegate( "glColorTableParameterfvSGI", typeof( DglColorTableParameterfvSGI_IIP ), ref bglColorTableParameterfvSGI ) as DglColorTableParameterfvSGI_IIP;
            mDglColorTableParameteriv_IIaI = GetDelegate( "glColorTableParameteriv", typeof( DglColorTableParameteriv_IIaI ), ref bglColorTableParameteriv ) as DglColorTableParameteriv_IIaI;
            mDglColorTableParameteriv_IIP = GetDelegate( "glColorTableParameteriv", typeof( DglColorTableParameteriv_IIP ), ref bglColorTableParameteriv ) as DglColorTableParameteriv_IIP;
            mDglColorTableParameterivSGI_IIaI = GetDelegate( "glColorTableParameterivSGI", typeof( DglColorTableParameterivSGI_IIaI ), ref bglColorTableParameterivSGI ) as DglColorTableParameterivSGI_IIaI;
            mDglColorTableParameterivSGI_IIP = GetDelegate( "glColorTableParameterivSGI", typeof( DglColorTableParameterivSGI_IIP ), ref bglColorTableParameterivSGI ) as DglColorTableParameterivSGI_IIP;
            mDglColorTableSGI_IIIIIaB = GetDelegate( "glColorTableSGI", typeof( DglColorTableSGI_IIIIIaB ), ref bglColorTableSGI ) as DglColorTableSGI_IIIIIaB;
            mDglColorTableSGI_IIIIIaH = GetDelegate( "glColorTableSGI", typeof( DglColorTableSGI_IIIIIaH ), ref bglColorTableSGI ) as DglColorTableSGI_IIIIIaH;
            mDglColorTableSGI_IIIIIaI = GetDelegate( "glColorTableSGI", typeof( DglColorTableSGI_IIIIIaI ), ref bglColorTableSGI ) as DglColorTableSGI_IIIIIaI;
            mDglColorTableSGI_IIIIIaF = GetDelegate( "glColorTableSGI", typeof( DglColorTableSGI_IIIIIaF ), ref bglColorTableSGI ) as DglColorTableSGI_IIIIIaF;
            mDglColorTableSGI_IIIIIP = GetDelegate( "glColorTableSGI", typeof( DglColorTableSGI_IIIIIP ), ref bglColorTableSGI ) as DglColorTableSGI_IIIIIP;
            mDglCombinerInputNV_IIIIII = GetDelegate( "glCombinerInputNV", typeof( DglCombinerInputNV_IIIIII ), ref bglCombinerInputNV ) as DglCombinerInputNV_IIIIII;
            mDglCombinerOutputNV_IIIIIIIBBB = GetDelegate( "glCombinerOutputNV", typeof( DglCombinerOutputNV_IIIIIIIBBB ), ref bglCombinerOutputNV ) as DglCombinerOutputNV_IIIIIIIBBB;
            mDglCombinerParameterfNV_IF = GetDelegate( "glCombinerParameterfNV", typeof( DglCombinerParameterfNV_IF ), ref bglCombinerParameterfNV ) as DglCombinerParameterfNV_IF;
            mDglCombinerParameterfvNV_IaF = GetDelegate( "glCombinerParameterfvNV", typeof( DglCombinerParameterfvNV_IaF ), ref bglCombinerParameterfvNV ) as DglCombinerParameterfvNV_IaF;
            mDglCombinerParameterfvNV_IP = GetDelegate( "glCombinerParameterfvNV", typeof( DglCombinerParameterfvNV_IP ), ref bglCombinerParameterfvNV ) as DglCombinerParameterfvNV_IP;
            mDglCombinerParameteriNV_II = GetDelegate( "glCombinerParameteriNV", typeof( DglCombinerParameteriNV_II ), ref bglCombinerParameteriNV ) as DglCombinerParameteriNV_II;
            mDglCombinerParameterivNV_IaI = GetDelegate( "glCombinerParameterivNV", typeof( DglCombinerParameterivNV_IaI ), ref bglCombinerParameterivNV ) as DglCombinerParameterivNV_IaI;
            mDglCombinerParameterivNV_IP = GetDelegate( "glCombinerParameterivNV", typeof( DglCombinerParameterivNV_IP ), ref bglCombinerParameterivNV ) as DglCombinerParameterivNV_IP;
            mDglCombinerStageParameterfvNV_IIaF = GetDelegate( "glCombinerStageParameterfvNV", typeof( DglCombinerStageParameterfvNV_IIaF ), ref bglCombinerStageParameterfvNV ) as DglCombinerStageParameterfvNV_IIaF;
            mDglCombinerStageParameterfvNV_IIP = GetDelegate( "glCombinerStageParameterfvNV", typeof( DglCombinerStageParameterfvNV_IIP ), ref bglCombinerStageParameterfvNV ) as DglCombinerStageParameterfvNV_IIP;
            mDglCompileShader_I = GetDelegate( "glCompileShader", typeof( DglCompileShader_I ), ref bglCompileShader ) as DglCompileShader_I;
            mDglCompileShaderARB_I = GetDelegate( "glCompileShaderARB", typeof( DglCompileShaderARB_I ), ref bglCompileShaderARB ) as DglCompileShaderARB_I;
            mDglCompressedTexImage1D_IIIIIIaB = GetDelegate( "glCompressedTexImage1D", typeof( DglCompressedTexImage1D_IIIIIIaB ), ref bglCompressedTexImage1D ) as DglCompressedTexImage1D_IIIIIIaB;
            mDglCompressedTexImage1D_IIIIIIP = GetDelegate( "glCompressedTexImage1D", typeof( DglCompressedTexImage1D_IIIIIIP ), ref bglCompressedTexImage1D ) as DglCompressedTexImage1D_IIIIIIP;
            mDglCompressedTexImage1DARB_IIIIIIaB = GetDelegate( "glCompressedTexImage1DARB", typeof( DglCompressedTexImage1DARB_IIIIIIaB ), ref bglCompressedTexImage1DARB ) as DglCompressedTexImage1DARB_IIIIIIaB;
            mDglCompressedTexImage1DARB_IIIIIIP = GetDelegate( "glCompressedTexImage1DARB", typeof( DglCompressedTexImage1DARB_IIIIIIP ), ref bglCompressedTexImage1DARB ) as DglCompressedTexImage1DARB_IIIIIIP;
            mDglCompressedTexImage2D_IIIIIIIaB = GetDelegate( "glCompressedTexImage2D", typeof( DglCompressedTexImage2D_IIIIIIIaB ), ref bglCompressedTexImage2D ) as DglCompressedTexImage2D_IIIIIIIaB;
            mDglCompressedTexImage2D_IIIIIIIP = GetDelegate( "glCompressedTexImage2D", typeof( DglCompressedTexImage2D_IIIIIIIP ), ref bglCompressedTexImage2D ) as DglCompressedTexImage2D_IIIIIIIP;
            mDglCompressedTexImage2DARB_IIIIIIIaB = GetDelegate( "glCompressedTexImage2DARB", typeof( DglCompressedTexImage2DARB_IIIIIIIaB ), ref bglCompressedTexImage2DARB ) as DglCompressedTexImage2DARB_IIIIIIIaB;
            mDglCompressedTexImage2DARB_IIIIIIIP = GetDelegate( "glCompressedTexImage2DARB", typeof( DglCompressedTexImage2DARB_IIIIIIIP ), ref bglCompressedTexImage2DARB ) as DglCompressedTexImage2DARB_IIIIIIIP;
            mDglCompressedTexImage3D_IIIIIIIIaB = GetDelegate( "glCompressedTexImage3D", typeof( DglCompressedTexImage3D_IIIIIIIIaB ), ref bglCompressedTexImage3D ) as DglCompressedTexImage3D_IIIIIIIIaB;
            mDglCompressedTexImage3D_IIIIIIIIP = GetDelegate( "glCompressedTexImage3D", typeof( DglCompressedTexImage3D_IIIIIIIIP ), ref bglCompressedTexImage3D ) as DglCompressedTexImage3D_IIIIIIIIP;
            mDglCompressedTexImage3DARB_IIIIIIIIaB = GetDelegate( "glCompressedTexImage3DARB", typeof( DglCompressedTexImage3DARB_IIIIIIIIaB ), ref bglCompressedTexImage3DARB ) as DglCompressedTexImage3DARB_IIIIIIIIaB;
            mDglCompressedTexImage3DARB_IIIIIIIIP = GetDelegate( "glCompressedTexImage3DARB", typeof( DglCompressedTexImage3DARB_IIIIIIIIP ), ref bglCompressedTexImage3DARB ) as DglCompressedTexImage3DARB_IIIIIIIIP;
            mDglCompressedTexSubImage1D_IIIIIIaB = GetDelegate( "glCompressedTexSubImage1D", typeof( DglCompressedTexSubImage1D_IIIIIIaB ), ref bglCompressedTexSubImage1D ) as DglCompressedTexSubImage1D_IIIIIIaB;
            mDglCompressedTexSubImage1D_IIIIIIP = GetDelegate( "glCompressedTexSubImage1D", typeof( DglCompressedTexSubImage1D_IIIIIIP ), ref bglCompressedTexSubImage1D ) as DglCompressedTexSubImage1D_IIIIIIP;
            mDglCompressedTexSubImage1DARB_IIIIIIaB = GetDelegate( "glCompressedTexSubImage1DARB", typeof( DglCompressedTexSubImage1DARB_IIIIIIaB ), ref bglCompressedTexSubImage1DARB ) as DglCompressedTexSubImage1DARB_IIIIIIaB;
            mDglCompressedTexSubImage1DARB_IIIIIIP = GetDelegate( "glCompressedTexSubImage1DARB", typeof( DglCompressedTexSubImage1DARB_IIIIIIP ), ref bglCompressedTexSubImage1DARB ) as DglCompressedTexSubImage1DARB_IIIIIIP;
            mDglCompressedTexSubImage2D_IIIIIIIIaB = GetDelegate( "glCompressedTexSubImage2D", typeof( DglCompressedTexSubImage2D_IIIIIIIIaB ), ref bglCompressedTexSubImage2D ) as DglCompressedTexSubImage2D_IIIIIIIIaB;
            mDglCompressedTexSubImage2D_IIIIIIIIP = GetDelegate( "glCompressedTexSubImage2D", typeof( DglCompressedTexSubImage2D_IIIIIIIIP ), ref bglCompressedTexSubImage2D ) as DglCompressedTexSubImage2D_IIIIIIIIP;
            mDglCompressedTexSubImage2DARB_IIIIIIIIaB = GetDelegate( "glCompressedTexSubImage2DARB", typeof( DglCompressedTexSubImage2DARB_IIIIIIIIaB ), ref bglCompressedTexSubImage2DARB ) as DglCompressedTexSubImage2DARB_IIIIIIIIaB;
            mDglCompressedTexSubImage2DARB_IIIIIIIIP = GetDelegate( "glCompressedTexSubImage2DARB", typeof( DglCompressedTexSubImage2DARB_IIIIIIIIP ), ref bglCompressedTexSubImage2DARB ) as DglCompressedTexSubImage2DARB_IIIIIIIIP;
            mDglCompressedTexSubImage3D_IIIIIIIIIIaB = GetDelegate( "glCompressedTexSubImage3D", typeof( DglCompressedTexSubImage3D_IIIIIIIIIIaB ), ref bglCompressedTexSubImage3D ) as DglCompressedTexSubImage3D_IIIIIIIIIIaB;
            mDglCompressedTexSubImage3D_IIIIIIIIIIP = GetDelegate( "glCompressedTexSubImage3D", typeof( DglCompressedTexSubImage3D_IIIIIIIIIIP ), ref bglCompressedTexSubImage3D ) as DglCompressedTexSubImage3D_IIIIIIIIIIP;
            mDglCompressedTexSubImage3DARB_IIIIIIIIIIaB = GetDelegate( "glCompressedTexSubImage3DARB", typeof( DglCompressedTexSubImage3DARB_IIIIIIIIIIaB ), ref bglCompressedTexSubImage3DARB ) as DglCompressedTexSubImage3DARB_IIIIIIIIIIaB;
            mDglCompressedTexSubImage3DARB_IIIIIIIIIIP = GetDelegate( "glCompressedTexSubImage3DARB", typeof( DglCompressedTexSubImage3DARB_IIIIIIIIIIP ), ref bglCompressedTexSubImage3DARB ) as DglCompressedTexSubImage3DARB_IIIIIIIIIIP;
            mDglConvolutionFilter1D_IIIIIaB = GetDelegate( "glConvolutionFilter1D", typeof( DglConvolutionFilter1D_IIIIIaB ), ref bglConvolutionFilter1D ) as DglConvolutionFilter1D_IIIIIaB;
            mDglConvolutionFilter1D_IIIIIaH = GetDelegate( "glConvolutionFilter1D", typeof( DglConvolutionFilter1D_IIIIIaH ), ref bglConvolutionFilter1D ) as DglConvolutionFilter1D_IIIIIaH;
            mDglConvolutionFilter1D_IIIIIaI = GetDelegate( "glConvolutionFilter1D", typeof( DglConvolutionFilter1D_IIIIIaI ), ref bglConvolutionFilter1D ) as DglConvolutionFilter1D_IIIIIaI;
            mDglConvolutionFilter1D_IIIIIaF = GetDelegate( "glConvolutionFilter1D", typeof( DglConvolutionFilter1D_IIIIIaF ), ref bglConvolutionFilter1D ) as DglConvolutionFilter1D_IIIIIaF;
            mDglConvolutionFilter1D_IIIIIP = GetDelegate( "glConvolutionFilter1D", typeof( DglConvolutionFilter1D_IIIIIP ), ref bglConvolutionFilter1D ) as DglConvolutionFilter1D_IIIIIP;
            mDglConvolutionFilter1DEXT_IIIIIaB = GetDelegate( "glConvolutionFilter1DEXT", typeof( DglConvolutionFilter1DEXT_IIIIIaB ), ref bglConvolutionFilter1DEXT ) as DglConvolutionFilter1DEXT_IIIIIaB;
            mDglConvolutionFilter1DEXT_IIIIIaH = GetDelegate( "glConvolutionFilter1DEXT", typeof( DglConvolutionFilter1DEXT_IIIIIaH ), ref bglConvolutionFilter1DEXT ) as DglConvolutionFilter1DEXT_IIIIIaH;
            mDglConvolutionFilter1DEXT_IIIIIaI = GetDelegate( "glConvolutionFilter1DEXT", typeof( DglConvolutionFilter1DEXT_IIIIIaI ), ref bglConvolutionFilter1DEXT ) as DglConvolutionFilter1DEXT_IIIIIaI;
            mDglConvolutionFilter1DEXT_IIIIIaF = GetDelegate( "glConvolutionFilter1DEXT", typeof( DglConvolutionFilter1DEXT_IIIIIaF ), ref bglConvolutionFilter1DEXT ) as DglConvolutionFilter1DEXT_IIIIIaF;
            mDglConvolutionFilter1DEXT_IIIIIP = GetDelegate( "glConvolutionFilter1DEXT", typeof( DglConvolutionFilter1DEXT_IIIIIP ), ref bglConvolutionFilter1DEXT ) as DglConvolutionFilter1DEXT_IIIIIP;
            mDglConvolutionFilter2D_IIIIIIaB = GetDelegate( "glConvolutionFilter2D", typeof( DglConvolutionFilter2D_IIIIIIaB ), ref bglConvolutionFilter2D ) as DglConvolutionFilter2D_IIIIIIaB;
            mDglConvolutionFilter2D_IIIIIIaH = GetDelegate( "glConvolutionFilter2D", typeof( DglConvolutionFilter2D_IIIIIIaH ), ref bglConvolutionFilter2D ) as DglConvolutionFilter2D_IIIIIIaH;
            mDglConvolutionFilter2D_IIIIIIaI = GetDelegate( "glConvolutionFilter2D", typeof( DglConvolutionFilter2D_IIIIIIaI ), ref bglConvolutionFilter2D ) as DglConvolutionFilter2D_IIIIIIaI;
            mDglConvolutionFilter2D_IIIIIIaF = GetDelegate( "glConvolutionFilter2D", typeof( DglConvolutionFilter2D_IIIIIIaF ), ref bglConvolutionFilter2D ) as DglConvolutionFilter2D_IIIIIIaF;
            mDglConvolutionFilter2D_IIIIIIP = GetDelegate( "glConvolutionFilter2D", typeof( DglConvolutionFilter2D_IIIIIIP ), ref bglConvolutionFilter2D ) as DglConvolutionFilter2D_IIIIIIP;
            mDglConvolutionFilter2DEXT_IIIIIIaB = GetDelegate( "glConvolutionFilter2DEXT", typeof( DglConvolutionFilter2DEXT_IIIIIIaB ), ref bglConvolutionFilter2DEXT ) as DglConvolutionFilter2DEXT_IIIIIIaB;
            mDglConvolutionFilter2DEXT_IIIIIIaH = GetDelegate( "glConvolutionFilter2DEXT", typeof( DglConvolutionFilter2DEXT_IIIIIIaH ), ref bglConvolutionFilter2DEXT ) as DglConvolutionFilter2DEXT_IIIIIIaH;
            mDglConvolutionFilter2DEXT_IIIIIIaI = GetDelegate( "glConvolutionFilter2DEXT", typeof( DglConvolutionFilter2DEXT_IIIIIIaI ), ref bglConvolutionFilter2DEXT ) as DglConvolutionFilter2DEXT_IIIIIIaI;
            mDglConvolutionFilter2DEXT_IIIIIIaF = GetDelegate( "glConvolutionFilter2DEXT", typeof( DglConvolutionFilter2DEXT_IIIIIIaF ), ref bglConvolutionFilter2DEXT ) as DglConvolutionFilter2DEXT_IIIIIIaF;
            mDglConvolutionFilter2DEXT_IIIIIIP = GetDelegate( "glConvolutionFilter2DEXT", typeof( DglConvolutionFilter2DEXT_IIIIIIP ), ref bglConvolutionFilter2DEXT ) as DglConvolutionFilter2DEXT_IIIIIIP;
            mDglConvolutionParameterf_IIF = GetDelegate( "glConvolutionParameterf", typeof( DglConvolutionParameterf_IIF ), ref bglConvolutionParameterf ) as DglConvolutionParameterf_IIF;
            mDglConvolutionParameterfEXT_IIF = GetDelegate( "glConvolutionParameterfEXT", typeof( DglConvolutionParameterfEXT_IIF ), ref bglConvolutionParameterfEXT ) as DglConvolutionParameterfEXT_IIF;
            mDglConvolutionParameterfv_IIaF = GetDelegate( "glConvolutionParameterfv", typeof( DglConvolutionParameterfv_IIaF ), ref bglConvolutionParameterfv ) as DglConvolutionParameterfv_IIaF;
            mDglConvolutionParameterfv_IIP = GetDelegate( "glConvolutionParameterfv", typeof( DglConvolutionParameterfv_IIP ), ref bglConvolutionParameterfv ) as DglConvolutionParameterfv_IIP;
            mDglConvolutionParameterfvEXT_IIaF = GetDelegate( "glConvolutionParameterfvEXT", typeof( DglConvolutionParameterfvEXT_IIaF ), ref bglConvolutionParameterfvEXT ) as DglConvolutionParameterfvEXT_IIaF;
            mDglConvolutionParameterfvEXT_IIP = GetDelegate( "glConvolutionParameterfvEXT", typeof( DglConvolutionParameterfvEXT_IIP ), ref bglConvolutionParameterfvEXT ) as DglConvolutionParameterfvEXT_IIP;
            mDglConvolutionParameteri_III = GetDelegate( "glConvolutionParameteri", typeof( DglConvolutionParameteri_III ), ref bglConvolutionParameteri ) as DglConvolutionParameteri_III;
            mDglConvolutionParameteriEXT_III = GetDelegate( "glConvolutionParameteriEXT", typeof( DglConvolutionParameteriEXT_III ), ref bglConvolutionParameteriEXT ) as DglConvolutionParameteriEXT_III;
            mDglConvolutionParameteriv_IIaI = GetDelegate( "glConvolutionParameteriv", typeof( DglConvolutionParameteriv_IIaI ), ref bglConvolutionParameteriv ) as DglConvolutionParameteriv_IIaI;
            mDglConvolutionParameteriv_IIP = GetDelegate( "glConvolutionParameteriv", typeof( DglConvolutionParameteriv_IIP ), ref bglConvolutionParameteriv ) as DglConvolutionParameteriv_IIP;
            mDglConvolutionParameterivEXT_IIaI = GetDelegate( "glConvolutionParameterivEXT", typeof( DglConvolutionParameterivEXT_IIaI ), ref bglConvolutionParameterivEXT ) as DglConvolutionParameterivEXT_IIaI;
            mDglConvolutionParameterivEXT_IIP = GetDelegate( "glConvolutionParameterivEXT", typeof( DglConvolutionParameterivEXT_IIP ), ref bglConvolutionParameterivEXT ) as DglConvolutionParameterivEXT_IIP;
            mDglCopyColorSubTable_IIIII = GetDelegate( "glCopyColorSubTable", typeof( DglCopyColorSubTable_IIIII ), ref bglCopyColorSubTable ) as DglCopyColorSubTable_IIIII;
            mDglCopyColorSubTableEXT_IIIII = GetDelegate( "glCopyColorSubTableEXT", typeof( DglCopyColorSubTableEXT_IIIII ), ref bglCopyColorSubTableEXT ) as DglCopyColorSubTableEXT_IIIII;
            mDglCopyColorTable_IIIII = GetDelegate( "glCopyColorTable", typeof( DglCopyColorTable_IIIII ), ref bglCopyColorTable ) as DglCopyColorTable_IIIII;
            mDglCopyColorTableSGI_IIIII = GetDelegate( "glCopyColorTableSGI", typeof( DglCopyColorTableSGI_IIIII ), ref bglCopyColorTableSGI ) as DglCopyColorTableSGI_IIIII;
            mDglCopyConvolutionFilter1D_IIIII = GetDelegate( "glCopyConvolutionFilter1D", typeof( DglCopyConvolutionFilter1D_IIIII ), ref bglCopyConvolutionFilter1D ) as DglCopyConvolutionFilter1D_IIIII;
            mDglCopyConvolutionFilter1DEXT_IIIII = GetDelegate( "glCopyConvolutionFilter1DEXT", typeof( DglCopyConvolutionFilter1DEXT_IIIII ), ref bglCopyConvolutionFilter1DEXT ) as DglCopyConvolutionFilter1DEXT_IIIII;
            mDglCopyConvolutionFilter2D_IIIIII = GetDelegate( "glCopyConvolutionFilter2D", typeof( DglCopyConvolutionFilter2D_IIIIII ), ref bglCopyConvolutionFilter2D ) as DglCopyConvolutionFilter2D_IIIIII;
            mDglCopyConvolutionFilter2DEXT_IIIIII = GetDelegate( "glCopyConvolutionFilter2DEXT", typeof( DglCopyConvolutionFilter2DEXT_IIIIII ), ref bglCopyConvolutionFilter2DEXT ) as DglCopyConvolutionFilter2DEXT_IIIIII;
            mDglCopyPixels_IIIII = GetDelegate( "glCopyPixels", typeof( DglCopyPixels_IIIII ), ref bglCopyPixels ) as DglCopyPixels_IIIII;
            mDglCopyTexImage1D_IIIIIII = GetDelegate( "glCopyTexImage1D", typeof( DglCopyTexImage1D_IIIIIII ), ref bglCopyTexImage1D ) as DglCopyTexImage1D_IIIIIII;
            mDglCopyTexImage1DEXT_IIIIIII = GetDelegate( "glCopyTexImage1DEXT", typeof( DglCopyTexImage1DEXT_IIIIIII ), ref bglCopyTexImage1DEXT ) as DglCopyTexImage1DEXT_IIIIIII;
            mDglCopyTexImage2D_IIIIIIII = GetDelegate( "glCopyTexImage2D", typeof( DglCopyTexImage2D_IIIIIIII ), ref bglCopyTexImage2D ) as DglCopyTexImage2D_IIIIIIII;
            mDglCopyTexImage2DEXT_IIIIIIII = GetDelegate( "glCopyTexImage2DEXT", typeof( DglCopyTexImage2DEXT_IIIIIIII ), ref bglCopyTexImage2DEXT ) as DglCopyTexImage2DEXT_IIIIIIII;
            mDglCopyTexSubImage1D_IIIIII = GetDelegate( "glCopyTexSubImage1D", typeof( DglCopyTexSubImage1D_IIIIII ), ref bglCopyTexSubImage1D ) as DglCopyTexSubImage1D_IIIIII;
            mDglCopyTexSubImage1DEXT_IIIIII = GetDelegate( "glCopyTexSubImage1DEXT", typeof( DglCopyTexSubImage1DEXT_IIIIII ), ref bglCopyTexSubImage1DEXT ) as DglCopyTexSubImage1DEXT_IIIIII;
            mDglCopyTexSubImage2D_IIIIIIII = GetDelegate( "glCopyTexSubImage2D", typeof( DglCopyTexSubImage2D_IIIIIIII ), ref bglCopyTexSubImage2D ) as DglCopyTexSubImage2D_IIIIIIII;
            mDglCopyTexSubImage2DEXT_IIIIIIII = GetDelegate( "glCopyTexSubImage2DEXT", typeof( DglCopyTexSubImage2DEXT_IIIIIIII ), ref bglCopyTexSubImage2DEXT ) as DglCopyTexSubImage2DEXT_IIIIIIII;
            mDglCopyTexSubImage3D_IIIIIIIII = GetDelegate( "glCopyTexSubImage3D", typeof( DglCopyTexSubImage3D_IIIIIIIII ), ref bglCopyTexSubImage3D ) as DglCopyTexSubImage3D_IIIIIIIII;
            mDglCopyTexSubImage3DEXT_IIIIIIIII = GetDelegate( "glCopyTexSubImage3DEXT", typeof( DglCopyTexSubImage3DEXT_IIIIIIIII ), ref bglCopyTexSubImage3DEXT ) as DglCopyTexSubImage3DEXT_IIIIIIIII;
            mDglCreateProgram_V = GetDelegate( "glCreateProgram", typeof( DglCreateProgram_V ), ref bglCreateProgram ) as DglCreateProgram_V;
            mDglCreateProgramObjectARB_V = GetDelegate( "glCreateProgramObjectARB", typeof( DglCreateProgramObjectARB_V ), ref bglCreateProgramObjectARB ) as DglCreateProgramObjectARB_V;
            mDglCreateShader_I = GetDelegate( "glCreateShader", typeof( DglCreateShader_I ), ref bglCreateShader ) as DglCreateShader_I;
            mDglCreateShaderObjectARB_I = GetDelegate( "glCreateShaderObjectARB", typeof( DglCreateShaderObjectARB_I ), ref bglCreateShaderObjectARB ) as DglCreateShaderObjectARB_I;
            mDglCullFace_I = GetDelegate( "glCullFace", typeof( DglCullFace_I ), ref bglCullFace ) as DglCullFace_I;
            mDglCullParameterdvEXT_IaD = GetDelegate( "glCullParameterdvEXT", typeof( DglCullParameterdvEXT_IaD ), ref bglCullParameterdvEXT ) as DglCullParameterdvEXT_IaD;
            mDglCullParameterdvEXT_IP = GetDelegate( "glCullParameterdvEXT", typeof( DglCullParameterdvEXT_IP ), ref bglCullParameterdvEXT ) as DglCullParameterdvEXT_IP;
            mDglCullParameterfvEXT_IaF = GetDelegate( "glCullParameterfvEXT", typeof( DglCullParameterfvEXT_IaF ), ref bglCullParameterfvEXT ) as DglCullParameterfvEXT_IaF;
            mDglCullParameterfvEXT_IP = GetDelegate( "glCullParameterfvEXT", typeof( DglCullParameterfvEXT_IP ), ref bglCullParameterfvEXT ) as DglCullParameterfvEXT_IP;
            mDglCurrentPaletteMatrixARB_I = GetDelegate( "glCurrentPaletteMatrixARB", typeof( DglCurrentPaletteMatrixARB_I ), ref bglCurrentPaletteMatrixARB ) as DglCurrentPaletteMatrixARB_I;
            mDglDeformationMap3dSGIX_IDDIIDDIIDDIIaD = GetDelegate( "glDeformationMap3dSGIX", typeof( DglDeformationMap3dSGIX_IDDIIDDIIDDIIaD ), ref bglDeformationMap3dSGIX ) as DglDeformationMap3dSGIX_IDDIIDDIIDDIIaD;
            mDglDeformationMap3dSGIX_IDDIIDDIIDDIIP = GetDelegate( "glDeformationMap3dSGIX", typeof( DglDeformationMap3dSGIX_IDDIIDDIIDDIIP ), ref bglDeformationMap3dSGIX ) as DglDeformationMap3dSGIX_IDDIIDDIIDDIIP;
            mDglDeformationMap3fSGIX_IFFIIFFIIFFIIaF = GetDelegate( "glDeformationMap3fSGIX", typeof( DglDeformationMap3fSGIX_IFFIIFFIIFFIIaF ), ref bglDeformationMap3fSGIX ) as DglDeformationMap3fSGIX_IFFIIFFIIFFIIaF;
            mDglDeformationMap3fSGIX_IFFIIFFIIFFIIP = GetDelegate( "glDeformationMap3fSGIX", typeof( DglDeformationMap3fSGIX_IFFIIFFIIFFIIP ), ref bglDeformationMap3fSGIX ) as DglDeformationMap3fSGIX_IFFIIFFIIFFIIP;
            mDglDeformSGIX_I = GetDelegate( "glDeformSGIX", typeof( DglDeformSGIX_I ), ref bglDeformSGIX ) as DglDeformSGIX_I;
            mDglDeleteAsyncMarkersSGIX_II = GetDelegate( "glDeleteAsyncMarkersSGIX", typeof( DglDeleteAsyncMarkersSGIX_II ), ref bglDeleteAsyncMarkersSGIX ) as DglDeleteAsyncMarkersSGIX_II;
            mDglDeleteBuffers_IaI = GetDelegate( "glDeleteBuffers", typeof( DglDeleteBuffers_IaI ), ref bglDeleteBuffers ) as DglDeleteBuffers_IaI;
            mDglDeleteBuffers_IP = GetDelegate( "glDeleteBuffers", typeof( DglDeleteBuffers_IP ), ref bglDeleteBuffers ) as DglDeleteBuffers_IP;
            mDglDeleteBuffersARB_IaI = GetDelegate( "glDeleteBuffersARB", typeof( DglDeleteBuffersARB_IaI ), ref bglDeleteBuffersARB ) as DglDeleteBuffersARB_IaI;
            mDglDeleteBuffersARB_IP = GetDelegate( "glDeleteBuffersARB", typeof( DglDeleteBuffersARB_IP ), ref bglDeleteBuffersARB ) as DglDeleteBuffersARB_IP;
            mDglDeleteFencesAPPLE_IaI = GetDelegate( "glDeleteFencesAPPLE", typeof( DglDeleteFencesAPPLE_IaI ), ref bglDeleteFencesAPPLE ) as DglDeleteFencesAPPLE_IaI;
            mDglDeleteFencesAPPLE_IP = GetDelegate( "glDeleteFencesAPPLE", typeof( DglDeleteFencesAPPLE_IP ), ref bglDeleteFencesAPPLE ) as DglDeleteFencesAPPLE_IP;
            mDglDeleteFencesNV_IaI = GetDelegate( "glDeleteFencesNV", typeof( DglDeleteFencesNV_IaI ), ref bglDeleteFencesNV ) as DglDeleteFencesNV_IaI;
            mDglDeleteFencesNV_IP = GetDelegate( "glDeleteFencesNV", typeof( DglDeleteFencesNV_IP ), ref bglDeleteFencesNV ) as DglDeleteFencesNV_IP;
            mDglDeleteFragmentShaderATI_I = GetDelegate( "glDeleteFragmentShaderATI", typeof( DglDeleteFragmentShaderATI_I ), ref bglDeleteFragmentShaderATI ) as DglDeleteFragmentShaderATI_I;
            mDglDeleteFramebuffersEXT_IaI = GetDelegate( "glDeleteFramebuffersEXT", typeof( DglDeleteFramebuffersEXT_IaI ), ref bglDeleteFramebuffersEXT ) as DglDeleteFramebuffersEXT_IaI;
            mDglDeleteFramebuffersEXT_IP = GetDelegate( "glDeleteFramebuffersEXT", typeof( DglDeleteFramebuffersEXT_IP ), ref bglDeleteFramebuffersEXT ) as DglDeleteFramebuffersEXT_IP;
            mDglDeleteLists_II = GetDelegate( "glDeleteLists", typeof( DglDeleteLists_II ), ref bglDeleteLists ) as DglDeleteLists_II;
            mDglDeleteObjectARB_I = GetDelegate( "glDeleteObjectARB", typeof( DglDeleteObjectARB_I ), ref bglDeleteObjectARB ) as DglDeleteObjectARB_I;
            mDglDeleteOcclusionQueriesNV_IaI = GetDelegate( "glDeleteOcclusionQueriesNV", typeof( DglDeleteOcclusionQueriesNV_IaI ), ref bglDeleteOcclusionQueriesNV ) as DglDeleteOcclusionQueriesNV_IaI;
            mDglDeleteOcclusionQueriesNV_IP = GetDelegate( "glDeleteOcclusionQueriesNV", typeof( DglDeleteOcclusionQueriesNV_IP ), ref bglDeleteOcclusionQueriesNV ) as DglDeleteOcclusionQueriesNV_IP;
            mDglDeleteProgram_I = GetDelegate( "glDeleteProgram", typeof( DglDeleteProgram_I ), ref bglDeleteProgram ) as DglDeleteProgram_I;
            mDglDeleteProgramsARB_IaI = GetDelegate( "glDeleteProgramsARB", typeof( DglDeleteProgramsARB_IaI ), ref bglDeleteProgramsARB ) as DglDeleteProgramsARB_IaI;
            mDglDeleteProgramsARB_IP = GetDelegate( "glDeleteProgramsARB", typeof( DglDeleteProgramsARB_IP ), ref bglDeleteProgramsARB ) as DglDeleteProgramsARB_IP;
            mDglDeleteProgramsNV_IaI = GetDelegate( "glDeleteProgramsNV", typeof( DglDeleteProgramsNV_IaI ), ref bglDeleteProgramsNV ) as DglDeleteProgramsNV_IaI;
            mDglDeleteProgramsNV_IP = GetDelegate( "glDeleteProgramsNV", typeof( DglDeleteProgramsNV_IP ), ref bglDeleteProgramsNV ) as DglDeleteProgramsNV_IP;
            mDglDeleteQueries_IaI = GetDelegate( "glDeleteQueries", typeof( DglDeleteQueries_IaI ), ref bglDeleteQueries ) as DglDeleteQueries_IaI;
            mDglDeleteQueries_IP = GetDelegate( "glDeleteQueries", typeof( DglDeleteQueries_IP ), ref bglDeleteQueries ) as DglDeleteQueries_IP;
            mDglDeleteQueriesARB_IaI = GetDelegate( "glDeleteQueriesARB", typeof( DglDeleteQueriesARB_IaI ), ref bglDeleteQueriesARB ) as DglDeleteQueriesARB_IaI;
            mDglDeleteQueriesARB_IP = GetDelegate( "glDeleteQueriesARB", typeof( DglDeleteQueriesARB_IP ), ref bglDeleteQueriesARB ) as DglDeleteQueriesARB_IP;
            mDglDeleteRenderbuffersEXT_IaI = GetDelegate( "glDeleteRenderbuffersEXT", typeof( DglDeleteRenderbuffersEXT_IaI ), ref bglDeleteRenderbuffersEXT ) as DglDeleteRenderbuffersEXT_IaI;
            mDglDeleteRenderbuffersEXT_IP = GetDelegate( "glDeleteRenderbuffersEXT", typeof( DglDeleteRenderbuffersEXT_IP ), ref bglDeleteRenderbuffersEXT ) as DglDeleteRenderbuffersEXT_IP;
            mDglDeleteShader_I = GetDelegate( "glDeleteShader", typeof( DglDeleteShader_I ), ref bglDeleteShader ) as DglDeleteShader_I;
            mDglDeleteTextures_IaI = GetDelegate( "glDeleteTextures", typeof( DglDeleteTextures_IaI ), ref bglDeleteTextures ) as DglDeleteTextures_IaI;
            mDglDeleteTextures_IP = GetDelegate( "glDeleteTextures", typeof( DglDeleteTextures_IP ), ref bglDeleteTextures ) as DglDeleteTextures_IP;
            mDglDeleteTexturesEXT_IaI = GetDelegate( "glDeleteTexturesEXT", typeof( DglDeleteTexturesEXT_IaI ), ref bglDeleteTexturesEXT ) as DglDeleteTexturesEXT_IaI;
            mDglDeleteTexturesEXT_IP = GetDelegate( "glDeleteTexturesEXT", typeof( DglDeleteTexturesEXT_IP ), ref bglDeleteTexturesEXT ) as DglDeleteTexturesEXT_IP;
            mDglDeleteVertexArraysAPPLE_IaI = GetDelegate( "glDeleteVertexArraysAPPLE", typeof( DglDeleteVertexArraysAPPLE_IaI ), ref bglDeleteVertexArraysAPPLE ) as DglDeleteVertexArraysAPPLE_IaI;
            mDglDeleteVertexArraysAPPLE_IP = GetDelegate( "glDeleteVertexArraysAPPLE", typeof( DglDeleteVertexArraysAPPLE_IP ), ref bglDeleteVertexArraysAPPLE ) as DglDeleteVertexArraysAPPLE_IP;
            mDglDeleteVertexShaderEXT_I = GetDelegate( "glDeleteVertexShaderEXT", typeof( DglDeleteVertexShaderEXT_I ), ref bglDeleteVertexShaderEXT ) as DglDeleteVertexShaderEXT_I;
            mDglDepthBoundsEXT_DD = GetDelegate( "glDepthBoundsEXT", typeof( DglDepthBoundsEXT_DD ), ref bglDepthBoundsEXT ) as DglDepthBoundsEXT_DD;
            mDglDepthFunc_I = GetDelegate( "glDepthFunc", typeof( DglDepthFunc_I ), ref bglDepthFunc ) as DglDepthFunc_I;
            mDglDepthMask_B = GetDelegate( "glDepthMask", typeof( DglDepthMask_B ), ref bglDepthMask ) as DglDepthMask_B;
            mDglDepthRange_DD = GetDelegate( "glDepthRange", typeof( DglDepthRange_DD ), ref bglDepthRange ) as DglDepthRange_DD;
            mDglDetachObjectARB_II = GetDelegate( "glDetachObjectARB", typeof( DglDetachObjectARB_II ), ref bglDetachObjectARB ) as DglDetachObjectARB_II;
            mDglDetachShader_II = GetDelegate( "glDetachShader", typeof( DglDetachShader_II ), ref bglDetachShader ) as DglDetachShader_II;
            mDglDetailTexFuncSGIS_IIaF = GetDelegate( "glDetailTexFuncSGIS", typeof( DglDetailTexFuncSGIS_IIaF ), ref bglDetailTexFuncSGIS ) as DglDetailTexFuncSGIS_IIaF;
            mDglDetailTexFuncSGIS_IIP = GetDelegate( "glDetailTexFuncSGIS", typeof( DglDetailTexFuncSGIS_IIP ), ref bglDetailTexFuncSGIS ) as DglDetailTexFuncSGIS_IIP;
            mDglDisable_I = GetDelegate( "glDisable", typeof( DglDisable_I ), ref bglDisable ) as DglDisable_I;
            mDglDisableClientState_I = GetDelegate( "glDisableClientState", typeof( DglDisableClientState_I ), ref bglDisableClientState ) as DglDisableClientState_I;
            mDglDisableVariantClientStateEXT_I = GetDelegate( "glDisableVariantClientStateEXT", typeof( DglDisableVariantClientStateEXT_I ), ref bglDisableVariantClientStateEXT ) as DglDisableVariantClientStateEXT_I;
            mDglDisableVertexAttribArray_I = GetDelegate( "glDisableVertexAttribArray", typeof( DglDisableVertexAttribArray_I ), ref bglDisableVertexAttribArray ) as DglDisableVertexAttribArray_I;
            mDglDisableVertexAttribArrayARB_I = GetDelegate( "glDisableVertexAttribArrayARB", typeof( DglDisableVertexAttribArrayARB_I ), ref bglDisableVertexAttribArrayARB ) as DglDisableVertexAttribArrayARB_I;
            mDglDrawArrays_III = GetDelegate( "glDrawArrays", typeof( DglDrawArrays_III ), ref bglDrawArrays ) as DglDrawArrays_III;
            mDglDrawArraysEXT_III = GetDelegate( "glDrawArraysEXT", typeof( DglDrawArraysEXT_III ), ref bglDrawArraysEXT ) as DglDrawArraysEXT_III;
            mDglDrawBuffer_I = GetDelegate( "glDrawBuffer", typeof( DglDrawBuffer_I ), ref bglDrawBuffer ) as DglDrawBuffer_I;
            mDglDrawBuffers_IaI = GetDelegate( "glDrawBuffers", typeof( DglDrawBuffers_IaI ), ref bglDrawBuffers ) as DglDrawBuffers_IaI;
            mDglDrawBuffers_IP = GetDelegate( "glDrawBuffers", typeof( DglDrawBuffers_IP ), ref bglDrawBuffers ) as DglDrawBuffers_IP;
            mDglDrawBuffersARB_IaI = GetDelegate( "glDrawBuffersARB", typeof( DglDrawBuffersARB_IaI ), ref bglDrawBuffersARB ) as DglDrawBuffersARB_IaI;
            mDglDrawBuffersARB_IP = GetDelegate( "glDrawBuffersARB", typeof( DglDrawBuffersARB_IP ), ref bglDrawBuffersARB ) as DglDrawBuffersARB_IP;
            mDglDrawBuffersATI_IaI = GetDelegate( "glDrawBuffersATI", typeof( DglDrawBuffersATI_IaI ), ref bglDrawBuffersATI ) as DglDrawBuffersATI_IaI;
            mDglDrawBuffersATI_IP = GetDelegate( "glDrawBuffersATI", typeof( DglDrawBuffersATI_IP ), ref bglDrawBuffersATI ) as DglDrawBuffersATI_IP;
            mDglDrawElementArrayAPPLE_III = GetDelegate( "glDrawElementArrayAPPLE", typeof( DglDrawElementArrayAPPLE_III ), ref bglDrawElementArrayAPPLE ) as DglDrawElementArrayAPPLE_III;
            mDglDrawElementArrayATI_II = GetDelegate( "glDrawElementArrayATI", typeof( DglDrawElementArrayATI_II ), ref bglDrawElementArrayATI ) as DglDrawElementArrayATI_II;
            mDglDrawElements_IIIaB = GetDelegate( "glDrawElements", typeof( DglDrawElements_IIIaB ), ref bglDrawElements ) as DglDrawElements_IIIaB;
            mDglDrawElements_IIIaH = GetDelegate( "glDrawElements", typeof( DglDrawElements_IIIaH ), ref bglDrawElements ) as DglDrawElements_IIIaH;
            mDglDrawElements_IIIaI = GetDelegate( "glDrawElements", typeof( DglDrawElements_IIIaI ), ref bglDrawElements ) as DglDrawElements_IIIaI;
            mDglDrawElements_IIIP = GetDelegate( "glDrawElements", typeof( DglDrawElements_IIIP ), ref bglDrawElements ) as DglDrawElements_IIIP;
            mDglDrawMeshArraysSUN_IIII = GetDelegate( "glDrawMeshArraysSUN", typeof( DglDrawMeshArraysSUN_IIII ), ref bglDrawMeshArraysSUN ) as DglDrawMeshArraysSUN_IIII;
            mDglDrawPixels_IIIIaB = GetDelegate( "glDrawPixels", typeof( DglDrawPixels_IIIIaB ), ref bglDrawPixels ) as DglDrawPixels_IIIIaB;
            mDglDrawPixels_IIIIaH = GetDelegate( "glDrawPixels", typeof( DglDrawPixels_IIIIaH ), ref bglDrawPixels ) as DglDrawPixels_IIIIaH;
            mDglDrawPixels_IIIIaI = GetDelegate( "glDrawPixels", typeof( DglDrawPixels_IIIIaI ), ref bglDrawPixels ) as DglDrawPixels_IIIIaI;
            mDglDrawPixels_IIIIaF = GetDelegate( "glDrawPixels", typeof( DglDrawPixels_IIIIaF ), ref bglDrawPixels ) as DglDrawPixels_IIIIaF;
            mDglDrawPixels_IIIIP = GetDelegate( "glDrawPixels", typeof( DglDrawPixels_IIIIP ), ref bglDrawPixels ) as DglDrawPixels_IIIIP;
            mDglDrawRangeElementArrayAPPLE_IIIII = GetDelegate( "glDrawRangeElementArrayAPPLE", typeof( DglDrawRangeElementArrayAPPLE_IIIII ), ref bglDrawRangeElementArrayAPPLE ) as DglDrawRangeElementArrayAPPLE_IIIII;
            mDglDrawRangeElementArrayATI_IIII = GetDelegate( "glDrawRangeElementArrayATI", typeof( DglDrawRangeElementArrayATI_IIII ), ref bglDrawRangeElementArrayATI ) as DglDrawRangeElementArrayATI_IIII;
            mDglDrawRangeElements_IIIIIaB = GetDelegate( "glDrawRangeElements", typeof( DglDrawRangeElements_IIIIIaB ), ref bglDrawRangeElements ) as DglDrawRangeElements_IIIIIaB;
            mDglDrawRangeElements_IIIIIaH = GetDelegate( "glDrawRangeElements", typeof( DglDrawRangeElements_IIIIIaH ), ref bglDrawRangeElements ) as DglDrawRangeElements_IIIIIaH;
            mDglDrawRangeElements_IIIIIaI = GetDelegate( "glDrawRangeElements", typeof( DglDrawRangeElements_IIIIIaI ), ref bglDrawRangeElements ) as DglDrawRangeElements_IIIIIaI;
            mDglDrawRangeElements_IIIIIP = GetDelegate( "glDrawRangeElements", typeof( DglDrawRangeElements_IIIIIP ), ref bglDrawRangeElements ) as DglDrawRangeElements_IIIIIP;
            mDglDrawRangeElementsEXT_IIIIIaB = GetDelegate( "glDrawRangeElementsEXT", typeof( DglDrawRangeElementsEXT_IIIIIaB ), ref bglDrawRangeElementsEXT ) as DglDrawRangeElementsEXT_IIIIIaB;
            mDglDrawRangeElementsEXT_IIIIIaH = GetDelegate( "glDrawRangeElementsEXT", typeof( DglDrawRangeElementsEXT_IIIIIaH ), ref bglDrawRangeElementsEXT ) as DglDrawRangeElementsEXT_IIIIIaH;
            mDglDrawRangeElementsEXT_IIIIIaI = GetDelegate( "glDrawRangeElementsEXT", typeof( DglDrawRangeElementsEXT_IIIIIaI ), ref bglDrawRangeElementsEXT ) as DglDrawRangeElementsEXT_IIIIIaI;
            mDglDrawRangeElementsEXT_IIIIIP = GetDelegate( "glDrawRangeElementsEXT", typeof( DglDrawRangeElementsEXT_IIIIIP ), ref bglDrawRangeElementsEXT ) as DglDrawRangeElementsEXT_IIIIIP;
            mDglDrawRangeElementsWIN_IIIIIaB = GetDelegate( "glDrawRangeElementsWIN", typeof( DglDrawRangeElementsWIN_IIIIIaB ), ref bglDrawRangeElementsWIN ) as DglDrawRangeElementsWIN_IIIIIaB;
            mDglDrawRangeElementsWIN_IIIIIaH = GetDelegate( "glDrawRangeElementsWIN", typeof( DglDrawRangeElementsWIN_IIIIIaH ), ref bglDrawRangeElementsWIN ) as DglDrawRangeElementsWIN_IIIIIaH;
            mDglDrawRangeElementsWIN_IIIIIaI = GetDelegate( "glDrawRangeElementsWIN", typeof( DglDrawRangeElementsWIN_IIIIIaI ), ref bglDrawRangeElementsWIN ) as DglDrawRangeElementsWIN_IIIIIaI;
            mDglDrawRangeElementsWIN_IIIIIP = GetDelegate( "glDrawRangeElementsWIN", typeof( DglDrawRangeElementsWIN_IIIIIP ), ref bglDrawRangeElementsWIN ) as DglDrawRangeElementsWIN_IIIIIP;
            mDglEdgeFlag_B = GetDelegate( "glEdgeFlag", typeof( DglEdgeFlag_B ), ref bglEdgeFlag ) as DglEdgeFlag_B;
            mDglEdgeFlagPointer_IaB = GetDelegate( "glEdgeFlagPointer", typeof( DglEdgeFlagPointer_IaB ), ref bglEdgeFlagPointer ) as DglEdgeFlagPointer_IaB;
            mDglEdgeFlagPointer_IP = GetDelegate( "glEdgeFlagPointer", typeof( DglEdgeFlagPointer_IP ), ref bglEdgeFlagPointer ) as DglEdgeFlagPointer_IP;
            mDglEdgeFlagPointerEXT_IIaB = GetDelegate( "glEdgeFlagPointerEXT", typeof( DglEdgeFlagPointerEXT_IIaB ), ref bglEdgeFlagPointerEXT ) as DglEdgeFlagPointerEXT_IIaB;
            mDglEdgeFlagPointerEXT_IIP = GetDelegate( "glEdgeFlagPointerEXT", typeof( DglEdgeFlagPointerEXT_IIP ), ref bglEdgeFlagPointerEXT ) as DglEdgeFlagPointerEXT_IIP;
            mDglEdgeFlagPointerListIBM_IrPI = GetDelegate( "glEdgeFlagPointerListIBM", typeof( DglEdgeFlagPointerListIBM_IrPI ), ref bglEdgeFlagPointerListIBM ) as DglEdgeFlagPointerListIBM_IrPI;
            mDglEdgeFlagv_aB = GetDelegate( "glEdgeFlagv", typeof( DglEdgeFlagv_aB ), ref bglEdgeFlagv ) as DglEdgeFlagv_aB;
            mDglEdgeFlagv_P = GetDelegate( "glEdgeFlagv", typeof( DglEdgeFlagv_P ), ref bglEdgeFlagv ) as DglEdgeFlagv_P;
            mDglElementPointerAPPLE_IaB = GetDelegate( "glElementPointerAPPLE", typeof( DglElementPointerAPPLE_IaB ), ref bglElementPointerAPPLE ) as DglElementPointerAPPLE_IaB;
            mDglElementPointerAPPLE_IP = GetDelegate( "glElementPointerAPPLE", typeof( DglElementPointerAPPLE_IP ), ref bglElementPointerAPPLE ) as DglElementPointerAPPLE_IP;
            mDglElementPointerATI_IaB = GetDelegate( "glElementPointerATI", typeof( DglElementPointerATI_IaB ), ref bglElementPointerATI ) as DglElementPointerATI_IaB;
            mDglElementPointerATI_IP = GetDelegate( "glElementPointerATI", typeof( DglElementPointerATI_IP ), ref bglElementPointerATI ) as DglElementPointerATI_IP;
            mDglEnable_I = GetDelegate( "glEnable", typeof( DglEnable_I ), ref bglEnable ) as DglEnable_I;
            mDglEnableClientState_I = GetDelegate( "glEnableClientState", typeof( DglEnableClientState_I ), ref bglEnableClientState ) as DglEnableClientState_I;
            mDglEnableVariantClientStateEXT_I = GetDelegate( "glEnableVariantClientStateEXT", typeof( DglEnableVariantClientStateEXT_I ), ref bglEnableVariantClientStateEXT ) as DglEnableVariantClientStateEXT_I;
            mDglEnableVertexAttribArray_I = GetDelegate( "glEnableVertexAttribArray", typeof( DglEnableVertexAttribArray_I ), ref bglEnableVertexAttribArray ) as DglEnableVertexAttribArray_I;
            mDglEnableVertexAttribArrayARB_I = GetDelegate( "glEnableVertexAttribArrayARB", typeof( DglEnableVertexAttribArrayARB_I ), ref bglEnableVertexAttribArrayARB ) as DglEnableVertexAttribArrayARB_I;
            mDglEnd_V = GetDelegate( "glEnd", typeof( DglEnd_V ), ref bglEnd ) as DglEnd_V;
            mDglEndFragmentShaderATI_V = GetDelegate( "glEndFragmentShaderATI", typeof( DglEndFragmentShaderATI_V ), ref bglEndFragmentShaderATI ) as DglEndFragmentShaderATI_V;
            mDglEndList_V = GetDelegate( "glEndList", typeof( DglEndList_V ), ref bglEndList ) as DglEndList_V;
            mDglEndOcclusionQueryNV_V = GetDelegate( "glEndOcclusionQueryNV", typeof( DglEndOcclusionQueryNV_V ), ref bglEndOcclusionQueryNV ) as DglEndOcclusionQueryNV_V;
            mDglEndQuery_I = GetDelegate( "glEndQuery", typeof( DglEndQuery_I ), ref bglEndQuery ) as DglEndQuery_I;
            mDglEndQueryARB_I = GetDelegate( "glEndQueryARB", typeof( DglEndQueryARB_I ), ref bglEndQueryARB ) as DglEndQueryARB_I;
            mDglEndVertexShaderEXT_V = GetDelegate( "glEndVertexShaderEXT", typeof( DglEndVertexShaderEXT_V ), ref bglEndVertexShaderEXT ) as DglEndVertexShaderEXT_V;
            mDglEvalCoord1d_D = GetDelegate( "glEvalCoord1d", typeof( DglEvalCoord1d_D ), ref bglEvalCoord1d ) as DglEvalCoord1d_D;
            mDglEvalCoord1dv_aD = GetDelegate( "glEvalCoord1dv", typeof( DglEvalCoord1dv_aD ), ref bglEvalCoord1dv ) as DglEvalCoord1dv_aD;
            mDglEvalCoord1dv_P = GetDelegate( "glEvalCoord1dv", typeof( DglEvalCoord1dv_P ), ref bglEvalCoord1dv ) as DglEvalCoord1dv_P;
            mDglEvalCoord1f_F = GetDelegate( "glEvalCoord1f", typeof( DglEvalCoord1f_F ), ref bglEvalCoord1f ) as DglEvalCoord1f_F;
            mDglEvalCoord1fv_aF = GetDelegate( "glEvalCoord1fv", typeof( DglEvalCoord1fv_aF ), ref bglEvalCoord1fv ) as DglEvalCoord1fv_aF;
            mDglEvalCoord1fv_P = GetDelegate( "glEvalCoord1fv", typeof( DglEvalCoord1fv_P ), ref bglEvalCoord1fv ) as DglEvalCoord1fv_P;
            mDglEvalCoord2d_DD = GetDelegate( "glEvalCoord2d", typeof( DglEvalCoord2d_DD ), ref bglEvalCoord2d ) as DglEvalCoord2d_DD;
            mDglEvalCoord2dv_aD = GetDelegate( "glEvalCoord2dv", typeof( DglEvalCoord2dv_aD ), ref bglEvalCoord2dv ) as DglEvalCoord2dv_aD;
            mDglEvalCoord2dv_P = GetDelegate( "glEvalCoord2dv", typeof( DglEvalCoord2dv_P ), ref bglEvalCoord2dv ) as DglEvalCoord2dv_P;
            mDglEvalCoord2f_FF = GetDelegate( "glEvalCoord2f", typeof( DglEvalCoord2f_FF ), ref bglEvalCoord2f ) as DglEvalCoord2f_FF;
            mDglEvalCoord2fv_aF = GetDelegate( "glEvalCoord2fv", typeof( DglEvalCoord2fv_aF ), ref bglEvalCoord2fv ) as DglEvalCoord2fv_aF;
            mDglEvalCoord2fv_P = GetDelegate( "glEvalCoord2fv", typeof( DglEvalCoord2fv_P ), ref bglEvalCoord2fv ) as DglEvalCoord2fv_P;
            mDglEvalMapsNV_II = GetDelegate( "glEvalMapsNV", typeof( DglEvalMapsNV_II ), ref bglEvalMapsNV ) as DglEvalMapsNV_II;
            mDglEvalMesh1_III = GetDelegate( "glEvalMesh1", typeof( DglEvalMesh1_III ), ref bglEvalMesh1 ) as DglEvalMesh1_III;
            mDglEvalMesh2_IIIII = GetDelegate( "glEvalMesh2", typeof( DglEvalMesh2_IIIII ), ref bglEvalMesh2 ) as DglEvalMesh2_IIIII;
            mDglEvalPoint1_I = GetDelegate( "glEvalPoint1", typeof( DglEvalPoint1_I ), ref bglEvalPoint1 ) as DglEvalPoint1_I;
            mDglEvalPoint2_II = GetDelegate( "glEvalPoint2", typeof( DglEvalPoint2_II ), ref bglEvalPoint2 ) as DglEvalPoint2_II;
            mDglExecuteProgramNV_IIaF = GetDelegate( "glExecuteProgramNV", typeof( DglExecuteProgramNV_IIaF ), ref bglExecuteProgramNV ) as DglExecuteProgramNV_IIaF;
            mDglExecuteProgramNV_IIP = GetDelegate( "glExecuteProgramNV", typeof( DglExecuteProgramNV_IIP ), ref bglExecuteProgramNV ) as DglExecuteProgramNV_IIP;
            mDglExtractComponentEXT_III = GetDelegate( "glExtractComponentEXT", typeof( DglExtractComponentEXT_III ), ref bglExtractComponentEXT ) as DglExtractComponentEXT_III;
            mDglFeedbackBuffer_IIaF = GetDelegate( "glFeedbackBuffer", typeof( DglFeedbackBuffer_IIaF ), ref bglFeedbackBuffer ) as DglFeedbackBuffer_IIaF;
            mDglFeedbackBuffer_IIP = GetDelegate( "glFeedbackBuffer", typeof( DglFeedbackBuffer_IIP ), ref bglFeedbackBuffer ) as DglFeedbackBuffer_IIP;
            mDglFinalCombinerInputNV_IIII = GetDelegate( "glFinalCombinerInputNV", typeof( DglFinalCombinerInputNV_IIII ), ref bglFinalCombinerInputNV ) as DglFinalCombinerInputNV_IIII;
            mDglFinish_V = GetDelegate( "glFinish", typeof( DglFinish_V ), ref bglFinish ) as DglFinish_V;
            mDglFinishAsyncSGIX_rI = GetDelegate( "glFinishAsyncSGIX", typeof( DglFinishAsyncSGIX_rI ), ref bglFinishAsyncSGIX ) as DglFinishAsyncSGIX_rI;
            mDglFinishFenceAPPLE_I = GetDelegate( "glFinishFenceAPPLE", typeof( DglFinishFenceAPPLE_I ), ref bglFinishFenceAPPLE ) as DglFinishFenceAPPLE_I;
            mDglFinishFenceNV_I = GetDelegate( "glFinishFenceNV", typeof( DglFinishFenceNV_I ), ref bglFinishFenceNV ) as DglFinishFenceNV_I;
            mDglFinishObjectAPPLE_II = GetDelegate( "glFinishObjectAPPLE", typeof( DglFinishObjectAPPLE_II ), ref bglFinishObjectAPPLE ) as DglFinishObjectAPPLE_II;
            mDglFinishTextureSUNX_V = GetDelegate( "glFinishTextureSUNX", typeof( DglFinishTextureSUNX_V ), ref bglFinishTextureSUNX ) as DglFinishTextureSUNX_V;
            mDglFlush_V = GetDelegate( "glFlush", typeof( DglFlush_V ), ref bglFlush ) as DglFlush_V;
            mDglFlushPixelDataRangeNV_I = GetDelegate( "glFlushPixelDataRangeNV", typeof( DglFlushPixelDataRangeNV_I ), ref bglFlushPixelDataRangeNV ) as DglFlushPixelDataRangeNV_I;
            mDglFlushRasterSGIX_V = GetDelegate( "glFlushRasterSGIX", typeof( DglFlushRasterSGIX_V ), ref bglFlushRasterSGIX ) as DglFlushRasterSGIX_V;
            mDglFlushVertexArrayRangeAPPLE_IaB = GetDelegate( "glFlushVertexArrayRangeAPPLE", typeof( DglFlushVertexArrayRangeAPPLE_IaB ), ref bglFlushVertexArrayRangeAPPLE ) as DglFlushVertexArrayRangeAPPLE_IaB;
            mDglFlushVertexArrayRangeAPPLE_IP = GetDelegate( "glFlushVertexArrayRangeAPPLE", typeof( DglFlushVertexArrayRangeAPPLE_IP ), ref bglFlushVertexArrayRangeAPPLE ) as DglFlushVertexArrayRangeAPPLE_IP;
            mDglFlushVertexArrayRangeNV_V = GetDelegate( "glFlushVertexArrayRangeNV", typeof( DglFlushVertexArrayRangeNV_V ), ref bglFlushVertexArrayRangeNV ) as DglFlushVertexArrayRangeNV_V;
            mDglFogCoordd_D = GetDelegate( "glFogCoordd", typeof( DglFogCoordd_D ), ref bglFogCoordd ) as DglFogCoordd_D;
            mDglFogCoorddEXT_D = GetDelegate( "glFogCoorddEXT", typeof( DglFogCoorddEXT_D ), ref bglFogCoorddEXT ) as DglFogCoorddEXT_D;
            mDglFogCoorddv_aD = GetDelegate( "glFogCoorddv", typeof( DglFogCoorddv_aD ), ref bglFogCoorddv ) as DglFogCoorddv_aD;
            mDglFogCoorddv_P = GetDelegate( "glFogCoorddv", typeof( DglFogCoorddv_P ), ref bglFogCoorddv ) as DglFogCoorddv_P;
            mDglFogCoorddvEXT_aD = GetDelegate( "glFogCoorddvEXT", typeof( DglFogCoorddvEXT_aD ), ref bglFogCoorddvEXT ) as DglFogCoorddvEXT_aD;
            mDglFogCoorddvEXT_P = GetDelegate( "glFogCoorddvEXT", typeof( DglFogCoorddvEXT_P ), ref bglFogCoorddvEXT ) as DglFogCoorddvEXT_P;
            mDglFogCoordf_F = GetDelegate( "glFogCoordf", typeof( DglFogCoordf_F ), ref bglFogCoordf ) as DglFogCoordf_F;
            mDglFogCoordfEXT_F = GetDelegate( "glFogCoordfEXT", typeof( DglFogCoordfEXT_F ), ref bglFogCoordfEXT ) as DglFogCoordfEXT_F;
            mDglFogCoordfv_aF = GetDelegate( "glFogCoordfv", typeof( DglFogCoordfv_aF ), ref bglFogCoordfv ) as DglFogCoordfv_aF;
            mDglFogCoordfv_P = GetDelegate( "glFogCoordfv", typeof( DglFogCoordfv_P ), ref bglFogCoordfv ) as DglFogCoordfv_P;
            mDglFogCoordfvEXT_aF = GetDelegate( "glFogCoordfvEXT", typeof( DglFogCoordfvEXT_aF ), ref bglFogCoordfvEXT ) as DglFogCoordfvEXT_aF;
            mDglFogCoordfvEXT_P = GetDelegate( "glFogCoordfvEXT", typeof( DglFogCoordfvEXT_P ), ref bglFogCoordfvEXT ) as DglFogCoordfvEXT_P;
            mDglFogCoordhNV_H = GetDelegate( "glFogCoordhNV", typeof( DglFogCoordhNV_H ), ref bglFogCoordhNV ) as DglFogCoordhNV_H;
            mDglFogCoordhvNV_aH = GetDelegate( "glFogCoordhvNV", typeof( DglFogCoordhvNV_aH ), ref bglFogCoordhvNV ) as DglFogCoordhvNV_aH;
            mDglFogCoordhvNV_P = GetDelegate( "glFogCoordhvNV", typeof( DglFogCoordhvNV_P ), ref bglFogCoordhvNV ) as DglFogCoordhvNV_P;
            mDglFogCoordPointer_IIaF = GetDelegate( "glFogCoordPointer", typeof( DglFogCoordPointer_IIaF ), ref bglFogCoordPointer ) as DglFogCoordPointer_IIaF;
            mDglFogCoordPointer_IIaD = GetDelegate( "glFogCoordPointer", typeof( DglFogCoordPointer_IIaD ), ref bglFogCoordPointer ) as DglFogCoordPointer_IIaD;
            mDglFogCoordPointer_IIP = GetDelegate( "glFogCoordPointer", typeof( DglFogCoordPointer_IIP ), ref bglFogCoordPointer ) as DglFogCoordPointer_IIP;
            mDglFogCoordPointerEXT_IIaF = GetDelegate( "glFogCoordPointerEXT", typeof( DglFogCoordPointerEXT_IIaF ), ref bglFogCoordPointerEXT ) as DglFogCoordPointerEXT_IIaF;
            mDglFogCoordPointerEXT_IIaD = GetDelegate( "glFogCoordPointerEXT", typeof( DglFogCoordPointerEXT_IIaD ), ref bglFogCoordPointerEXT ) as DglFogCoordPointerEXT_IIaD;
            mDglFogCoordPointerEXT_IIP = GetDelegate( "glFogCoordPointerEXT", typeof( DglFogCoordPointerEXT_IIP ), ref bglFogCoordPointerEXT ) as DglFogCoordPointerEXT_IIP;
            mDglFogCoordPointerListIBM_IIrPI = GetDelegate( "glFogCoordPointerListIBM", typeof( DglFogCoordPointerListIBM_IIrPI ), ref bglFogCoordPointerListIBM ) as DglFogCoordPointerListIBM_IIrPI;
            mDglFogf_IF = GetDelegate( "glFogf", typeof( DglFogf_IF ), ref bglFogf ) as DglFogf_IF;
            mDglFogFuncSGIS_IaF = GetDelegate( "glFogFuncSGIS", typeof( DglFogFuncSGIS_IaF ), ref bglFogFuncSGIS ) as DglFogFuncSGIS_IaF;
            mDglFogFuncSGIS_IP = GetDelegate( "glFogFuncSGIS", typeof( DglFogFuncSGIS_IP ), ref bglFogFuncSGIS ) as DglFogFuncSGIS_IP;
            mDglFogfv_IaF = GetDelegate( "glFogfv", typeof( DglFogfv_IaF ), ref bglFogfv ) as DglFogfv_IaF;
            mDglFogfv_IP = GetDelegate( "glFogfv", typeof( DglFogfv_IP ), ref bglFogfv ) as DglFogfv_IP;
            mDglFogi_II = GetDelegate( "glFogi", typeof( DglFogi_II ), ref bglFogi ) as DglFogi_II;
            mDglFogiv_IaI = GetDelegate( "glFogiv", typeof( DglFogiv_IaI ), ref bglFogiv ) as DglFogiv_IaI;
            mDglFogiv_IP = GetDelegate( "glFogiv", typeof( DglFogiv_IP ), ref bglFogiv ) as DglFogiv_IP;
            mDglFragmentColorMaterialSGIX_II = GetDelegate( "glFragmentColorMaterialSGIX", typeof( DglFragmentColorMaterialSGIX_II ), ref bglFragmentColorMaterialSGIX ) as DglFragmentColorMaterialSGIX_II;
            mDglFragmentLightfSGIX_IIF = GetDelegate( "glFragmentLightfSGIX", typeof( DglFragmentLightfSGIX_IIF ), ref bglFragmentLightfSGIX ) as DglFragmentLightfSGIX_IIF;
            mDglFragmentLightfvSGIX_IIaF = GetDelegate( "glFragmentLightfvSGIX", typeof( DglFragmentLightfvSGIX_IIaF ), ref bglFragmentLightfvSGIX ) as DglFragmentLightfvSGIX_IIaF;
            mDglFragmentLightfvSGIX_IIP = GetDelegate( "glFragmentLightfvSGIX", typeof( DglFragmentLightfvSGIX_IIP ), ref bglFragmentLightfvSGIX ) as DglFragmentLightfvSGIX_IIP;
            mDglFragmentLightiSGIX_III = GetDelegate( "glFragmentLightiSGIX", typeof( DglFragmentLightiSGIX_III ), ref bglFragmentLightiSGIX ) as DglFragmentLightiSGIX_III;
            mDglFragmentLightivSGIX_IIaI = GetDelegate( "glFragmentLightivSGIX", typeof( DglFragmentLightivSGIX_IIaI ), ref bglFragmentLightivSGIX ) as DglFragmentLightivSGIX_IIaI;
            mDglFragmentLightivSGIX_IIP = GetDelegate( "glFragmentLightivSGIX", typeof( DglFragmentLightivSGIX_IIP ), ref bglFragmentLightivSGIX ) as DglFragmentLightivSGIX_IIP;
            mDglFragmentLightModelfSGIX_IF = GetDelegate( "glFragmentLightModelfSGIX", typeof( DglFragmentLightModelfSGIX_IF ), ref bglFragmentLightModelfSGIX ) as DglFragmentLightModelfSGIX_IF;
            mDglFragmentLightModelfvSGIX_IaF = GetDelegate( "glFragmentLightModelfvSGIX", typeof( DglFragmentLightModelfvSGIX_IaF ), ref bglFragmentLightModelfvSGIX ) as DglFragmentLightModelfvSGIX_IaF;
            mDglFragmentLightModelfvSGIX_IP = GetDelegate( "glFragmentLightModelfvSGIX", typeof( DglFragmentLightModelfvSGIX_IP ), ref bglFragmentLightModelfvSGIX ) as DglFragmentLightModelfvSGIX_IP;
            mDglFragmentLightModeliSGIX_II = GetDelegate( "glFragmentLightModeliSGIX", typeof( DglFragmentLightModeliSGIX_II ), ref bglFragmentLightModeliSGIX ) as DglFragmentLightModeliSGIX_II;
            mDglFragmentLightModelivSGIX_IaI = GetDelegate( "glFragmentLightModelivSGIX", typeof( DglFragmentLightModelivSGIX_IaI ), ref bglFragmentLightModelivSGIX ) as DglFragmentLightModelivSGIX_IaI;
            mDglFragmentLightModelivSGIX_IP = GetDelegate( "glFragmentLightModelivSGIX", typeof( DglFragmentLightModelivSGIX_IP ), ref bglFragmentLightModelivSGIX ) as DglFragmentLightModelivSGIX_IP;
            mDglFragmentMaterialfSGIX_IIF = GetDelegate( "glFragmentMaterialfSGIX", typeof( DglFragmentMaterialfSGIX_IIF ), ref bglFragmentMaterialfSGIX ) as DglFragmentMaterialfSGIX_IIF;
            mDglFragmentMaterialfvSGIX_IIaF = GetDelegate( "glFragmentMaterialfvSGIX", typeof( DglFragmentMaterialfvSGIX_IIaF ), ref bglFragmentMaterialfvSGIX ) as DglFragmentMaterialfvSGIX_IIaF;
            mDglFragmentMaterialfvSGIX_IIP = GetDelegate( "glFragmentMaterialfvSGIX", typeof( DglFragmentMaterialfvSGIX_IIP ), ref bglFragmentMaterialfvSGIX ) as DglFragmentMaterialfvSGIX_IIP;
            mDglFragmentMaterialiSGIX_III = GetDelegate( "glFragmentMaterialiSGIX", typeof( DglFragmentMaterialiSGIX_III ), ref bglFragmentMaterialiSGIX ) as DglFragmentMaterialiSGIX_III;
            mDglFragmentMaterialivSGIX_IIaI = GetDelegate( "glFragmentMaterialivSGIX", typeof( DglFragmentMaterialivSGIX_IIaI ), ref bglFragmentMaterialivSGIX ) as DglFragmentMaterialivSGIX_IIaI;
            mDglFragmentMaterialivSGIX_IIP = GetDelegate( "glFragmentMaterialivSGIX", typeof( DglFragmentMaterialivSGIX_IIP ), ref bglFragmentMaterialivSGIX ) as DglFragmentMaterialivSGIX_IIP;
            mDglFramebufferRenderbufferEXT_IIII = GetDelegate( "glFramebufferRenderbufferEXT", typeof( DglFramebufferRenderbufferEXT_IIII ), ref bglFramebufferRenderbufferEXT ) as DglFramebufferRenderbufferEXT_IIII;
            mDglFramebufferTexture1DEXT_IIIII = GetDelegate( "glFramebufferTexture1DEXT", typeof( DglFramebufferTexture1DEXT_IIIII ), ref bglFramebufferTexture1DEXT ) as DglFramebufferTexture1DEXT_IIIII;
            mDglFramebufferTexture2DEXT_IIIII = GetDelegate( "glFramebufferTexture2DEXT", typeof( DglFramebufferTexture2DEXT_IIIII ), ref bglFramebufferTexture2DEXT ) as DglFramebufferTexture2DEXT_IIIII;
            mDglFramebufferTexture3DEXT_IIIIII = GetDelegate( "glFramebufferTexture3DEXT", typeof( DglFramebufferTexture3DEXT_IIIIII ), ref bglFramebufferTexture3DEXT ) as DglFramebufferTexture3DEXT_IIIIII;
            mDglFrameZoomSGIX_I = GetDelegate( "glFrameZoomSGIX", typeof( DglFrameZoomSGIX_I ), ref bglFrameZoomSGIX ) as DglFrameZoomSGIX_I;
            mDglFreeObjectBufferATI_I = GetDelegate( "glFreeObjectBufferATI", typeof( DglFreeObjectBufferATI_I ), ref bglFreeObjectBufferATI ) as DglFreeObjectBufferATI_I;
            mDglFrontFace_I = GetDelegate( "glFrontFace", typeof( DglFrontFace_I ), ref bglFrontFace ) as DglFrontFace_I;
            mDglFrustum_DDDDDD = GetDelegate( "glFrustum", typeof( DglFrustum_DDDDDD ), ref bglFrustum ) as DglFrustum_DDDDDD;
            mDglGenAsyncMarkersSGIX_I = GetDelegate( "glGenAsyncMarkersSGIX", typeof( DglGenAsyncMarkersSGIX_I ), ref bglGenAsyncMarkersSGIX ) as DglGenAsyncMarkersSGIX_I;
            mDglGenBuffers_IaI = GetDelegate( "glGenBuffers", typeof( DglGenBuffers_IaI ), ref bglGenBuffers ) as DglGenBuffers_IaI;
            mDglGenBuffers_IP = GetDelegate( "glGenBuffers", typeof( DglGenBuffers_IP ), ref bglGenBuffers ) as DglGenBuffers_IP;
            mDglGenBuffersARB_IaI = GetDelegate( "glGenBuffersARB", typeof( DglGenBuffersARB_IaI ), ref bglGenBuffersARB ) as DglGenBuffersARB_IaI;
            mDglGenBuffersARB_IP = GetDelegate( "glGenBuffersARB", typeof( DglGenBuffersARB_IP ), ref bglGenBuffersARB ) as DglGenBuffersARB_IP;
            mDglGenerateMipmapEXT_I = GetDelegate( "glGenerateMipmapEXT", typeof( DglGenerateMipmapEXT_I ), ref bglGenerateMipmapEXT ) as DglGenerateMipmapEXT_I;
            mDglGenFencesAPPLE_IaI = GetDelegate( "glGenFencesAPPLE", typeof( DglGenFencesAPPLE_IaI ), ref bglGenFencesAPPLE ) as DglGenFencesAPPLE_IaI;
            mDglGenFencesAPPLE_IP = GetDelegate( "glGenFencesAPPLE", typeof( DglGenFencesAPPLE_IP ), ref bglGenFencesAPPLE ) as DglGenFencesAPPLE_IP;
            mDglGenFencesNV_IaI = GetDelegate( "glGenFencesNV", typeof( DglGenFencesNV_IaI ), ref bglGenFencesNV ) as DglGenFencesNV_IaI;
            mDglGenFencesNV_IP = GetDelegate( "glGenFencesNV", typeof( DglGenFencesNV_IP ), ref bglGenFencesNV ) as DglGenFencesNV_IP;
            mDglGenFragmentShadersATI_I = GetDelegate( "glGenFragmentShadersATI", typeof( DglGenFragmentShadersATI_I ), ref bglGenFragmentShadersATI ) as DglGenFragmentShadersATI_I;
            mDglGenFramebuffersEXT_IaI = GetDelegate( "glGenFramebuffersEXT", typeof( DglGenFramebuffersEXT_IaI ), ref bglGenFramebuffersEXT ) as DglGenFramebuffersEXT_IaI;
            mDglGenFramebuffersEXT_IP = GetDelegate( "glGenFramebuffersEXT", typeof( DglGenFramebuffersEXT_IP ), ref bglGenFramebuffersEXT ) as DglGenFramebuffersEXT_IP;
            mDglGenLists_I = GetDelegate( "glGenLists", typeof( DglGenLists_I ), ref bglGenLists ) as DglGenLists_I;
            mDglGenOcclusionQueriesNV_IaI = GetDelegate( "glGenOcclusionQueriesNV", typeof( DglGenOcclusionQueriesNV_IaI ), ref bglGenOcclusionQueriesNV ) as DglGenOcclusionQueriesNV_IaI;
            mDglGenOcclusionQueriesNV_IP = GetDelegate( "glGenOcclusionQueriesNV", typeof( DglGenOcclusionQueriesNV_IP ), ref bglGenOcclusionQueriesNV ) as DglGenOcclusionQueriesNV_IP;
            mDglGenProgramsARB_IaI = GetDelegate( "glGenProgramsARB", typeof( DglGenProgramsARB_IaI ), ref bglGenProgramsARB ) as DglGenProgramsARB_IaI;
            mDglGenProgramsARB_IP = GetDelegate( "glGenProgramsARB", typeof( DglGenProgramsARB_IP ), ref bglGenProgramsARB ) as DglGenProgramsARB_IP;
            mDglGenProgramsNV_IaI = GetDelegate( "glGenProgramsNV", typeof( DglGenProgramsNV_IaI ), ref bglGenProgramsNV ) as DglGenProgramsNV_IaI;
            mDglGenProgramsNV_IP = GetDelegate( "glGenProgramsNV", typeof( DglGenProgramsNV_IP ), ref bglGenProgramsNV ) as DglGenProgramsNV_IP;
            mDglGenQueries_IaI = GetDelegate( "glGenQueries", typeof( DglGenQueries_IaI ), ref bglGenQueries ) as DglGenQueries_IaI;
            mDglGenQueries_IP = GetDelegate( "glGenQueries", typeof( DglGenQueries_IP ), ref bglGenQueries ) as DglGenQueries_IP;
            mDglGenQueriesARB_IaI = GetDelegate( "glGenQueriesARB", typeof( DglGenQueriesARB_IaI ), ref bglGenQueriesARB ) as DglGenQueriesARB_IaI;
            mDglGenQueriesARB_IP = GetDelegate( "glGenQueriesARB", typeof( DglGenQueriesARB_IP ), ref bglGenQueriesARB ) as DglGenQueriesARB_IP;
            mDglGenRenderbuffersEXT_IaI = GetDelegate( "glGenRenderbuffersEXT", typeof( DglGenRenderbuffersEXT_IaI ), ref bglGenRenderbuffersEXT ) as DglGenRenderbuffersEXT_IaI;
            mDglGenRenderbuffersEXT_IP = GetDelegate( "glGenRenderbuffersEXT", typeof( DglGenRenderbuffersEXT_IP ), ref bglGenRenderbuffersEXT ) as DglGenRenderbuffersEXT_IP;
            mDglGenSymbolsEXT_IIII = GetDelegate( "glGenSymbolsEXT", typeof( DglGenSymbolsEXT_IIII ), ref bglGenSymbolsEXT ) as DglGenSymbolsEXT_IIII;
            mDglGenTextures_IaI = GetDelegate( "glGenTextures", typeof( DglGenTextures_IaI ), ref bglGenTextures ) as DglGenTextures_IaI;
            mDglGenTextures_IP = GetDelegate( "glGenTextures", typeof( DglGenTextures_IP ), ref bglGenTextures ) as DglGenTextures_IP;
            mDglGenTexturesEXT_IaI = GetDelegate( "glGenTexturesEXT", typeof( DglGenTexturesEXT_IaI ), ref bglGenTexturesEXT ) as DglGenTexturesEXT_IaI;
            mDglGenTexturesEXT_IP = GetDelegate( "glGenTexturesEXT", typeof( DglGenTexturesEXT_IP ), ref bglGenTexturesEXT ) as DglGenTexturesEXT_IP;
            mDglGenVertexArraysAPPLE_IaI = GetDelegate( "glGenVertexArraysAPPLE", typeof( DglGenVertexArraysAPPLE_IaI ), ref bglGenVertexArraysAPPLE ) as DglGenVertexArraysAPPLE_IaI;
            mDglGenVertexArraysAPPLE_IP = GetDelegate( "glGenVertexArraysAPPLE", typeof( DglGenVertexArraysAPPLE_IP ), ref bglGenVertexArraysAPPLE ) as DglGenVertexArraysAPPLE_IP;
            mDglGenVertexShadersEXT_I = GetDelegate( "glGenVertexShadersEXT", typeof( DglGenVertexShadersEXT_I ), ref bglGenVertexShadersEXT ) as DglGenVertexShadersEXT_I;
            mDglGetActiveAttrib_IIIrIrIrIS = GetDelegate( "glGetActiveAttrib", typeof( DglGetActiveAttrib_IIIrIrIrIS ), ref bglGetActiveAttrib ) as DglGetActiveAttrib_IIIrIrIrIS;
            mDglGetActiveAttribARB_IIIrIrIrIS = GetDelegate( "glGetActiveAttribARB", typeof( DglGetActiveAttribARB_IIIrIrIrIS ), ref bglGetActiveAttribARB ) as DglGetActiveAttribARB_IIIrIrIrIS;
            mDglGetActiveUniform_IIIrIrIrIS = GetDelegate( "glGetActiveUniform", typeof( DglGetActiveUniform_IIIrIrIrIS ), ref bglGetActiveUniform ) as DglGetActiveUniform_IIIrIrIrIS;
            mDglGetActiveUniformARB_IIIrIrIrIS = GetDelegate( "glGetActiveUniformARB", typeof( DglGetActiveUniformARB_IIIrIrIrIS ), ref bglGetActiveUniformARB ) as DglGetActiveUniformARB_IIIrIrIrIS;
            mDglGetArrayObjectfvATI_IIaF = GetDelegate( "glGetArrayObjectfvATI", typeof( DglGetArrayObjectfvATI_IIaF ), ref bglGetArrayObjectfvATI ) as DglGetArrayObjectfvATI_IIaF;
            mDglGetArrayObjectfvATI_IIP = GetDelegate( "glGetArrayObjectfvATI", typeof( DglGetArrayObjectfvATI_IIP ), ref bglGetArrayObjectfvATI ) as DglGetArrayObjectfvATI_IIP;
            mDglGetArrayObjectivATI_IIaI = GetDelegate( "glGetArrayObjectivATI", typeof( DglGetArrayObjectivATI_IIaI ), ref bglGetArrayObjectivATI ) as DglGetArrayObjectivATI_IIaI;
            mDglGetArrayObjectivATI_IIP = GetDelegate( "glGetArrayObjectivATI", typeof( DglGetArrayObjectivATI_IIP ), ref bglGetArrayObjectivATI ) as DglGetArrayObjectivATI_IIP;
            mDglGetAttachedObjectsARB_IIrIrI = GetDelegate( "glGetAttachedObjectsARB", typeof( DglGetAttachedObjectsARB_IIrIrI ), ref bglGetAttachedObjectsARB ) as DglGetAttachedObjectsARB_IIrIrI;
            mDglGetAttachedShaders_IIrIrI = GetDelegate( "glGetAttachedShaders", typeof( DglGetAttachedShaders_IIrIrI ), ref bglGetAttachedShaders ) as DglGetAttachedShaders_IIrIrI;
            mDglGetAttribLocation_IS = GetDelegate( "glGetAttribLocation", typeof( DglGetAttribLocation_IS ), ref bglGetAttribLocation ) as DglGetAttribLocation_IS;
            mDglGetAttribLocationARB_IS = GetDelegate( "glGetAttribLocationARB", typeof( DglGetAttribLocationARB_IS ), ref bglGetAttribLocationARB ) as DglGetAttribLocationARB_IS;
            mDglGetBooleanv_IaB = GetDelegate( "glGetBooleanv", typeof( DglGetBooleanv_IaB ), ref bglGetBooleanv ) as DglGetBooleanv_IaB;
            mDglGetBooleanv_IP = GetDelegate( "glGetBooleanv", typeof( DglGetBooleanv_IP ), ref bglGetBooleanv ) as DglGetBooleanv_IP;
            mDglGetBufferParameteriv_IIaI = GetDelegate( "glGetBufferParameteriv", typeof( DglGetBufferParameteriv_IIaI ), ref bglGetBufferParameteriv ) as DglGetBufferParameteriv_IIaI;
            mDglGetBufferParameteriv_IIP = GetDelegate( "glGetBufferParameteriv", typeof( DglGetBufferParameteriv_IIP ), ref bglGetBufferParameteriv ) as DglGetBufferParameteriv_IIP;
            mDglGetBufferParameterivARB_IIaI = GetDelegate( "glGetBufferParameterivARB", typeof( DglGetBufferParameterivARB_IIaI ), ref bglGetBufferParameterivARB ) as DglGetBufferParameterivARB_IIaI;
            mDglGetBufferParameterivARB_IIP = GetDelegate( "glGetBufferParameterivARB", typeof( DglGetBufferParameterivARB_IIP ), ref bglGetBufferParameterivARB ) as DglGetBufferParameterivARB_IIP;
            mDglGetBufferPointerv_IIrP = GetDelegate( "glGetBufferPointerv", typeof( DglGetBufferPointerv_IIrP ), ref bglGetBufferPointerv ) as DglGetBufferPointerv_IIrP;
            mDglGetBufferPointervARB_IIrP = GetDelegate( "glGetBufferPointervARB", typeof( DglGetBufferPointervARB_IIrP ), ref bglGetBufferPointervARB ) as DglGetBufferPointervARB_IIrP;
            mDglGetBufferSubData_IIIaB = GetDelegate( "glGetBufferSubData", typeof( DglGetBufferSubData_IIIaB ), ref bglGetBufferSubData ) as DglGetBufferSubData_IIIaB;
            mDglGetBufferSubData_IIIP = GetDelegate( "glGetBufferSubData", typeof( DglGetBufferSubData_IIIP ), ref bglGetBufferSubData ) as DglGetBufferSubData_IIIP;
            mDglGetBufferSubDataARB_IIIaB = GetDelegate( "glGetBufferSubDataARB", typeof( DglGetBufferSubDataARB_IIIaB ), ref bglGetBufferSubDataARB ) as DglGetBufferSubDataARB_IIIaB;
            mDglGetBufferSubDataARB_IIIP = GetDelegate( "glGetBufferSubDataARB", typeof( DglGetBufferSubDataARB_IIIP ), ref bglGetBufferSubDataARB ) as DglGetBufferSubDataARB_IIIP;
            mDglGetClipPlane_IaD = GetDelegate( "glGetClipPlane", typeof( DglGetClipPlane_IaD ), ref bglGetClipPlane ) as DglGetClipPlane_IaD;
            mDglGetClipPlane_IP = GetDelegate( "glGetClipPlane", typeof( DglGetClipPlane_IP ), ref bglGetClipPlane ) as DglGetClipPlane_IP;
            mDglGetColorTable_IIIaB = GetDelegate( "glGetColorTable", typeof( DglGetColorTable_IIIaB ), ref bglGetColorTable ) as DglGetColorTable_IIIaB;
            mDglGetColorTable_IIIaH = GetDelegate( "glGetColorTable", typeof( DglGetColorTable_IIIaH ), ref bglGetColorTable ) as DglGetColorTable_IIIaH;
            mDglGetColorTable_IIIaI = GetDelegate( "glGetColorTable", typeof( DglGetColorTable_IIIaI ), ref bglGetColorTable ) as DglGetColorTable_IIIaI;
            mDglGetColorTable_IIIaF = GetDelegate( "glGetColorTable", typeof( DglGetColorTable_IIIaF ), ref bglGetColorTable ) as DglGetColorTable_IIIaF;
            mDglGetColorTable_IIIP = GetDelegate( "glGetColorTable", typeof( DglGetColorTable_IIIP ), ref bglGetColorTable ) as DglGetColorTable_IIIP;
            mDglGetColorTableEXT_IIIaB = GetDelegate( "glGetColorTableEXT", typeof( DglGetColorTableEXT_IIIaB ), ref bglGetColorTableEXT ) as DglGetColorTableEXT_IIIaB;
            mDglGetColorTableEXT_IIIaH = GetDelegate( "glGetColorTableEXT", typeof( DglGetColorTableEXT_IIIaH ), ref bglGetColorTableEXT ) as DglGetColorTableEXT_IIIaH;
            mDglGetColorTableEXT_IIIaI = GetDelegate( "glGetColorTableEXT", typeof( DglGetColorTableEXT_IIIaI ), ref bglGetColorTableEXT ) as DglGetColorTableEXT_IIIaI;
            mDglGetColorTableEXT_IIIaF = GetDelegate( "glGetColorTableEXT", typeof( DglGetColorTableEXT_IIIaF ), ref bglGetColorTableEXT ) as DglGetColorTableEXT_IIIaF;
            mDglGetColorTableEXT_IIIP = GetDelegate( "glGetColorTableEXT", typeof( DglGetColorTableEXT_IIIP ), ref bglGetColorTableEXT ) as DglGetColorTableEXT_IIIP;
            mDglGetColorTableParameterfv_IIaF = GetDelegate( "glGetColorTableParameterfv", typeof( DglGetColorTableParameterfv_IIaF ), ref bglGetColorTableParameterfv ) as DglGetColorTableParameterfv_IIaF;
            mDglGetColorTableParameterfv_IIP = GetDelegate( "glGetColorTableParameterfv", typeof( DglGetColorTableParameterfv_IIP ), ref bglGetColorTableParameterfv ) as DglGetColorTableParameterfv_IIP;
            mDglGetColorTableParameterfvEXT_IIaF = GetDelegate( "glGetColorTableParameterfvEXT", typeof( DglGetColorTableParameterfvEXT_IIaF ), ref bglGetColorTableParameterfvEXT ) as DglGetColorTableParameterfvEXT_IIaF;
            mDglGetColorTableParameterfvEXT_IIP = GetDelegate( "glGetColorTableParameterfvEXT", typeof( DglGetColorTableParameterfvEXT_IIP ), ref bglGetColorTableParameterfvEXT ) as DglGetColorTableParameterfvEXT_IIP;
            mDglGetColorTableParameterfvSGI_IIaF = GetDelegate( "glGetColorTableParameterfvSGI", typeof( DglGetColorTableParameterfvSGI_IIaF ), ref bglGetColorTableParameterfvSGI ) as DglGetColorTableParameterfvSGI_IIaF;
            mDglGetColorTableParameterfvSGI_IIP = GetDelegate( "glGetColorTableParameterfvSGI", typeof( DglGetColorTableParameterfvSGI_IIP ), ref bglGetColorTableParameterfvSGI ) as DglGetColorTableParameterfvSGI_IIP;
            mDglGetColorTableParameteriv_IIaI = GetDelegate( "glGetColorTableParameteriv", typeof( DglGetColorTableParameteriv_IIaI ), ref bglGetColorTableParameteriv ) as DglGetColorTableParameteriv_IIaI;
            mDglGetColorTableParameteriv_IIP = GetDelegate( "glGetColorTableParameteriv", typeof( DglGetColorTableParameteriv_IIP ), ref bglGetColorTableParameteriv ) as DglGetColorTableParameteriv_IIP;
            mDglGetColorTableParameterivEXT_IIaI = GetDelegate( "glGetColorTableParameterivEXT", typeof( DglGetColorTableParameterivEXT_IIaI ), ref bglGetColorTableParameterivEXT ) as DglGetColorTableParameterivEXT_IIaI;
            mDglGetColorTableParameterivEXT_IIP = GetDelegate( "glGetColorTableParameterivEXT", typeof( DglGetColorTableParameterivEXT_IIP ), ref bglGetColorTableParameterivEXT ) as DglGetColorTableParameterivEXT_IIP;
            mDglGetColorTableParameterivSGI_IIaI = GetDelegate( "glGetColorTableParameterivSGI", typeof( DglGetColorTableParameterivSGI_IIaI ), ref bglGetColorTableParameterivSGI ) as DglGetColorTableParameterivSGI_IIaI;
            mDglGetColorTableParameterivSGI_IIP = GetDelegate( "glGetColorTableParameterivSGI", typeof( DglGetColorTableParameterivSGI_IIP ), ref bglGetColorTableParameterivSGI ) as DglGetColorTableParameterivSGI_IIP;
            mDglGetColorTableSGI_IIIaB = GetDelegate( "glGetColorTableSGI", typeof( DglGetColorTableSGI_IIIaB ), ref bglGetColorTableSGI ) as DglGetColorTableSGI_IIIaB;
            mDglGetColorTableSGI_IIIaH = GetDelegate( "glGetColorTableSGI", typeof( DglGetColorTableSGI_IIIaH ), ref bglGetColorTableSGI ) as DglGetColorTableSGI_IIIaH;
            mDglGetColorTableSGI_IIIaI = GetDelegate( "glGetColorTableSGI", typeof( DglGetColorTableSGI_IIIaI ), ref bglGetColorTableSGI ) as DglGetColorTableSGI_IIIaI;
            mDglGetColorTableSGI_IIIaF = GetDelegate( "glGetColorTableSGI", typeof( DglGetColorTableSGI_IIIaF ), ref bglGetColorTableSGI ) as DglGetColorTableSGI_IIIaF;
            mDglGetColorTableSGI_IIIP = GetDelegate( "glGetColorTableSGI", typeof( DglGetColorTableSGI_IIIP ), ref bglGetColorTableSGI ) as DglGetColorTableSGI_IIIP;
            mDglGetCombinerInputParameterfvNV_IIIIaF = GetDelegate( "glGetCombinerInputParameterfvNV", typeof( DglGetCombinerInputParameterfvNV_IIIIaF ), ref bglGetCombinerInputParameterfvNV ) as DglGetCombinerInputParameterfvNV_IIIIaF;
            mDglGetCombinerInputParameterfvNV_IIIIP = GetDelegate( "glGetCombinerInputParameterfvNV", typeof( DglGetCombinerInputParameterfvNV_IIIIP ), ref bglGetCombinerInputParameterfvNV ) as DglGetCombinerInputParameterfvNV_IIIIP;
            mDglGetCombinerInputParameterivNV_IIIIaI = GetDelegate( "glGetCombinerInputParameterivNV", typeof( DglGetCombinerInputParameterivNV_IIIIaI ), ref bglGetCombinerInputParameterivNV ) as DglGetCombinerInputParameterivNV_IIIIaI;
            mDglGetCombinerInputParameterivNV_IIIIP = GetDelegate( "glGetCombinerInputParameterivNV", typeof( DglGetCombinerInputParameterivNV_IIIIP ), ref bglGetCombinerInputParameterivNV ) as DglGetCombinerInputParameterivNV_IIIIP;
            mDglGetCombinerOutputParameterfvNV_IIIaF = GetDelegate( "glGetCombinerOutputParameterfvNV", typeof( DglGetCombinerOutputParameterfvNV_IIIaF ), ref bglGetCombinerOutputParameterfvNV ) as DglGetCombinerOutputParameterfvNV_IIIaF;
            mDglGetCombinerOutputParameterfvNV_IIIP = GetDelegate( "glGetCombinerOutputParameterfvNV", typeof( DglGetCombinerOutputParameterfvNV_IIIP ), ref bglGetCombinerOutputParameterfvNV ) as DglGetCombinerOutputParameterfvNV_IIIP;
            mDglGetCombinerOutputParameterivNV_IIIaI = GetDelegate( "glGetCombinerOutputParameterivNV", typeof( DglGetCombinerOutputParameterivNV_IIIaI ), ref bglGetCombinerOutputParameterivNV ) as DglGetCombinerOutputParameterivNV_IIIaI;
            mDglGetCombinerOutputParameterivNV_IIIP = GetDelegate( "glGetCombinerOutputParameterivNV", typeof( DglGetCombinerOutputParameterivNV_IIIP ), ref bglGetCombinerOutputParameterivNV ) as DglGetCombinerOutputParameterivNV_IIIP;
            mDglGetCombinerStageParameterfvNV_IIaF = GetDelegate( "glGetCombinerStageParameterfvNV", typeof( DglGetCombinerStageParameterfvNV_IIaF ), ref bglGetCombinerStageParameterfvNV ) as DglGetCombinerStageParameterfvNV_IIaF;
            mDglGetCombinerStageParameterfvNV_IIP = GetDelegate( "glGetCombinerStageParameterfvNV", typeof( DglGetCombinerStageParameterfvNV_IIP ), ref bglGetCombinerStageParameterfvNV ) as DglGetCombinerStageParameterfvNV_IIP;
            mDglGetCompressedTexImage_IIaB = GetDelegate( "glGetCompressedTexImage", typeof( DglGetCompressedTexImage_IIaB ), ref bglGetCompressedTexImage ) as DglGetCompressedTexImage_IIaB;
            mDglGetCompressedTexImage_IIP = GetDelegate( "glGetCompressedTexImage", typeof( DglGetCompressedTexImage_IIP ), ref bglGetCompressedTexImage ) as DglGetCompressedTexImage_IIP;
            mDglGetCompressedTexImageARB_IIaB = GetDelegate( "glGetCompressedTexImageARB", typeof( DglGetCompressedTexImageARB_IIaB ), ref bglGetCompressedTexImageARB ) as DglGetCompressedTexImageARB_IIaB;
            mDglGetCompressedTexImageARB_IIP = GetDelegate( "glGetCompressedTexImageARB", typeof( DglGetCompressedTexImageARB_IIP ), ref bglGetCompressedTexImageARB ) as DglGetCompressedTexImageARB_IIP;
            mDglGetConvolutionFilter_IIIaB = GetDelegate( "glGetConvolutionFilter", typeof( DglGetConvolutionFilter_IIIaB ), ref bglGetConvolutionFilter ) as DglGetConvolutionFilter_IIIaB;
            mDglGetConvolutionFilter_IIIaH = GetDelegate( "glGetConvolutionFilter", typeof( DglGetConvolutionFilter_IIIaH ), ref bglGetConvolutionFilter ) as DglGetConvolutionFilter_IIIaH;
            mDglGetConvolutionFilter_IIIaI = GetDelegate( "glGetConvolutionFilter", typeof( DglGetConvolutionFilter_IIIaI ), ref bglGetConvolutionFilter ) as DglGetConvolutionFilter_IIIaI;
            mDglGetConvolutionFilter_IIIaF = GetDelegate( "glGetConvolutionFilter", typeof( DglGetConvolutionFilter_IIIaF ), ref bglGetConvolutionFilter ) as DglGetConvolutionFilter_IIIaF;
            mDglGetConvolutionFilter_IIIP = GetDelegate( "glGetConvolutionFilter", typeof( DglGetConvolutionFilter_IIIP ), ref bglGetConvolutionFilter ) as DglGetConvolutionFilter_IIIP;
            mDglGetConvolutionFilterEXT_IIIaB = GetDelegate( "glGetConvolutionFilterEXT", typeof( DglGetConvolutionFilterEXT_IIIaB ), ref bglGetConvolutionFilterEXT ) as DglGetConvolutionFilterEXT_IIIaB;
            mDglGetConvolutionFilterEXT_IIIaH = GetDelegate( "glGetConvolutionFilterEXT", typeof( DglGetConvolutionFilterEXT_IIIaH ), ref bglGetConvolutionFilterEXT ) as DglGetConvolutionFilterEXT_IIIaH;
            mDglGetConvolutionFilterEXT_IIIaI = GetDelegate( "glGetConvolutionFilterEXT", typeof( DglGetConvolutionFilterEXT_IIIaI ), ref bglGetConvolutionFilterEXT ) as DglGetConvolutionFilterEXT_IIIaI;
            mDglGetConvolutionFilterEXT_IIIaF = GetDelegate( "glGetConvolutionFilterEXT", typeof( DglGetConvolutionFilterEXT_IIIaF ), ref bglGetConvolutionFilterEXT ) as DglGetConvolutionFilterEXT_IIIaF;
            mDglGetConvolutionFilterEXT_IIIP = GetDelegate( "glGetConvolutionFilterEXT", typeof( DglGetConvolutionFilterEXT_IIIP ), ref bglGetConvolutionFilterEXT ) as DglGetConvolutionFilterEXT_IIIP;
            mDglGetConvolutionParameterfv_IIaF = GetDelegate( "glGetConvolutionParameterfv", typeof( DglGetConvolutionParameterfv_IIaF ), ref bglGetConvolutionParameterfv ) as DglGetConvolutionParameterfv_IIaF;
            mDglGetConvolutionParameterfv_IIP = GetDelegate( "glGetConvolutionParameterfv", typeof( DglGetConvolutionParameterfv_IIP ), ref bglGetConvolutionParameterfv ) as DglGetConvolutionParameterfv_IIP;
            mDglGetConvolutionParameterfvEXT_IIaF = GetDelegate( "glGetConvolutionParameterfvEXT", typeof( DglGetConvolutionParameterfvEXT_IIaF ), ref bglGetConvolutionParameterfvEXT ) as DglGetConvolutionParameterfvEXT_IIaF;
            mDglGetConvolutionParameterfvEXT_IIP = GetDelegate( "glGetConvolutionParameterfvEXT", typeof( DglGetConvolutionParameterfvEXT_IIP ), ref bglGetConvolutionParameterfvEXT ) as DglGetConvolutionParameterfvEXT_IIP;
            mDglGetConvolutionParameteriv_IIaI = GetDelegate( "glGetConvolutionParameteriv", typeof( DglGetConvolutionParameteriv_IIaI ), ref bglGetConvolutionParameteriv ) as DglGetConvolutionParameteriv_IIaI;
            mDglGetConvolutionParameteriv_IIP = GetDelegate( "glGetConvolutionParameteriv", typeof( DglGetConvolutionParameteriv_IIP ), ref bglGetConvolutionParameteriv ) as DglGetConvolutionParameteriv_IIP;
            mDglGetConvolutionParameterivEXT_IIaI = GetDelegate( "glGetConvolutionParameterivEXT", typeof( DglGetConvolutionParameterivEXT_IIaI ), ref bglGetConvolutionParameterivEXT ) as DglGetConvolutionParameterivEXT_IIaI;
            mDglGetConvolutionParameterivEXT_IIP = GetDelegate( "glGetConvolutionParameterivEXT", typeof( DglGetConvolutionParameterivEXT_IIP ), ref bglGetConvolutionParameterivEXT ) as DglGetConvolutionParameterivEXT_IIP;
            mDglGetDetailTexFuncSGIS_IaF = GetDelegate( "glGetDetailTexFuncSGIS", typeof( DglGetDetailTexFuncSGIS_IaF ), ref bglGetDetailTexFuncSGIS ) as DglGetDetailTexFuncSGIS_IaF;
            mDglGetDetailTexFuncSGIS_IP = GetDelegate( "glGetDetailTexFuncSGIS", typeof( DglGetDetailTexFuncSGIS_IP ), ref bglGetDetailTexFuncSGIS ) as DglGetDetailTexFuncSGIS_IP;
            mDglGetDoublev_IaD = GetDelegate( "glGetDoublev", typeof( DglGetDoublev_IaD ), ref bglGetDoublev ) as DglGetDoublev_IaD;
            mDglGetDoublev_IP = GetDelegate( "glGetDoublev", typeof( DglGetDoublev_IP ), ref bglGetDoublev ) as DglGetDoublev_IP;
            mDglGetError_V = GetDelegate( "glGetError", typeof( DglGetError_V ), ref bglGetError ) as DglGetError_V;
            mDglGetFenceivNV_IIaI = GetDelegate( "glGetFenceivNV", typeof( DglGetFenceivNV_IIaI ), ref bglGetFenceivNV ) as DglGetFenceivNV_IIaI;
            mDglGetFenceivNV_IIP = GetDelegate( "glGetFenceivNV", typeof( DglGetFenceivNV_IIP ), ref bglGetFenceivNV ) as DglGetFenceivNV_IIP;
            mDglGetFinalCombinerInputParameterfvNV_IIaF = GetDelegate( "glGetFinalCombinerInputParameterfvNV", typeof( DglGetFinalCombinerInputParameterfvNV_IIaF ), ref bglGetFinalCombinerInputParameterfvNV ) as DglGetFinalCombinerInputParameterfvNV_IIaF;
            mDglGetFinalCombinerInputParameterfvNV_IIP = GetDelegate( "glGetFinalCombinerInputParameterfvNV", typeof( DglGetFinalCombinerInputParameterfvNV_IIP ), ref bglGetFinalCombinerInputParameterfvNV ) as DglGetFinalCombinerInputParameterfvNV_IIP;
            mDglGetFinalCombinerInputParameterivNV_IIaI = GetDelegate( "glGetFinalCombinerInputParameterivNV", typeof( DglGetFinalCombinerInputParameterivNV_IIaI ), ref bglGetFinalCombinerInputParameterivNV ) as DglGetFinalCombinerInputParameterivNV_IIaI;
            mDglGetFinalCombinerInputParameterivNV_IIP = GetDelegate( "glGetFinalCombinerInputParameterivNV", typeof( DglGetFinalCombinerInputParameterivNV_IIP ), ref bglGetFinalCombinerInputParameterivNV ) as DglGetFinalCombinerInputParameterivNV_IIP;
            mDglGetFloatv_IaF = GetDelegate( "glGetFloatv", typeof( DglGetFloatv_IaF ), ref bglGetFloatv ) as DglGetFloatv_IaF;
            mDglGetFloatv_IP = GetDelegate( "glGetFloatv", typeof( DglGetFloatv_IP ), ref bglGetFloatv ) as DglGetFloatv_IP;
            mDglGetFogFuncSGIS_aF = GetDelegate( "glGetFogFuncSGIS", typeof( DglGetFogFuncSGIS_aF ), ref bglGetFogFuncSGIS ) as DglGetFogFuncSGIS_aF;
            mDglGetFogFuncSGIS_P = GetDelegate( "glGetFogFuncSGIS", typeof( DglGetFogFuncSGIS_P ), ref bglGetFogFuncSGIS ) as DglGetFogFuncSGIS_P;
            mDglGetFragmentLightfvSGIX_IIaF = GetDelegate( "glGetFragmentLightfvSGIX", typeof( DglGetFragmentLightfvSGIX_IIaF ), ref bglGetFragmentLightfvSGIX ) as DglGetFragmentLightfvSGIX_IIaF;
            mDglGetFragmentLightfvSGIX_IIP = GetDelegate( "glGetFragmentLightfvSGIX", typeof( DglGetFragmentLightfvSGIX_IIP ), ref bglGetFragmentLightfvSGIX ) as DglGetFragmentLightfvSGIX_IIP;
            mDglGetFragmentLightivSGIX_IIaI = GetDelegate( "glGetFragmentLightivSGIX", typeof( DglGetFragmentLightivSGIX_IIaI ), ref bglGetFragmentLightivSGIX ) as DglGetFragmentLightivSGIX_IIaI;
            mDglGetFragmentLightivSGIX_IIP = GetDelegate( "glGetFragmentLightivSGIX", typeof( DglGetFragmentLightivSGIX_IIP ), ref bglGetFragmentLightivSGIX ) as DglGetFragmentLightivSGIX_IIP;
            mDglGetFragmentMaterialfvSGIX_IIaF = GetDelegate( "glGetFragmentMaterialfvSGIX", typeof( DglGetFragmentMaterialfvSGIX_IIaF ), ref bglGetFragmentMaterialfvSGIX ) as DglGetFragmentMaterialfvSGIX_IIaF;
            mDglGetFragmentMaterialfvSGIX_IIP = GetDelegate( "glGetFragmentMaterialfvSGIX", typeof( DglGetFragmentMaterialfvSGIX_IIP ), ref bglGetFragmentMaterialfvSGIX ) as DglGetFragmentMaterialfvSGIX_IIP;
            mDglGetFragmentMaterialivSGIX_IIaI = GetDelegate( "glGetFragmentMaterialivSGIX", typeof( DglGetFragmentMaterialivSGIX_IIaI ), ref bglGetFragmentMaterialivSGIX ) as DglGetFragmentMaterialivSGIX_IIaI;
            mDglGetFragmentMaterialivSGIX_IIP = GetDelegate( "glGetFragmentMaterialivSGIX", typeof( DglGetFragmentMaterialivSGIX_IIP ), ref bglGetFragmentMaterialivSGIX ) as DglGetFragmentMaterialivSGIX_IIP;
            mDglGetFramebufferAttachmentParameterivEXT_IIIaI = GetDelegate( "glGetFramebufferAttachmentParameterivEXT", typeof( DglGetFramebufferAttachmentParameterivEXT_IIIaI ), ref bglGetFramebufferAttachmentParameterivEXT ) as DglGetFramebufferAttachmentParameterivEXT_IIIaI;
            mDglGetFramebufferAttachmentParameterivEXT_IIIP = GetDelegate( "glGetFramebufferAttachmentParameterivEXT", typeof( DglGetFramebufferAttachmentParameterivEXT_IIIP ), ref bglGetFramebufferAttachmentParameterivEXT ) as DglGetFramebufferAttachmentParameterivEXT_IIIP;
            mDglGetHandleARB_I = GetDelegate( "glGetHandleARB", typeof( DglGetHandleARB_I ), ref bglGetHandleARB ) as DglGetHandleARB_I;
            mDglGetHistogram_IBIIaB = GetDelegate( "glGetHistogram", typeof( DglGetHistogram_IBIIaB ), ref bglGetHistogram ) as DglGetHistogram_IBIIaB;
            mDglGetHistogram_IBIIaH = GetDelegate( "glGetHistogram", typeof( DglGetHistogram_IBIIaH ), ref bglGetHistogram ) as DglGetHistogram_IBIIaH;
            mDglGetHistogram_IBIIaI = GetDelegate( "glGetHistogram", typeof( DglGetHistogram_IBIIaI ), ref bglGetHistogram ) as DglGetHistogram_IBIIaI;
            mDglGetHistogram_IBIIaF = GetDelegate( "glGetHistogram", typeof( DglGetHistogram_IBIIaF ), ref bglGetHistogram ) as DglGetHistogram_IBIIaF;
            mDglGetHistogram_IBIIP = GetDelegate( "glGetHistogram", typeof( DglGetHistogram_IBIIP ), ref bglGetHistogram ) as DglGetHistogram_IBIIP;
            mDglGetHistogramEXT_IBIIaB = GetDelegate( "glGetHistogramEXT", typeof( DglGetHistogramEXT_IBIIaB ), ref bglGetHistogramEXT ) as DglGetHistogramEXT_IBIIaB;
            mDglGetHistogramEXT_IBIIaH = GetDelegate( "glGetHistogramEXT", typeof( DglGetHistogramEXT_IBIIaH ), ref bglGetHistogramEXT ) as DglGetHistogramEXT_IBIIaH;
            mDglGetHistogramEXT_IBIIaI = GetDelegate( "glGetHistogramEXT", typeof( DglGetHistogramEXT_IBIIaI ), ref bglGetHistogramEXT ) as DglGetHistogramEXT_IBIIaI;
            mDglGetHistogramEXT_IBIIaF = GetDelegate( "glGetHistogramEXT", typeof( DglGetHistogramEXT_IBIIaF ), ref bglGetHistogramEXT ) as DglGetHistogramEXT_IBIIaF;
            mDglGetHistogramEXT_IBIIP = GetDelegate( "glGetHistogramEXT", typeof( DglGetHistogramEXT_IBIIP ), ref bglGetHistogramEXT ) as DglGetHistogramEXT_IBIIP;
            mDglGetHistogramParameterfv_IIaF = GetDelegate( "glGetHistogramParameterfv", typeof( DglGetHistogramParameterfv_IIaF ), ref bglGetHistogramParameterfv ) as DglGetHistogramParameterfv_IIaF;
            mDglGetHistogramParameterfv_IIP = GetDelegate( "glGetHistogramParameterfv", typeof( DglGetHistogramParameterfv_IIP ), ref bglGetHistogramParameterfv ) as DglGetHistogramParameterfv_IIP;
            mDglGetHistogramParameterfvEXT_IIaF = GetDelegate( "glGetHistogramParameterfvEXT", typeof( DglGetHistogramParameterfvEXT_IIaF ), ref bglGetHistogramParameterfvEXT ) as DglGetHistogramParameterfvEXT_IIaF;
            mDglGetHistogramParameterfvEXT_IIP = GetDelegate( "glGetHistogramParameterfvEXT", typeof( DglGetHistogramParameterfvEXT_IIP ), ref bglGetHistogramParameterfvEXT ) as DglGetHistogramParameterfvEXT_IIP;
            mDglGetHistogramParameteriv_IIaI = GetDelegate( "glGetHistogramParameteriv", typeof( DglGetHistogramParameteriv_IIaI ), ref bglGetHistogramParameteriv ) as DglGetHistogramParameteriv_IIaI;
            mDglGetHistogramParameteriv_IIP = GetDelegate( "glGetHistogramParameteriv", typeof( DglGetHistogramParameteriv_IIP ), ref bglGetHistogramParameteriv ) as DglGetHistogramParameteriv_IIP;
            mDglGetHistogramParameterivEXT_IIaI = GetDelegate( "glGetHistogramParameterivEXT", typeof( DglGetHistogramParameterivEXT_IIaI ), ref bglGetHistogramParameterivEXT ) as DglGetHistogramParameterivEXT_IIaI;
            mDglGetHistogramParameterivEXT_IIP = GetDelegate( "glGetHistogramParameterivEXT", typeof( DglGetHistogramParameterivEXT_IIP ), ref bglGetHistogramParameterivEXT ) as DglGetHistogramParameterivEXT_IIP;
            mDglGetImageTransformParameterfvHP_IIaF = GetDelegate( "glGetImageTransformParameterfvHP", typeof( DglGetImageTransformParameterfvHP_IIaF ), ref bglGetImageTransformParameterfvHP ) as DglGetImageTransformParameterfvHP_IIaF;
            mDglGetImageTransformParameterfvHP_IIP = GetDelegate( "glGetImageTransformParameterfvHP", typeof( DglGetImageTransformParameterfvHP_IIP ), ref bglGetImageTransformParameterfvHP ) as DglGetImageTransformParameterfvHP_IIP;
            mDglGetImageTransformParameterivHP_IIaI = GetDelegate( "glGetImageTransformParameterivHP", typeof( DglGetImageTransformParameterivHP_IIaI ), ref bglGetImageTransformParameterivHP ) as DglGetImageTransformParameterivHP_IIaI;
            mDglGetImageTransformParameterivHP_IIP = GetDelegate( "glGetImageTransformParameterivHP", typeof( DglGetImageTransformParameterivHP_IIP ), ref bglGetImageTransformParameterivHP ) as DglGetImageTransformParameterivHP_IIP;
            mDglGetInfoLogARB_IIrIS = GetDelegate( "glGetInfoLogARB", typeof( DglGetInfoLogARB_IIrIS ), ref bglGetInfoLogARB ) as DglGetInfoLogARB_IIrIS;
            mDglGetInstrumentsSGIX_V = GetDelegate( "glGetInstrumentsSGIX", typeof( DglGetInstrumentsSGIX_V ), ref bglGetInstrumentsSGIX ) as DglGetInstrumentsSGIX_V;
            mDglGetIntegerv_IaI = GetDelegate( "glGetIntegerv", typeof( DglGetIntegerv_IaI ), ref bglGetIntegerv ) as DglGetIntegerv_IaI;
            mDglGetIntegerv_IP = GetDelegate( "glGetIntegerv", typeof( DglGetIntegerv_IP ), ref bglGetIntegerv ) as DglGetIntegerv_IP;
            mDglGetInvariantBooleanvEXT_IIaB = GetDelegate( "glGetInvariantBooleanvEXT", typeof( DglGetInvariantBooleanvEXT_IIaB ), ref bglGetInvariantBooleanvEXT ) as DglGetInvariantBooleanvEXT_IIaB;
            mDglGetInvariantBooleanvEXT_IIP = GetDelegate( "glGetInvariantBooleanvEXT", typeof( DglGetInvariantBooleanvEXT_IIP ), ref bglGetInvariantBooleanvEXT ) as DglGetInvariantBooleanvEXT_IIP;
            mDglGetInvariantFloatvEXT_IIaF = GetDelegate( "glGetInvariantFloatvEXT", typeof( DglGetInvariantFloatvEXT_IIaF ), ref bglGetInvariantFloatvEXT ) as DglGetInvariantFloatvEXT_IIaF;
            mDglGetInvariantFloatvEXT_IIP = GetDelegate( "glGetInvariantFloatvEXT", typeof( DglGetInvariantFloatvEXT_IIP ), ref bglGetInvariantFloatvEXT ) as DglGetInvariantFloatvEXT_IIP;
            mDglGetInvariantIntegervEXT_IIaI = GetDelegate( "glGetInvariantIntegervEXT", typeof( DglGetInvariantIntegervEXT_IIaI ), ref bglGetInvariantIntegervEXT ) as DglGetInvariantIntegervEXT_IIaI;
            mDglGetInvariantIntegervEXT_IIP = GetDelegate( "glGetInvariantIntegervEXT", typeof( DglGetInvariantIntegervEXT_IIP ), ref bglGetInvariantIntegervEXT ) as DglGetInvariantIntegervEXT_IIP;
            mDglGetLightfv_IIaF = GetDelegate( "glGetLightfv", typeof( DglGetLightfv_IIaF ), ref bglGetLightfv ) as DglGetLightfv_IIaF;
            mDglGetLightfv_IIP = GetDelegate( "glGetLightfv", typeof( DglGetLightfv_IIP ), ref bglGetLightfv ) as DglGetLightfv_IIP;
            mDglGetLightiv_IIaI = GetDelegate( "glGetLightiv", typeof( DglGetLightiv_IIaI ), ref bglGetLightiv ) as DglGetLightiv_IIaI;
            mDglGetLightiv_IIP = GetDelegate( "glGetLightiv", typeof( DglGetLightiv_IIP ), ref bglGetLightiv ) as DglGetLightiv_IIP;
            mDglGetListParameterfvSGIX_IIaF = GetDelegate( "glGetListParameterfvSGIX", typeof( DglGetListParameterfvSGIX_IIaF ), ref bglGetListParameterfvSGIX ) as DglGetListParameterfvSGIX_IIaF;
            mDglGetListParameterfvSGIX_IIP = GetDelegate( "glGetListParameterfvSGIX", typeof( DglGetListParameterfvSGIX_IIP ), ref bglGetListParameterfvSGIX ) as DglGetListParameterfvSGIX_IIP;
            mDglGetListParameterivSGIX_IIaI = GetDelegate( "glGetListParameterivSGIX", typeof( DglGetListParameterivSGIX_IIaI ), ref bglGetListParameterivSGIX ) as DglGetListParameterivSGIX_IIaI;
            mDglGetListParameterivSGIX_IIP = GetDelegate( "glGetListParameterivSGIX", typeof( DglGetListParameterivSGIX_IIP ), ref bglGetListParameterivSGIX ) as DglGetListParameterivSGIX_IIP;
            mDglGetLocalConstantBooleanvEXT_IIaB = GetDelegate( "glGetLocalConstantBooleanvEXT", typeof( DglGetLocalConstantBooleanvEXT_IIaB ), ref bglGetLocalConstantBooleanvEXT ) as DglGetLocalConstantBooleanvEXT_IIaB;
            mDglGetLocalConstantBooleanvEXT_IIP = GetDelegate( "glGetLocalConstantBooleanvEXT", typeof( DglGetLocalConstantBooleanvEXT_IIP ), ref bglGetLocalConstantBooleanvEXT ) as DglGetLocalConstantBooleanvEXT_IIP;
            mDglGetLocalConstantFloatvEXT_IIaF = GetDelegate( "glGetLocalConstantFloatvEXT", typeof( DglGetLocalConstantFloatvEXT_IIaF ), ref bglGetLocalConstantFloatvEXT ) as DglGetLocalConstantFloatvEXT_IIaF;
            mDglGetLocalConstantFloatvEXT_IIP = GetDelegate( "glGetLocalConstantFloatvEXT", typeof( DglGetLocalConstantFloatvEXT_IIP ), ref bglGetLocalConstantFloatvEXT ) as DglGetLocalConstantFloatvEXT_IIP;
            mDglGetLocalConstantIntegervEXT_IIaI = GetDelegate( "glGetLocalConstantIntegervEXT", typeof( DglGetLocalConstantIntegervEXT_IIaI ), ref bglGetLocalConstantIntegervEXT ) as DglGetLocalConstantIntegervEXT_IIaI;
            mDglGetLocalConstantIntegervEXT_IIP = GetDelegate( "glGetLocalConstantIntegervEXT", typeof( DglGetLocalConstantIntegervEXT_IIP ), ref bglGetLocalConstantIntegervEXT ) as DglGetLocalConstantIntegervEXT_IIP;
            mDglGetMapAttribParameterfvNV_IIIaF = GetDelegate( "glGetMapAttribParameterfvNV", typeof( DglGetMapAttribParameterfvNV_IIIaF ), ref bglGetMapAttribParameterfvNV ) as DglGetMapAttribParameterfvNV_IIIaF;
            mDglGetMapAttribParameterfvNV_IIIP = GetDelegate( "glGetMapAttribParameterfvNV", typeof( DglGetMapAttribParameterfvNV_IIIP ), ref bglGetMapAttribParameterfvNV ) as DglGetMapAttribParameterfvNV_IIIP;
            mDglGetMapAttribParameterivNV_IIIaI = GetDelegate( "glGetMapAttribParameterivNV", typeof( DglGetMapAttribParameterivNV_IIIaI ), ref bglGetMapAttribParameterivNV ) as DglGetMapAttribParameterivNV_IIIaI;
            mDglGetMapAttribParameterivNV_IIIP = GetDelegate( "glGetMapAttribParameterivNV", typeof( DglGetMapAttribParameterivNV_IIIP ), ref bglGetMapAttribParameterivNV ) as DglGetMapAttribParameterivNV_IIIP;
            mDglGetMapControlPointsNV_IIIIIBaB = GetDelegate( "glGetMapControlPointsNV", typeof( DglGetMapControlPointsNV_IIIIIBaB ), ref bglGetMapControlPointsNV ) as DglGetMapControlPointsNV_IIIIIBaB;
            mDglGetMapControlPointsNV_IIIIIBP = GetDelegate( "glGetMapControlPointsNV", typeof( DglGetMapControlPointsNV_IIIIIBP ), ref bglGetMapControlPointsNV ) as DglGetMapControlPointsNV_IIIIIBP;
            mDglGetMapdv_IIaD = GetDelegate( "glGetMapdv", typeof( DglGetMapdv_IIaD ), ref bglGetMapdv ) as DglGetMapdv_IIaD;
            mDglGetMapdv_IIP = GetDelegate( "glGetMapdv", typeof( DglGetMapdv_IIP ), ref bglGetMapdv ) as DglGetMapdv_IIP;
            mDglGetMapfv_IIaF = GetDelegate( "glGetMapfv", typeof( DglGetMapfv_IIaF ), ref bglGetMapfv ) as DglGetMapfv_IIaF;
            mDglGetMapfv_IIP = GetDelegate( "glGetMapfv", typeof( DglGetMapfv_IIP ), ref bglGetMapfv ) as DglGetMapfv_IIP;
            mDglGetMapiv_IIaI = GetDelegate( "glGetMapiv", typeof( DglGetMapiv_IIaI ), ref bglGetMapiv ) as DglGetMapiv_IIaI;
            mDglGetMapiv_IIP = GetDelegate( "glGetMapiv", typeof( DglGetMapiv_IIP ), ref bglGetMapiv ) as DglGetMapiv_IIP;
            mDglGetMapParameterfvNV_IIaF = GetDelegate( "glGetMapParameterfvNV", typeof( DglGetMapParameterfvNV_IIaF ), ref bglGetMapParameterfvNV ) as DglGetMapParameterfvNV_IIaF;
            mDglGetMapParameterfvNV_IIP = GetDelegate( "glGetMapParameterfvNV", typeof( DglGetMapParameterfvNV_IIP ), ref bglGetMapParameterfvNV ) as DglGetMapParameterfvNV_IIP;
            mDglGetMapParameterivNV_IIaI = GetDelegate( "glGetMapParameterivNV", typeof( DglGetMapParameterivNV_IIaI ), ref bglGetMapParameterivNV ) as DglGetMapParameterivNV_IIaI;
            mDglGetMapParameterivNV_IIP = GetDelegate( "glGetMapParameterivNV", typeof( DglGetMapParameterivNV_IIP ), ref bglGetMapParameterivNV ) as DglGetMapParameterivNV_IIP;
            mDglGetMaterialfv_IIaF = GetDelegate( "glGetMaterialfv", typeof( DglGetMaterialfv_IIaF ), ref bglGetMaterialfv ) as DglGetMaterialfv_IIaF;
            mDglGetMaterialfv_IIP = GetDelegate( "glGetMaterialfv", typeof( DglGetMaterialfv_IIP ), ref bglGetMaterialfv ) as DglGetMaterialfv_IIP;
            mDglGetMaterialiv_IIaI = GetDelegate( "glGetMaterialiv", typeof( DglGetMaterialiv_IIaI ), ref bglGetMaterialiv ) as DglGetMaterialiv_IIaI;
            mDglGetMaterialiv_IIP = GetDelegate( "glGetMaterialiv", typeof( DglGetMaterialiv_IIP ), ref bglGetMaterialiv ) as DglGetMaterialiv_IIP;
            mDglGetMinmax_IBIIaB = GetDelegate( "glGetMinmax", typeof( DglGetMinmax_IBIIaB ), ref bglGetMinmax ) as DglGetMinmax_IBIIaB;
            mDglGetMinmax_IBIIaH = GetDelegate( "glGetMinmax", typeof( DglGetMinmax_IBIIaH ), ref bglGetMinmax ) as DglGetMinmax_IBIIaH;
            mDglGetMinmax_IBIIaI = GetDelegate( "glGetMinmax", typeof( DglGetMinmax_IBIIaI ), ref bglGetMinmax ) as DglGetMinmax_IBIIaI;
            mDglGetMinmax_IBIIaF = GetDelegate( "glGetMinmax", typeof( DglGetMinmax_IBIIaF ), ref bglGetMinmax ) as DglGetMinmax_IBIIaF;
            mDglGetMinmax_IBIIP = GetDelegate( "glGetMinmax", typeof( DglGetMinmax_IBIIP ), ref bglGetMinmax ) as DglGetMinmax_IBIIP;
            mDglGetMinmaxEXT_IBIIaB = GetDelegate( "glGetMinmaxEXT", typeof( DglGetMinmaxEXT_IBIIaB ), ref bglGetMinmaxEXT ) as DglGetMinmaxEXT_IBIIaB;
            mDglGetMinmaxEXT_IBIIaH = GetDelegate( "glGetMinmaxEXT", typeof( DglGetMinmaxEXT_IBIIaH ), ref bglGetMinmaxEXT ) as DglGetMinmaxEXT_IBIIaH;
            mDglGetMinmaxEXT_IBIIaI = GetDelegate( "glGetMinmaxEXT", typeof( DglGetMinmaxEXT_IBIIaI ), ref bglGetMinmaxEXT ) as DglGetMinmaxEXT_IBIIaI;
            mDglGetMinmaxEXT_IBIIaF = GetDelegate( "glGetMinmaxEXT", typeof( DglGetMinmaxEXT_IBIIaF ), ref bglGetMinmaxEXT ) as DglGetMinmaxEXT_IBIIaF;
            mDglGetMinmaxEXT_IBIIP = GetDelegate( "glGetMinmaxEXT", typeof( DglGetMinmaxEXT_IBIIP ), ref bglGetMinmaxEXT ) as DglGetMinmaxEXT_IBIIP;
            mDglGetMinmaxParameterfv_IIaF = GetDelegate( "glGetMinmaxParameterfv", typeof( DglGetMinmaxParameterfv_IIaF ), ref bglGetMinmaxParameterfv ) as DglGetMinmaxParameterfv_IIaF;
            mDglGetMinmaxParameterfv_IIP = GetDelegate( "glGetMinmaxParameterfv", typeof( DglGetMinmaxParameterfv_IIP ), ref bglGetMinmaxParameterfv ) as DglGetMinmaxParameterfv_IIP;
            mDglGetMinmaxParameterfvEXT_IIaF = GetDelegate( "glGetMinmaxParameterfvEXT", typeof( DglGetMinmaxParameterfvEXT_IIaF ), ref bglGetMinmaxParameterfvEXT ) as DglGetMinmaxParameterfvEXT_IIaF;
            mDglGetMinmaxParameterfvEXT_IIP = GetDelegate( "glGetMinmaxParameterfvEXT", typeof( DglGetMinmaxParameterfvEXT_IIP ), ref bglGetMinmaxParameterfvEXT ) as DglGetMinmaxParameterfvEXT_IIP;
            mDglGetMinmaxParameteriv_IIaI = GetDelegate( "glGetMinmaxParameteriv", typeof( DglGetMinmaxParameteriv_IIaI ), ref bglGetMinmaxParameteriv ) as DglGetMinmaxParameteriv_IIaI;
            mDglGetMinmaxParameteriv_IIP = GetDelegate( "glGetMinmaxParameteriv", typeof( DglGetMinmaxParameteriv_IIP ), ref bglGetMinmaxParameteriv ) as DglGetMinmaxParameteriv_IIP;
            mDglGetMinmaxParameterivEXT_IIaI = GetDelegate( "glGetMinmaxParameterivEXT", typeof( DglGetMinmaxParameterivEXT_IIaI ), ref bglGetMinmaxParameterivEXT ) as DglGetMinmaxParameterivEXT_IIaI;
            mDglGetMinmaxParameterivEXT_IIP = GetDelegate( "glGetMinmaxParameterivEXT", typeof( DglGetMinmaxParameterivEXT_IIP ), ref bglGetMinmaxParameterivEXT ) as DglGetMinmaxParameterivEXT_IIP;
            mDglGetObjectBufferfvATI_IIaF = GetDelegate( "glGetObjectBufferfvATI", typeof( DglGetObjectBufferfvATI_IIaF ), ref bglGetObjectBufferfvATI ) as DglGetObjectBufferfvATI_IIaF;
            mDglGetObjectBufferfvATI_IIP = GetDelegate( "glGetObjectBufferfvATI", typeof( DglGetObjectBufferfvATI_IIP ), ref bglGetObjectBufferfvATI ) as DglGetObjectBufferfvATI_IIP;
            mDglGetObjectBufferivATI_IIaI = GetDelegate( "glGetObjectBufferivATI", typeof( DglGetObjectBufferivATI_IIaI ), ref bglGetObjectBufferivATI ) as DglGetObjectBufferivATI_IIaI;
            mDglGetObjectBufferivATI_IIP = GetDelegate( "glGetObjectBufferivATI", typeof( DglGetObjectBufferivATI_IIP ), ref bglGetObjectBufferivATI ) as DglGetObjectBufferivATI_IIP;
            mDglGetObjectParameterfvARB_IIaF = GetDelegate( "glGetObjectParameterfvARB", typeof( DglGetObjectParameterfvARB_IIaF ), ref bglGetObjectParameterfvARB ) as DglGetObjectParameterfvARB_IIaF;
            mDglGetObjectParameterfvARB_IIP = GetDelegate( "glGetObjectParameterfvARB", typeof( DglGetObjectParameterfvARB_IIP ), ref bglGetObjectParameterfvARB ) as DglGetObjectParameterfvARB_IIP;
            mDglGetObjectParameterivARB_IIaI = GetDelegate( "glGetObjectParameterivARB", typeof( DglGetObjectParameterivARB_IIaI ), ref bglGetObjectParameterivARB ) as DglGetObjectParameterivARB_IIaI;
            mDglGetObjectParameterivARB_IIP = GetDelegate( "glGetObjectParameterivARB", typeof( DglGetObjectParameterivARB_IIP ), ref bglGetObjectParameterivARB ) as DglGetObjectParameterivARB_IIP;
            mDglGetOcclusionQueryivNV_IIaI = GetDelegate( "glGetOcclusionQueryivNV", typeof( DglGetOcclusionQueryivNV_IIaI ), ref bglGetOcclusionQueryivNV ) as DglGetOcclusionQueryivNV_IIaI;
            mDglGetOcclusionQueryivNV_IIP = GetDelegate( "glGetOcclusionQueryivNV", typeof( DglGetOcclusionQueryivNV_IIP ), ref bglGetOcclusionQueryivNV ) as DglGetOcclusionQueryivNV_IIP;
            mDglGetOcclusionQueryuivNV_IIaI = GetDelegate( "glGetOcclusionQueryuivNV", typeof( DglGetOcclusionQueryuivNV_IIaI ), ref bglGetOcclusionQueryuivNV ) as DglGetOcclusionQueryuivNV_IIaI;
            mDglGetOcclusionQueryuivNV_IIP = GetDelegate( "glGetOcclusionQueryuivNV", typeof( DglGetOcclusionQueryuivNV_IIP ), ref bglGetOcclusionQueryuivNV ) as DglGetOcclusionQueryuivNV_IIP;
            mDglGetPixelMapfv_IaF = GetDelegate( "glGetPixelMapfv", typeof( DglGetPixelMapfv_IaF ), ref bglGetPixelMapfv ) as DglGetPixelMapfv_IaF;
            mDglGetPixelMapfv_IP = GetDelegate( "glGetPixelMapfv", typeof( DglGetPixelMapfv_IP ), ref bglGetPixelMapfv ) as DglGetPixelMapfv_IP;
            mDglGetPixelMapuiv_IaI = GetDelegate( "glGetPixelMapuiv", typeof( DglGetPixelMapuiv_IaI ), ref bglGetPixelMapuiv ) as DglGetPixelMapuiv_IaI;
            mDglGetPixelMapuiv_IP = GetDelegate( "glGetPixelMapuiv", typeof( DglGetPixelMapuiv_IP ), ref bglGetPixelMapuiv ) as DglGetPixelMapuiv_IP;
            mDglGetPixelMapusv_IaH = GetDelegate( "glGetPixelMapusv", typeof( DglGetPixelMapusv_IaH ), ref bglGetPixelMapusv ) as DglGetPixelMapusv_IaH;
            mDglGetPixelMapusv_IP = GetDelegate( "glGetPixelMapusv", typeof( DglGetPixelMapusv_IP ), ref bglGetPixelMapusv ) as DglGetPixelMapusv_IP;
            mDglGetPixelTexGenParameterfvSGIS_IaF = GetDelegate( "glGetPixelTexGenParameterfvSGIS", typeof( DglGetPixelTexGenParameterfvSGIS_IaF ), ref bglGetPixelTexGenParameterfvSGIS ) as DglGetPixelTexGenParameterfvSGIS_IaF;
            mDglGetPixelTexGenParameterfvSGIS_IP = GetDelegate( "glGetPixelTexGenParameterfvSGIS", typeof( DglGetPixelTexGenParameterfvSGIS_IP ), ref bglGetPixelTexGenParameterfvSGIS ) as DglGetPixelTexGenParameterfvSGIS_IP;
            mDglGetPixelTexGenParameterivSGIS_IaI = GetDelegate( "glGetPixelTexGenParameterivSGIS", typeof( DglGetPixelTexGenParameterivSGIS_IaI ), ref bglGetPixelTexGenParameterivSGIS ) as DglGetPixelTexGenParameterivSGIS_IaI;
            mDglGetPixelTexGenParameterivSGIS_IP = GetDelegate( "glGetPixelTexGenParameterivSGIS", typeof( DglGetPixelTexGenParameterivSGIS_IP ), ref bglGetPixelTexGenParameterivSGIS ) as DglGetPixelTexGenParameterivSGIS_IP;
            mDglGetPointerv_IrP = GetDelegate( "glGetPointerv", typeof( DglGetPointerv_IrP ), ref bglGetPointerv ) as DglGetPointerv_IrP;
            mDglGetPointervEXT_IrP = GetDelegate( "glGetPointervEXT", typeof( DglGetPointervEXT_IrP ), ref bglGetPointervEXT ) as DglGetPointervEXT_IrP;
            mDglGetPolygonStipple_aB = GetDelegate( "glGetPolygonStipple", typeof( DglGetPolygonStipple_aB ), ref bglGetPolygonStipple ) as DglGetPolygonStipple_aB;
            mDglGetPolygonStipple_P = GetDelegate( "glGetPolygonStipple", typeof( DglGetPolygonStipple_P ), ref bglGetPolygonStipple ) as DglGetPolygonStipple_P;
            mDglGetProgramEnvParameterdvARB_IIaD = GetDelegate( "glGetProgramEnvParameterdvARB", typeof( DglGetProgramEnvParameterdvARB_IIaD ), ref bglGetProgramEnvParameterdvARB ) as DglGetProgramEnvParameterdvARB_IIaD;
            mDglGetProgramEnvParameterdvARB_IIP = GetDelegate( "glGetProgramEnvParameterdvARB", typeof( DglGetProgramEnvParameterdvARB_IIP ), ref bglGetProgramEnvParameterdvARB ) as DglGetProgramEnvParameterdvARB_IIP;
            mDglGetProgramEnvParameterfvARB_IIaF = GetDelegate( "glGetProgramEnvParameterfvARB", typeof( DglGetProgramEnvParameterfvARB_IIaF ), ref bglGetProgramEnvParameterfvARB ) as DglGetProgramEnvParameterfvARB_IIaF;
            mDglGetProgramEnvParameterfvARB_IIP = GetDelegate( "glGetProgramEnvParameterfvARB", typeof( DglGetProgramEnvParameterfvARB_IIP ), ref bglGetProgramEnvParameterfvARB ) as DglGetProgramEnvParameterfvARB_IIP;
            mDglGetProgramInfoLog_IIrIS = GetDelegate( "glGetProgramInfoLog", typeof( DglGetProgramInfoLog_IIrIS ), ref bglGetProgramInfoLog ) as DglGetProgramInfoLog_IIrIS;
            mDglGetProgramiv_IIaI = GetDelegate( "glGetProgramiv", typeof( DglGetProgramiv_IIaI ), ref bglGetProgramiv ) as DglGetProgramiv_IIaI;
            mDglGetProgramiv_IIP = GetDelegate( "glGetProgramiv", typeof( DglGetProgramiv_IIP ), ref bglGetProgramiv ) as DglGetProgramiv_IIP;
            mDglGetProgramivARB_IIaI = GetDelegate( "glGetProgramivARB", typeof( DglGetProgramivARB_IIaI ), ref bglGetProgramivARB ) as DglGetProgramivARB_IIaI;
            mDglGetProgramivARB_IIP = GetDelegate( "glGetProgramivARB", typeof( DglGetProgramivARB_IIP ), ref bglGetProgramivARB ) as DglGetProgramivARB_IIP;
            mDglGetProgramivNV_IIaI = GetDelegate( "glGetProgramivNV", typeof( DglGetProgramivNV_IIaI ), ref bglGetProgramivNV ) as DglGetProgramivNV_IIaI;
            mDglGetProgramivNV_IIP = GetDelegate( "glGetProgramivNV", typeof( DglGetProgramivNV_IIP ), ref bglGetProgramivNV ) as DglGetProgramivNV_IIP;
            mDglGetProgramLocalParameterdvARB_IIaD = GetDelegate( "glGetProgramLocalParameterdvARB", typeof( DglGetProgramLocalParameterdvARB_IIaD ), ref bglGetProgramLocalParameterdvARB ) as DglGetProgramLocalParameterdvARB_IIaD;
            mDglGetProgramLocalParameterdvARB_IIP = GetDelegate( "glGetProgramLocalParameterdvARB", typeof( DglGetProgramLocalParameterdvARB_IIP ), ref bglGetProgramLocalParameterdvARB ) as DglGetProgramLocalParameterdvARB_IIP;
            mDglGetProgramLocalParameterfvARB_IIaF = GetDelegate( "glGetProgramLocalParameterfvARB", typeof( DglGetProgramLocalParameterfvARB_IIaF ), ref bglGetProgramLocalParameterfvARB ) as DglGetProgramLocalParameterfvARB_IIaF;
            mDglGetProgramLocalParameterfvARB_IIP = GetDelegate( "glGetProgramLocalParameterfvARB", typeof( DglGetProgramLocalParameterfvARB_IIP ), ref bglGetProgramLocalParameterfvARB ) as DglGetProgramLocalParameterfvARB_IIP;
            mDglGetProgramNamedParameterdvNV_IISaD = GetDelegate( "glGetProgramNamedParameterdvNV", typeof( DglGetProgramNamedParameterdvNV_IISaD ), ref bglGetProgramNamedParameterdvNV ) as DglGetProgramNamedParameterdvNV_IISaD;
            mDglGetProgramNamedParameterdvNV_IISP = GetDelegate( "glGetProgramNamedParameterdvNV", typeof( DglGetProgramNamedParameterdvNV_IISP ), ref bglGetProgramNamedParameterdvNV ) as DglGetProgramNamedParameterdvNV_IISP;
            mDglGetProgramNamedParameterfvNV_IISaF = GetDelegate( "glGetProgramNamedParameterfvNV", typeof( DglGetProgramNamedParameterfvNV_IISaF ), ref bglGetProgramNamedParameterfvNV ) as DglGetProgramNamedParameterfvNV_IISaF;
            mDglGetProgramNamedParameterfvNV_IISP = GetDelegate( "glGetProgramNamedParameterfvNV", typeof( DglGetProgramNamedParameterfvNV_IISP ), ref bglGetProgramNamedParameterfvNV ) as DglGetProgramNamedParameterfvNV_IISP;
            mDglGetProgramParameterdvNV_IIIaD = GetDelegate( "glGetProgramParameterdvNV", typeof( DglGetProgramParameterdvNV_IIIaD ), ref bglGetProgramParameterdvNV ) as DglGetProgramParameterdvNV_IIIaD;
            mDglGetProgramParameterdvNV_IIIP = GetDelegate( "glGetProgramParameterdvNV", typeof( DglGetProgramParameterdvNV_IIIP ), ref bglGetProgramParameterdvNV ) as DglGetProgramParameterdvNV_IIIP;
            mDglGetProgramParameterfvNV_IIIaF = GetDelegate( "glGetProgramParameterfvNV", typeof( DglGetProgramParameterfvNV_IIIaF ), ref bglGetProgramParameterfvNV ) as DglGetProgramParameterfvNV_IIIaF;
            mDglGetProgramParameterfvNV_IIIP = GetDelegate( "glGetProgramParameterfvNV", typeof( DglGetProgramParameterfvNV_IIIP ), ref bglGetProgramParameterfvNV ) as DglGetProgramParameterfvNV_IIIP;
            mDglGetProgramStringARB_IIaB = GetDelegate( "glGetProgramStringARB", typeof( DglGetProgramStringARB_IIaB ), ref bglGetProgramStringARB ) as DglGetProgramStringARB_IIaB;
            mDglGetProgramStringARB_IIP = GetDelegate( "glGetProgramStringARB", typeof( DglGetProgramStringARB_IIP ), ref bglGetProgramStringARB ) as DglGetProgramStringARB_IIP;
            mDglGetProgramStringNV_IIaB = GetDelegate( "glGetProgramStringNV", typeof( DglGetProgramStringNV_IIaB ), ref bglGetProgramStringNV ) as DglGetProgramStringNV_IIaB;
            mDglGetProgramStringNV_IIP = GetDelegate( "glGetProgramStringNV", typeof( DglGetProgramStringNV_IIP ), ref bglGetProgramStringNV ) as DglGetProgramStringNV_IIP;
            mDglGetQueryiv_IIaI = GetDelegate( "glGetQueryiv", typeof( DglGetQueryiv_IIaI ), ref bglGetQueryiv ) as DglGetQueryiv_IIaI;
            mDglGetQueryiv_IIP = GetDelegate( "glGetQueryiv", typeof( DglGetQueryiv_IIP ), ref bglGetQueryiv ) as DglGetQueryiv_IIP;
            mDglGetQueryivARB_IIaI = GetDelegate( "glGetQueryivARB", typeof( DglGetQueryivARB_IIaI ), ref bglGetQueryivARB ) as DglGetQueryivARB_IIaI;
            mDglGetQueryivARB_IIP = GetDelegate( "glGetQueryivARB", typeof( DglGetQueryivARB_IIP ), ref bglGetQueryivARB ) as DglGetQueryivARB_IIP;
            mDglGetQueryObjectiv_IIaI = GetDelegate( "glGetQueryObjectiv", typeof( DglGetQueryObjectiv_IIaI ), ref bglGetQueryObjectiv ) as DglGetQueryObjectiv_IIaI;
            mDglGetQueryObjectiv_IIP = GetDelegate( "glGetQueryObjectiv", typeof( DglGetQueryObjectiv_IIP ), ref bglGetQueryObjectiv ) as DglGetQueryObjectiv_IIP;
            mDglGetQueryObjectivARB_IIaI = GetDelegate( "glGetQueryObjectivARB", typeof( DglGetQueryObjectivARB_IIaI ), ref bglGetQueryObjectivARB ) as DglGetQueryObjectivARB_IIaI;
            mDglGetQueryObjectivARB_IIP = GetDelegate( "glGetQueryObjectivARB", typeof( DglGetQueryObjectivARB_IIP ), ref bglGetQueryObjectivARB ) as DglGetQueryObjectivARB_IIP;
            mDglGetQueryObjectuiv_IIaI = GetDelegate( "glGetQueryObjectuiv", typeof( DglGetQueryObjectuiv_IIaI ), ref bglGetQueryObjectuiv ) as DglGetQueryObjectuiv_IIaI;
            mDglGetQueryObjectuiv_IIP = GetDelegate( "glGetQueryObjectuiv", typeof( DglGetQueryObjectuiv_IIP ), ref bglGetQueryObjectuiv ) as DglGetQueryObjectuiv_IIP;
            mDglGetQueryObjectuivARB_IIaI = GetDelegate( "glGetQueryObjectuivARB", typeof( DglGetQueryObjectuivARB_IIaI ), ref bglGetQueryObjectuivARB ) as DglGetQueryObjectuivARB_IIaI;
            mDglGetQueryObjectuivARB_IIP = GetDelegate( "glGetQueryObjectuivARB", typeof( DglGetQueryObjectuivARB_IIP ), ref bglGetQueryObjectuivARB ) as DglGetQueryObjectuivARB_IIP;
            mDglGetRenderbufferParameterivEXT_IIaI = GetDelegate( "glGetRenderbufferParameterivEXT", typeof( DglGetRenderbufferParameterivEXT_IIaI ), ref bglGetRenderbufferParameterivEXT ) as DglGetRenderbufferParameterivEXT_IIaI;
            mDglGetRenderbufferParameterivEXT_IIP = GetDelegate( "glGetRenderbufferParameterivEXT", typeof( DglGetRenderbufferParameterivEXT_IIP ), ref bglGetRenderbufferParameterivEXT ) as DglGetRenderbufferParameterivEXT_IIP;
            mDglGetSeparableFilter_IIIaBaBaB = GetDelegate( "glGetSeparableFilter", typeof( DglGetSeparableFilter_IIIaBaBaB ), ref bglGetSeparableFilter ) as DglGetSeparableFilter_IIIaBaBaB;
            mDglGetSeparableFilter_IIIaHaHaH = GetDelegate( "glGetSeparableFilter", typeof( DglGetSeparableFilter_IIIaHaHaH ), ref bglGetSeparableFilter ) as DglGetSeparableFilter_IIIaHaHaH;
            mDglGetSeparableFilter_IIIaIaIaI = GetDelegate( "glGetSeparableFilter", typeof( DglGetSeparableFilter_IIIaIaIaI ), ref bglGetSeparableFilter ) as DglGetSeparableFilter_IIIaIaIaI;
            mDglGetSeparableFilter_IIIaFaFaF = GetDelegate( "glGetSeparableFilter", typeof( DglGetSeparableFilter_IIIaFaFaF ), ref bglGetSeparableFilter ) as DglGetSeparableFilter_IIIaFaFaF;
            mDglGetSeparableFilter_IIIPPP = GetDelegate( "glGetSeparableFilter", typeof( DglGetSeparableFilter_IIIPPP ), ref bglGetSeparableFilter ) as DglGetSeparableFilter_IIIPPP;
            mDglGetSeparableFilterEXT_IIIaBaBaB = GetDelegate( "glGetSeparableFilterEXT", typeof( DglGetSeparableFilterEXT_IIIaBaBaB ), ref bglGetSeparableFilterEXT ) as DglGetSeparableFilterEXT_IIIaBaBaB;
            mDglGetSeparableFilterEXT_IIIaHaHaH = GetDelegate( "glGetSeparableFilterEXT", typeof( DglGetSeparableFilterEXT_IIIaHaHaH ), ref bglGetSeparableFilterEXT ) as DglGetSeparableFilterEXT_IIIaHaHaH;
            mDglGetSeparableFilterEXT_IIIaIaIaI = GetDelegate( "glGetSeparableFilterEXT", typeof( DglGetSeparableFilterEXT_IIIaIaIaI ), ref bglGetSeparableFilterEXT ) as DglGetSeparableFilterEXT_IIIaIaIaI;
            mDglGetSeparableFilterEXT_IIIaFaFaF = GetDelegate( "glGetSeparableFilterEXT", typeof( DglGetSeparableFilterEXT_IIIaFaFaF ), ref bglGetSeparableFilterEXT ) as DglGetSeparableFilterEXT_IIIaFaFaF;
            mDglGetSeparableFilterEXT_IIIPPP = GetDelegate( "glGetSeparableFilterEXT", typeof( DglGetSeparableFilterEXT_IIIPPP ), ref bglGetSeparableFilterEXT ) as DglGetSeparableFilterEXT_IIIPPP;
            mDglGetShaderInfoLog_IIrIS = GetDelegate( "glGetShaderInfoLog", typeof( DglGetShaderInfoLog_IIrIS ), ref bglGetShaderInfoLog ) as DglGetShaderInfoLog_IIrIS;
            mDglGetShaderiv_IIaI = GetDelegate( "glGetShaderiv", typeof( DglGetShaderiv_IIaI ), ref bglGetShaderiv ) as DglGetShaderiv_IIaI;
            mDglGetShaderiv_IIP = GetDelegate( "glGetShaderiv", typeof( DglGetShaderiv_IIP ), ref bglGetShaderiv ) as DglGetShaderiv_IIP;
            mDglGetShaderSource_IIrIS = GetDelegate( "glGetShaderSource", typeof( DglGetShaderSource_IIrIS ), ref bglGetShaderSource ) as DglGetShaderSource_IIrIS;
            mDglGetShaderSourceARB_IIrIS = GetDelegate( "glGetShaderSourceARB", typeof( DglGetShaderSourceARB_IIrIS ), ref bglGetShaderSourceARB ) as DglGetShaderSourceARB_IIrIS;
            mDglGetSharpenTexFuncSGIS_IaF = GetDelegate( "glGetSharpenTexFuncSGIS", typeof( DglGetSharpenTexFuncSGIS_IaF ), ref bglGetSharpenTexFuncSGIS ) as DglGetSharpenTexFuncSGIS_IaF;
            mDglGetSharpenTexFuncSGIS_IP = GetDelegate( "glGetSharpenTexFuncSGIS", typeof( DglGetSharpenTexFuncSGIS_IP ), ref bglGetSharpenTexFuncSGIS ) as DglGetSharpenTexFuncSGIS_IP;
            mDglGetString_I = GetDelegate( "glGetString", typeof( DglGetString_I ), ref bglGetString ) as DglGetString_I;
            mDglGetTexBumpParameterfvATI_IaF = GetDelegate( "glGetTexBumpParameterfvATI", typeof( DglGetTexBumpParameterfvATI_IaF ), ref bglGetTexBumpParameterfvATI ) as DglGetTexBumpParameterfvATI_IaF;
            mDglGetTexBumpParameterfvATI_IP = GetDelegate( "glGetTexBumpParameterfvATI", typeof( DglGetTexBumpParameterfvATI_IP ), ref bglGetTexBumpParameterfvATI ) as DglGetTexBumpParameterfvATI_IP;
            mDglGetTexBumpParameterivATI_IaI = GetDelegate( "glGetTexBumpParameterivATI", typeof( DglGetTexBumpParameterivATI_IaI ), ref bglGetTexBumpParameterivATI ) as DglGetTexBumpParameterivATI_IaI;
            mDglGetTexBumpParameterivATI_IP = GetDelegate( "glGetTexBumpParameterivATI", typeof( DglGetTexBumpParameterivATI_IP ), ref bglGetTexBumpParameterivATI ) as DglGetTexBumpParameterivATI_IP;
            mDglGetTexEnvfv_IIaF = GetDelegate( "glGetTexEnvfv", typeof( DglGetTexEnvfv_IIaF ), ref bglGetTexEnvfv ) as DglGetTexEnvfv_IIaF;
            mDglGetTexEnvfv_IIP = GetDelegate( "glGetTexEnvfv", typeof( DglGetTexEnvfv_IIP ), ref bglGetTexEnvfv ) as DglGetTexEnvfv_IIP;
            mDglGetTexEnviv_IIaI = GetDelegate( "glGetTexEnviv", typeof( DglGetTexEnviv_IIaI ), ref bglGetTexEnviv ) as DglGetTexEnviv_IIaI;
            mDglGetTexEnviv_IIP = GetDelegate( "glGetTexEnviv", typeof( DglGetTexEnviv_IIP ), ref bglGetTexEnviv ) as DglGetTexEnviv_IIP;
            mDglGetTexFilterFuncSGIS_IIaF = GetDelegate( "glGetTexFilterFuncSGIS", typeof( DglGetTexFilterFuncSGIS_IIaF ), ref bglGetTexFilterFuncSGIS ) as DglGetTexFilterFuncSGIS_IIaF;
            mDglGetTexFilterFuncSGIS_IIP = GetDelegate( "glGetTexFilterFuncSGIS", typeof( DglGetTexFilterFuncSGIS_IIP ), ref bglGetTexFilterFuncSGIS ) as DglGetTexFilterFuncSGIS_IIP;
            mDglGetTexGendv_IIaD = GetDelegate( "glGetTexGendv", typeof( DglGetTexGendv_IIaD ), ref bglGetTexGendv ) as DglGetTexGendv_IIaD;
            mDglGetTexGendv_IIP = GetDelegate( "glGetTexGendv", typeof( DglGetTexGendv_IIP ), ref bglGetTexGendv ) as DglGetTexGendv_IIP;
            mDglGetTexGenfv_IIaF = GetDelegate( "glGetTexGenfv", typeof( DglGetTexGenfv_IIaF ), ref bglGetTexGenfv ) as DglGetTexGenfv_IIaF;
            mDglGetTexGenfv_IIP = GetDelegate( "glGetTexGenfv", typeof( DglGetTexGenfv_IIP ), ref bglGetTexGenfv ) as DglGetTexGenfv_IIP;
            mDglGetTexGeniv_IIaI = GetDelegate( "glGetTexGeniv", typeof( DglGetTexGeniv_IIaI ), ref bglGetTexGeniv ) as DglGetTexGeniv_IIaI;
            mDglGetTexGeniv_IIP = GetDelegate( "glGetTexGeniv", typeof( DglGetTexGeniv_IIP ), ref bglGetTexGeniv ) as DglGetTexGeniv_IIP;
            mDglGetTexImage_IIIIaB = GetDelegate( "glGetTexImage", typeof( DglGetTexImage_IIIIaB ), ref bglGetTexImage ) as DglGetTexImage_IIIIaB;
            mDglGetTexImage_IIIIaH = GetDelegate( "glGetTexImage", typeof( DglGetTexImage_IIIIaH ), ref bglGetTexImage ) as DglGetTexImage_IIIIaH;
            mDglGetTexImage_IIIIaI = GetDelegate( "glGetTexImage", typeof( DglGetTexImage_IIIIaI ), ref bglGetTexImage ) as DglGetTexImage_IIIIaI;
            mDglGetTexImage_IIIIaF = GetDelegate( "glGetTexImage", typeof( DglGetTexImage_IIIIaF ), ref bglGetTexImage ) as DglGetTexImage_IIIIaF;
            mDglGetTexImage_IIIIP = GetDelegate( "glGetTexImage", typeof( DglGetTexImage_IIIIP ), ref bglGetTexImage ) as DglGetTexImage_IIIIP;
            mDglGetTexLevelParameterfv_IIIaF = GetDelegate( "glGetTexLevelParameterfv", typeof( DglGetTexLevelParameterfv_IIIaF ), ref bglGetTexLevelParameterfv ) as DglGetTexLevelParameterfv_IIIaF;
            mDglGetTexLevelParameterfv_IIIP = GetDelegate( "glGetTexLevelParameterfv", typeof( DglGetTexLevelParameterfv_IIIP ), ref bglGetTexLevelParameterfv ) as DglGetTexLevelParameterfv_IIIP;
            mDglGetTexLevelParameteriv_IIIaI = GetDelegate( "glGetTexLevelParameteriv", typeof( DglGetTexLevelParameteriv_IIIaI ), ref bglGetTexLevelParameteriv ) as DglGetTexLevelParameteriv_IIIaI;
            mDglGetTexLevelParameteriv_IIIP = GetDelegate( "glGetTexLevelParameteriv", typeof( DglGetTexLevelParameteriv_IIIP ), ref bglGetTexLevelParameteriv ) as DglGetTexLevelParameteriv_IIIP;
            mDglGetTexParameterfv_IIaF = GetDelegate( "glGetTexParameterfv", typeof( DglGetTexParameterfv_IIaF ), ref bglGetTexParameterfv ) as DglGetTexParameterfv_IIaF;
            mDglGetTexParameterfv_IIP = GetDelegate( "glGetTexParameterfv", typeof( DglGetTexParameterfv_IIP ), ref bglGetTexParameterfv ) as DglGetTexParameterfv_IIP;
            mDglGetTexParameteriv_IIaI = GetDelegate( "glGetTexParameteriv", typeof( DglGetTexParameteriv_IIaI ), ref bglGetTexParameteriv ) as DglGetTexParameteriv_IIaI;
            mDglGetTexParameteriv_IIP = GetDelegate( "glGetTexParameteriv", typeof( DglGetTexParameteriv_IIP ), ref bglGetTexParameteriv ) as DglGetTexParameteriv_IIP;
            mDglGetTrackMatrixivNV_IIIaI = GetDelegate( "glGetTrackMatrixivNV", typeof( DglGetTrackMatrixivNV_IIIaI ), ref bglGetTrackMatrixivNV ) as DglGetTrackMatrixivNV_IIIaI;
            mDglGetTrackMatrixivNV_IIIP = GetDelegate( "glGetTrackMatrixivNV", typeof( DglGetTrackMatrixivNV_IIIP ), ref bglGetTrackMatrixivNV ) as DglGetTrackMatrixivNV_IIIP;
            mDglGetUniformfv_IIaF = GetDelegate( "glGetUniformfv", typeof( DglGetUniformfv_IIaF ), ref bglGetUniformfv ) as DglGetUniformfv_IIaF;
            mDglGetUniformfv_IIP = GetDelegate( "glGetUniformfv", typeof( DglGetUniformfv_IIP ), ref bglGetUniformfv ) as DglGetUniformfv_IIP;
            mDglGetUniformfvARB_IIaF = GetDelegate( "glGetUniformfvARB", typeof( DglGetUniformfvARB_IIaF ), ref bglGetUniformfvARB ) as DglGetUniformfvARB_IIaF;
            mDglGetUniformfvARB_IIP = GetDelegate( "glGetUniformfvARB", typeof( DglGetUniformfvARB_IIP ), ref bglGetUniformfvARB ) as DglGetUniformfvARB_IIP;
            mDglGetUniformiv_IIaI = GetDelegate( "glGetUniformiv", typeof( DglGetUniformiv_IIaI ), ref bglGetUniformiv ) as DglGetUniformiv_IIaI;
            mDglGetUniformiv_IIP = GetDelegate( "glGetUniformiv", typeof( DglGetUniformiv_IIP ), ref bglGetUniformiv ) as DglGetUniformiv_IIP;
            mDglGetUniformivARB_IIaI = GetDelegate( "glGetUniformivARB", typeof( DglGetUniformivARB_IIaI ), ref bglGetUniformivARB ) as DglGetUniformivARB_IIaI;
            mDglGetUniformivARB_IIP = GetDelegate( "glGetUniformivARB", typeof( DglGetUniformivARB_IIP ), ref bglGetUniformivARB ) as DglGetUniformivARB_IIP;
            mDglGetUniformLocation_IS = GetDelegate( "glGetUniformLocation", typeof( DglGetUniformLocation_IS ), ref bglGetUniformLocation ) as DglGetUniformLocation_IS;
            mDglGetUniformLocationARB_IS = GetDelegate( "glGetUniformLocationARB", typeof( DglGetUniformLocationARB_IS ), ref bglGetUniformLocationARB ) as DglGetUniformLocationARB_IS;
            mDglGetVariantArrayObjectfvATI_IIaF = GetDelegate( "glGetVariantArrayObjectfvATI", typeof( DglGetVariantArrayObjectfvATI_IIaF ), ref bglGetVariantArrayObjectfvATI ) as DglGetVariantArrayObjectfvATI_IIaF;
            mDglGetVariantArrayObjectfvATI_IIP = GetDelegate( "glGetVariantArrayObjectfvATI", typeof( DglGetVariantArrayObjectfvATI_IIP ), ref bglGetVariantArrayObjectfvATI ) as DglGetVariantArrayObjectfvATI_IIP;
            mDglGetVariantArrayObjectivATI_IIaI = GetDelegate( "glGetVariantArrayObjectivATI", typeof( DglGetVariantArrayObjectivATI_IIaI ), ref bglGetVariantArrayObjectivATI ) as DglGetVariantArrayObjectivATI_IIaI;
            mDglGetVariantArrayObjectivATI_IIP = GetDelegate( "glGetVariantArrayObjectivATI", typeof( DglGetVariantArrayObjectivATI_IIP ), ref bglGetVariantArrayObjectivATI ) as DglGetVariantArrayObjectivATI_IIP;
            mDglGetVariantBooleanvEXT_IIaB = GetDelegate( "glGetVariantBooleanvEXT", typeof( DglGetVariantBooleanvEXT_IIaB ), ref bglGetVariantBooleanvEXT ) as DglGetVariantBooleanvEXT_IIaB;
            mDglGetVariantBooleanvEXT_IIP = GetDelegate( "glGetVariantBooleanvEXT", typeof( DglGetVariantBooleanvEXT_IIP ), ref bglGetVariantBooleanvEXT ) as DglGetVariantBooleanvEXT_IIP;
            mDglGetVariantFloatvEXT_IIaF = GetDelegate( "glGetVariantFloatvEXT", typeof( DglGetVariantFloatvEXT_IIaF ), ref bglGetVariantFloatvEXT ) as DglGetVariantFloatvEXT_IIaF;
            mDglGetVariantFloatvEXT_IIP = GetDelegate( "glGetVariantFloatvEXT", typeof( DglGetVariantFloatvEXT_IIP ), ref bglGetVariantFloatvEXT ) as DglGetVariantFloatvEXT_IIP;
            mDglGetVariantIntegervEXT_IIaI = GetDelegate( "glGetVariantIntegervEXT", typeof( DglGetVariantIntegervEXT_IIaI ), ref bglGetVariantIntegervEXT ) as DglGetVariantIntegervEXT_IIaI;
            mDglGetVariantIntegervEXT_IIP = GetDelegate( "glGetVariantIntegervEXT", typeof( DglGetVariantIntegervEXT_IIP ), ref bglGetVariantIntegervEXT ) as DglGetVariantIntegervEXT_IIP;
            mDglGetVariantPointervEXT_IIrP = GetDelegate( "glGetVariantPointervEXT", typeof( DglGetVariantPointervEXT_IIrP ), ref bglGetVariantPointervEXT ) as DglGetVariantPointervEXT_IIrP;
            mDglGetVertexAttribArrayObjectfvATI_IIaF = GetDelegate( "glGetVertexAttribArrayObjectfvATI", typeof( DglGetVertexAttribArrayObjectfvATI_IIaF ), ref bglGetVertexAttribArrayObjectfvATI ) as DglGetVertexAttribArrayObjectfvATI_IIaF;
            mDglGetVertexAttribArrayObjectfvATI_IIP = GetDelegate( "glGetVertexAttribArrayObjectfvATI", typeof( DglGetVertexAttribArrayObjectfvATI_IIP ), ref bglGetVertexAttribArrayObjectfvATI ) as DglGetVertexAttribArrayObjectfvATI_IIP;
            mDglGetVertexAttribArrayObjectivATI_IIaI = GetDelegate( "glGetVertexAttribArrayObjectivATI", typeof( DglGetVertexAttribArrayObjectivATI_IIaI ), ref bglGetVertexAttribArrayObjectivATI ) as DglGetVertexAttribArrayObjectivATI_IIaI;
            mDglGetVertexAttribArrayObjectivATI_IIP = GetDelegate( "glGetVertexAttribArrayObjectivATI", typeof( DglGetVertexAttribArrayObjectivATI_IIP ), ref bglGetVertexAttribArrayObjectivATI ) as DglGetVertexAttribArrayObjectivATI_IIP;
            mDglGetVertexAttribdv_IIaD = GetDelegate( "glGetVertexAttribdv", typeof( DglGetVertexAttribdv_IIaD ), ref bglGetVertexAttribdv ) as DglGetVertexAttribdv_IIaD;
            mDglGetVertexAttribdv_IIP = GetDelegate( "glGetVertexAttribdv", typeof( DglGetVertexAttribdv_IIP ), ref bglGetVertexAttribdv ) as DglGetVertexAttribdv_IIP;
            mDglGetVertexAttribdvARB_IIaD = GetDelegate( "glGetVertexAttribdvARB", typeof( DglGetVertexAttribdvARB_IIaD ), ref bglGetVertexAttribdvARB ) as DglGetVertexAttribdvARB_IIaD;
            mDglGetVertexAttribdvARB_IIP = GetDelegate( "glGetVertexAttribdvARB", typeof( DglGetVertexAttribdvARB_IIP ), ref bglGetVertexAttribdvARB ) as DglGetVertexAttribdvARB_IIP;
            mDglGetVertexAttribdvNV_IIaD = GetDelegate( "glGetVertexAttribdvNV", typeof( DglGetVertexAttribdvNV_IIaD ), ref bglGetVertexAttribdvNV ) as DglGetVertexAttribdvNV_IIaD;
            mDglGetVertexAttribdvNV_IIP = GetDelegate( "glGetVertexAttribdvNV", typeof( DglGetVertexAttribdvNV_IIP ), ref bglGetVertexAttribdvNV ) as DglGetVertexAttribdvNV_IIP;
            mDglGetVertexAttribfv_IIaF = GetDelegate( "glGetVertexAttribfv", typeof( DglGetVertexAttribfv_IIaF ), ref bglGetVertexAttribfv ) as DglGetVertexAttribfv_IIaF;
            mDglGetVertexAttribfv_IIP = GetDelegate( "glGetVertexAttribfv", typeof( DglGetVertexAttribfv_IIP ), ref bglGetVertexAttribfv ) as DglGetVertexAttribfv_IIP;
            mDglGetVertexAttribfvARB_IIaF = GetDelegate( "glGetVertexAttribfvARB", typeof( DglGetVertexAttribfvARB_IIaF ), ref bglGetVertexAttribfvARB ) as DglGetVertexAttribfvARB_IIaF;
            mDglGetVertexAttribfvARB_IIP = GetDelegate( "glGetVertexAttribfvARB", typeof( DglGetVertexAttribfvARB_IIP ), ref bglGetVertexAttribfvARB ) as DglGetVertexAttribfvARB_IIP;
            mDglGetVertexAttribfvNV_IIaF = GetDelegate( "glGetVertexAttribfvNV", typeof( DglGetVertexAttribfvNV_IIaF ), ref bglGetVertexAttribfvNV ) as DglGetVertexAttribfvNV_IIaF;
            mDglGetVertexAttribfvNV_IIP = GetDelegate( "glGetVertexAttribfvNV", typeof( DglGetVertexAttribfvNV_IIP ), ref bglGetVertexAttribfvNV ) as DglGetVertexAttribfvNV_IIP;
            mDglGetVertexAttribiv_IIaI = GetDelegate( "glGetVertexAttribiv", typeof( DglGetVertexAttribiv_IIaI ), ref bglGetVertexAttribiv ) as DglGetVertexAttribiv_IIaI;
            mDglGetVertexAttribiv_IIP = GetDelegate( "glGetVertexAttribiv", typeof( DglGetVertexAttribiv_IIP ), ref bglGetVertexAttribiv ) as DglGetVertexAttribiv_IIP;
            mDglGetVertexAttribivARB_IIaI = GetDelegate( "glGetVertexAttribivARB", typeof( DglGetVertexAttribivARB_IIaI ), ref bglGetVertexAttribivARB ) as DglGetVertexAttribivARB_IIaI;
            mDglGetVertexAttribivARB_IIP = GetDelegate( "glGetVertexAttribivARB", typeof( DglGetVertexAttribivARB_IIP ), ref bglGetVertexAttribivARB ) as DglGetVertexAttribivARB_IIP;
            mDglGetVertexAttribivNV_IIaI = GetDelegate( "glGetVertexAttribivNV", typeof( DglGetVertexAttribivNV_IIaI ), ref bglGetVertexAttribivNV ) as DglGetVertexAttribivNV_IIaI;
            mDglGetVertexAttribivNV_IIP = GetDelegate( "glGetVertexAttribivNV", typeof( DglGetVertexAttribivNV_IIP ), ref bglGetVertexAttribivNV ) as DglGetVertexAttribivNV_IIP;
            mDglGetVertexAttribPointerv_IIrP = GetDelegate( "glGetVertexAttribPointerv", typeof( DglGetVertexAttribPointerv_IIrP ), ref bglGetVertexAttribPointerv ) as DglGetVertexAttribPointerv_IIrP;
            mDglGetVertexAttribPointervARB_IIrP = GetDelegate( "glGetVertexAttribPointervARB", typeof( DglGetVertexAttribPointervARB_IIrP ), ref bglGetVertexAttribPointervARB ) as DglGetVertexAttribPointervARB_IIrP;
            mDglGetVertexAttribPointervNV_IIrP = GetDelegate( "glGetVertexAttribPointervNV", typeof( DglGetVertexAttribPointervNV_IIrP ), ref bglGetVertexAttribPointervNV ) as DglGetVertexAttribPointervNV_IIrP;
            mDglGlobalAlphaFactorbSUN_B = GetDelegate( "glGlobalAlphaFactorbSUN", typeof( DglGlobalAlphaFactorbSUN_B ), ref bglGlobalAlphaFactorbSUN ) as DglGlobalAlphaFactorbSUN_B;
            mDglGlobalAlphaFactordSUN_D = GetDelegate( "glGlobalAlphaFactordSUN", typeof( DglGlobalAlphaFactordSUN_D ), ref bglGlobalAlphaFactordSUN ) as DglGlobalAlphaFactordSUN_D;
            mDglGlobalAlphaFactorfSUN_F = GetDelegate( "glGlobalAlphaFactorfSUN", typeof( DglGlobalAlphaFactorfSUN_F ), ref bglGlobalAlphaFactorfSUN ) as DglGlobalAlphaFactorfSUN_F;
            mDglGlobalAlphaFactoriSUN_I = GetDelegate( "glGlobalAlphaFactoriSUN", typeof( DglGlobalAlphaFactoriSUN_I ), ref bglGlobalAlphaFactoriSUN ) as DglGlobalAlphaFactoriSUN_I;
            mDglGlobalAlphaFactorsSUN_H = GetDelegate( "glGlobalAlphaFactorsSUN", typeof( DglGlobalAlphaFactorsSUN_H ), ref bglGlobalAlphaFactorsSUN ) as DglGlobalAlphaFactorsSUN_H;
            mDglGlobalAlphaFactorubSUN_B = GetDelegate( "glGlobalAlphaFactorubSUN", typeof( DglGlobalAlphaFactorubSUN_B ), ref bglGlobalAlphaFactorubSUN ) as DglGlobalAlphaFactorubSUN_B;
            mDglGlobalAlphaFactoruiSUN_I = GetDelegate( "glGlobalAlphaFactoruiSUN", typeof( DglGlobalAlphaFactoruiSUN_I ), ref bglGlobalAlphaFactoruiSUN ) as DglGlobalAlphaFactoruiSUN_I;
            mDglGlobalAlphaFactorusSUN_H = GetDelegate( "glGlobalAlphaFactorusSUN", typeof( DglGlobalAlphaFactorusSUN_H ), ref bglGlobalAlphaFactorusSUN ) as DglGlobalAlphaFactorusSUN_H;
            mDglHint_II = GetDelegate( "glHint", typeof( DglHint_II ), ref bglHint ) as DglHint_II;
            mDglHintPGI_II = GetDelegate( "glHintPGI", typeof( DglHintPGI_II ), ref bglHintPGI ) as DglHintPGI_II;
            mDglHistogram_IIIB = GetDelegate( "glHistogram", typeof( DglHistogram_IIIB ), ref bglHistogram ) as DglHistogram_IIIB;
            mDglHistogramEXT_IIIB = GetDelegate( "glHistogramEXT", typeof( DglHistogramEXT_IIIB ), ref bglHistogramEXT ) as DglHistogramEXT_IIIB;
            mDglIglooInterfaceSGIX_IaB = GetDelegate( "glIglooInterfaceSGIX", typeof( DglIglooInterfaceSGIX_IaB ), ref bglIglooInterfaceSGIX ) as DglIglooInterfaceSGIX_IaB;
            mDglIglooInterfaceSGIX_IP = GetDelegate( "glIglooInterfaceSGIX", typeof( DglIglooInterfaceSGIX_IP ), ref bglIglooInterfaceSGIX ) as DglIglooInterfaceSGIX_IP;
            mDglImageTransformParameterfHP_IIF = GetDelegate( "glImageTransformParameterfHP", typeof( DglImageTransformParameterfHP_IIF ), ref bglImageTransformParameterfHP ) as DglImageTransformParameterfHP_IIF;
            mDglImageTransformParameterfvHP_IIaF = GetDelegate( "glImageTransformParameterfvHP", typeof( DglImageTransformParameterfvHP_IIaF ), ref bglImageTransformParameterfvHP ) as DglImageTransformParameterfvHP_IIaF;
            mDglImageTransformParameterfvHP_IIP = GetDelegate( "glImageTransformParameterfvHP", typeof( DglImageTransformParameterfvHP_IIP ), ref bglImageTransformParameterfvHP ) as DglImageTransformParameterfvHP_IIP;
            mDglImageTransformParameteriHP_III = GetDelegate( "glImageTransformParameteriHP", typeof( DglImageTransformParameteriHP_III ), ref bglImageTransformParameteriHP ) as DglImageTransformParameteriHP_III;
            mDglImageTransformParameterivHP_IIaI = GetDelegate( "glImageTransformParameterivHP", typeof( DglImageTransformParameterivHP_IIaI ), ref bglImageTransformParameterivHP ) as DglImageTransformParameterivHP_IIaI;
            mDglImageTransformParameterivHP_IIP = GetDelegate( "glImageTransformParameterivHP", typeof( DglImageTransformParameterivHP_IIP ), ref bglImageTransformParameterivHP ) as DglImageTransformParameterivHP_IIP;
            mDglIndexd_D = GetDelegate( "glIndexd", typeof( DglIndexd_D ), ref bglIndexd ) as DglIndexd_D;
            mDglIndexdv_aD = GetDelegate( "glIndexdv", typeof( DglIndexdv_aD ), ref bglIndexdv ) as DglIndexdv_aD;
            mDglIndexdv_P = GetDelegate( "glIndexdv", typeof( DglIndexdv_P ), ref bglIndexdv ) as DglIndexdv_P;
            mDglIndexf_F = GetDelegate( "glIndexf", typeof( DglIndexf_F ), ref bglIndexf ) as DglIndexf_F;
            mDglIndexFuncEXT_IF = GetDelegate( "glIndexFuncEXT", typeof( DglIndexFuncEXT_IF ), ref bglIndexFuncEXT ) as DglIndexFuncEXT_IF;
            mDglIndexfv_aF = GetDelegate( "glIndexfv", typeof( DglIndexfv_aF ), ref bglIndexfv ) as DglIndexfv_aF;
            mDglIndexfv_P = GetDelegate( "glIndexfv", typeof( DglIndexfv_P ), ref bglIndexfv ) as DglIndexfv_P;
            mDglIndexi_I = GetDelegate( "glIndexi", typeof( DglIndexi_I ), ref bglIndexi ) as DglIndexi_I;
            mDglIndexiv_aI = GetDelegate( "glIndexiv", typeof( DglIndexiv_aI ), ref bglIndexiv ) as DglIndexiv_aI;
            mDglIndexiv_P = GetDelegate( "glIndexiv", typeof( DglIndexiv_P ), ref bglIndexiv ) as DglIndexiv_P;
            mDglIndexMask_I = GetDelegate( "glIndexMask", typeof( DglIndexMask_I ), ref bglIndexMask ) as DglIndexMask_I;
            mDglIndexMaterialEXT_II = GetDelegate( "glIndexMaterialEXT", typeof( DglIndexMaterialEXT_II ), ref bglIndexMaterialEXT ) as DglIndexMaterialEXT_II;
            mDglIndexPointer_IIaB = GetDelegate( "glIndexPointer", typeof( DglIndexPointer_IIaB ), ref bglIndexPointer ) as DglIndexPointer_IIaB;
            mDglIndexPointer_IIaH = GetDelegate( "glIndexPointer", typeof( DglIndexPointer_IIaH ), ref bglIndexPointer ) as DglIndexPointer_IIaH;
            mDglIndexPointer_IIaI = GetDelegate( "glIndexPointer", typeof( DglIndexPointer_IIaI ), ref bglIndexPointer ) as DglIndexPointer_IIaI;
            mDglIndexPointer_IIaF = GetDelegate( "glIndexPointer", typeof( DglIndexPointer_IIaF ), ref bglIndexPointer ) as DglIndexPointer_IIaF;
            mDglIndexPointer_IIaD = GetDelegate( "glIndexPointer", typeof( DglIndexPointer_IIaD ), ref bglIndexPointer ) as DglIndexPointer_IIaD;
            mDglIndexPointer_IIP = GetDelegate( "glIndexPointer", typeof( DglIndexPointer_IIP ), ref bglIndexPointer ) as DglIndexPointer_IIP;
            mDglIndexPointerEXT_IIIaB = GetDelegate( "glIndexPointerEXT", typeof( DglIndexPointerEXT_IIIaB ), ref bglIndexPointerEXT ) as DglIndexPointerEXT_IIIaB;
            mDglIndexPointerEXT_IIIaH = GetDelegate( "glIndexPointerEXT", typeof( DglIndexPointerEXT_IIIaH ), ref bglIndexPointerEXT ) as DglIndexPointerEXT_IIIaH;
            mDglIndexPointerEXT_IIIaI = GetDelegate( "glIndexPointerEXT", typeof( DglIndexPointerEXT_IIIaI ), ref bglIndexPointerEXT ) as DglIndexPointerEXT_IIIaI;
            mDglIndexPointerEXT_IIIaF = GetDelegate( "glIndexPointerEXT", typeof( DglIndexPointerEXT_IIIaF ), ref bglIndexPointerEXT ) as DglIndexPointerEXT_IIIaF;
            mDglIndexPointerEXT_IIIaD = GetDelegate( "glIndexPointerEXT", typeof( DglIndexPointerEXT_IIIaD ), ref bglIndexPointerEXT ) as DglIndexPointerEXT_IIIaD;
            mDglIndexPointerEXT_IIIP = GetDelegate( "glIndexPointerEXT", typeof( DglIndexPointerEXT_IIIP ), ref bglIndexPointerEXT ) as DglIndexPointerEXT_IIIP;
            mDglIndexPointerListIBM_IIrPaB = GetDelegate( "glIndexPointerListIBM", typeof( DglIndexPointerListIBM_IIrPaB ), ref bglIndexPointerListIBM ) as DglIndexPointerListIBM_IIrPaB;
            mDglIndexPointerListIBM_IIrPaH = GetDelegate( "glIndexPointerListIBM", typeof( DglIndexPointerListIBM_IIrPaH ), ref bglIndexPointerListIBM ) as DglIndexPointerListIBM_IIrPaH;
            mDglIndexPointerListIBM_IIrPaI = GetDelegate( "glIndexPointerListIBM", typeof( DglIndexPointerListIBM_IIrPaI ), ref bglIndexPointerListIBM ) as DglIndexPointerListIBM_IIrPaI;
            mDglIndexPointerListIBM_IIrPaF = GetDelegate( "glIndexPointerListIBM", typeof( DglIndexPointerListIBM_IIrPaF ), ref bglIndexPointerListIBM ) as DglIndexPointerListIBM_IIrPaF;
            mDglIndexPointerListIBM_IIrPaD = GetDelegate( "glIndexPointerListIBM", typeof( DglIndexPointerListIBM_IIrPaD ), ref bglIndexPointerListIBM ) as DglIndexPointerListIBM_IIrPaD;
            mDglIndexPointerListIBM_IIrPP = GetDelegate( "glIndexPointerListIBM", typeof( DglIndexPointerListIBM_IIrPP ), ref bglIndexPointerListIBM ) as DglIndexPointerListIBM_IIrPP;
            mDglIndexs_H = GetDelegate( "glIndexs", typeof( DglIndexs_H ), ref bglIndexs ) as DglIndexs_H;
            mDglIndexsv_aH = GetDelegate( "glIndexsv", typeof( DglIndexsv_aH ), ref bglIndexsv ) as DglIndexsv_aH;
            mDglIndexsv_P = GetDelegate( "glIndexsv", typeof( DglIndexsv_P ), ref bglIndexsv ) as DglIndexsv_P;
            mDglIndexub_B = GetDelegate( "glIndexub", typeof( DglIndexub_B ), ref bglIndexub ) as DglIndexub_B;
            mDglIndexubv_aB = GetDelegate( "glIndexubv", typeof( DglIndexubv_aB ), ref bglIndexubv ) as DglIndexubv_aB;
            mDglIndexubv_P = GetDelegate( "glIndexubv", typeof( DglIndexubv_P ), ref bglIndexubv ) as DglIndexubv_P;
            mDglInitNames_V = GetDelegate( "glInitNames", typeof( DglInitNames_V ), ref bglInitNames ) as DglInitNames_V;
            mDglInsertComponentEXT_III = GetDelegate( "glInsertComponentEXT", typeof( DglInsertComponentEXT_III ), ref bglInsertComponentEXT ) as DglInsertComponentEXT_III;
            mDglInstrumentsBufferSGIX_IaI = GetDelegate( "glInstrumentsBufferSGIX", typeof( DglInstrumentsBufferSGIX_IaI ), ref bglInstrumentsBufferSGIX ) as DglInstrumentsBufferSGIX_IaI;
            mDglInstrumentsBufferSGIX_IP = GetDelegate( "glInstrumentsBufferSGIX", typeof( DglInstrumentsBufferSGIX_IP ), ref bglInstrumentsBufferSGIX ) as DglInstrumentsBufferSGIX_IP;
            mDglInterleavedArrays_IIaB = GetDelegate( "glInterleavedArrays", typeof( DglInterleavedArrays_IIaB ), ref bglInterleavedArrays ) as DglInterleavedArrays_IIaB;
            mDglInterleavedArrays_IIaF = GetDelegate( "glInterleavedArrays", typeof( DglInterleavedArrays_IIaF ), ref bglInterleavedArrays ) as DglInterleavedArrays_IIaF;
            mDglInterleavedArrays_IIP = GetDelegate( "glInterleavedArrays", typeof( DglInterleavedArrays_IIP ), ref bglInterleavedArrays ) as DglInterleavedArrays_IIP;
            mDglIsAsyncMarkerSGIX_I = GetDelegate( "glIsAsyncMarkerSGIX", typeof( DglIsAsyncMarkerSGIX_I ), ref bglIsAsyncMarkerSGIX ) as DglIsAsyncMarkerSGIX_I;
            mDglIsBuffer_I = GetDelegate( "glIsBuffer", typeof( DglIsBuffer_I ), ref bglIsBuffer ) as DglIsBuffer_I;
            mDglIsBufferARB_I = GetDelegate( "glIsBufferARB", typeof( DglIsBufferARB_I ), ref bglIsBufferARB ) as DglIsBufferARB_I;
            mDglIsEnabled_I = GetDelegate( "glIsEnabled", typeof( DglIsEnabled_I ), ref bglIsEnabled ) as DglIsEnabled_I;
            mDglIsFenceAPPLE_I = GetDelegate( "glIsFenceAPPLE", typeof( DglIsFenceAPPLE_I ), ref bglIsFenceAPPLE ) as DglIsFenceAPPLE_I;
            mDglIsFenceNV_I = GetDelegate( "glIsFenceNV", typeof( DglIsFenceNV_I ), ref bglIsFenceNV ) as DglIsFenceNV_I;
            mDglIsFramebufferEXT_I = GetDelegate( "glIsFramebufferEXT", typeof( DglIsFramebufferEXT_I ), ref bglIsFramebufferEXT ) as DglIsFramebufferEXT_I;
            mDglIsList_I = GetDelegate( "glIsList", typeof( DglIsList_I ), ref bglIsList ) as DglIsList_I;
            mDglIsObjectBufferATI_I = GetDelegate( "glIsObjectBufferATI", typeof( DglIsObjectBufferATI_I ), ref bglIsObjectBufferATI ) as DglIsObjectBufferATI_I;
            mDglIsOcclusionQueryNV_I = GetDelegate( "glIsOcclusionQueryNV", typeof( DglIsOcclusionQueryNV_I ), ref bglIsOcclusionQueryNV ) as DglIsOcclusionQueryNV_I;
            mDglIsProgram_I = GetDelegate( "glIsProgram", typeof( DglIsProgram_I ), ref bglIsProgram ) as DglIsProgram_I;
            mDglIsProgramARB_I = GetDelegate( "glIsProgramARB", typeof( DglIsProgramARB_I ), ref bglIsProgramARB ) as DglIsProgramARB_I;
            mDglIsProgramNV_I = GetDelegate( "glIsProgramNV", typeof( DglIsProgramNV_I ), ref bglIsProgramNV ) as DglIsProgramNV_I;
            mDglIsQuery_I = GetDelegate( "glIsQuery", typeof( DglIsQuery_I ), ref bglIsQuery ) as DglIsQuery_I;
            mDglIsQueryARB_I = GetDelegate( "glIsQueryARB", typeof( DglIsQueryARB_I ), ref bglIsQueryARB ) as DglIsQueryARB_I;
            mDglIsRenderbufferEXT_I = GetDelegate( "glIsRenderbufferEXT", typeof( DglIsRenderbufferEXT_I ), ref bglIsRenderbufferEXT ) as DglIsRenderbufferEXT_I;
            mDglIsShader_I = GetDelegate( "glIsShader", typeof( DglIsShader_I ), ref bglIsShader ) as DglIsShader_I;
            mDglIsTexture_I = GetDelegate( "glIsTexture", typeof( DglIsTexture_I ), ref bglIsTexture ) as DglIsTexture_I;
            mDglIsTextureEXT_I = GetDelegate( "glIsTextureEXT", typeof( DglIsTextureEXT_I ), ref bglIsTextureEXT ) as DglIsTextureEXT_I;
            mDglIsVariantEnabledEXT_II = GetDelegate( "glIsVariantEnabledEXT", typeof( DglIsVariantEnabledEXT_II ), ref bglIsVariantEnabledEXT ) as DglIsVariantEnabledEXT_II;
            mDglIsVertexArrayAPPLE_I = GetDelegate( "glIsVertexArrayAPPLE", typeof( DglIsVertexArrayAPPLE_I ), ref bglIsVertexArrayAPPLE ) as DglIsVertexArrayAPPLE_I;
            mDglLightEnviSGIX_II = GetDelegate( "glLightEnviSGIX", typeof( DglLightEnviSGIX_II ), ref bglLightEnviSGIX ) as DglLightEnviSGIX_II;
            mDglLightf_IIF = GetDelegate( "glLightf", typeof( DglLightf_IIF ), ref bglLightf ) as DglLightf_IIF;
            mDglLightfv_IIaF = GetDelegate( "glLightfv", typeof( DglLightfv_IIaF ), ref bglLightfv ) as DglLightfv_IIaF;
            mDglLightfv_IIP = GetDelegate( "glLightfv", typeof( DglLightfv_IIP ), ref bglLightfv ) as DglLightfv_IIP;
            mDglLighti_III = GetDelegate( "glLighti", typeof( DglLighti_III ), ref bglLighti ) as DglLighti_III;
            mDglLightiv_IIaI = GetDelegate( "glLightiv", typeof( DglLightiv_IIaI ), ref bglLightiv ) as DglLightiv_IIaI;
            mDglLightiv_IIP = GetDelegate( "glLightiv", typeof( DglLightiv_IIP ), ref bglLightiv ) as DglLightiv_IIP;
            mDglLightModelf_IF = GetDelegate( "glLightModelf", typeof( DglLightModelf_IF ), ref bglLightModelf ) as DglLightModelf_IF;
            mDglLightModelfv_IaF = GetDelegate( "glLightModelfv", typeof( DglLightModelfv_IaF ), ref bglLightModelfv ) as DglLightModelfv_IaF;
            mDglLightModelfv_IP = GetDelegate( "glLightModelfv", typeof( DglLightModelfv_IP ), ref bglLightModelfv ) as DglLightModelfv_IP;
            mDglLightModeli_II = GetDelegate( "glLightModeli", typeof( DglLightModeli_II ), ref bglLightModeli ) as DglLightModeli_II;
            mDglLightModeliv_IaI = GetDelegate( "glLightModeliv", typeof( DglLightModeliv_IaI ), ref bglLightModeliv ) as DglLightModeliv_IaI;
            mDglLightModeliv_IP = GetDelegate( "glLightModeliv", typeof( DglLightModeliv_IP ), ref bglLightModeliv ) as DglLightModeliv_IP;
            mDglLineStipple_IH = GetDelegate( "glLineStipple", typeof( DglLineStipple_IH ), ref bglLineStipple ) as DglLineStipple_IH;
            mDglLineWidth_F = GetDelegate( "glLineWidth", typeof( DglLineWidth_F ), ref bglLineWidth ) as DglLineWidth_F;
            mDglLinkProgram_I = GetDelegate( "glLinkProgram", typeof( DglLinkProgram_I ), ref bglLinkProgram ) as DglLinkProgram_I;
            mDglLinkProgramARB_I = GetDelegate( "glLinkProgramARB", typeof( DglLinkProgramARB_I ), ref bglLinkProgramARB ) as DglLinkProgramARB_I;
            mDglListBase_I = GetDelegate( "glListBase", typeof( DglListBase_I ), ref bglListBase ) as DglListBase_I;
            mDglListParameterfSGIX_IIF = GetDelegate( "glListParameterfSGIX", typeof( DglListParameterfSGIX_IIF ), ref bglListParameterfSGIX ) as DglListParameterfSGIX_IIF;
            mDglListParameterfvSGIX_IIaF = GetDelegate( "glListParameterfvSGIX", typeof( DglListParameterfvSGIX_IIaF ), ref bglListParameterfvSGIX ) as DglListParameterfvSGIX_IIaF;
            mDglListParameterfvSGIX_IIP = GetDelegate( "glListParameterfvSGIX", typeof( DglListParameterfvSGIX_IIP ), ref bglListParameterfvSGIX ) as DglListParameterfvSGIX_IIP;
            mDglListParameteriSGIX_III = GetDelegate( "glListParameteriSGIX", typeof( DglListParameteriSGIX_III ), ref bglListParameteriSGIX ) as DglListParameteriSGIX_III;
            mDglListParameterivSGIX_IIaI = GetDelegate( "glListParameterivSGIX", typeof( DglListParameterivSGIX_IIaI ), ref bglListParameterivSGIX ) as DglListParameterivSGIX_IIaI;
            mDglListParameterivSGIX_IIP = GetDelegate( "glListParameterivSGIX", typeof( DglListParameterivSGIX_IIP ), ref bglListParameterivSGIX ) as DglListParameterivSGIX_IIP;
            mDglLoadIdentity_V = GetDelegate( "glLoadIdentity", typeof( DglLoadIdentity_V ), ref bglLoadIdentity ) as DglLoadIdentity_V;
            mDglLoadIdentityDeformationMapSGIX_I = GetDelegate( "glLoadIdentityDeformationMapSGIX", typeof( DglLoadIdentityDeformationMapSGIX_I ), ref bglLoadIdentityDeformationMapSGIX ) as DglLoadIdentityDeformationMapSGIX_I;
            mDglLoadMatrixd_aD = GetDelegate( "glLoadMatrixd", typeof( DglLoadMatrixd_aD ), ref bglLoadMatrixd ) as DglLoadMatrixd_aD;
            mDglLoadMatrixd_P = GetDelegate( "glLoadMatrixd", typeof( DglLoadMatrixd_P ), ref bglLoadMatrixd ) as DglLoadMatrixd_P;
            mDglLoadMatrixf_aF = GetDelegate( "glLoadMatrixf", typeof( DglLoadMatrixf_aF ), ref bglLoadMatrixf ) as DglLoadMatrixf_aF;
            mDglLoadMatrixf_P = GetDelegate( "glLoadMatrixf", typeof( DglLoadMatrixf_P ), ref bglLoadMatrixf ) as DglLoadMatrixf_P;
            mDglLoadName_I = GetDelegate( "glLoadName", typeof( DglLoadName_I ), ref bglLoadName ) as DglLoadName_I;
            mDglLoadProgramNV_IIIaB = GetDelegate( "glLoadProgramNV", typeof( DglLoadProgramNV_IIIaB ), ref bglLoadProgramNV ) as DglLoadProgramNV_IIIaB;
            mDglLoadProgramNV_IIIP = GetDelegate( "glLoadProgramNV", typeof( DglLoadProgramNV_IIIP ), ref bglLoadProgramNV ) as DglLoadProgramNV_IIIP;
            mDglLoadTransposeMatrixd_aD = GetDelegate( "glLoadTransposeMatrixd", typeof( DglLoadTransposeMatrixd_aD ), ref bglLoadTransposeMatrixd ) as DglLoadTransposeMatrixd_aD;
            mDglLoadTransposeMatrixd_P = GetDelegate( "glLoadTransposeMatrixd", typeof( DglLoadTransposeMatrixd_P ), ref bglLoadTransposeMatrixd ) as DglLoadTransposeMatrixd_P;
            mDglLoadTransposeMatrixdARB_aD = GetDelegate( "glLoadTransposeMatrixdARB", typeof( DglLoadTransposeMatrixdARB_aD ), ref bglLoadTransposeMatrixdARB ) as DglLoadTransposeMatrixdARB_aD;
            mDglLoadTransposeMatrixdARB_P = GetDelegate( "glLoadTransposeMatrixdARB", typeof( DglLoadTransposeMatrixdARB_P ), ref bglLoadTransposeMatrixdARB ) as DglLoadTransposeMatrixdARB_P;
            mDglLoadTransposeMatrixf_aF = GetDelegate( "glLoadTransposeMatrixf", typeof( DglLoadTransposeMatrixf_aF ), ref bglLoadTransposeMatrixf ) as DglLoadTransposeMatrixf_aF;
            mDglLoadTransposeMatrixf_P = GetDelegate( "glLoadTransposeMatrixf", typeof( DglLoadTransposeMatrixf_P ), ref bglLoadTransposeMatrixf ) as DglLoadTransposeMatrixf_P;
            mDglLoadTransposeMatrixfARB_aF = GetDelegate( "glLoadTransposeMatrixfARB", typeof( DglLoadTransposeMatrixfARB_aF ), ref bglLoadTransposeMatrixfARB ) as DglLoadTransposeMatrixfARB_aF;
            mDglLoadTransposeMatrixfARB_P = GetDelegate( "glLoadTransposeMatrixfARB", typeof( DglLoadTransposeMatrixfARB_P ), ref bglLoadTransposeMatrixfARB ) as DglLoadTransposeMatrixfARB_P;
            mDglLockArraysEXT_II = GetDelegate( "glLockArraysEXT", typeof( DglLockArraysEXT_II ), ref bglLockArraysEXT ) as DglLockArraysEXT_II;
            mDglLogicOp_I = GetDelegate( "glLogicOp", typeof( DglLogicOp_I ), ref bglLogicOp ) as DglLogicOp_I;
            mDglMap1d_IDDIIaD = GetDelegate( "glMap1d", typeof( DglMap1d_IDDIIaD ), ref bglMap1d ) as DglMap1d_IDDIIaD;
            mDglMap1d_IDDIIP = GetDelegate( "glMap1d", typeof( DglMap1d_IDDIIP ), ref bglMap1d ) as DglMap1d_IDDIIP;
            mDglMap1f_IFFIIaF = GetDelegate( "glMap1f", typeof( DglMap1f_IFFIIaF ), ref bglMap1f ) as DglMap1f_IFFIIaF;
            mDglMap1f_IFFIIP = GetDelegate( "glMap1f", typeof( DglMap1f_IFFIIP ), ref bglMap1f ) as DglMap1f_IFFIIP;
            mDglMap2d_IDDIIDDIIaD = GetDelegate( "glMap2d", typeof( DglMap2d_IDDIIDDIIaD ), ref bglMap2d ) as DglMap2d_IDDIIDDIIaD;
            mDglMap2d_IDDIIDDIIP = GetDelegate( "glMap2d", typeof( DglMap2d_IDDIIDDIIP ), ref bglMap2d ) as DglMap2d_IDDIIDDIIP;
            mDglMap2f_IFFIIFFIIaF = GetDelegate( "glMap2f", typeof( DglMap2f_IFFIIFFIIaF ), ref bglMap2f ) as DglMap2f_IFFIIFFIIaF;
            mDglMap2f_IFFIIFFIIP = GetDelegate( "glMap2f", typeof( DglMap2f_IFFIIFFIIP ), ref bglMap2f ) as DglMap2f_IFFIIFFIIP;
            mDglMapBuffer_II = GetDelegate( "glMapBuffer", typeof( DglMapBuffer_II ), ref bglMapBuffer ) as DglMapBuffer_II;
            mDglMapBufferARB_II = GetDelegate( "glMapBufferARB", typeof( DglMapBufferARB_II ), ref bglMapBufferARB ) as DglMapBufferARB_II;
            mDglMapControlPointsNV_IIIIIIIBaB = GetDelegate( "glMapControlPointsNV", typeof( DglMapControlPointsNV_IIIIIIIBaB ), ref bglMapControlPointsNV ) as DglMapControlPointsNV_IIIIIIIBaB;
            mDglMapControlPointsNV_IIIIIIIBaF = GetDelegate( "glMapControlPointsNV", typeof( DglMapControlPointsNV_IIIIIIIBaF ), ref bglMapControlPointsNV ) as DglMapControlPointsNV_IIIIIIIBaF;
            mDglMapControlPointsNV_IIIIIIIBP = GetDelegate( "glMapControlPointsNV", typeof( DglMapControlPointsNV_IIIIIIIBP ), ref bglMapControlPointsNV ) as DglMapControlPointsNV_IIIIIIIBP;
            mDglMapGrid1d_IDD = GetDelegate( "glMapGrid1d", typeof( DglMapGrid1d_IDD ), ref bglMapGrid1d ) as DglMapGrid1d_IDD;
            mDglMapGrid1f_IFF = GetDelegate( "glMapGrid1f", typeof( DglMapGrid1f_IFF ), ref bglMapGrid1f ) as DglMapGrid1f_IFF;
            mDglMapGrid2d_IDDIDD = GetDelegate( "glMapGrid2d", typeof( DglMapGrid2d_IDDIDD ), ref bglMapGrid2d ) as DglMapGrid2d_IDDIDD;
            mDglMapGrid2f_IFFIFF = GetDelegate( "glMapGrid2f", typeof( DglMapGrid2f_IFFIFF ), ref bglMapGrid2f ) as DglMapGrid2f_IFFIFF;
            mDglMapObjectBufferATI_I = GetDelegate( "glMapObjectBufferATI", typeof( DglMapObjectBufferATI_I ), ref bglMapObjectBufferATI ) as DglMapObjectBufferATI_I;
            mDglMapParameterfvNV_IIaF = GetDelegate( "glMapParameterfvNV", typeof( DglMapParameterfvNV_IIaF ), ref bglMapParameterfvNV ) as DglMapParameterfvNV_IIaF;
            mDglMapParameterfvNV_IIP = GetDelegate( "glMapParameterfvNV", typeof( DglMapParameterfvNV_IIP ), ref bglMapParameterfvNV ) as DglMapParameterfvNV_IIP;
            mDglMapParameterivNV_IIaI = GetDelegate( "glMapParameterivNV", typeof( DglMapParameterivNV_IIaI ), ref bglMapParameterivNV ) as DglMapParameterivNV_IIaI;
            mDglMapParameterivNV_IIP = GetDelegate( "glMapParameterivNV", typeof( DglMapParameterivNV_IIP ), ref bglMapParameterivNV ) as DglMapParameterivNV_IIP;
            mDglMaterialf_IIF = GetDelegate( "glMaterialf", typeof( DglMaterialf_IIF ), ref bglMaterialf ) as DglMaterialf_IIF;
            mDglMaterialfv_IIaF = GetDelegate( "glMaterialfv", typeof( DglMaterialfv_IIaF ), ref bglMaterialfv ) as DglMaterialfv_IIaF;
            mDglMaterialfv_IIP = GetDelegate( "glMaterialfv", typeof( DglMaterialfv_IIP ), ref bglMaterialfv ) as DglMaterialfv_IIP;
            mDglMateriali_III = GetDelegate( "glMateriali", typeof( DglMateriali_III ), ref bglMateriali ) as DglMateriali_III;
            mDglMaterialiv_IIaI = GetDelegate( "glMaterialiv", typeof( DglMaterialiv_IIaI ), ref bglMaterialiv ) as DglMaterialiv_IIaI;
            mDglMaterialiv_IIP = GetDelegate( "glMaterialiv", typeof( DglMaterialiv_IIP ), ref bglMaterialiv ) as DglMaterialiv_IIP;
            mDglMatrixIndexPointerARB_IIIaI = GetDelegate( "glMatrixIndexPointerARB", typeof( DglMatrixIndexPointerARB_IIIaI ), ref bglMatrixIndexPointerARB ) as DglMatrixIndexPointerARB_IIIaI;
            mDglMatrixIndexPointerARB_IIIP = GetDelegate( "glMatrixIndexPointerARB", typeof( DglMatrixIndexPointerARB_IIIP ), ref bglMatrixIndexPointerARB ) as DglMatrixIndexPointerARB_IIIP;
            mDglMatrixIndexubvARB_IaB = GetDelegate( "glMatrixIndexubvARB", typeof( DglMatrixIndexubvARB_IaB ), ref bglMatrixIndexubvARB ) as DglMatrixIndexubvARB_IaB;
            mDglMatrixIndexubvARB_IP = GetDelegate( "glMatrixIndexubvARB", typeof( DglMatrixIndexubvARB_IP ), ref bglMatrixIndexubvARB ) as DglMatrixIndexubvARB_IP;
            mDglMatrixIndexuivARB_IaI = GetDelegate( "glMatrixIndexuivARB", typeof( DglMatrixIndexuivARB_IaI ), ref bglMatrixIndexuivARB ) as DglMatrixIndexuivARB_IaI;
            mDglMatrixIndexuivARB_IP = GetDelegate( "glMatrixIndexuivARB", typeof( DglMatrixIndexuivARB_IP ), ref bglMatrixIndexuivARB ) as DglMatrixIndexuivARB_IP;
            mDglMatrixIndexusvARB_IaH = GetDelegate( "glMatrixIndexusvARB", typeof( DglMatrixIndexusvARB_IaH ), ref bglMatrixIndexusvARB ) as DglMatrixIndexusvARB_IaH;
            mDglMatrixIndexusvARB_IP = GetDelegate( "glMatrixIndexusvARB", typeof( DglMatrixIndexusvARB_IP ), ref bglMatrixIndexusvARB ) as DglMatrixIndexusvARB_IP;
            mDglMatrixMode_I = GetDelegate( "glMatrixMode", typeof( DglMatrixMode_I ), ref bglMatrixMode ) as DglMatrixMode_I;
            mDglMinmax_IIB = GetDelegate( "glMinmax", typeof( DglMinmax_IIB ), ref bglMinmax ) as DglMinmax_IIB;
            mDglMinmaxEXT_IIB = GetDelegate( "glMinmaxEXT", typeof( DglMinmaxEXT_IIB ), ref bglMinmaxEXT ) as DglMinmaxEXT_IIB;
            mDglMultiDrawArrays_IrIrII = GetDelegate( "glMultiDrawArrays", typeof( DglMultiDrawArrays_IrIrII ), ref bglMultiDrawArrays ) as DglMultiDrawArrays_IrIrII;
            mDglMultiDrawArraysEXT_IrIrII = GetDelegate( "glMultiDrawArraysEXT", typeof( DglMultiDrawArraysEXT_IrIrII ), ref bglMultiDrawArraysEXT ) as DglMultiDrawArraysEXT_IrIrII;
            mDglMultiDrawElementArrayAPPLE_IrIrII = GetDelegate( "glMultiDrawElementArrayAPPLE", typeof( DglMultiDrawElementArrayAPPLE_IrIrII ), ref bglMultiDrawElementArrayAPPLE ) as DglMultiDrawElementArrayAPPLE_IrIrII;
            mDglMultiDrawElements_IrIIrPI = GetDelegate( "glMultiDrawElements", typeof( DglMultiDrawElements_IrIIrPI ), ref bglMultiDrawElements ) as DglMultiDrawElements_IrIIrPI;
            mDglMultiDrawElementsEXT_IrIIrPI = GetDelegate( "glMultiDrawElementsEXT", typeof( DglMultiDrawElementsEXT_IrIIrPI ), ref bglMultiDrawElementsEXT ) as DglMultiDrawElementsEXT_IrIIrPI;
            mDglMultiDrawRangeElementArrayAPPLE_IIIrIrII = GetDelegate( "glMultiDrawRangeElementArrayAPPLE", typeof( DglMultiDrawRangeElementArrayAPPLE_IIIrIrII ), ref bglMultiDrawRangeElementArrayAPPLE ) as DglMultiDrawRangeElementArrayAPPLE_IIIrIrII;
            mDglMultiModeDrawArraysIBM_rIrIrIII = GetDelegate( "glMultiModeDrawArraysIBM", typeof( DglMultiModeDrawArraysIBM_rIrIrIII ), ref bglMultiModeDrawArraysIBM ) as DglMultiModeDrawArraysIBM_rIrIrIII;
            mDglMultiModeDrawElementsIBM_rIrIIrPII = GetDelegate( "glMultiModeDrawElementsIBM", typeof( DglMultiModeDrawElementsIBM_rIrIIrPII ), ref bglMultiModeDrawElementsIBM ) as DglMultiModeDrawElementsIBM_rIrIIrPII;
            mDglMultiTexCoord1d_ID = GetDelegate( "glMultiTexCoord1d", typeof( DglMultiTexCoord1d_ID ), ref bglMultiTexCoord1d ) as DglMultiTexCoord1d_ID;
            mDglMultiTexCoord1dARB_ID = GetDelegate( "glMultiTexCoord1dARB", typeof( DglMultiTexCoord1dARB_ID ), ref bglMultiTexCoord1dARB ) as DglMultiTexCoord1dARB_ID;
            mDglMultiTexCoord1dv_IaD = GetDelegate( "glMultiTexCoord1dv", typeof( DglMultiTexCoord1dv_IaD ), ref bglMultiTexCoord1dv ) as DglMultiTexCoord1dv_IaD;
            mDglMultiTexCoord1dv_IP = GetDelegate( "glMultiTexCoord1dv", typeof( DglMultiTexCoord1dv_IP ), ref bglMultiTexCoord1dv ) as DglMultiTexCoord1dv_IP;
            mDglMultiTexCoord1dvARB_IaD = GetDelegate( "glMultiTexCoord1dvARB", typeof( DglMultiTexCoord1dvARB_IaD ), ref bglMultiTexCoord1dvARB ) as DglMultiTexCoord1dvARB_IaD;
            mDglMultiTexCoord1dvARB_IP = GetDelegate( "glMultiTexCoord1dvARB", typeof( DglMultiTexCoord1dvARB_IP ), ref bglMultiTexCoord1dvARB ) as DglMultiTexCoord1dvARB_IP;
            mDglMultiTexCoord1f_IF = GetDelegate( "glMultiTexCoord1f", typeof( DglMultiTexCoord1f_IF ), ref bglMultiTexCoord1f ) as DglMultiTexCoord1f_IF;
            mDglMultiTexCoord1fARB_IF = GetDelegate( "glMultiTexCoord1fARB", typeof( DglMultiTexCoord1fARB_IF ), ref bglMultiTexCoord1fARB ) as DglMultiTexCoord1fARB_IF;
            mDglMultiTexCoord1fv_IaF = GetDelegate( "glMultiTexCoord1fv", typeof( DglMultiTexCoord1fv_IaF ), ref bglMultiTexCoord1fv ) as DglMultiTexCoord1fv_IaF;
            mDglMultiTexCoord1fv_IP = GetDelegate( "glMultiTexCoord1fv", typeof( DglMultiTexCoord1fv_IP ), ref bglMultiTexCoord1fv ) as DglMultiTexCoord1fv_IP;
            mDglMultiTexCoord1fvARB_IaF = GetDelegate( "glMultiTexCoord1fvARB", typeof( DglMultiTexCoord1fvARB_IaF ), ref bglMultiTexCoord1fvARB ) as DglMultiTexCoord1fvARB_IaF;
            mDglMultiTexCoord1fvARB_IP = GetDelegate( "glMultiTexCoord1fvARB", typeof( DglMultiTexCoord1fvARB_IP ), ref bglMultiTexCoord1fvARB ) as DglMultiTexCoord1fvARB_IP;
            mDglMultiTexCoord1hNV_IH = GetDelegate( "glMultiTexCoord1hNV", typeof( DglMultiTexCoord1hNV_IH ), ref bglMultiTexCoord1hNV ) as DglMultiTexCoord1hNV_IH;
            mDglMultiTexCoord1hvNV_IaH = GetDelegate( "glMultiTexCoord1hvNV", typeof( DglMultiTexCoord1hvNV_IaH ), ref bglMultiTexCoord1hvNV ) as DglMultiTexCoord1hvNV_IaH;
            mDglMultiTexCoord1hvNV_IP = GetDelegate( "glMultiTexCoord1hvNV", typeof( DglMultiTexCoord1hvNV_IP ), ref bglMultiTexCoord1hvNV ) as DglMultiTexCoord1hvNV_IP;
            mDglMultiTexCoord1i_II = GetDelegate( "glMultiTexCoord1i", typeof( DglMultiTexCoord1i_II ), ref bglMultiTexCoord1i ) as DglMultiTexCoord1i_II;
            mDglMultiTexCoord1iARB_II = GetDelegate( "glMultiTexCoord1iARB", typeof( DglMultiTexCoord1iARB_II ), ref bglMultiTexCoord1iARB ) as DglMultiTexCoord1iARB_II;
            mDglMultiTexCoord1iv_IaI = GetDelegate( "glMultiTexCoord1iv", typeof( DglMultiTexCoord1iv_IaI ), ref bglMultiTexCoord1iv ) as DglMultiTexCoord1iv_IaI;
            mDglMultiTexCoord1iv_IP = GetDelegate( "glMultiTexCoord1iv", typeof( DglMultiTexCoord1iv_IP ), ref bglMultiTexCoord1iv ) as DglMultiTexCoord1iv_IP;
            mDglMultiTexCoord1ivARB_IaI = GetDelegate( "glMultiTexCoord1ivARB", typeof( DglMultiTexCoord1ivARB_IaI ), ref bglMultiTexCoord1ivARB ) as DglMultiTexCoord1ivARB_IaI;
            mDglMultiTexCoord1ivARB_IP = GetDelegate( "glMultiTexCoord1ivARB", typeof( DglMultiTexCoord1ivARB_IP ), ref bglMultiTexCoord1ivARB ) as DglMultiTexCoord1ivARB_IP;
            mDglMultiTexCoord1s_IH = GetDelegate( "glMultiTexCoord1s", typeof( DglMultiTexCoord1s_IH ), ref bglMultiTexCoord1s ) as DglMultiTexCoord1s_IH;
            mDglMultiTexCoord1sARB_IH = GetDelegate( "glMultiTexCoord1sARB", typeof( DglMultiTexCoord1sARB_IH ), ref bglMultiTexCoord1sARB ) as DglMultiTexCoord1sARB_IH;
            mDglMultiTexCoord1sv_IaH = GetDelegate( "glMultiTexCoord1sv", typeof( DglMultiTexCoord1sv_IaH ), ref bglMultiTexCoord1sv ) as DglMultiTexCoord1sv_IaH;
            mDglMultiTexCoord1sv_IP = GetDelegate( "glMultiTexCoord1sv", typeof( DglMultiTexCoord1sv_IP ), ref bglMultiTexCoord1sv ) as DglMultiTexCoord1sv_IP;
            mDglMultiTexCoord1svARB_IaH = GetDelegate( "glMultiTexCoord1svARB", typeof( DglMultiTexCoord1svARB_IaH ), ref bglMultiTexCoord1svARB ) as DglMultiTexCoord1svARB_IaH;
            mDglMultiTexCoord1svARB_IP = GetDelegate( "glMultiTexCoord1svARB", typeof( DglMultiTexCoord1svARB_IP ), ref bglMultiTexCoord1svARB ) as DglMultiTexCoord1svARB_IP;
            mDglMultiTexCoord2d_IDD = GetDelegate( "glMultiTexCoord2d", typeof( DglMultiTexCoord2d_IDD ), ref bglMultiTexCoord2d ) as DglMultiTexCoord2d_IDD;
            mDglMultiTexCoord2dARB_IDD = GetDelegate( "glMultiTexCoord2dARB", typeof( DglMultiTexCoord2dARB_IDD ), ref bglMultiTexCoord2dARB ) as DglMultiTexCoord2dARB_IDD;
            mDglMultiTexCoord2dv_IaD = GetDelegate( "glMultiTexCoord2dv", typeof( DglMultiTexCoord2dv_IaD ), ref bglMultiTexCoord2dv ) as DglMultiTexCoord2dv_IaD;
            mDglMultiTexCoord2dv_IP = GetDelegate( "glMultiTexCoord2dv", typeof( DglMultiTexCoord2dv_IP ), ref bglMultiTexCoord2dv ) as DglMultiTexCoord2dv_IP;
            mDglMultiTexCoord2dvARB_IaD = GetDelegate( "glMultiTexCoord2dvARB", typeof( DglMultiTexCoord2dvARB_IaD ), ref bglMultiTexCoord2dvARB ) as DglMultiTexCoord2dvARB_IaD;
            mDglMultiTexCoord2dvARB_IP = GetDelegate( "glMultiTexCoord2dvARB", typeof( DglMultiTexCoord2dvARB_IP ), ref bglMultiTexCoord2dvARB ) as DglMultiTexCoord2dvARB_IP;
            mDglMultiTexCoord2f_IFF = GetDelegate( "glMultiTexCoord2f", typeof( DglMultiTexCoord2f_IFF ), ref bglMultiTexCoord2f ) as DglMultiTexCoord2f_IFF;
            mDglMultiTexCoord2fARB_IFF = GetDelegate( "glMultiTexCoord2fARB", typeof( DglMultiTexCoord2fARB_IFF ), ref bglMultiTexCoord2fARB ) as DglMultiTexCoord2fARB_IFF;
            mDglMultiTexCoord2fv_IaF = GetDelegate( "glMultiTexCoord2fv", typeof( DglMultiTexCoord2fv_IaF ), ref bglMultiTexCoord2fv ) as DglMultiTexCoord2fv_IaF;
            mDglMultiTexCoord2fv_IP = GetDelegate( "glMultiTexCoord2fv", typeof( DglMultiTexCoord2fv_IP ), ref bglMultiTexCoord2fv ) as DglMultiTexCoord2fv_IP;
            mDglMultiTexCoord2fvARB_IaF = GetDelegate( "glMultiTexCoord2fvARB", typeof( DglMultiTexCoord2fvARB_IaF ), ref bglMultiTexCoord2fvARB ) as DglMultiTexCoord2fvARB_IaF;
            mDglMultiTexCoord2fvARB_IP = GetDelegate( "glMultiTexCoord2fvARB", typeof( DglMultiTexCoord2fvARB_IP ), ref bglMultiTexCoord2fvARB ) as DglMultiTexCoord2fvARB_IP;
            mDglMultiTexCoord2hNV_IHH = GetDelegate( "glMultiTexCoord2hNV", typeof( DglMultiTexCoord2hNV_IHH ), ref bglMultiTexCoord2hNV ) as DglMultiTexCoord2hNV_IHH;
            mDglMultiTexCoord2hvNV_IaH = GetDelegate( "glMultiTexCoord2hvNV", typeof( DglMultiTexCoord2hvNV_IaH ), ref bglMultiTexCoord2hvNV ) as DglMultiTexCoord2hvNV_IaH;
            mDglMultiTexCoord2hvNV_IP = GetDelegate( "glMultiTexCoord2hvNV", typeof( DglMultiTexCoord2hvNV_IP ), ref bglMultiTexCoord2hvNV ) as DglMultiTexCoord2hvNV_IP;
            mDglMultiTexCoord2i_III = GetDelegate( "glMultiTexCoord2i", typeof( DglMultiTexCoord2i_III ), ref bglMultiTexCoord2i ) as DglMultiTexCoord2i_III;
            mDglMultiTexCoord2iARB_III = GetDelegate( "glMultiTexCoord2iARB", typeof( DglMultiTexCoord2iARB_III ), ref bglMultiTexCoord2iARB ) as DglMultiTexCoord2iARB_III;
            mDglMultiTexCoord2iv_IaI = GetDelegate( "glMultiTexCoord2iv", typeof( DglMultiTexCoord2iv_IaI ), ref bglMultiTexCoord2iv ) as DglMultiTexCoord2iv_IaI;
            mDglMultiTexCoord2iv_IP = GetDelegate( "glMultiTexCoord2iv", typeof( DglMultiTexCoord2iv_IP ), ref bglMultiTexCoord2iv ) as DglMultiTexCoord2iv_IP;
            mDglMultiTexCoord2ivARB_IaI = GetDelegate( "glMultiTexCoord2ivARB", typeof( DglMultiTexCoord2ivARB_IaI ), ref bglMultiTexCoord2ivARB ) as DglMultiTexCoord2ivARB_IaI;
            mDglMultiTexCoord2ivARB_IP = GetDelegate( "glMultiTexCoord2ivARB", typeof( DglMultiTexCoord2ivARB_IP ), ref bglMultiTexCoord2ivARB ) as DglMultiTexCoord2ivARB_IP;
            mDglMultiTexCoord2s_IHH = GetDelegate( "glMultiTexCoord2s", typeof( DglMultiTexCoord2s_IHH ), ref bglMultiTexCoord2s ) as DglMultiTexCoord2s_IHH;
            mDglMultiTexCoord2sARB_IHH = GetDelegate( "glMultiTexCoord2sARB", typeof( DglMultiTexCoord2sARB_IHH ), ref bglMultiTexCoord2sARB ) as DglMultiTexCoord2sARB_IHH;
            mDglMultiTexCoord2sv_IaH = GetDelegate( "glMultiTexCoord2sv", typeof( DglMultiTexCoord2sv_IaH ), ref bglMultiTexCoord2sv ) as DglMultiTexCoord2sv_IaH;
            mDglMultiTexCoord2sv_IP = GetDelegate( "glMultiTexCoord2sv", typeof( DglMultiTexCoord2sv_IP ), ref bglMultiTexCoord2sv ) as DglMultiTexCoord2sv_IP;
            mDglMultiTexCoord2svARB_IaH = GetDelegate( "glMultiTexCoord2svARB", typeof( DglMultiTexCoord2svARB_IaH ), ref bglMultiTexCoord2svARB ) as DglMultiTexCoord2svARB_IaH;
            mDglMultiTexCoord2svARB_IP = GetDelegate( "glMultiTexCoord2svARB", typeof( DglMultiTexCoord2svARB_IP ), ref bglMultiTexCoord2svARB ) as DglMultiTexCoord2svARB_IP;
            mDglMultiTexCoord3d_IDDD = GetDelegate( "glMultiTexCoord3d", typeof( DglMultiTexCoord3d_IDDD ), ref bglMultiTexCoord3d ) as DglMultiTexCoord3d_IDDD;
            mDglMultiTexCoord3dARB_IDDD = GetDelegate( "glMultiTexCoord3dARB", typeof( DglMultiTexCoord3dARB_IDDD ), ref bglMultiTexCoord3dARB ) as DglMultiTexCoord3dARB_IDDD;
            mDglMultiTexCoord3dv_IaD = GetDelegate( "glMultiTexCoord3dv", typeof( DglMultiTexCoord3dv_IaD ), ref bglMultiTexCoord3dv ) as DglMultiTexCoord3dv_IaD;
            mDglMultiTexCoord3dv_IP = GetDelegate( "glMultiTexCoord3dv", typeof( DglMultiTexCoord3dv_IP ), ref bglMultiTexCoord3dv ) as DglMultiTexCoord3dv_IP;
            mDglMultiTexCoord3dvARB_IaD = GetDelegate( "glMultiTexCoord3dvARB", typeof( DglMultiTexCoord3dvARB_IaD ), ref bglMultiTexCoord3dvARB ) as DglMultiTexCoord3dvARB_IaD;
            mDglMultiTexCoord3dvARB_IP = GetDelegate( "glMultiTexCoord3dvARB", typeof( DglMultiTexCoord3dvARB_IP ), ref bglMultiTexCoord3dvARB ) as DglMultiTexCoord3dvARB_IP;
            mDglMultiTexCoord3f_IFFF = GetDelegate( "glMultiTexCoord3f", typeof( DglMultiTexCoord3f_IFFF ), ref bglMultiTexCoord3f ) as DglMultiTexCoord3f_IFFF;
            mDglMultiTexCoord3fARB_IFFF = GetDelegate( "glMultiTexCoord3fARB", typeof( DglMultiTexCoord3fARB_IFFF ), ref bglMultiTexCoord3fARB ) as DglMultiTexCoord3fARB_IFFF;
            mDglMultiTexCoord3fv_IaF = GetDelegate( "glMultiTexCoord3fv", typeof( DglMultiTexCoord3fv_IaF ), ref bglMultiTexCoord3fv ) as DglMultiTexCoord3fv_IaF;
            mDglMultiTexCoord3fv_IP = GetDelegate( "glMultiTexCoord3fv", typeof( DglMultiTexCoord3fv_IP ), ref bglMultiTexCoord3fv ) as DglMultiTexCoord3fv_IP;
            mDglMultiTexCoord3fvARB_IaF = GetDelegate( "glMultiTexCoord3fvARB", typeof( DglMultiTexCoord3fvARB_IaF ), ref bglMultiTexCoord3fvARB ) as DglMultiTexCoord3fvARB_IaF;
            mDglMultiTexCoord3fvARB_IP = GetDelegate( "glMultiTexCoord3fvARB", typeof( DglMultiTexCoord3fvARB_IP ), ref bglMultiTexCoord3fvARB ) as DglMultiTexCoord3fvARB_IP;
            mDglMultiTexCoord3hNV_IHHH = GetDelegate( "glMultiTexCoord3hNV", typeof( DglMultiTexCoord3hNV_IHHH ), ref bglMultiTexCoord3hNV ) as DglMultiTexCoord3hNV_IHHH;
            mDglMultiTexCoord3hvNV_IaH = GetDelegate( "glMultiTexCoord3hvNV", typeof( DglMultiTexCoord3hvNV_IaH ), ref bglMultiTexCoord3hvNV ) as DglMultiTexCoord3hvNV_IaH;
            mDglMultiTexCoord3hvNV_IP = GetDelegate( "glMultiTexCoord3hvNV", typeof( DglMultiTexCoord3hvNV_IP ), ref bglMultiTexCoord3hvNV ) as DglMultiTexCoord3hvNV_IP;
            mDglMultiTexCoord3i_IIII = GetDelegate( "glMultiTexCoord3i", typeof( DglMultiTexCoord3i_IIII ), ref bglMultiTexCoord3i ) as DglMultiTexCoord3i_IIII;
            mDglMultiTexCoord3iARB_IIII = GetDelegate( "glMultiTexCoord3iARB", typeof( DglMultiTexCoord3iARB_IIII ), ref bglMultiTexCoord3iARB ) as DglMultiTexCoord3iARB_IIII;
            mDglMultiTexCoord3iv_IaI = GetDelegate( "glMultiTexCoord3iv", typeof( DglMultiTexCoord3iv_IaI ), ref bglMultiTexCoord3iv ) as DglMultiTexCoord3iv_IaI;
            mDglMultiTexCoord3iv_IP = GetDelegate( "glMultiTexCoord3iv", typeof( DglMultiTexCoord3iv_IP ), ref bglMultiTexCoord3iv ) as DglMultiTexCoord3iv_IP;
            mDglMultiTexCoord3ivARB_IaI = GetDelegate( "glMultiTexCoord3ivARB", typeof( DglMultiTexCoord3ivARB_IaI ), ref bglMultiTexCoord3ivARB ) as DglMultiTexCoord3ivARB_IaI;
            mDglMultiTexCoord3ivARB_IP = GetDelegate( "glMultiTexCoord3ivARB", typeof( DglMultiTexCoord3ivARB_IP ), ref bglMultiTexCoord3ivARB ) as DglMultiTexCoord3ivARB_IP;
            mDglMultiTexCoord3s_IHHH = GetDelegate( "glMultiTexCoord3s", typeof( DglMultiTexCoord3s_IHHH ), ref bglMultiTexCoord3s ) as DglMultiTexCoord3s_IHHH;
            mDglMultiTexCoord3sARB_IHHH = GetDelegate( "glMultiTexCoord3sARB", typeof( DglMultiTexCoord3sARB_IHHH ), ref bglMultiTexCoord3sARB ) as DglMultiTexCoord3sARB_IHHH;
            mDglMultiTexCoord3sv_IaH = GetDelegate( "glMultiTexCoord3sv", typeof( DglMultiTexCoord3sv_IaH ), ref bglMultiTexCoord3sv ) as DglMultiTexCoord3sv_IaH;
            mDglMultiTexCoord3sv_IP = GetDelegate( "glMultiTexCoord3sv", typeof( DglMultiTexCoord3sv_IP ), ref bglMultiTexCoord3sv ) as DglMultiTexCoord3sv_IP;
            mDglMultiTexCoord3svARB_IaH = GetDelegate( "glMultiTexCoord3svARB", typeof( DglMultiTexCoord3svARB_IaH ), ref bglMultiTexCoord3svARB ) as DglMultiTexCoord3svARB_IaH;
            mDglMultiTexCoord3svARB_IP = GetDelegate( "glMultiTexCoord3svARB", typeof( DglMultiTexCoord3svARB_IP ), ref bglMultiTexCoord3svARB ) as DglMultiTexCoord3svARB_IP;
            mDglMultiTexCoord4d_IDDDD = GetDelegate( "glMultiTexCoord4d", typeof( DglMultiTexCoord4d_IDDDD ), ref bglMultiTexCoord4d ) as DglMultiTexCoord4d_IDDDD;
            mDglMultiTexCoord4dARB_IDDDD = GetDelegate( "glMultiTexCoord4dARB", typeof( DglMultiTexCoord4dARB_IDDDD ), ref bglMultiTexCoord4dARB ) as DglMultiTexCoord4dARB_IDDDD;
            mDglMultiTexCoord4dv_IaD = GetDelegate( "glMultiTexCoord4dv", typeof( DglMultiTexCoord4dv_IaD ), ref bglMultiTexCoord4dv ) as DglMultiTexCoord4dv_IaD;
            mDglMultiTexCoord4dv_IP = GetDelegate( "glMultiTexCoord4dv", typeof( DglMultiTexCoord4dv_IP ), ref bglMultiTexCoord4dv ) as DglMultiTexCoord4dv_IP;
            mDglMultiTexCoord4dvARB_IaD = GetDelegate( "glMultiTexCoord4dvARB", typeof( DglMultiTexCoord4dvARB_IaD ), ref bglMultiTexCoord4dvARB ) as DglMultiTexCoord4dvARB_IaD;
            mDglMultiTexCoord4dvARB_IP = GetDelegate( "glMultiTexCoord4dvARB", typeof( DglMultiTexCoord4dvARB_IP ), ref bglMultiTexCoord4dvARB ) as DglMultiTexCoord4dvARB_IP;
            mDglMultiTexCoord4f_IFFFF = GetDelegate( "glMultiTexCoord4f", typeof( DglMultiTexCoord4f_IFFFF ), ref bglMultiTexCoord4f ) as DglMultiTexCoord4f_IFFFF;
            mDglMultiTexCoord4fARB_IFFFF = GetDelegate( "glMultiTexCoord4fARB", typeof( DglMultiTexCoord4fARB_IFFFF ), ref bglMultiTexCoord4fARB ) as DglMultiTexCoord4fARB_IFFFF;
            mDglMultiTexCoord4fv_IaF = GetDelegate( "glMultiTexCoord4fv", typeof( DglMultiTexCoord4fv_IaF ), ref bglMultiTexCoord4fv ) as DglMultiTexCoord4fv_IaF;
            mDglMultiTexCoord4fv_IP = GetDelegate( "glMultiTexCoord4fv", typeof( DglMultiTexCoord4fv_IP ), ref bglMultiTexCoord4fv ) as DglMultiTexCoord4fv_IP;
            mDglMultiTexCoord4fvARB_IaF = GetDelegate( "glMultiTexCoord4fvARB", typeof( DglMultiTexCoord4fvARB_IaF ), ref bglMultiTexCoord4fvARB ) as DglMultiTexCoord4fvARB_IaF;
            mDglMultiTexCoord4fvARB_IP = GetDelegate( "glMultiTexCoord4fvARB", typeof( DglMultiTexCoord4fvARB_IP ), ref bglMultiTexCoord4fvARB ) as DglMultiTexCoord4fvARB_IP;
            mDglMultiTexCoord4hNV_IHHHH = GetDelegate( "glMultiTexCoord4hNV", typeof( DglMultiTexCoord4hNV_IHHHH ), ref bglMultiTexCoord4hNV ) as DglMultiTexCoord4hNV_IHHHH;
            mDglMultiTexCoord4hvNV_IaH = GetDelegate( "glMultiTexCoord4hvNV", typeof( DglMultiTexCoord4hvNV_IaH ), ref bglMultiTexCoord4hvNV ) as DglMultiTexCoord4hvNV_IaH;
            mDglMultiTexCoord4hvNV_IP = GetDelegate( "glMultiTexCoord4hvNV", typeof( DglMultiTexCoord4hvNV_IP ), ref bglMultiTexCoord4hvNV ) as DglMultiTexCoord4hvNV_IP;
            mDglMultiTexCoord4i_IIIII = GetDelegate( "glMultiTexCoord4i", typeof( DglMultiTexCoord4i_IIIII ), ref bglMultiTexCoord4i ) as DglMultiTexCoord4i_IIIII;
            mDglMultiTexCoord4iARB_IIIII = GetDelegate( "glMultiTexCoord4iARB", typeof( DglMultiTexCoord4iARB_IIIII ), ref bglMultiTexCoord4iARB ) as DglMultiTexCoord4iARB_IIIII;
            mDglMultiTexCoord4iv_IaI = GetDelegate( "glMultiTexCoord4iv", typeof( DglMultiTexCoord4iv_IaI ), ref bglMultiTexCoord4iv ) as DglMultiTexCoord4iv_IaI;
            mDglMultiTexCoord4iv_IP = GetDelegate( "glMultiTexCoord4iv", typeof( DglMultiTexCoord4iv_IP ), ref bglMultiTexCoord4iv ) as DglMultiTexCoord4iv_IP;
            mDglMultiTexCoord4ivARB_IaI = GetDelegate( "glMultiTexCoord4ivARB", typeof( DglMultiTexCoord4ivARB_IaI ), ref bglMultiTexCoord4ivARB ) as DglMultiTexCoord4ivARB_IaI;
            mDglMultiTexCoord4ivARB_IP = GetDelegate( "glMultiTexCoord4ivARB", typeof( DglMultiTexCoord4ivARB_IP ), ref bglMultiTexCoord4ivARB ) as DglMultiTexCoord4ivARB_IP;
            mDglMultiTexCoord4s_IHHHH = GetDelegate( "glMultiTexCoord4s", typeof( DglMultiTexCoord4s_IHHHH ), ref bglMultiTexCoord4s ) as DglMultiTexCoord4s_IHHHH;
            mDglMultiTexCoord4sARB_IHHHH = GetDelegate( "glMultiTexCoord4sARB", typeof( DglMultiTexCoord4sARB_IHHHH ), ref bglMultiTexCoord4sARB ) as DglMultiTexCoord4sARB_IHHHH;
            mDglMultiTexCoord4sv_IaH = GetDelegate( "glMultiTexCoord4sv", typeof( DglMultiTexCoord4sv_IaH ), ref bglMultiTexCoord4sv ) as DglMultiTexCoord4sv_IaH;
            mDglMultiTexCoord4sv_IP = GetDelegate( "glMultiTexCoord4sv", typeof( DglMultiTexCoord4sv_IP ), ref bglMultiTexCoord4sv ) as DglMultiTexCoord4sv_IP;
            mDglMultiTexCoord4svARB_IaH = GetDelegate( "glMultiTexCoord4svARB", typeof( DglMultiTexCoord4svARB_IaH ), ref bglMultiTexCoord4svARB ) as DglMultiTexCoord4svARB_IaH;
            mDglMultiTexCoord4svARB_IP = GetDelegate( "glMultiTexCoord4svARB", typeof( DglMultiTexCoord4svARB_IP ), ref bglMultiTexCoord4svARB ) as DglMultiTexCoord4svARB_IP;
            mDglMultMatrixd_aD = GetDelegate( "glMultMatrixd", typeof( DglMultMatrixd_aD ), ref bglMultMatrixd ) as DglMultMatrixd_aD;
            mDglMultMatrixd_P = GetDelegate( "glMultMatrixd", typeof( DglMultMatrixd_P ), ref bglMultMatrixd ) as DglMultMatrixd_P;
            mDglMultMatrixf_aF = GetDelegate( "glMultMatrixf", typeof( DglMultMatrixf_aF ), ref bglMultMatrixf ) as DglMultMatrixf_aF;
            mDglMultMatrixf_P = GetDelegate( "glMultMatrixf", typeof( DglMultMatrixf_P ), ref bglMultMatrixf ) as DglMultMatrixf_P;
            mDglMultTransposeMatrixd_aD = GetDelegate( "glMultTransposeMatrixd", typeof( DglMultTransposeMatrixd_aD ), ref bglMultTransposeMatrixd ) as DglMultTransposeMatrixd_aD;
            mDglMultTransposeMatrixd_P = GetDelegate( "glMultTransposeMatrixd", typeof( DglMultTransposeMatrixd_P ), ref bglMultTransposeMatrixd ) as DglMultTransposeMatrixd_P;
            mDglMultTransposeMatrixdARB_aD = GetDelegate( "glMultTransposeMatrixdARB", typeof( DglMultTransposeMatrixdARB_aD ), ref bglMultTransposeMatrixdARB ) as DglMultTransposeMatrixdARB_aD;
            mDglMultTransposeMatrixdARB_P = GetDelegate( "glMultTransposeMatrixdARB", typeof( DglMultTransposeMatrixdARB_P ), ref bglMultTransposeMatrixdARB ) as DglMultTransposeMatrixdARB_P;
            mDglMultTransposeMatrixf_aF = GetDelegate( "glMultTransposeMatrixf", typeof( DglMultTransposeMatrixf_aF ), ref bglMultTransposeMatrixf ) as DglMultTransposeMatrixf_aF;
            mDglMultTransposeMatrixf_P = GetDelegate( "glMultTransposeMatrixf", typeof( DglMultTransposeMatrixf_P ), ref bglMultTransposeMatrixf ) as DglMultTransposeMatrixf_P;
            mDglMultTransposeMatrixfARB_aF = GetDelegate( "glMultTransposeMatrixfARB", typeof( DglMultTransposeMatrixfARB_aF ), ref bglMultTransposeMatrixfARB ) as DglMultTransposeMatrixfARB_aF;
            mDglMultTransposeMatrixfARB_P = GetDelegate( "glMultTransposeMatrixfARB", typeof( DglMultTransposeMatrixfARB_P ), ref bglMultTransposeMatrixfARB ) as DglMultTransposeMatrixfARB_P;
            mDglNewList_II = GetDelegate( "glNewList", typeof( DglNewList_II ), ref bglNewList ) as DglNewList_II;
            mDglNewObjectBufferATI_IaBI = GetDelegate( "glNewObjectBufferATI", typeof( DglNewObjectBufferATI_IaBI ), ref bglNewObjectBufferATI ) as DglNewObjectBufferATI_IaBI;
            mDglNewObjectBufferATI_IPI = GetDelegate( "glNewObjectBufferATI", typeof( DglNewObjectBufferATI_IPI ), ref bglNewObjectBufferATI ) as DglNewObjectBufferATI_IPI;
            mDglNormal3b_BBB = GetDelegate( "glNormal3b", typeof( DglNormal3b_BBB ), ref bglNormal3b ) as DglNormal3b_BBB;
            mDglNormal3bv_aB = GetDelegate( "glNormal3bv", typeof( DglNormal3bv_aB ), ref bglNormal3bv ) as DglNormal3bv_aB;
            mDglNormal3bv_P = GetDelegate( "glNormal3bv", typeof( DglNormal3bv_P ), ref bglNormal3bv ) as DglNormal3bv_P;
            mDglNormal3d_DDD = GetDelegate( "glNormal3d", typeof( DglNormal3d_DDD ), ref bglNormal3d ) as DglNormal3d_DDD;
            mDglNormal3dv_aD = GetDelegate( "glNormal3dv", typeof( DglNormal3dv_aD ), ref bglNormal3dv ) as DglNormal3dv_aD;
            mDglNormal3dv_P = GetDelegate( "glNormal3dv", typeof( DglNormal3dv_P ), ref bglNormal3dv ) as DglNormal3dv_P;
            mDglNormal3f_FFF = GetDelegate( "glNormal3f", typeof( DglNormal3f_FFF ), ref bglNormal3f ) as DglNormal3f_FFF;
            mDglNormal3fv_aF = GetDelegate( "glNormal3fv", typeof( DglNormal3fv_aF ), ref bglNormal3fv ) as DglNormal3fv_aF;
            mDglNormal3fv_P = GetDelegate( "glNormal3fv", typeof( DglNormal3fv_P ), ref bglNormal3fv ) as DglNormal3fv_P;
            mDglNormal3fVertex3fSUN_FFFFFF = GetDelegate( "glNormal3fVertex3fSUN", typeof( DglNormal3fVertex3fSUN_FFFFFF ), ref bglNormal3fVertex3fSUN ) as DglNormal3fVertex3fSUN_FFFFFF;
            mDglNormal3fVertex3fvSUN_aFaF = GetDelegate( "glNormal3fVertex3fvSUN", typeof( DglNormal3fVertex3fvSUN_aFaF ), ref bglNormal3fVertex3fvSUN ) as DglNormal3fVertex3fvSUN_aFaF;
            mDglNormal3fVertex3fvSUN_PP = GetDelegate( "glNormal3fVertex3fvSUN", typeof( DglNormal3fVertex3fvSUN_PP ), ref bglNormal3fVertex3fvSUN ) as DglNormal3fVertex3fvSUN_PP;
            mDglNormal3hNV_HHH = GetDelegate( "glNormal3hNV", typeof( DglNormal3hNV_HHH ), ref bglNormal3hNV ) as DglNormal3hNV_HHH;
            mDglNormal3hvNV_aH = GetDelegate( "glNormal3hvNV", typeof( DglNormal3hvNV_aH ), ref bglNormal3hvNV ) as DglNormal3hvNV_aH;
            mDglNormal3hvNV_P = GetDelegate( "glNormal3hvNV", typeof( DglNormal3hvNV_P ), ref bglNormal3hvNV ) as DglNormal3hvNV_P;
            mDglNormal3i_III = GetDelegate( "glNormal3i", typeof( DglNormal3i_III ), ref bglNormal3i ) as DglNormal3i_III;
            mDglNormal3iv_aI = GetDelegate( "glNormal3iv", typeof( DglNormal3iv_aI ), ref bglNormal3iv ) as DglNormal3iv_aI;
            mDglNormal3iv_P = GetDelegate( "glNormal3iv", typeof( DglNormal3iv_P ), ref bglNormal3iv ) as DglNormal3iv_P;
            mDglNormal3s_HHH = GetDelegate( "glNormal3s", typeof( DglNormal3s_HHH ), ref bglNormal3s ) as DglNormal3s_HHH;
            mDglNormal3sv_aH = GetDelegate( "glNormal3sv", typeof( DglNormal3sv_aH ), ref bglNormal3sv ) as DglNormal3sv_aH;
            mDglNormal3sv_P = GetDelegate( "glNormal3sv", typeof( DglNormal3sv_P ), ref bglNormal3sv ) as DglNormal3sv_P;
            mDglNormalPointer_IIaB = GetDelegate( "glNormalPointer", typeof( DglNormalPointer_IIaB ), ref bglNormalPointer ) as DglNormalPointer_IIaB;
            mDglNormalPointer_IIaH = GetDelegate( "glNormalPointer", typeof( DglNormalPointer_IIaH ), ref bglNormalPointer ) as DglNormalPointer_IIaH;
            mDglNormalPointer_IIaI = GetDelegate( "glNormalPointer", typeof( DglNormalPointer_IIaI ), ref bglNormalPointer ) as DglNormalPointer_IIaI;
            mDglNormalPointer_IIaF = GetDelegate( "glNormalPointer", typeof( DglNormalPointer_IIaF ), ref bglNormalPointer ) as DglNormalPointer_IIaF;
            mDglNormalPointer_IIaD = GetDelegate( "glNormalPointer", typeof( DglNormalPointer_IIaD ), ref bglNormalPointer ) as DglNormalPointer_IIaD;
            mDglNormalPointer_IIP = GetDelegate( "glNormalPointer", typeof( DglNormalPointer_IIP ), ref bglNormalPointer ) as DglNormalPointer_IIP;
            mDglNormalPointerEXT_IIIaB = GetDelegate( "glNormalPointerEXT", typeof( DglNormalPointerEXT_IIIaB ), ref bglNormalPointerEXT ) as DglNormalPointerEXT_IIIaB;
            mDglNormalPointerEXT_IIIaH = GetDelegate( "glNormalPointerEXT", typeof( DglNormalPointerEXT_IIIaH ), ref bglNormalPointerEXT ) as DglNormalPointerEXT_IIIaH;
            mDglNormalPointerEXT_IIIaI = GetDelegate( "glNormalPointerEXT", typeof( DglNormalPointerEXT_IIIaI ), ref bglNormalPointerEXT ) as DglNormalPointerEXT_IIIaI;
            mDglNormalPointerEXT_IIIaF = GetDelegate( "glNormalPointerEXT", typeof( DglNormalPointerEXT_IIIaF ), ref bglNormalPointerEXT ) as DglNormalPointerEXT_IIIaF;
            mDglNormalPointerEXT_IIIaD = GetDelegate( "glNormalPointerEXT", typeof( DglNormalPointerEXT_IIIaD ), ref bglNormalPointerEXT ) as DglNormalPointerEXT_IIIaD;
            mDglNormalPointerEXT_IIIP = GetDelegate( "glNormalPointerEXT", typeof( DglNormalPointerEXT_IIIP ), ref bglNormalPointerEXT ) as DglNormalPointerEXT_IIIP;
            mDglNormalPointerListIBM_IIrPI = GetDelegate( "glNormalPointerListIBM", typeof( DglNormalPointerListIBM_IIrPI ), ref bglNormalPointerListIBM ) as DglNormalPointerListIBM_IIrPI;
            mDglNormalPointervINTEL_IrP = GetDelegate( "glNormalPointervINTEL", typeof( DglNormalPointervINTEL_IrP ), ref bglNormalPointervINTEL ) as DglNormalPointervINTEL_IrP;
            mDglNormalStream3bATI_IBBB = GetDelegate( "glNormalStream3bATI", typeof( DglNormalStream3bATI_IBBB ), ref bglNormalStream3bATI ) as DglNormalStream3bATI_IBBB;
            mDglNormalStream3bvATI_IaB = GetDelegate( "glNormalStream3bvATI", typeof( DglNormalStream3bvATI_IaB ), ref bglNormalStream3bvATI ) as DglNormalStream3bvATI_IaB;
            mDglNormalStream3bvATI_IP = GetDelegate( "glNormalStream3bvATI", typeof( DglNormalStream3bvATI_IP ), ref bglNormalStream3bvATI ) as DglNormalStream3bvATI_IP;
            mDglNormalStream3dATI_IDDD = GetDelegate( "glNormalStream3dATI", typeof( DglNormalStream3dATI_IDDD ), ref bglNormalStream3dATI ) as DglNormalStream3dATI_IDDD;
            mDglNormalStream3dvATI_IaD = GetDelegate( "glNormalStream3dvATI", typeof( DglNormalStream3dvATI_IaD ), ref bglNormalStream3dvATI ) as DglNormalStream3dvATI_IaD;
            mDglNormalStream3dvATI_IP = GetDelegate( "glNormalStream3dvATI", typeof( DglNormalStream3dvATI_IP ), ref bglNormalStream3dvATI ) as DglNormalStream3dvATI_IP;
            mDglNormalStream3fATI_IFFF = GetDelegate( "glNormalStream3fATI", typeof( DglNormalStream3fATI_IFFF ), ref bglNormalStream3fATI ) as DglNormalStream3fATI_IFFF;
            mDglNormalStream3fvATI_IaF = GetDelegate( "glNormalStream3fvATI", typeof( DglNormalStream3fvATI_IaF ), ref bglNormalStream3fvATI ) as DglNormalStream3fvATI_IaF;
            mDglNormalStream3fvATI_IP = GetDelegate( "glNormalStream3fvATI", typeof( DglNormalStream3fvATI_IP ), ref bglNormalStream3fvATI ) as DglNormalStream3fvATI_IP;
            mDglNormalStream3iATI_IIII = GetDelegate( "glNormalStream3iATI", typeof( DglNormalStream3iATI_IIII ), ref bglNormalStream3iATI ) as DglNormalStream3iATI_IIII;
            mDglNormalStream3ivATI_IaI = GetDelegate( "glNormalStream3ivATI", typeof( DglNormalStream3ivATI_IaI ), ref bglNormalStream3ivATI ) as DglNormalStream3ivATI_IaI;
            mDglNormalStream3ivATI_IP = GetDelegate( "glNormalStream3ivATI", typeof( DglNormalStream3ivATI_IP ), ref bglNormalStream3ivATI ) as DglNormalStream3ivATI_IP;
            mDglNormalStream3sATI_IHHH = GetDelegate( "glNormalStream3sATI", typeof( DglNormalStream3sATI_IHHH ), ref bglNormalStream3sATI ) as DglNormalStream3sATI_IHHH;
            mDglNormalStream3svATI_IaH = GetDelegate( "glNormalStream3svATI", typeof( DglNormalStream3svATI_IaH ), ref bglNormalStream3svATI ) as DglNormalStream3svATI_IaH;
            mDglNormalStream3svATI_IP = GetDelegate( "glNormalStream3svATI", typeof( DglNormalStream3svATI_IP ), ref bglNormalStream3svATI ) as DglNormalStream3svATI_IP;
            mDglOrtho_DDDDDD = GetDelegate( "glOrtho", typeof( DglOrtho_DDDDDD ), ref bglOrtho ) as DglOrtho_DDDDDD;
            mDglPassTexCoordATI_III = GetDelegate( "glPassTexCoordATI", typeof( DglPassTexCoordATI_III ), ref bglPassTexCoordATI ) as DglPassTexCoordATI_III;
            mDglPassThrough_F = GetDelegate( "glPassThrough", typeof( DglPassThrough_F ), ref bglPassThrough ) as DglPassThrough_F;
            mDglPixelDataRangeNV_IIaB = GetDelegate( "glPixelDataRangeNV", typeof( DglPixelDataRangeNV_IIaB ), ref bglPixelDataRangeNV ) as DglPixelDataRangeNV_IIaB;
            mDglPixelDataRangeNV_IIP = GetDelegate( "glPixelDataRangeNV", typeof( DglPixelDataRangeNV_IIP ), ref bglPixelDataRangeNV ) as DglPixelDataRangeNV_IIP;
            mDglPixelMapfv_IIaF = GetDelegate( "glPixelMapfv", typeof( DglPixelMapfv_IIaF ), ref bglPixelMapfv ) as DglPixelMapfv_IIaF;
            mDglPixelMapfv_IIP = GetDelegate( "glPixelMapfv", typeof( DglPixelMapfv_IIP ), ref bglPixelMapfv ) as DglPixelMapfv_IIP;
            mDglPixelMapuiv_IIaI = GetDelegate( "glPixelMapuiv", typeof( DglPixelMapuiv_IIaI ), ref bglPixelMapuiv ) as DglPixelMapuiv_IIaI;
            mDglPixelMapuiv_IIP = GetDelegate( "glPixelMapuiv", typeof( DglPixelMapuiv_IIP ), ref bglPixelMapuiv ) as DglPixelMapuiv_IIP;
            mDglPixelMapusv_IIaH = GetDelegate( "glPixelMapusv", typeof( DglPixelMapusv_IIaH ), ref bglPixelMapusv ) as DglPixelMapusv_IIaH;
            mDglPixelMapusv_IIP = GetDelegate( "glPixelMapusv", typeof( DglPixelMapusv_IIP ), ref bglPixelMapusv ) as DglPixelMapusv_IIP;
            mDglPixelStoref_IF = GetDelegate( "glPixelStoref", typeof( DglPixelStoref_IF ), ref bglPixelStoref ) as DglPixelStoref_IF;
            mDglPixelStorei_II = GetDelegate( "glPixelStorei", typeof( DglPixelStorei_II ), ref bglPixelStorei ) as DglPixelStorei_II;
            mDglPixelTexGenParameterfSGIS_IF = GetDelegate( "glPixelTexGenParameterfSGIS", typeof( DglPixelTexGenParameterfSGIS_IF ), ref bglPixelTexGenParameterfSGIS ) as DglPixelTexGenParameterfSGIS_IF;
            mDglPixelTexGenParameterfvSGIS_IaF = GetDelegate( "glPixelTexGenParameterfvSGIS", typeof( DglPixelTexGenParameterfvSGIS_IaF ), ref bglPixelTexGenParameterfvSGIS ) as DglPixelTexGenParameterfvSGIS_IaF;
            mDglPixelTexGenParameterfvSGIS_IP = GetDelegate( "glPixelTexGenParameterfvSGIS", typeof( DglPixelTexGenParameterfvSGIS_IP ), ref bglPixelTexGenParameterfvSGIS ) as DglPixelTexGenParameterfvSGIS_IP;
            mDglPixelTexGenParameteriSGIS_II = GetDelegate( "glPixelTexGenParameteriSGIS", typeof( DglPixelTexGenParameteriSGIS_II ), ref bglPixelTexGenParameteriSGIS ) as DglPixelTexGenParameteriSGIS_II;
            mDglPixelTexGenParameterivSGIS_IaI = GetDelegate( "glPixelTexGenParameterivSGIS", typeof( DglPixelTexGenParameterivSGIS_IaI ), ref bglPixelTexGenParameterivSGIS ) as DglPixelTexGenParameterivSGIS_IaI;
            mDglPixelTexGenParameterivSGIS_IP = GetDelegate( "glPixelTexGenParameterivSGIS", typeof( DglPixelTexGenParameterivSGIS_IP ), ref bglPixelTexGenParameterivSGIS ) as DglPixelTexGenParameterivSGIS_IP;
            mDglPixelTexGenSGIX_I = GetDelegate( "glPixelTexGenSGIX", typeof( DglPixelTexGenSGIX_I ), ref bglPixelTexGenSGIX ) as DglPixelTexGenSGIX_I;
            mDglPixelTransferf_IF = GetDelegate( "glPixelTransferf", typeof( DglPixelTransferf_IF ), ref bglPixelTransferf ) as DglPixelTransferf_IF;
            mDglPixelTransferi_II = GetDelegate( "glPixelTransferi", typeof( DglPixelTransferi_II ), ref bglPixelTransferi ) as DglPixelTransferi_II;
            mDglPixelTransformParameterfEXT_IIF = GetDelegate( "glPixelTransformParameterfEXT", typeof( DglPixelTransformParameterfEXT_IIF ), ref bglPixelTransformParameterfEXT ) as DglPixelTransformParameterfEXT_IIF;
            mDglPixelTransformParameterfvEXT_IIaF = GetDelegate( "glPixelTransformParameterfvEXT", typeof( DglPixelTransformParameterfvEXT_IIaF ), ref bglPixelTransformParameterfvEXT ) as DglPixelTransformParameterfvEXT_IIaF;
            mDglPixelTransformParameterfvEXT_IIP = GetDelegate( "glPixelTransformParameterfvEXT", typeof( DglPixelTransformParameterfvEXT_IIP ), ref bglPixelTransformParameterfvEXT ) as DglPixelTransformParameterfvEXT_IIP;
            mDglPixelTransformParameteriEXT_III = GetDelegate( "glPixelTransformParameteriEXT", typeof( DglPixelTransformParameteriEXT_III ), ref bglPixelTransformParameteriEXT ) as DglPixelTransformParameteriEXT_III;
            mDglPixelTransformParameterivEXT_IIaI = GetDelegate( "glPixelTransformParameterivEXT", typeof( DglPixelTransformParameterivEXT_IIaI ), ref bglPixelTransformParameterivEXT ) as DglPixelTransformParameterivEXT_IIaI;
            mDglPixelTransformParameterivEXT_IIP = GetDelegate( "glPixelTransformParameterivEXT", typeof( DglPixelTransformParameterivEXT_IIP ), ref bglPixelTransformParameterivEXT ) as DglPixelTransformParameterivEXT_IIP;
            mDglPixelZoom_FF = GetDelegate( "glPixelZoom", typeof( DglPixelZoom_FF ), ref bglPixelZoom ) as DglPixelZoom_FF;
            mDglPNTrianglesfATI_IF = GetDelegate( "glPNTrianglesfATI", typeof( DglPNTrianglesfATI_IF ), ref bglPNTrianglesfATI ) as DglPNTrianglesfATI_IF;
            mDglPNTrianglesiATI_II = GetDelegate( "glPNTrianglesiATI", typeof( DglPNTrianglesiATI_II ), ref bglPNTrianglesiATI ) as DglPNTrianglesiATI_II;
            mDglPointParameterf_IF = GetDelegate( "glPointParameterf", typeof( DglPointParameterf_IF ), ref bglPointParameterf ) as DglPointParameterf_IF;
            mDglPointParameterfARB_IF = GetDelegate( "glPointParameterfARB", typeof( DglPointParameterfARB_IF ), ref bglPointParameterfARB ) as DglPointParameterfARB_IF;
            mDglPointParameterfEXT_IF = GetDelegate( "glPointParameterfEXT", typeof( DglPointParameterfEXT_IF ), ref bglPointParameterfEXT ) as DglPointParameterfEXT_IF;
            mDglPointParameterfSGIS_IF = GetDelegate( "glPointParameterfSGIS", typeof( DglPointParameterfSGIS_IF ), ref bglPointParameterfSGIS ) as DglPointParameterfSGIS_IF;
            mDglPointParameterfv_IaF = GetDelegate( "glPointParameterfv", typeof( DglPointParameterfv_IaF ), ref bglPointParameterfv ) as DglPointParameterfv_IaF;
            mDglPointParameterfv_IP = GetDelegate( "glPointParameterfv", typeof( DglPointParameterfv_IP ), ref bglPointParameterfv ) as DglPointParameterfv_IP;
            mDglPointParameterfvARB_IaF = GetDelegate( "glPointParameterfvARB", typeof( DglPointParameterfvARB_IaF ), ref bglPointParameterfvARB ) as DglPointParameterfvARB_IaF;
            mDglPointParameterfvARB_IP = GetDelegate( "glPointParameterfvARB", typeof( DglPointParameterfvARB_IP ), ref bglPointParameterfvARB ) as DglPointParameterfvARB_IP;
            mDglPointParameterfvEXT_IaF = GetDelegate( "glPointParameterfvEXT", typeof( DglPointParameterfvEXT_IaF ), ref bglPointParameterfvEXT ) as DglPointParameterfvEXT_IaF;
            mDglPointParameterfvEXT_IP = GetDelegate( "glPointParameterfvEXT", typeof( DglPointParameterfvEXT_IP ), ref bglPointParameterfvEXT ) as DglPointParameterfvEXT_IP;
            mDglPointParameterfvSGIS_IaF = GetDelegate( "glPointParameterfvSGIS", typeof( DglPointParameterfvSGIS_IaF ), ref bglPointParameterfvSGIS ) as DglPointParameterfvSGIS_IaF;
            mDglPointParameterfvSGIS_IP = GetDelegate( "glPointParameterfvSGIS", typeof( DglPointParameterfvSGIS_IP ), ref bglPointParameterfvSGIS ) as DglPointParameterfvSGIS_IP;
            mDglPointParameteri_II = GetDelegate( "glPointParameteri", typeof( DglPointParameteri_II ), ref bglPointParameteri ) as DglPointParameteri_II;
            mDglPointParameteriNV_II = GetDelegate( "glPointParameteriNV", typeof( DglPointParameteriNV_II ), ref bglPointParameteriNV ) as DglPointParameteriNV_II;
            mDglPointParameteriv_IaI = GetDelegate( "glPointParameteriv", typeof( DglPointParameteriv_IaI ), ref bglPointParameteriv ) as DglPointParameteriv_IaI;
            mDglPointParameteriv_IP = GetDelegate( "glPointParameteriv", typeof( DglPointParameteriv_IP ), ref bglPointParameteriv ) as DglPointParameteriv_IP;
            mDglPointParameterivNV_IaI = GetDelegate( "glPointParameterivNV", typeof( DglPointParameterivNV_IaI ), ref bglPointParameterivNV ) as DglPointParameterivNV_IaI;
            mDglPointParameterivNV_IP = GetDelegate( "glPointParameterivNV", typeof( DglPointParameterivNV_IP ), ref bglPointParameterivNV ) as DglPointParameterivNV_IP;
            mDglPointSize_F = GetDelegate( "glPointSize", typeof( DglPointSize_F ), ref bglPointSize ) as DglPointSize_F;
            mDglPollAsyncSGIX_rI = GetDelegate( "glPollAsyncSGIX", typeof( DglPollAsyncSGIX_rI ), ref bglPollAsyncSGIX ) as DglPollAsyncSGIX_rI;
            mDglPollInstrumentsSGIX_rI = GetDelegate( "glPollInstrumentsSGIX", typeof( DglPollInstrumentsSGIX_rI ), ref bglPollInstrumentsSGIX ) as DglPollInstrumentsSGIX_rI;
            mDglPolygonMode_II = GetDelegate( "glPolygonMode", typeof( DglPolygonMode_II ), ref bglPolygonMode ) as DglPolygonMode_II;
            mDglPolygonOffset_FF = GetDelegate( "glPolygonOffset", typeof( DglPolygonOffset_FF ), ref bglPolygonOffset ) as DglPolygonOffset_FF;
            mDglPolygonOffsetEXT_FF = GetDelegate( "glPolygonOffsetEXT", typeof( DglPolygonOffsetEXT_FF ), ref bglPolygonOffsetEXT ) as DglPolygonOffsetEXT_FF;
            mDglPolygonStipple_aB = GetDelegate( "glPolygonStipple", typeof( DglPolygonStipple_aB ), ref bglPolygonStipple ) as DglPolygonStipple_aB;
            mDglPolygonStipple_P = GetDelegate( "glPolygonStipple", typeof( DglPolygonStipple_P ), ref bglPolygonStipple ) as DglPolygonStipple_P;
            mDglPopAttrib_V = GetDelegate( "glPopAttrib", typeof( DglPopAttrib_V ), ref bglPopAttrib ) as DglPopAttrib_V;
            mDglPopClientAttrib_V = GetDelegate( "glPopClientAttrib", typeof( DglPopClientAttrib_V ), ref bglPopClientAttrib ) as DglPopClientAttrib_V;
            mDglPopMatrix_V = GetDelegate( "glPopMatrix", typeof( DglPopMatrix_V ), ref bglPopMatrix ) as DglPopMatrix_V;
            mDglPopName_V = GetDelegate( "glPopName", typeof( DglPopName_V ), ref bglPopName ) as DglPopName_V;
            mDglPrimitiveRestartIndexNV_I = GetDelegate( "glPrimitiveRestartIndexNV", typeof( DglPrimitiveRestartIndexNV_I ), ref bglPrimitiveRestartIndexNV ) as DglPrimitiveRestartIndexNV_I;
            mDglPrimitiveRestartNV_V = GetDelegate( "glPrimitiveRestartNV", typeof( DglPrimitiveRestartNV_V ), ref bglPrimitiveRestartNV ) as DglPrimitiveRestartNV_V;
            mDglPrioritizeTextures_IaIaF = GetDelegate( "glPrioritizeTextures", typeof( DglPrioritizeTextures_IaIaF ), ref bglPrioritizeTextures ) as DglPrioritizeTextures_IaIaF;
            mDglPrioritizeTextures_IPP = GetDelegate( "glPrioritizeTextures", typeof( DglPrioritizeTextures_IPP ), ref bglPrioritizeTextures ) as DglPrioritizeTextures_IPP;
            mDglPrioritizeTexturesEXT_IaIaF = GetDelegate( "glPrioritizeTexturesEXT", typeof( DglPrioritizeTexturesEXT_IaIaF ), ref bglPrioritizeTexturesEXT ) as DglPrioritizeTexturesEXT_IaIaF;
            mDglPrioritizeTexturesEXT_IPP = GetDelegate( "glPrioritizeTexturesEXT", typeof( DglPrioritizeTexturesEXT_IPP ), ref bglPrioritizeTexturesEXT ) as DglPrioritizeTexturesEXT_IPP;
            mDglProgramEnvParameter4dARB_IIDDDD = GetDelegate( "glProgramEnvParameter4dARB", typeof( DglProgramEnvParameter4dARB_IIDDDD ), ref bglProgramEnvParameter4dARB ) as DglProgramEnvParameter4dARB_IIDDDD;
            mDglProgramEnvParameter4dvARB_IIaD = GetDelegate( "glProgramEnvParameter4dvARB", typeof( DglProgramEnvParameter4dvARB_IIaD ), ref bglProgramEnvParameter4dvARB ) as DglProgramEnvParameter4dvARB_IIaD;
            mDglProgramEnvParameter4dvARB_IIP = GetDelegate( "glProgramEnvParameter4dvARB", typeof( DglProgramEnvParameter4dvARB_IIP ), ref bglProgramEnvParameter4dvARB ) as DglProgramEnvParameter4dvARB_IIP;
            mDglProgramEnvParameter4fARB_IIFFFF = GetDelegate( "glProgramEnvParameter4fARB", typeof( DglProgramEnvParameter4fARB_IIFFFF ), ref bglProgramEnvParameter4fARB ) as DglProgramEnvParameter4fARB_IIFFFF;
            mDglProgramEnvParameter4fvARB_IIaF = GetDelegate( "glProgramEnvParameter4fvARB", typeof( DglProgramEnvParameter4fvARB_IIaF ), ref bglProgramEnvParameter4fvARB ) as DglProgramEnvParameter4fvARB_IIaF;
            mDglProgramEnvParameter4fvARB_IIP = GetDelegate( "glProgramEnvParameter4fvARB", typeof( DglProgramEnvParameter4fvARB_IIP ), ref bglProgramEnvParameter4fvARB ) as DglProgramEnvParameter4fvARB_IIP;
            mDglProgramLocalParameter4dARB_IIDDDD = GetDelegate( "glProgramLocalParameter4dARB", typeof( DglProgramLocalParameter4dARB_IIDDDD ), ref bglProgramLocalParameter4dARB ) as DglProgramLocalParameter4dARB_IIDDDD;
            mDglProgramLocalParameter4dvARB_IIaD = GetDelegate( "glProgramLocalParameter4dvARB", typeof( DglProgramLocalParameter4dvARB_IIaD ), ref bglProgramLocalParameter4dvARB ) as DglProgramLocalParameter4dvARB_IIaD;
            mDglProgramLocalParameter4dvARB_IIP = GetDelegate( "glProgramLocalParameter4dvARB", typeof( DglProgramLocalParameter4dvARB_IIP ), ref bglProgramLocalParameter4dvARB ) as DglProgramLocalParameter4dvARB_IIP;
            mDglProgramLocalParameter4fARB_IIFFFF = GetDelegate( "glProgramLocalParameter4fARB", typeof( DglProgramLocalParameter4fARB_IIFFFF ), ref bglProgramLocalParameter4fARB ) as DglProgramLocalParameter4fARB_IIFFFF;
            mDglProgramLocalParameter4fvARB_IIaF = GetDelegate( "glProgramLocalParameter4fvARB", typeof( DglProgramLocalParameter4fvARB_IIaF ), ref bglProgramLocalParameter4fvARB ) as DglProgramLocalParameter4fvARB_IIaF;
            mDglProgramLocalParameter4fvARB_IIP = GetDelegate( "glProgramLocalParameter4fvARB", typeof( DglProgramLocalParameter4fvARB_IIP ), ref bglProgramLocalParameter4fvARB ) as DglProgramLocalParameter4fvARB_IIP;
            mDglProgramNamedParameter4dNV_IIaBDDDD = GetDelegate( "glProgramNamedParameter4dNV", typeof( DglProgramNamedParameter4dNV_IIaBDDDD ), ref bglProgramNamedParameter4dNV ) as DglProgramNamedParameter4dNV_IIaBDDDD;
            mDglProgramNamedParameter4dNV_IIPDDDD = GetDelegate( "glProgramNamedParameter4dNV", typeof( DglProgramNamedParameter4dNV_IIPDDDD ), ref bglProgramNamedParameter4dNV ) as DglProgramNamedParameter4dNV_IIPDDDD;
            mDglProgramNamedParameter4dvNV_IIaBaD = GetDelegate( "glProgramNamedParameter4dvNV", typeof( DglProgramNamedParameter4dvNV_IIaBaD ), ref bglProgramNamedParameter4dvNV ) as DglProgramNamedParameter4dvNV_IIaBaD;
            mDglProgramNamedParameter4dvNV_IIPP = GetDelegate( "glProgramNamedParameter4dvNV", typeof( DglProgramNamedParameter4dvNV_IIPP ), ref bglProgramNamedParameter4dvNV ) as DglProgramNamedParameter4dvNV_IIPP;
            mDglProgramNamedParameter4fNV_IIaBFFFF = GetDelegate( "glProgramNamedParameter4fNV", typeof( DglProgramNamedParameter4fNV_IIaBFFFF ), ref bglProgramNamedParameter4fNV ) as DglProgramNamedParameter4fNV_IIaBFFFF;
            mDglProgramNamedParameter4fNV_IIPFFFF = GetDelegate( "glProgramNamedParameter4fNV", typeof( DglProgramNamedParameter4fNV_IIPFFFF ), ref bglProgramNamedParameter4fNV ) as DglProgramNamedParameter4fNV_IIPFFFF;
            mDglProgramNamedParameter4fvNV_IIaBaF = GetDelegate( "glProgramNamedParameter4fvNV", typeof( DglProgramNamedParameter4fvNV_IIaBaF ), ref bglProgramNamedParameter4fvNV ) as DglProgramNamedParameter4fvNV_IIaBaF;
            mDglProgramNamedParameter4fvNV_IIPP = GetDelegate( "glProgramNamedParameter4fvNV", typeof( DglProgramNamedParameter4fvNV_IIPP ), ref bglProgramNamedParameter4fvNV ) as DglProgramNamedParameter4fvNV_IIPP;
            mDglProgramParameter4dNV_IIDDDD = GetDelegate( "glProgramParameter4dNV", typeof( DglProgramParameter4dNV_IIDDDD ), ref bglProgramParameter4dNV ) as DglProgramParameter4dNV_IIDDDD;
            mDglProgramParameter4dvNV_IIaD = GetDelegate( "glProgramParameter4dvNV", typeof( DglProgramParameter4dvNV_IIaD ), ref bglProgramParameter4dvNV ) as DglProgramParameter4dvNV_IIaD;
            mDglProgramParameter4dvNV_IIP = GetDelegate( "glProgramParameter4dvNV", typeof( DglProgramParameter4dvNV_IIP ), ref bglProgramParameter4dvNV ) as DglProgramParameter4dvNV_IIP;
            mDglProgramParameter4fNV_IIFFFF = GetDelegate( "glProgramParameter4fNV", typeof( DglProgramParameter4fNV_IIFFFF ), ref bglProgramParameter4fNV ) as DglProgramParameter4fNV_IIFFFF;
            mDglProgramParameter4fvNV_IIaF = GetDelegate( "glProgramParameter4fvNV", typeof( DglProgramParameter4fvNV_IIaF ), ref bglProgramParameter4fvNV ) as DglProgramParameter4fvNV_IIaF;
            mDglProgramParameter4fvNV_IIP = GetDelegate( "glProgramParameter4fvNV", typeof( DglProgramParameter4fvNV_IIP ), ref bglProgramParameter4fvNV ) as DglProgramParameter4fvNV_IIP;
            mDglProgramParameters4dvNV_IIIaD = GetDelegate( "glProgramParameters4dvNV", typeof( DglProgramParameters4dvNV_IIIaD ), ref bglProgramParameters4dvNV ) as DglProgramParameters4dvNV_IIIaD;
            mDglProgramParameters4dvNV_IIIP = GetDelegate( "glProgramParameters4dvNV", typeof( DglProgramParameters4dvNV_IIIP ), ref bglProgramParameters4dvNV ) as DglProgramParameters4dvNV_IIIP;
            mDglProgramParameters4fvNV_IIIaF = GetDelegate( "glProgramParameters4fvNV", typeof( DglProgramParameters4fvNV_IIIaF ), ref bglProgramParameters4fvNV ) as DglProgramParameters4fvNV_IIIaF;
            mDglProgramParameters4fvNV_IIIP = GetDelegate( "glProgramParameters4fvNV", typeof( DglProgramParameters4fvNV_IIIP ), ref bglProgramParameters4fvNV ) as DglProgramParameters4fvNV_IIIP;
            mDglProgramStringARB_IIIS = GetDelegate( "glProgramStringARB", typeof( DglProgramStringARB_IIIS ), ref bglProgramStringARB ) as DglProgramStringARB_IIIS;
            mDglPushAttrib_I = GetDelegate( "glPushAttrib", typeof( DglPushAttrib_I ), ref bglPushAttrib ) as DglPushAttrib_I;
            mDglPushClientAttrib_I = GetDelegate( "glPushClientAttrib", typeof( DglPushClientAttrib_I ), ref bglPushClientAttrib ) as DglPushClientAttrib_I;
            mDglPushMatrix_V = GetDelegate( "glPushMatrix", typeof( DglPushMatrix_V ), ref bglPushMatrix ) as DglPushMatrix_V;
            mDglPushName_I = GetDelegate( "glPushName", typeof( DglPushName_I ), ref bglPushName ) as DglPushName_I;
            mDglRasterPos2d_DD = GetDelegate( "glRasterPos2d", typeof( DglRasterPos2d_DD ), ref bglRasterPos2d ) as DglRasterPos2d_DD;
            mDglRasterPos2dv_aD = GetDelegate( "glRasterPos2dv", typeof( DglRasterPos2dv_aD ), ref bglRasterPos2dv ) as DglRasterPos2dv_aD;
            mDglRasterPos2dv_P = GetDelegate( "glRasterPos2dv", typeof( DglRasterPos2dv_P ), ref bglRasterPos2dv ) as DglRasterPos2dv_P;
            mDglRasterPos2f_FF = GetDelegate( "glRasterPos2f", typeof( DglRasterPos2f_FF ), ref bglRasterPos2f ) as DglRasterPos2f_FF;
            mDglRasterPos2fv_aF = GetDelegate( "glRasterPos2fv", typeof( DglRasterPos2fv_aF ), ref bglRasterPos2fv ) as DglRasterPos2fv_aF;
            mDglRasterPos2fv_P = GetDelegate( "glRasterPos2fv", typeof( DglRasterPos2fv_P ), ref bglRasterPos2fv ) as DglRasterPos2fv_P;
            mDglRasterPos2i_II = GetDelegate( "glRasterPos2i", typeof( DglRasterPos2i_II ), ref bglRasterPos2i ) as DglRasterPos2i_II;
            mDglRasterPos2iv_aI = GetDelegate( "glRasterPos2iv", typeof( DglRasterPos2iv_aI ), ref bglRasterPos2iv ) as DglRasterPos2iv_aI;
            mDglRasterPos2iv_P = GetDelegate( "glRasterPos2iv", typeof( DglRasterPos2iv_P ), ref bglRasterPos2iv ) as DglRasterPos2iv_P;
            mDglRasterPos2s_HH = GetDelegate( "glRasterPos2s", typeof( DglRasterPos2s_HH ), ref bglRasterPos2s ) as DglRasterPos2s_HH;
            mDglRasterPos2sv_aH = GetDelegate( "glRasterPos2sv", typeof( DglRasterPos2sv_aH ), ref bglRasterPos2sv ) as DglRasterPos2sv_aH;
            mDglRasterPos2sv_P = GetDelegate( "glRasterPos2sv", typeof( DglRasterPos2sv_P ), ref bglRasterPos2sv ) as DglRasterPos2sv_P;
            mDglRasterPos3d_DDD = GetDelegate( "glRasterPos3d", typeof( DglRasterPos3d_DDD ), ref bglRasterPos3d ) as DglRasterPos3d_DDD;
            mDglRasterPos3dv_aD = GetDelegate( "glRasterPos3dv", typeof( DglRasterPos3dv_aD ), ref bglRasterPos3dv ) as DglRasterPos3dv_aD;
            mDglRasterPos3dv_P = GetDelegate( "glRasterPos3dv", typeof( DglRasterPos3dv_P ), ref bglRasterPos3dv ) as DglRasterPos3dv_P;
            mDglRasterPos3f_FFF = GetDelegate( "glRasterPos3f", typeof( DglRasterPos3f_FFF ), ref bglRasterPos3f ) as DglRasterPos3f_FFF;
            mDglRasterPos3fv_aF = GetDelegate( "glRasterPos3fv", typeof( DglRasterPos3fv_aF ), ref bglRasterPos3fv ) as DglRasterPos3fv_aF;
            mDglRasterPos3fv_P = GetDelegate( "glRasterPos3fv", typeof( DglRasterPos3fv_P ), ref bglRasterPos3fv ) as DglRasterPos3fv_P;
            mDglRasterPos3i_III = GetDelegate( "glRasterPos3i", typeof( DglRasterPos3i_III ), ref bglRasterPos3i ) as DglRasterPos3i_III;
            mDglRasterPos3iv_aI = GetDelegate( "glRasterPos3iv", typeof( DglRasterPos3iv_aI ), ref bglRasterPos3iv ) as DglRasterPos3iv_aI;
            mDglRasterPos3iv_P = GetDelegate( "glRasterPos3iv", typeof( DglRasterPos3iv_P ), ref bglRasterPos3iv ) as DglRasterPos3iv_P;
            mDglRasterPos3s_HHH = GetDelegate( "glRasterPos3s", typeof( DglRasterPos3s_HHH ), ref bglRasterPos3s ) as DglRasterPos3s_HHH;
            mDglRasterPos3sv_aH = GetDelegate( "glRasterPos3sv", typeof( DglRasterPos3sv_aH ), ref bglRasterPos3sv ) as DglRasterPos3sv_aH;
            mDglRasterPos3sv_P = GetDelegate( "glRasterPos3sv", typeof( DglRasterPos3sv_P ), ref bglRasterPos3sv ) as DglRasterPos3sv_P;
            mDglRasterPos4d_DDDD = GetDelegate( "glRasterPos4d", typeof( DglRasterPos4d_DDDD ), ref bglRasterPos4d ) as DglRasterPos4d_DDDD;
            mDglRasterPos4dv_aD = GetDelegate( "glRasterPos4dv", typeof( DglRasterPos4dv_aD ), ref bglRasterPos4dv ) as DglRasterPos4dv_aD;
            mDglRasterPos4dv_P = GetDelegate( "glRasterPos4dv", typeof( DglRasterPos4dv_P ), ref bglRasterPos4dv ) as DglRasterPos4dv_P;
            mDglRasterPos4f_FFFF = GetDelegate( "glRasterPos4f", typeof( DglRasterPos4f_FFFF ), ref bglRasterPos4f ) as DglRasterPos4f_FFFF;
            mDglRasterPos4fv_aF = GetDelegate( "glRasterPos4fv", typeof( DglRasterPos4fv_aF ), ref bglRasterPos4fv ) as DglRasterPos4fv_aF;
            mDglRasterPos4fv_P = GetDelegate( "glRasterPos4fv", typeof( DglRasterPos4fv_P ), ref bglRasterPos4fv ) as DglRasterPos4fv_P;
            mDglRasterPos4i_IIII = GetDelegate( "glRasterPos4i", typeof( DglRasterPos4i_IIII ), ref bglRasterPos4i ) as DglRasterPos4i_IIII;
            mDglRasterPos4iv_aI = GetDelegate( "glRasterPos4iv", typeof( DglRasterPos4iv_aI ), ref bglRasterPos4iv ) as DglRasterPos4iv_aI;
            mDglRasterPos4iv_P = GetDelegate( "glRasterPos4iv", typeof( DglRasterPos4iv_P ), ref bglRasterPos4iv ) as DglRasterPos4iv_P;
            mDglRasterPos4s_HHHH = GetDelegate( "glRasterPos4s", typeof( DglRasterPos4s_HHHH ), ref bglRasterPos4s ) as DglRasterPos4s_HHHH;
            mDglRasterPos4sv_aH = GetDelegate( "glRasterPos4sv", typeof( DglRasterPos4sv_aH ), ref bglRasterPos4sv ) as DglRasterPos4sv_aH;
            mDglRasterPos4sv_P = GetDelegate( "glRasterPos4sv", typeof( DglRasterPos4sv_P ), ref bglRasterPos4sv ) as DglRasterPos4sv_P;
            mDglReadBuffer_I = GetDelegate( "glReadBuffer", typeof( DglReadBuffer_I ), ref bglReadBuffer ) as DglReadBuffer_I;
            mDglReadInstrumentsSGIX_I = GetDelegate( "glReadInstrumentsSGIX", typeof( DglReadInstrumentsSGIX_I ), ref bglReadInstrumentsSGIX ) as DglReadInstrumentsSGIX_I;
            mDglReadPixels_IIIIIIaB = GetDelegate( "glReadPixels", typeof( DglReadPixels_IIIIIIaB ), ref bglReadPixels ) as DglReadPixels_IIIIIIaB;
            mDglReadPixels_IIIIIIaH = GetDelegate( "glReadPixels", typeof( DglReadPixels_IIIIIIaH ), ref bglReadPixels ) as DglReadPixels_IIIIIIaH;
            mDglReadPixels_IIIIIIaI = GetDelegate( "glReadPixels", typeof( DglReadPixels_IIIIIIaI ), ref bglReadPixels ) as DglReadPixels_IIIIIIaI;
            mDglReadPixels_IIIIIIaF = GetDelegate( "glReadPixels", typeof( DglReadPixels_IIIIIIaF ), ref bglReadPixels ) as DglReadPixels_IIIIIIaF;
            mDglReadPixels_IIIIIIP = GetDelegate( "glReadPixels", typeof( DglReadPixels_IIIIIIP ), ref bglReadPixels ) as DglReadPixels_IIIIIIP;
            mDglRectd_DDDD = GetDelegate( "glRectd", typeof( DglRectd_DDDD ), ref bglRectd ) as DglRectd_DDDD;
            mDglRectdv_aDaD = GetDelegate( "glRectdv", typeof( DglRectdv_aDaD ), ref bglRectdv ) as DglRectdv_aDaD;
            mDglRectdv_PP = GetDelegate( "glRectdv", typeof( DglRectdv_PP ), ref bglRectdv ) as DglRectdv_PP;
            mDglRectf_FFFF = GetDelegate( "glRectf", typeof( DglRectf_FFFF ), ref bglRectf ) as DglRectf_FFFF;
            mDglRectfv_aFaF = GetDelegate( "glRectfv", typeof( DglRectfv_aFaF ), ref bglRectfv ) as DglRectfv_aFaF;
            mDglRectfv_PP = GetDelegate( "glRectfv", typeof( DglRectfv_PP ), ref bglRectfv ) as DglRectfv_PP;
            mDglRecti_IIII = GetDelegate( "glRecti", typeof( DglRecti_IIII ), ref bglRecti ) as DglRecti_IIII;
            mDglRectiv_aIaI = GetDelegate( "glRectiv", typeof( DglRectiv_aIaI ), ref bglRectiv ) as DglRectiv_aIaI;
            mDglRectiv_PP = GetDelegate( "glRectiv", typeof( DglRectiv_PP ), ref bglRectiv ) as DglRectiv_PP;
            mDglRects_HHHH = GetDelegate( "glRects", typeof( DglRects_HHHH ), ref bglRects ) as DglRects_HHHH;
            mDglRectsv_aHaH = GetDelegate( "glRectsv", typeof( DglRectsv_aHaH ), ref bglRectsv ) as DglRectsv_aHaH;
            mDglRectsv_PP = GetDelegate( "glRectsv", typeof( DglRectsv_PP ), ref bglRectsv ) as DglRectsv_PP;
            mDglReferencePlaneSGIX_aD = GetDelegate( "glReferencePlaneSGIX", typeof( DglReferencePlaneSGIX_aD ), ref bglReferencePlaneSGIX ) as DglReferencePlaneSGIX_aD;
            mDglReferencePlaneSGIX_P = GetDelegate( "glReferencePlaneSGIX", typeof( DglReferencePlaneSGIX_P ), ref bglReferencePlaneSGIX ) as DglReferencePlaneSGIX_P;
            mDglRenderbufferStorageEXT_IIII = GetDelegate( "glRenderbufferStorageEXT", typeof( DglRenderbufferStorageEXT_IIII ), ref bglRenderbufferStorageEXT ) as DglRenderbufferStorageEXT_IIII;
            mDglRenderMode_I = GetDelegate( "glRenderMode", typeof( DglRenderMode_I ), ref bglRenderMode ) as DglRenderMode_I;
            mDglReplacementCodePointerSUN_IIrP = GetDelegate( "glReplacementCodePointerSUN", typeof( DglReplacementCodePointerSUN_IIrP ), ref bglReplacementCodePointerSUN ) as DglReplacementCodePointerSUN_IIrP;
            mDglReplacementCodeubSUN_B = GetDelegate( "glReplacementCodeubSUN", typeof( DglReplacementCodeubSUN_B ), ref bglReplacementCodeubSUN ) as DglReplacementCodeubSUN_B;
            mDglReplacementCodeubvSUN_aB = GetDelegate( "glReplacementCodeubvSUN", typeof( DglReplacementCodeubvSUN_aB ), ref bglReplacementCodeubvSUN ) as DglReplacementCodeubvSUN_aB;
            mDglReplacementCodeubvSUN_P = GetDelegate( "glReplacementCodeubvSUN", typeof( DglReplacementCodeubvSUN_P ), ref bglReplacementCodeubvSUN ) as DglReplacementCodeubvSUN_P;
            mDglReplacementCodeuiColor3fVertex3fSUN_IFFFFFF = GetDelegate( "glReplacementCodeuiColor3fVertex3fSUN", typeof( DglReplacementCodeuiColor3fVertex3fSUN_IFFFFFF ), ref bglReplacementCodeuiColor3fVertex3fSUN ) as DglReplacementCodeuiColor3fVertex3fSUN_IFFFFFF;
            mDglReplacementCodeuiColor3fVertex3fvSUN_rIaFaF = GetDelegate( "glReplacementCodeuiColor3fVertex3fvSUN", typeof( DglReplacementCodeuiColor3fVertex3fvSUN_rIaFaF ), ref bglReplacementCodeuiColor3fVertex3fvSUN ) as DglReplacementCodeuiColor3fVertex3fvSUN_rIaFaF;
            mDglReplacementCodeuiColor3fVertex3fvSUN_rIPP = GetDelegate( "glReplacementCodeuiColor3fVertex3fvSUN", typeof( DglReplacementCodeuiColor3fVertex3fvSUN_rIPP ), ref bglReplacementCodeuiColor3fVertex3fvSUN ) as DglReplacementCodeuiColor3fVertex3fvSUN_rIPP;
            mDglReplacementCodeuiColor4fNormal3fVertex3fSUN_IFFFFFFFFFF = GetDelegate( "glReplacementCodeuiColor4fNormal3fVertex3fSUN", typeof( DglReplacementCodeuiColor4fNormal3fVertex3fSUN_IFFFFFFFFFF ), ref bglReplacementCodeuiColor4fNormal3fVertex3fSUN ) as DglReplacementCodeuiColor4fNormal3fVertex3fSUN_IFFFFFFFFFF;
            mDglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIaFaFaF = GetDelegate( "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", typeof( DglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIaFaFaF ), ref bglReplacementCodeuiColor4fNormal3fVertex3fvSUN ) as DglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIaFaFaF;
            mDglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIPPP = GetDelegate( "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", typeof( DglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIPPP ), ref bglReplacementCodeuiColor4fNormal3fVertex3fvSUN ) as DglReplacementCodeuiColor4fNormal3fVertex3fvSUN_rIPPP;
            mDglReplacementCodeuiColor4ubVertex3fSUN_IBBBBFFF = GetDelegate( "glReplacementCodeuiColor4ubVertex3fSUN", typeof( DglReplacementCodeuiColor4ubVertex3fSUN_IBBBBFFF ), ref bglReplacementCodeuiColor4ubVertex3fSUN ) as DglReplacementCodeuiColor4ubVertex3fSUN_IBBBBFFF;
            mDglReplacementCodeuiColor4ubVertex3fvSUN_rIaBaF = GetDelegate( "glReplacementCodeuiColor4ubVertex3fvSUN", typeof( DglReplacementCodeuiColor4ubVertex3fvSUN_rIaBaF ), ref bglReplacementCodeuiColor4ubVertex3fvSUN ) as DglReplacementCodeuiColor4ubVertex3fvSUN_rIaBaF;
            mDglReplacementCodeuiColor4ubVertex3fvSUN_rIPP = GetDelegate( "glReplacementCodeuiColor4ubVertex3fvSUN", typeof( DglReplacementCodeuiColor4ubVertex3fvSUN_rIPP ), ref bglReplacementCodeuiColor4ubVertex3fvSUN ) as DglReplacementCodeuiColor4ubVertex3fvSUN_rIPP;
            mDglReplacementCodeuiNormal3fVertex3fSUN_IFFFFFF = GetDelegate( "glReplacementCodeuiNormal3fVertex3fSUN", typeof( DglReplacementCodeuiNormal3fVertex3fSUN_IFFFFFF ), ref bglReplacementCodeuiNormal3fVertex3fSUN ) as DglReplacementCodeuiNormal3fVertex3fSUN_IFFFFFF;
            mDglReplacementCodeuiNormal3fVertex3fvSUN_rIaFaF = GetDelegate( "glReplacementCodeuiNormal3fVertex3fvSUN", typeof( DglReplacementCodeuiNormal3fVertex3fvSUN_rIaFaF ), ref bglReplacementCodeuiNormal3fVertex3fvSUN ) as DglReplacementCodeuiNormal3fVertex3fvSUN_rIaFaF;
            mDglReplacementCodeuiNormal3fVertex3fvSUN_rIPP = GetDelegate( "glReplacementCodeuiNormal3fVertex3fvSUN", typeof( DglReplacementCodeuiNormal3fVertex3fvSUN_rIPP ), ref bglReplacementCodeuiNormal3fVertex3fvSUN ) as DglReplacementCodeuiNormal3fVertex3fvSUN_rIPP;
            mDglReplacementCodeuiSUN_I = GetDelegate( "glReplacementCodeuiSUN", typeof( DglReplacementCodeuiSUN_I ), ref bglReplacementCodeuiSUN ) as DglReplacementCodeuiSUN_I;
            mDglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_IFFFFFFFFFFFF = GetDelegate( "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", typeof( DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_IFFFFFFFFFFFF ), ref bglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN ) as DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_IFFFFFFFFFFFF;
            mDglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIaFaFaFaF = GetDelegate( "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIaFaFaFaF ), ref bglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIaFaFaFaF;
            mDglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIPPPP = GetDelegate( "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIPPPP ), ref bglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_rIPPPP;
            mDglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_IFFFFFFFF = GetDelegate( "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", typeof( DglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_IFFFFFFFF ), ref bglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN ) as DglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_IFFFFFFFF;
            mDglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIaFaFaF = GetDelegate( "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", typeof( DglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIaFaFaF ), ref bglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN ) as DglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIaFaFaF;
            mDglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIPPP = GetDelegate( "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", typeof( DglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIPPP ), ref bglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN ) as DglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_rIPPP;
            mDglReplacementCodeuiTexCoord2fVertex3fSUN_IFFFFF = GetDelegate( "glReplacementCodeuiTexCoord2fVertex3fSUN", typeof( DglReplacementCodeuiTexCoord2fVertex3fSUN_IFFFFF ), ref bglReplacementCodeuiTexCoord2fVertex3fSUN ) as DglReplacementCodeuiTexCoord2fVertex3fSUN_IFFFFF;
            mDglReplacementCodeuiTexCoord2fVertex3fvSUN_rIaFaF = GetDelegate( "glReplacementCodeuiTexCoord2fVertex3fvSUN", typeof( DglReplacementCodeuiTexCoord2fVertex3fvSUN_rIaFaF ), ref bglReplacementCodeuiTexCoord2fVertex3fvSUN ) as DglReplacementCodeuiTexCoord2fVertex3fvSUN_rIaFaF;
            mDglReplacementCodeuiTexCoord2fVertex3fvSUN_rIPP = GetDelegate( "glReplacementCodeuiTexCoord2fVertex3fvSUN", typeof( DglReplacementCodeuiTexCoord2fVertex3fvSUN_rIPP ), ref bglReplacementCodeuiTexCoord2fVertex3fvSUN ) as DglReplacementCodeuiTexCoord2fVertex3fvSUN_rIPP;
            mDglReplacementCodeuiVertex3fSUN_IFFF = GetDelegate( "glReplacementCodeuiVertex3fSUN", typeof( DglReplacementCodeuiVertex3fSUN_IFFF ), ref bglReplacementCodeuiVertex3fSUN ) as DglReplacementCodeuiVertex3fSUN_IFFF;
            mDglReplacementCodeuiVertex3fvSUN_rIaF = GetDelegate( "glReplacementCodeuiVertex3fvSUN", typeof( DglReplacementCodeuiVertex3fvSUN_rIaF ), ref bglReplacementCodeuiVertex3fvSUN ) as DglReplacementCodeuiVertex3fvSUN_rIaF;
            mDglReplacementCodeuiVertex3fvSUN_rIP = GetDelegate( "glReplacementCodeuiVertex3fvSUN", typeof( DglReplacementCodeuiVertex3fvSUN_rIP ), ref bglReplacementCodeuiVertex3fvSUN ) as DglReplacementCodeuiVertex3fvSUN_rIP;
            mDglReplacementCodeuivSUN_rI = GetDelegate( "glReplacementCodeuivSUN", typeof( DglReplacementCodeuivSUN_rI ), ref bglReplacementCodeuivSUN ) as DglReplacementCodeuivSUN_rI;
            mDglReplacementCodeusSUN_H = GetDelegate( "glReplacementCodeusSUN", typeof( DglReplacementCodeusSUN_H ), ref bglReplacementCodeusSUN ) as DglReplacementCodeusSUN_H;
            mDglReplacementCodeusvSUN_rH = GetDelegate( "glReplacementCodeusvSUN", typeof( DglReplacementCodeusvSUN_rH ), ref bglReplacementCodeusvSUN ) as DglReplacementCodeusvSUN_rH;
            mDglRequestResidentProgramsNV_IaI = GetDelegate( "glRequestResidentProgramsNV", typeof( DglRequestResidentProgramsNV_IaI ), ref bglRequestResidentProgramsNV ) as DglRequestResidentProgramsNV_IaI;
            mDglRequestResidentProgramsNV_IP = GetDelegate( "glRequestResidentProgramsNV", typeof( DglRequestResidentProgramsNV_IP ), ref bglRequestResidentProgramsNV ) as DglRequestResidentProgramsNV_IP;
            mDglResetHistogram_I = GetDelegate( "glResetHistogram", typeof( DglResetHistogram_I ), ref bglResetHistogram ) as DglResetHistogram_I;
            mDglResetHistogramEXT_I = GetDelegate( "glResetHistogramEXT", typeof( DglResetHistogramEXT_I ), ref bglResetHistogramEXT ) as DglResetHistogramEXT_I;
            mDglResetMinmax_I = GetDelegate( "glResetMinmax", typeof( DglResetMinmax_I ), ref bglResetMinmax ) as DglResetMinmax_I;
            mDglResetMinmaxEXT_I = GetDelegate( "glResetMinmaxEXT", typeof( DglResetMinmaxEXT_I ), ref bglResetMinmaxEXT ) as DglResetMinmaxEXT_I;
            mDglResizeBuffersMESA_V = GetDelegate( "glResizeBuffersMESA", typeof( DglResizeBuffersMESA_V ), ref bglResizeBuffersMESA ) as DglResizeBuffersMESA_V;
            mDglRotated_DDDD = GetDelegate( "glRotated", typeof( DglRotated_DDDD ), ref bglRotated ) as DglRotated_DDDD;
            mDglRotatef_FFFF = GetDelegate( "glRotatef", typeof( DglRotatef_FFFF ), ref bglRotatef ) as DglRotatef_FFFF;
            mDglSampleCoverage_FB = GetDelegate( "glSampleCoverage", typeof( DglSampleCoverage_FB ), ref bglSampleCoverage ) as DglSampleCoverage_FB;
            mDglSampleCoverageARB_FB = GetDelegate( "glSampleCoverageARB", typeof( DglSampleCoverageARB_FB ), ref bglSampleCoverageARB ) as DglSampleCoverageARB_FB;
            mDglSampleMapATI_III = GetDelegate( "glSampleMapATI", typeof( DglSampleMapATI_III ), ref bglSampleMapATI ) as DglSampleMapATI_III;
            mDglSampleMaskEXT_FB = GetDelegate( "glSampleMaskEXT", typeof( DglSampleMaskEXT_FB ), ref bglSampleMaskEXT ) as DglSampleMaskEXT_FB;
            mDglSampleMaskSGIS_FB = GetDelegate( "glSampleMaskSGIS", typeof( DglSampleMaskSGIS_FB ), ref bglSampleMaskSGIS ) as DglSampleMaskSGIS_FB;
            mDglSamplePatternEXT_I = GetDelegate( "glSamplePatternEXT", typeof( DglSamplePatternEXT_I ), ref bglSamplePatternEXT ) as DglSamplePatternEXT_I;
            mDglSamplePatternSGIS_I = GetDelegate( "glSamplePatternSGIS", typeof( DglSamplePatternSGIS_I ), ref bglSamplePatternSGIS ) as DglSamplePatternSGIS_I;
            mDglScaled_DDD = GetDelegate( "glScaled", typeof( DglScaled_DDD ), ref bglScaled ) as DglScaled_DDD;
            mDglScalef_FFF = GetDelegate( "glScalef", typeof( DglScalef_FFF ), ref bglScalef ) as DglScalef_FFF;
            mDglScissor_IIII = GetDelegate( "glScissor", typeof( DglScissor_IIII ), ref bglScissor ) as DglScissor_IIII;
            mDglSecondaryColor3b_BBB = GetDelegate( "glSecondaryColor3b", typeof( DglSecondaryColor3b_BBB ), ref bglSecondaryColor3b ) as DglSecondaryColor3b_BBB;
            mDglSecondaryColor3bEXT_BBB = GetDelegate( "glSecondaryColor3bEXT", typeof( DglSecondaryColor3bEXT_BBB ), ref bglSecondaryColor3bEXT ) as DglSecondaryColor3bEXT_BBB;
            mDglSecondaryColor3bv_aB = GetDelegate( "glSecondaryColor3bv", typeof( DglSecondaryColor3bv_aB ), ref bglSecondaryColor3bv ) as DglSecondaryColor3bv_aB;
            mDglSecondaryColor3bv_P = GetDelegate( "glSecondaryColor3bv", typeof( DglSecondaryColor3bv_P ), ref bglSecondaryColor3bv ) as DglSecondaryColor3bv_P;
            mDglSecondaryColor3bvEXT_aB = GetDelegate( "glSecondaryColor3bvEXT", typeof( DglSecondaryColor3bvEXT_aB ), ref bglSecondaryColor3bvEXT ) as DglSecondaryColor3bvEXT_aB;
            mDglSecondaryColor3bvEXT_P = GetDelegate( "glSecondaryColor3bvEXT", typeof( DglSecondaryColor3bvEXT_P ), ref bglSecondaryColor3bvEXT ) as DglSecondaryColor3bvEXT_P;
            mDglSecondaryColor3d_DDD = GetDelegate( "glSecondaryColor3d", typeof( DglSecondaryColor3d_DDD ), ref bglSecondaryColor3d ) as DglSecondaryColor3d_DDD;
            mDglSecondaryColor3dEXT_DDD = GetDelegate( "glSecondaryColor3dEXT", typeof( DglSecondaryColor3dEXT_DDD ), ref bglSecondaryColor3dEXT ) as DglSecondaryColor3dEXT_DDD;
            mDglSecondaryColor3dv_aD = GetDelegate( "glSecondaryColor3dv", typeof( DglSecondaryColor3dv_aD ), ref bglSecondaryColor3dv ) as DglSecondaryColor3dv_aD;
            mDglSecondaryColor3dv_P = GetDelegate( "glSecondaryColor3dv", typeof( DglSecondaryColor3dv_P ), ref bglSecondaryColor3dv ) as DglSecondaryColor3dv_P;
            mDglSecondaryColor3dvEXT_aD = GetDelegate( "glSecondaryColor3dvEXT", typeof( DglSecondaryColor3dvEXT_aD ), ref bglSecondaryColor3dvEXT ) as DglSecondaryColor3dvEXT_aD;
            mDglSecondaryColor3dvEXT_P = GetDelegate( "glSecondaryColor3dvEXT", typeof( DglSecondaryColor3dvEXT_P ), ref bglSecondaryColor3dvEXT ) as DglSecondaryColor3dvEXT_P;
            mDglSecondaryColor3f_FFF = GetDelegate( "glSecondaryColor3f", typeof( DglSecondaryColor3f_FFF ), ref bglSecondaryColor3f ) as DglSecondaryColor3f_FFF;
            mDglSecondaryColor3fEXT_FFF = GetDelegate( "glSecondaryColor3fEXT", typeof( DglSecondaryColor3fEXT_FFF ), ref bglSecondaryColor3fEXT ) as DglSecondaryColor3fEXT_FFF;
            mDglSecondaryColor3fv_aF = GetDelegate( "glSecondaryColor3fv", typeof( DglSecondaryColor3fv_aF ), ref bglSecondaryColor3fv ) as DglSecondaryColor3fv_aF;
            mDglSecondaryColor3fv_P = GetDelegate( "glSecondaryColor3fv", typeof( DglSecondaryColor3fv_P ), ref bglSecondaryColor3fv ) as DglSecondaryColor3fv_P;
            mDglSecondaryColor3fvEXT_aF = GetDelegate( "glSecondaryColor3fvEXT", typeof( DglSecondaryColor3fvEXT_aF ), ref bglSecondaryColor3fvEXT ) as DglSecondaryColor3fvEXT_aF;
            mDglSecondaryColor3fvEXT_P = GetDelegate( "glSecondaryColor3fvEXT", typeof( DglSecondaryColor3fvEXT_P ), ref bglSecondaryColor3fvEXT ) as DglSecondaryColor3fvEXT_P;
            mDglSecondaryColor3hNV_HHH = GetDelegate( "glSecondaryColor3hNV", typeof( DglSecondaryColor3hNV_HHH ), ref bglSecondaryColor3hNV ) as DglSecondaryColor3hNV_HHH;
            mDglSecondaryColor3hvNV_aH = GetDelegate( "glSecondaryColor3hvNV", typeof( DglSecondaryColor3hvNV_aH ), ref bglSecondaryColor3hvNV ) as DglSecondaryColor3hvNV_aH;
            mDglSecondaryColor3hvNV_P = GetDelegate( "glSecondaryColor3hvNV", typeof( DglSecondaryColor3hvNV_P ), ref bglSecondaryColor3hvNV ) as DglSecondaryColor3hvNV_P;
            mDglSecondaryColor3i_III = GetDelegate( "glSecondaryColor3i", typeof( DglSecondaryColor3i_III ), ref bglSecondaryColor3i ) as DglSecondaryColor3i_III;
            mDglSecondaryColor3iEXT_III = GetDelegate( "glSecondaryColor3iEXT", typeof( DglSecondaryColor3iEXT_III ), ref bglSecondaryColor3iEXT ) as DglSecondaryColor3iEXT_III;
            mDglSecondaryColor3iv_aI = GetDelegate( "glSecondaryColor3iv", typeof( DglSecondaryColor3iv_aI ), ref bglSecondaryColor3iv ) as DglSecondaryColor3iv_aI;
            mDglSecondaryColor3iv_P = GetDelegate( "glSecondaryColor3iv", typeof( DglSecondaryColor3iv_P ), ref bglSecondaryColor3iv ) as DglSecondaryColor3iv_P;
            mDglSecondaryColor3ivEXT_aI = GetDelegate( "glSecondaryColor3ivEXT", typeof( DglSecondaryColor3ivEXT_aI ), ref bglSecondaryColor3ivEXT ) as DglSecondaryColor3ivEXT_aI;
            mDglSecondaryColor3ivEXT_P = GetDelegate( "glSecondaryColor3ivEXT", typeof( DglSecondaryColor3ivEXT_P ), ref bglSecondaryColor3ivEXT ) as DglSecondaryColor3ivEXT_P;
            mDglSecondaryColor3s_HHH = GetDelegate( "glSecondaryColor3s", typeof( DglSecondaryColor3s_HHH ), ref bglSecondaryColor3s ) as DglSecondaryColor3s_HHH;
            mDglSecondaryColor3sEXT_HHH = GetDelegate( "glSecondaryColor3sEXT", typeof( DglSecondaryColor3sEXT_HHH ), ref bglSecondaryColor3sEXT ) as DglSecondaryColor3sEXT_HHH;
            mDglSecondaryColor3sv_aH = GetDelegate( "glSecondaryColor3sv", typeof( DglSecondaryColor3sv_aH ), ref bglSecondaryColor3sv ) as DglSecondaryColor3sv_aH;
            mDglSecondaryColor3sv_P = GetDelegate( "glSecondaryColor3sv", typeof( DglSecondaryColor3sv_P ), ref bglSecondaryColor3sv ) as DglSecondaryColor3sv_P;
            mDglSecondaryColor3svEXT_aH = GetDelegate( "glSecondaryColor3svEXT", typeof( DglSecondaryColor3svEXT_aH ), ref bglSecondaryColor3svEXT ) as DglSecondaryColor3svEXT_aH;
            mDglSecondaryColor3svEXT_P = GetDelegate( "glSecondaryColor3svEXT", typeof( DglSecondaryColor3svEXT_P ), ref bglSecondaryColor3svEXT ) as DglSecondaryColor3svEXT_P;
            mDglSecondaryColor3ub_BBB = GetDelegate( "glSecondaryColor3ub", typeof( DglSecondaryColor3ub_BBB ), ref bglSecondaryColor3ub ) as DglSecondaryColor3ub_BBB;
            mDglSecondaryColor3ubEXT_BBB = GetDelegate( "glSecondaryColor3ubEXT", typeof( DglSecondaryColor3ubEXT_BBB ), ref bglSecondaryColor3ubEXT ) as DglSecondaryColor3ubEXT_BBB;
            mDglSecondaryColor3ubv_aB = GetDelegate( "glSecondaryColor3ubv", typeof( DglSecondaryColor3ubv_aB ), ref bglSecondaryColor3ubv ) as DglSecondaryColor3ubv_aB;
            mDglSecondaryColor3ubv_P = GetDelegate( "glSecondaryColor3ubv", typeof( DglSecondaryColor3ubv_P ), ref bglSecondaryColor3ubv ) as DglSecondaryColor3ubv_P;
            mDglSecondaryColor3ubvEXT_aB = GetDelegate( "glSecondaryColor3ubvEXT", typeof( DglSecondaryColor3ubvEXT_aB ), ref bglSecondaryColor3ubvEXT ) as DglSecondaryColor3ubvEXT_aB;
            mDglSecondaryColor3ubvEXT_P = GetDelegate( "glSecondaryColor3ubvEXT", typeof( DglSecondaryColor3ubvEXT_P ), ref bglSecondaryColor3ubvEXT ) as DglSecondaryColor3ubvEXT_P;
            mDglSecondaryColor3ui_III = GetDelegate( "glSecondaryColor3ui", typeof( DglSecondaryColor3ui_III ), ref bglSecondaryColor3ui ) as DglSecondaryColor3ui_III;
            mDglSecondaryColor3uiEXT_III = GetDelegate( "glSecondaryColor3uiEXT", typeof( DglSecondaryColor3uiEXT_III ), ref bglSecondaryColor3uiEXT ) as DglSecondaryColor3uiEXT_III;
            mDglSecondaryColor3uiv_aI = GetDelegate( "glSecondaryColor3uiv", typeof( DglSecondaryColor3uiv_aI ), ref bglSecondaryColor3uiv ) as DglSecondaryColor3uiv_aI;
            mDglSecondaryColor3uiv_P = GetDelegate( "glSecondaryColor3uiv", typeof( DglSecondaryColor3uiv_P ), ref bglSecondaryColor3uiv ) as DglSecondaryColor3uiv_P;
            mDglSecondaryColor3uivEXT_aI = GetDelegate( "glSecondaryColor3uivEXT", typeof( DglSecondaryColor3uivEXT_aI ), ref bglSecondaryColor3uivEXT ) as DglSecondaryColor3uivEXT_aI;
            mDglSecondaryColor3uivEXT_P = GetDelegate( "glSecondaryColor3uivEXT", typeof( DglSecondaryColor3uivEXT_P ), ref bglSecondaryColor3uivEXT ) as DglSecondaryColor3uivEXT_P;
            mDglSecondaryColor3us_HHH = GetDelegate( "glSecondaryColor3us", typeof( DglSecondaryColor3us_HHH ), ref bglSecondaryColor3us ) as DglSecondaryColor3us_HHH;
            mDglSecondaryColor3usEXT_HHH = GetDelegate( "glSecondaryColor3usEXT", typeof( DglSecondaryColor3usEXT_HHH ), ref bglSecondaryColor3usEXT ) as DglSecondaryColor3usEXT_HHH;
            mDglSecondaryColor3usv_aH = GetDelegate( "glSecondaryColor3usv", typeof( DglSecondaryColor3usv_aH ), ref bglSecondaryColor3usv ) as DglSecondaryColor3usv_aH;
            mDglSecondaryColor3usv_P = GetDelegate( "glSecondaryColor3usv", typeof( DglSecondaryColor3usv_P ), ref bglSecondaryColor3usv ) as DglSecondaryColor3usv_P;
            mDglSecondaryColor3usvEXT_aH = GetDelegate( "glSecondaryColor3usvEXT", typeof( DglSecondaryColor3usvEXT_aH ), ref bglSecondaryColor3usvEXT ) as DglSecondaryColor3usvEXT_aH;
            mDglSecondaryColor3usvEXT_P = GetDelegate( "glSecondaryColor3usvEXT", typeof( DglSecondaryColor3usvEXT_P ), ref bglSecondaryColor3usvEXT ) as DglSecondaryColor3usvEXT_P;
            mDglSecondaryColorPointer_IIIaB = GetDelegate( "glSecondaryColorPointer", typeof( DglSecondaryColorPointer_IIIaB ), ref bglSecondaryColorPointer ) as DglSecondaryColorPointer_IIIaB;
            mDglSecondaryColorPointer_IIIaH = GetDelegate( "glSecondaryColorPointer", typeof( DglSecondaryColorPointer_IIIaH ), ref bglSecondaryColorPointer ) as DglSecondaryColorPointer_IIIaH;
            mDglSecondaryColorPointer_IIIaI = GetDelegate( "glSecondaryColorPointer", typeof( DglSecondaryColorPointer_IIIaI ), ref bglSecondaryColorPointer ) as DglSecondaryColorPointer_IIIaI;
            mDglSecondaryColorPointer_IIIaF = GetDelegate( "glSecondaryColorPointer", typeof( DglSecondaryColorPointer_IIIaF ), ref bglSecondaryColorPointer ) as DglSecondaryColorPointer_IIIaF;
            mDglSecondaryColorPointer_IIIaD = GetDelegate( "glSecondaryColorPointer", typeof( DglSecondaryColorPointer_IIIaD ), ref bglSecondaryColorPointer ) as DglSecondaryColorPointer_IIIaD;
            mDglSecondaryColorPointer_IIIP = GetDelegate( "glSecondaryColorPointer", typeof( DglSecondaryColorPointer_IIIP ), ref bglSecondaryColorPointer ) as DglSecondaryColorPointer_IIIP;
            mDglSecondaryColorPointerEXT_IIIaB = GetDelegate( "glSecondaryColorPointerEXT", typeof( DglSecondaryColorPointerEXT_IIIaB ), ref bglSecondaryColorPointerEXT ) as DglSecondaryColorPointerEXT_IIIaB;
            mDglSecondaryColorPointerEXT_IIIaH = GetDelegate( "glSecondaryColorPointerEXT", typeof( DglSecondaryColorPointerEXT_IIIaH ), ref bglSecondaryColorPointerEXT ) as DglSecondaryColorPointerEXT_IIIaH;
            mDglSecondaryColorPointerEXT_IIIaI = GetDelegate( "glSecondaryColorPointerEXT", typeof( DglSecondaryColorPointerEXT_IIIaI ), ref bglSecondaryColorPointerEXT ) as DglSecondaryColorPointerEXT_IIIaI;
            mDglSecondaryColorPointerEXT_IIIaF = GetDelegate( "glSecondaryColorPointerEXT", typeof( DglSecondaryColorPointerEXT_IIIaF ), ref bglSecondaryColorPointerEXT ) as DglSecondaryColorPointerEXT_IIIaF;
            mDglSecondaryColorPointerEXT_IIIaD = GetDelegate( "glSecondaryColorPointerEXT", typeof( DglSecondaryColorPointerEXT_IIIaD ), ref bglSecondaryColorPointerEXT ) as DglSecondaryColorPointerEXT_IIIaD;
            mDglSecondaryColorPointerEXT_IIIP = GetDelegate( "glSecondaryColorPointerEXT", typeof( DglSecondaryColorPointerEXT_IIIP ), ref bglSecondaryColorPointerEXT ) as DglSecondaryColorPointerEXT_IIIP;
            mDglSecondaryColorPointerListIBM_IIIrPI = GetDelegate( "glSecondaryColorPointerListIBM", typeof( DglSecondaryColorPointerListIBM_IIIrPI ), ref bglSecondaryColorPointerListIBM ) as DglSecondaryColorPointerListIBM_IIIrPI;
            mDglSelectBuffer_IaI = GetDelegate( "glSelectBuffer", typeof( DglSelectBuffer_IaI ), ref bglSelectBuffer ) as DglSelectBuffer_IaI;
            mDglSelectBuffer_IP = GetDelegate( "glSelectBuffer", typeof( DglSelectBuffer_IP ), ref bglSelectBuffer ) as DglSelectBuffer_IP;
            mDglSeparableFilter2D_IIIIIIaBaB = GetDelegate( "glSeparableFilter2D", typeof( DglSeparableFilter2D_IIIIIIaBaB ), ref bglSeparableFilter2D ) as DglSeparableFilter2D_IIIIIIaBaB;
            mDglSeparableFilter2D_IIIIIIaHaH = GetDelegate( "glSeparableFilter2D", typeof( DglSeparableFilter2D_IIIIIIaHaH ), ref bglSeparableFilter2D ) as DglSeparableFilter2D_IIIIIIaHaH;
            mDglSeparableFilter2D_IIIIIIaIaI = GetDelegate( "glSeparableFilter2D", typeof( DglSeparableFilter2D_IIIIIIaIaI ), ref bglSeparableFilter2D ) as DglSeparableFilter2D_IIIIIIaIaI;
            mDglSeparableFilter2D_IIIIIIaFaF = GetDelegate( "glSeparableFilter2D", typeof( DglSeparableFilter2D_IIIIIIaFaF ), ref bglSeparableFilter2D ) as DglSeparableFilter2D_IIIIIIaFaF;
            mDglSeparableFilter2D_IIIIIIPP = GetDelegate( "glSeparableFilter2D", typeof( DglSeparableFilter2D_IIIIIIPP ), ref bglSeparableFilter2D ) as DglSeparableFilter2D_IIIIIIPP;
            mDglSeparableFilter2DEXT_IIIIIIaBaB = GetDelegate( "glSeparableFilter2DEXT", typeof( DglSeparableFilter2DEXT_IIIIIIaBaB ), ref bglSeparableFilter2DEXT ) as DglSeparableFilter2DEXT_IIIIIIaBaB;
            mDglSeparableFilter2DEXT_IIIIIIaHaH = GetDelegate( "glSeparableFilter2DEXT", typeof( DglSeparableFilter2DEXT_IIIIIIaHaH ), ref bglSeparableFilter2DEXT ) as DglSeparableFilter2DEXT_IIIIIIaHaH;
            mDglSeparableFilter2DEXT_IIIIIIaIaI = GetDelegate( "glSeparableFilter2DEXT", typeof( DglSeparableFilter2DEXT_IIIIIIaIaI ), ref bglSeparableFilter2DEXT ) as DglSeparableFilter2DEXT_IIIIIIaIaI;
            mDglSeparableFilter2DEXT_IIIIIIaFaF = GetDelegate( "glSeparableFilter2DEXT", typeof( DglSeparableFilter2DEXT_IIIIIIaFaF ), ref bglSeparableFilter2DEXT ) as DglSeparableFilter2DEXT_IIIIIIaFaF;
            mDglSeparableFilter2DEXT_IIIIIIPP = GetDelegate( "glSeparableFilter2DEXT", typeof( DglSeparableFilter2DEXT_IIIIIIPP ), ref bglSeparableFilter2DEXT ) as DglSeparableFilter2DEXT_IIIIIIPP;
            mDglSetFenceAPPLE_I = GetDelegate( "glSetFenceAPPLE", typeof( DglSetFenceAPPLE_I ), ref bglSetFenceAPPLE ) as DglSetFenceAPPLE_I;
            mDglSetFenceNV_II = GetDelegate( "glSetFenceNV", typeof( DglSetFenceNV_II ), ref bglSetFenceNV ) as DglSetFenceNV_II;
            mDglSetFragmentShaderConstantATI_IaF = GetDelegate( "glSetFragmentShaderConstantATI", typeof( DglSetFragmentShaderConstantATI_IaF ), ref bglSetFragmentShaderConstantATI ) as DglSetFragmentShaderConstantATI_IaF;
            mDglSetFragmentShaderConstantATI_IP = GetDelegate( "glSetFragmentShaderConstantATI", typeof( DglSetFragmentShaderConstantATI_IP ), ref bglSetFragmentShaderConstantATI ) as DglSetFragmentShaderConstantATI_IP;
            mDglSetInvariantEXT_IIaB = GetDelegate( "glSetInvariantEXT", typeof( DglSetInvariantEXT_IIaB ), ref bglSetInvariantEXT ) as DglSetInvariantEXT_IIaB;
            mDglSetInvariantEXT_IIaH = GetDelegate( "glSetInvariantEXT", typeof( DglSetInvariantEXT_IIaH ), ref bglSetInvariantEXT ) as DglSetInvariantEXT_IIaH;
            mDglSetInvariantEXT_IIaI = GetDelegate( "glSetInvariantEXT", typeof( DglSetInvariantEXT_IIaI ), ref bglSetInvariantEXT ) as DglSetInvariantEXT_IIaI;
            mDglSetInvariantEXT_IIaF = GetDelegate( "glSetInvariantEXT", typeof( DglSetInvariantEXT_IIaF ), ref bglSetInvariantEXT ) as DglSetInvariantEXT_IIaF;
            mDglSetInvariantEXT_IIaD = GetDelegate( "glSetInvariantEXT", typeof( DglSetInvariantEXT_IIaD ), ref bglSetInvariantEXT ) as DglSetInvariantEXT_IIaD;
            mDglSetInvariantEXT_IIP = GetDelegate( "glSetInvariantEXT", typeof( DglSetInvariantEXT_IIP ), ref bglSetInvariantEXT ) as DglSetInvariantEXT_IIP;
            mDglSetLocalConstantEXT_IIaB = GetDelegate( "glSetLocalConstantEXT", typeof( DglSetLocalConstantEXT_IIaB ), ref bglSetLocalConstantEXT ) as DglSetLocalConstantEXT_IIaB;
            mDglSetLocalConstantEXT_IIaH = GetDelegate( "glSetLocalConstantEXT", typeof( DglSetLocalConstantEXT_IIaH ), ref bglSetLocalConstantEXT ) as DglSetLocalConstantEXT_IIaH;
            mDglSetLocalConstantEXT_IIaI = GetDelegate( "glSetLocalConstantEXT", typeof( DglSetLocalConstantEXT_IIaI ), ref bglSetLocalConstantEXT ) as DglSetLocalConstantEXT_IIaI;
            mDglSetLocalConstantEXT_IIaF = GetDelegate( "glSetLocalConstantEXT", typeof( DglSetLocalConstantEXT_IIaF ), ref bglSetLocalConstantEXT ) as DglSetLocalConstantEXT_IIaF;
            mDglSetLocalConstantEXT_IIaD = GetDelegate( "glSetLocalConstantEXT", typeof( DglSetLocalConstantEXT_IIaD ), ref bglSetLocalConstantEXT ) as DglSetLocalConstantEXT_IIaD;
            mDglSetLocalConstantEXT_IIP = GetDelegate( "glSetLocalConstantEXT", typeof( DglSetLocalConstantEXT_IIP ), ref bglSetLocalConstantEXT ) as DglSetLocalConstantEXT_IIP;
            mDglShadeModel_I = GetDelegate( "glShadeModel", typeof( DglShadeModel_I ), ref bglShadeModel ) as DglShadeModel_I;
            mDglShaderOp1EXT_III = GetDelegate( "glShaderOp1EXT", typeof( DglShaderOp1EXT_III ), ref bglShaderOp1EXT ) as DglShaderOp1EXT_III;
            mDglShaderOp2EXT_IIII = GetDelegate( "glShaderOp2EXT", typeof( DglShaderOp2EXT_IIII ), ref bglShaderOp2EXT ) as DglShaderOp2EXT_IIII;
            mDglShaderOp3EXT_IIIII = GetDelegate( "glShaderOp3EXT", typeof( DglShaderOp3EXT_IIIII ), ref bglShaderOp3EXT ) as DglShaderOp3EXT_IIIII;
            mDglShaderSource_IIaSaI = GetDelegate( "glShaderSource", typeof( DglShaderSource_IIaSaI ), ref bglShaderSource ) as DglShaderSource_IIaSaI;
            mDglShaderSource_IIaSP = GetDelegate( "glShaderSource", typeof( DglShaderSource_IIaSP ), ref bglShaderSource ) as DglShaderSource_IIaSP;
            mDglShaderSource_IIPaI = GetDelegate( "glShaderSource", typeof( DglShaderSource_IIPaI ), ref bglShaderSource ) as DglShaderSource_IIPaI;
            mDglShaderSource_IIPP = GetDelegate( "glShaderSource", typeof( DglShaderSource_IIPP ), ref bglShaderSource ) as DglShaderSource_IIPP;
            mDglShaderSourceARB_IIaSaI = GetDelegate( "glShaderSourceARB", typeof( DglShaderSourceARB_IIaSaI ), ref bglShaderSourceARB ) as DglShaderSourceARB_IIaSaI;
            mDglShaderSourceARB_IIaSP = GetDelegate( "glShaderSourceARB", typeof( DglShaderSourceARB_IIaSP ), ref bglShaderSourceARB ) as DglShaderSourceARB_IIaSP;
            mDglShaderSourceARB_IIPaI = GetDelegate( "glShaderSourceARB", typeof( DglShaderSourceARB_IIPaI ), ref bglShaderSourceARB ) as DglShaderSourceARB_IIPaI;
            mDglShaderSourceARB_IIPP = GetDelegate( "glShaderSourceARB", typeof( DglShaderSourceARB_IIPP ), ref bglShaderSourceARB ) as DglShaderSourceARB_IIPP;
            mDglSharpenTexFuncSGIS_IIaF = GetDelegate( "glSharpenTexFuncSGIS", typeof( DglSharpenTexFuncSGIS_IIaF ), ref bglSharpenTexFuncSGIS ) as DglSharpenTexFuncSGIS_IIaF;
            mDglSharpenTexFuncSGIS_IIP = GetDelegate( "glSharpenTexFuncSGIS", typeof( DglSharpenTexFuncSGIS_IIP ), ref bglSharpenTexFuncSGIS ) as DglSharpenTexFuncSGIS_IIP;
            mDglSpriteParameterfSGIX_IF = GetDelegate( "glSpriteParameterfSGIX", typeof( DglSpriteParameterfSGIX_IF ), ref bglSpriteParameterfSGIX ) as DglSpriteParameterfSGIX_IF;
            mDglSpriteParameterfvSGIX_IaF = GetDelegate( "glSpriteParameterfvSGIX", typeof( DglSpriteParameterfvSGIX_IaF ), ref bglSpriteParameterfvSGIX ) as DglSpriteParameterfvSGIX_IaF;
            mDglSpriteParameterfvSGIX_IP = GetDelegate( "glSpriteParameterfvSGIX", typeof( DglSpriteParameterfvSGIX_IP ), ref bglSpriteParameterfvSGIX ) as DglSpriteParameterfvSGIX_IP;
            mDglSpriteParameteriSGIX_II = GetDelegate( "glSpriteParameteriSGIX", typeof( DglSpriteParameteriSGIX_II ), ref bglSpriteParameteriSGIX ) as DglSpriteParameteriSGIX_II;
            mDglSpriteParameterivSGIX_IaI = GetDelegate( "glSpriteParameterivSGIX", typeof( DglSpriteParameterivSGIX_IaI ), ref bglSpriteParameterivSGIX ) as DglSpriteParameterivSGIX_IaI;
            mDglSpriteParameterivSGIX_IP = GetDelegate( "glSpriteParameterivSGIX", typeof( DglSpriteParameterivSGIX_IP ), ref bglSpriteParameterivSGIX ) as DglSpriteParameterivSGIX_IP;
            mDglStartInstrumentsSGIX_V = GetDelegate( "glStartInstrumentsSGIX", typeof( DglStartInstrumentsSGIX_V ), ref bglStartInstrumentsSGIX ) as DglStartInstrumentsSGIX_V;
            mDglStencilFunc_III = GetDelegate( "glStencilFunc", typeof( DglStencilFunc_III ), ref bglStencilFunc ) as DglStencilFunc_III;
            mDglStencilFuncSeparate_IIII = GetDelegate( "glStencilFuncSeparate", typeof( DglStencilFuncSeparate_IIII ), ref bglStencilFuncSeparate ) as DglStencilFuncSeparate_IIII;
            mDglStencilFuncSeparateATI_IIII = GetDelegate( "glStencilFuncSeparateATI", typeof( DglStencilFuncSeparateATI_IIII ), ref bglStencilFuncSeparateATI ) as DglStencilFuncSeparateATI_IIII;
            mDglStencilMask_I = GetDelegate( "glStencilMask", typeof( DglStencilMask_I ), ref bglStencilMask ) as DglStencilMask_I;
            mDglStencilMaskSeparate_II = GetDelegate( "glStencilMaskSeparate", typeof( DglStencilMaskSeparate_II ), ref bglStencilMaskSeparate ) as DglStencilMaskSeparate_II;
            mDglStencilOp_III = GetDelegate( "glStencilOp", typeof( DglStencilOp_III ), ref bglStencilOp ) as DglStencilOp_III;
            mDglStencilOpSeparate_IIII = GetDelegate( "glStencilOpSeparate", typeof( DglStencilOpSeparate_IIII ), ref bglStencilOpSeparate ) as DglStencilOpSeparate_IIII;
            mDglStencilOpSeparateATI_IIII = GetDelegate( "glStencilOpSeparateATI", typeof( DglStencilOpSeparateATI_IIII ), ref bglStencilOpSeparateATI ) as DglStencilOpSeparateATI_IIII;
            mDglStopInstrumentsSGIX_I = GetDelegate( "glStopInstrumentsSGIX", typeof( DglStopInstrumentsSGIX_I ), ref bglStopInstrumentsSGIX ) as DglStopInstrumentsSGIX_I;
            mDglStringMarkerGREMEDY_IaB = GetDelegate( "glStringMarkerGREMEDY", typeof( DglStringMarkerGREMEDY_IaB ), ref bglStringMarkerGREMEDY ) as DglStringMarkerGREMEDY_IaB;
            mDglStringMarkerGREMEDY_IP = GetDelegate( "glStringMarkerGREMEDY", typeof( DglStringMarkerGREMEDY_IP ), ref bglStringMarkerGREMEDY ) as DglStringMarkerGREMEDY_IP;
            mDglSwizzleEXT_IIIIII = GetDelegate( "glSwizzleEXT", typeof( DglSwizzleEXT_IIIIII ), ref bglSwizzleEXT ) as DglSwizzleEXT_IIIIII;
            mDglTagSampleBufferSGIX_V = GetDelegate( "glTagSampleBufferSGIX", typeof( DglTagSampleBufferSGIX_V ), ref bglTagSampleBufferSGIX ) as DglTagSampleBufferSGIX_V;
            mDglTangent3bEXT_BBB = GetDelegate( "glTangent3bEXT", typeof( DglTangent3bEXT_BBB ), ref bglTangent3bEXT ) as DglTangent3bEXT_BBB;
            mDglTangent3bvEXT_aB = GetDelegate( "glTangent3bvEXT", typeof( DglTangent3bvEXT_aB ), ref bglTangent3bvEXT ) as DglTangent3bvEXT_aB;
            mDglTangent3bvEXT_P = GetDelegate( "glTangent3bvEXT", typeof( DglTangent3bvEXT_P ), ref bglTangent3bvEXT ) as DglTangent3bvEXT_P;
            mDglTangent3dEXT_DDD = GetDelegate( "glTangent3dEXT", typeof( DglTangent3dEXT_DDD ), ref bglTangent3dEXT ) as DglTangent3dEXT_DDD;
            mDglTangent3dvEXT_aD = GetDelegate( "glTangent3dvEXT", typeof( DglTangent3dvEXT_aD ), ref bglTangent3dvEXT ) as DglTangent3dvEXT_aD;
            mDglTangent3dvEXT_P = GetDelegate( "glTangent3dvEXT", typeof( DglTangent3dvEXT_P ), ref bglTangent3dvEXT ) as DglTangent3dvEXT_P;
            mDglTangent3fEXT_FFF = GetDelegate( "glTangent3fEXT", typeof( DglTangent3fEXT_FFF ), ref bglTangent3fEXT ) as DglTangent3fEXT_FFF;
            mDglTangent3fvEXT_aF = GetDelegate( "glTangent3fvEXT", typeof( DglTangent3fvEXT_aF ), ref bglTangent3fvEXT ) as DglTangent3fvEXT_aF;
            mDglTangent3fvEXT_P = GetDelegate( "glTangent3fvEXT", typeof( DglTangent3fvEXT_P ), ref bglTangent3fvEXT ) as DglTangent3fvEXT_P;
            mDglTangent3iEXT_III = GetDelegate( "glTangent3iEXT", typeof( DglTangent3iEXT_III ), ref bglTangent3iEXT ) as DglTangent3iEXT_III;
            mDglTangent3ivEXT_aI = GetDelegate( "glTangent3ivEXT", typeof( DglTangent3ivEXT_aI ), ref bglTangent3ivEXT ) as DglTangent3ivEXT_aI;
            mDglTangent3ivEXT_P = GetDelegate( "glTangent3ivEXT", typeof( DglTangent3ivEXT_P ), ref bglTangent3ivEXT ) as DglTangent3ivEXT_P;
            mDglTangent3sEXT_HHH = GetDelegate( "glTangent3sEXT", typeof( DglTangent3sEXT_HHH ), ref bglTangent3sEXT ) as DglTangent3sEXT_HHH;
            mDglTangent3svEXT_aH = GetDelegate( "glTangent3svEXT", typeof( DglTangent3svEXT_aH ), ref bglTangent3svEXT ) as DglTangent3svEXT_aH;
            mDglTangent3svEXT_P = GetDelegate( "glTangent3svEXT", typeof( DglTangent3svEXT_P ), ref bglTangent3svEXT ) as DglTangent3svEXT_P;
            mDglTangentPointerEXT_IIaB = GetDelegate( "glTangentPointerEXT", typeof( DglTangentPointerEXT_IIaB ), ref bglTangentPointerEXT ) as DglTangentPointerEXT_IIaB;
            mDglTangentPointerEXT_IIaH = GetDelegate( "glTangentPointerEXT", typeof( DglTangentPointerEXT_IIaH ), ref bglTangentPointerEXT ) as DglTangentPointerEXT_IIaH;
            mDglTangentPointerEXT_IIaI = GetDelegate( "glTangentPointerEXT", typeof( DglTangentPointerEXT_IIaI ), ref bglTangentPointerEXT ) as DglTangentPointerEXT_IIaI;
            mDglTangentPointerEXT_IIaF = GetDelegate( "glTangentPointerEXT", typeof( DglTangentPointerEXT_IIaF ), ref bglTangentPointerEXT ) as DglTangentPointerEXT_IIaF;
            mDglTangentPointerEXT_IIaD = GetDelegate( "glTangentPointerEXT", typeof( DglTangentPointerEXT_IIaD ), ref bglTangentPointerEXT ) as DglTangentPointerEXT_IIaD;
            mDglTangentPointerEXT_IIP = GetDelegate( "glTangentPointerEXT", typeof( DglTangentPointerEXT_IIP ), ref bglTangentPointerEXT ) as DglTangentPointerEXT_IIP;
            mDglTbufferMask3DFX_I = GetDelegate( "glTbufferMask3DFX", typeof( DglTbufferMask3DFX_I ), ref bglTbufferMask3DFX ) as DglTbufferMask3DFX_I;
            mDglTestFenceAPPLE_I = GetDelegate( "glTestFenceAPPLE", typeof( DglTestFenceAPPLE_I ), ref bglTestFenceAPPLE ) as DglTestFenceAPPLE_I;
            mDglTestFenceNV_I = GetDelegate( "glTestFenceNV", typeof( DglTestFenceNV_I ), ref bglTestFenceNV ) as DglTestFenceNV_I;
            mDglTestObjectAPPLE_II = GetDelegate( "glTestObjectAPPLE", typeof( DglTestObjectAPPLE_II ), ref bglTestObjectAPPLE ) as DglTestObjectAPPLE_II;
            mDglTexBumpParameterfvATI_IaF = GetDelegate( "glTexBumpParameterfvATI", typeof( DglTexBumpParameterfvATI_IaF ), ref bglTexBumpParameterfvATI ) as DglTexBumpParameterfvATI_IaF;
            mDglTexBumpParameterfvATI_IP = GetDelegate( "glTexBumpParameterfvATI", typeof( DglTexBumpParameterfvATI_IP ), ref bglTexBumpParameterfvATI ) as DglTexBumpParameterfvATI_IP;
            mDglTexBumpParameterivATI_IaI = GetDelegate( "glTexBumpParameterivATI", typeof( DglTexBumpParameterivATI_IaI ), ref bglTexBumpParameterivATI ) as DglTexBumpParameterivATI_IaI;
            mDglTexBumpParameterivATI_IP = GetDelegate( "glTexBumpParameterivATI", typeof( DglTexBumpParameterivATI_IP ), ref bglTexBumpParameterivATI ) as DglTexBumpParameterivATI_IP;
            mDglTexCoord1d_D = GetDelegate( "glTexCoord1d", typeof( DglTexCoord1d_D ), ref bglTexCoord1d ) as DglTexCoord1d_D;
            mDglTexCoord1dv_aD = GetDelegate( "glTexCoord1dv", typeof( DglTexCoord1dv_aD ), ref bglTexCoord1dv ) as DglTexCoord1dv_aD;
            mDglTexCoord1dv_P = GetDelegate( "glTexCoord1dv", typeof( DglTexCoord1dv_P ), ref bglTexCoord1dv ) as DglTexCoord1dv_P;
            mDglTexCoord1f_F = GetDelegate( "glTexCoord1f", typeof( DglTexCoord1f_F ), ref bglTexCoord1f ) as DglTexCoord1f_F;
            mDglTexCoord1fv_aF = GetDelegate( "glTexCoord1fv", typeof( DglTexCoord1fv_aF ), ref bglTexCoord1fv ) as DglTexCoord1fv_aF;
            mDglTexCoord1fv_P = GetDelegate( "glTexCoord1fv", typeof( DglTexCoord1fv_P ), ref bglTexCoord1fv ) as DglTexCoord1fv_P;
            mDglTexCoord1hNV_H = GetDelegate( "glTexCoord1hNV", typeof( DglTexCoord1hNV_H ), ref bglTexCoord1hNV ) as DglTexCoord1hNV_H;
            mDglTexCoord1hvNV_aH = GetDelegate( "glTexCoord1hvNV", typeof( DglTexCoord1hvNV_aH ), ref bglTexCoord1hvNV ) as DglTexCoord1hvNV_aH;
            mDglTexCoord1hvNV_P = GetDelegate( "glTexCoord1hvNV", typeof( DglTexCoord1hvNV_P ), ref bglTexCoord1hvNV ) as DglTexCoord1hvNV_P;
            mDglTexCoord1i_I = GetDelegate( "glTexCoord1i", typeof( DglTexCoord1i_I ), ref bglTexCoord1i ) as DglTexCoord1i_I;
            mDglTexCoord1iv_aI = GetDelegate( "glTexCoord1iv", typeof( DglTexCoord1iv_aI ), ref bglTexCoord1iv ) as DglTexCoord1iv_aI;
            mDglTexCoord1iv_P = GetDelegate( "glTexCoord1iv", typeof( DglTexCoord1iv_P ), ref bglTexCoord1iv ) as DglTexCoord1iv_P;
            mDglTexCoord1s_H = GetDelegate( "glTexCoord1s", typeof( DglTexCoord1s_H ), ref bglTexCoord1s ) as DglTexCoord1s_H;
            mDglTexCoord1sv_aH = GetDelegate( "glTexCoord1sv", typeof( DglTexCoord1sv_aH ), ref bglTexCoord1sv ) as DglTexCoord1sv_aH;
            mDglTexCoord1sv_P = GetDelegate( "glTexCoord1sv", typeof( DglTexCoord1sv_P ), ref bglTexCoord1sv ) as DglTexCoord1sv_P;
            mDglTexCoord2d_DD = GetDelegate( "glTexCoord2d", typeof( DglTexCoord2d_DD ), ref bglTexCoord2d ) as DglTexCoord2d_DD;
            mDglTexCoord2dv_aD = GetDelegate( "glTexCoord2dv", typeof( DglTexCoord2dv_aD ), ref bglTexCoord2dv ) as DglTexCoord2dv_aD;
            mDglTexCoord2dv_P = GetDelegate( "glTexCoord2dv", typeof( DglTexCoord2dv_P ), ref bglTexCoord2dv ) as DglTexCoord2dv_P;
            mDglTexCoord2f_FF = GetDelegate( "glTexCoord2f", typeof( DglTexCoord2f_FF ), ref bglTexCoord2f ) as DglTexCoord2f_FF;
            mDglTexCoord2fColor3fVertex3fSUN_FFFFFFFF = GetDelegate( "glTexCoord2fColor3fVertex3fSUN", typeof( DglTexCoord2fColor3fVertex3fSUN_FFFFFFFF ), ref bglTexCoord2fColor3fVertex3fSUN ) as DglTexCoord2fColor3fVertex3fSUN_FFFFFFFF;
            mDglTexCoord2fColor3fVertex3fvSUN_aFaFaF = GetDelegate( "glTexCoord2fColor3fVertex3fvSUN", typeof( DglTexCoord2fColor3fVertex3fvSUN_aFaFaF ), ref bglTexCoord2fColor3fVertex3fvSUN ) as DglTexCoord2fColor3fVertex3fvSUN_aFaFaF;
            mDglTexCoord2fColor3fVertex3fvSUN_PPP = GetDelegate( "glTexCoord2fColor3fVertex3fvSUN", typeof( DglTexCoord2fColor3fVertex3fvSUN_PPP ), ref bglTexCoord2fColor3fVertex3fvSUN ) as DglTexCoord2fColor3fVertex3fvSUN_PPP;
            mDglTexCoord2fColor4fNormal3fVertex3fSUN_FFFFFFFFFFFF = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fSUN_FFFFFFFFFFFF ), ref bglTexCoord2fColor4fNormal3fVertex3fSUN ) as DglTexCoord2fColor4fNormal3fVertex3fSUN_FFFFFFFFFFFF;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFaF = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFaF ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFaF;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFP = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFP ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFaFP;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPaF = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPaF ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPaF;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPP = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPP ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFaFPP;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFaF = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFaF ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFaF;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFP = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFP ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPaFP;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPaF = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPaF ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPaF;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPP = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPP ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_aFPPP;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFaF = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFaF ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFaF;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFP = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFP ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFaFP;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPaF = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPaF ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPaF;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPP = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPP ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_PaFPP;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFaF = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFaF ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFaF;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFP = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFP ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPaFP;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPaF = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPaF ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPaF;
            mDglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPP = GetDelegate( "glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof( DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPP ), ref bglTexCoord2fColor4fNormal3fVertex3fvSUN ) as DglTexCoord2fColor4fNormal3fVertex3fvSUN_PPPP;
            mDglTexCoord2fColor4ubVertex3fSUN_FFBBBBFFF = GetDelegate( "glTexCoord2fColor4ubVertex3fSUN", typeof( DglTexCoord2fColor4ubVertex3fSUN_FFBBBBFFF ), ref bglTexCoord2fColor4ubVertex3fSUN ) as DglTexCoord2fColor4ubVertex3fSUN_FFBBBBFFF;
            mDglTexCoord2fColor4ubVertex3fvSUN_aFaBaF = GetDelegate( "glTexCoord2fColor4ubVertex3fvSUN", typeof( DglTexCoord2fColor4ubVertex3fvSUN_aFaBaF ), ref bglTexCoord2fColor4ubVertex3fvSUN ) as DglTexCoord2fColor4ubVertex3fvSUN_aFaBaF;
            mDglTexCoord2fColor4ubVertex3fvSUN_aFaBP = GetDelegate( "glTexCoord2fColor4ubVertex3fvSUN", typeof( DglTexCoord2fColor4ubVertex3fvSUN_aFaBP ), ref bglTexCoord2fColor4ubVertex3fvSUN ) as DglTexCoord2fColor4ubVertex3fvSUN_aFaBP;
            mDglTexCoord2fColor4ubVertex3fvSUN_aFPaF = GetDelegate( "glTexCoord2fColor4ubVertex3fvSUN", typeof( DglTexCoord2fColor4ubVertex3fvSUN_aFPaF ), ref bglTexCoord2fColor4ubVertex3fvSUN ) as DglTexCoord2fColor4ubVertex3fvSUN_aFPaF;
            mDglTexCoord2fColor4ubVertex3fvSUN_aFPP = GetDelegate( "glTexCoord2fColor4ubVertex3fvSUN", typeof( DglTexCoord2fColor4ubVertex3fvSUN_aFPP ), ref bglTexCoord2fColor4ubVertex3fvSUN ) as DglTexCoord2fColor4ubVertex3fvSUN_aFPP;
            mDglTexCoord2fColor4ubVertex3fvSUN_PaBaF = GetDelegate( "glTexCoord2fColor4ubVertex3fvSUN", typeof( DglTexCoord2fColor4ubVertex3fvSUN_PaBaF ), ref bglTexCoord2fColor4ubVertex3fvSUN ) as DglTexCoord2fColor4ubVertex3fvSUN_PaBaF;
            mDglTexCoord2fColor4ubVertex3fvSUN_PaBP = GetDelegate( "glTexCoord2fColor4ubVertex3fvSUN", typeof( DglTexCoord2fColor4ubVertex3fvSUN_PaBP ), ref bglTexCoord2fColor4ubVertex3fvSUN ) as DglTexCoord2fColor4ubVertex3fvSUN_PaBP;
            mDglTexCoord2fColor4ubVertex3fvSUN_PPaF = GetDelegate( "glTexCoord2fColor4ubVertex3fvSUN", typeof( DglTexCoord2fColor4ubVertex3fvSUN_PPaF ), ref bglTexCoord2fColor4ubVertex3fvSUN ) as DglTexCoord2fColor4ubVertex3fvSUN_PPaF;
            mDglTexCoord2fColor4ubVertex3fvSUN_PPP = GetDelegate( "glTexCoord2fColor4ubVertex3fvSUN", typeof( DglTexCoord2fColor4ubVertex3fvSUN_PPP ), ref bglTexCoord2fColor4ubVertex3fvSUN ) as DglTexCoord2fColor4ubVertex3fvSUN_PPP;
            mDglTexCoord2fNormal3fVertex3fSUN_FFFFFFFF = GetDelegate( "glTexCoord2fNormal3fVertex3fSUN", typeof( DglTexCoord2fNormal3fVertex3fSUN_FFFFFFFF ), ref bglTexCoord2fNormal3fVertex3fSUN ) as DglTexCoord2fNormal3fVertex3fSUN_FFFFFFFF;
            mDglTexCoord2fNormal3fVertex3fvSUN_aFaFaF = GetDelegate( "glTexCoord2fNormal3fVertex3fvSUN", typeof( DglTexCoord2fNormal3fVertex3fvSUN_aFaFaF ), ref bglTexCoord2fNormal3fVertex3fvSUN ) as DglTexCoord2fNormal3fVertex3fvSUN_aFaFaF;
            mDglTexCoord2fNormal3fVertex3fvSUN_aFaFP = GetDelegate( "glTexCoord2fNormal3fVertex3fvSUN", typeof( DglTexCoord2fNormal3fVertex3fvSUN_aFaFP ), ref bglTexCoord2fNormal3fVertex3fvSUN ) as DglTexCoord2fNormal3fVertex3fvSUN_aFaFP;
            mDglTexCoord2fNormal3fVertex3fvSUN_aFPaF = GetDelegate( "glTexCoord2fNormal3fVertex3fvSUN", typeof( DglTexCoord2fNormal3fVertex3fvSUN_aFPaF ), ref bglTexCoord2fNormal3fVertex3fvSUN ) as DglTexCoord2fNormal3fVertex3fvSUN_aFPaF;
            mDglTexCoord2fNormal3fVertex3fvSUN_aFPP = GetDelegate( "glTexCoord2fNormal3fVertex3fvSUN", typeof( DglTexCoord2fNormal3fVertex3fvSUN_aFPP ), ref bglTexCoord2fNormal3fVertex3fvSUN ) as DglTexCoord2fNormal3fVertex3fvSUN_aFPP;
            mDglTexCoord2fNormal3fVertex3fvSUN_PaFaF = GetDelegate( "glTexCoord2fNormal3fVertex3fvSUN", typeof( DglTexCoord2fNormal3fVertex3fvSUN_PaFaF ), ref bglTexCoord2fNormal3fVertex3fvSUN ) as DglTexCoord2fNormal3fVertex3fvSUN_PaFaF;
            mDglTexCoord2fNormal3fVertex3fvSUN_PaFP = GetDelegate( "glTexCoord2fNormal3fVertex3fvSUN", typeof( DglTexCoord2fNormal3fVertex3fvSUN_PaFP ), ref bglTexCoord2fNormal3fVertex3fvSUN ) as DglTexCoord2fNormal3fVertex3fvSUN_PaFP;
            mDglTexCoord2fNormal3fVertex3fvSUN_PPaF = GetDelegate( "glTexCoord2fNormal3fVertex3fvSUN", typeof( DglTexCoord2fNormal3fVertex3fvSUN_PPaF ), ref bglTexCoord2fNormal3fVertex3fvSUN ) as DglTexCoord2fNormal3fVertex3fvSUN_PPaF;
            mDglTexCoord2fNormal3fVertex3fvSUN_PPP = GetDelegate( "glTexCoord2fNormal3fVertex3fvSUN", typeof( DglTexCoord2fNormal3fVertex3fvSUN_PPP ), ref bglTexCoord2fNormal3fVertex3fvSUN ) as DglTexCoord2fNormal3fVertex3fvSUN_PPP;
            mDglTexCoord2fv_aF = GetDelegate( "glTexCoord2fv", typeof( DglTexCoord2fv_aF ), ref bglTexCoord2fv ) as DglTexCoord2fv_aF;
            mDglTexCoord2fv_P = GetDelegate( "glTexCoord2fv", typeof( DglTexCoord2fv_P ), ref bglTexCoord2fv ) as DglTexCoord2fv_P;
            mDglTexCoord2fVertex3fSUN_FFFFF = GetDelegate( "glTexCoord2fVertex3fSUN", typeof( DglTexCoord2fVertex3fSUN_FFFFF ), ref bglTexCoord2fVertex3fSUN ) as DglTexCoord2fVertex3fSUN_FFFFF;
            mDglTexCoord2fVertex3fvSUN_aFaF = GetDelegate( "glTexCoord2fVertex3fvSUN", typeof( DglTexCoord2fVertex3fvSUN_aFaF ), ref bglTexCoord2fVertex3fvSUN ) as DglTexCoord2fVertex3fvSUN_aFaF;
            mDglTexCoord2fVertex3fvSUN_aFP = GetDelegate( "glTexCoord2fVertex3fvSUN", typeof( DglTexCoord2fVertex3fvSUN_aFP ), ref bglTexCoord2fVertex3fvSUN ) as DglTexCoord2fVertex3fvSUN_aFP;
            mDglTexCoord2fVertex3fvSUN_PaF = GetDelegate( "glTexCoord2fVertex3fvSUN", typeof( DglTexCoord2fVertex3fvSUN_PaF ), ref bglTexCoord2fVertex3fvSUN ) as DglTexCoord2fVertex3fvSUN_PaF;
            mDglTexCoord2fVertex3fvSUN_PP = GetDelegate( "glTexCoord2fVertex3fvSUN", typeof( DglTexCoord2fVertex3fvSUN_PP ), ref bglTexCoord2fVertex3fvSUN ) as DglTexCoord2fVertex3fvSUN_PP;
            mDglTexCoord2hNV_HH = GetDelegate( "glTexCoord2hNV", typeof( DglTexCoord2hNV_HH ), ref bglTexCoord2hNV ) as DglTexCoord2hNV_HH;
            mDglTexCoord2hvNV_aH = GetDelegate( "glTexCoord2hvNV", typeof( DglTexCoord2hvNV_aH ), ref bglTexCoord2hvNV ) as DglTexCoord2hvNV_aH;
            mDglTexCoord2hvNV_P = GetDelegate( "glTexCoord2hvNV", typeof( DglTexCoord2hvNV_P ), ref bglTexCoord2hvNV ) as DglTexCoord2hvNV_P;
            mDglTexCoord2i_II = GetDelegate( "glTexCoord2i", typeof( DglTexCoord2i_II ), ref bglTexCoord2i ) as DglTexCoord2i_II;
            mDglTexCoord2iv_aI = GetDelegate( "glTexCoord2iv", typeof( DglTexCoord2iv_aI ), ref bglTexCoord2iv ) as DglTexCoord2iv_aI;
            mDglTexCoord2iv_P = GetDelegate( "glTexCoord2iv", typeof( DglTexCoord2iv_P ), ref bglTexCoord2iv ) as DglTexCoord2iv_P;
            mDglTexCoord2s_HH = GetDelegate( "glTexCoord2s", typeof( DglTexCoord2s_HH ), ref bglTexCoord2s ) as DglTexCoord2s_HH;
            mDglTexCoord2sv_aH = GetDelegate( "glTexCoord2sv", typeof( DglTexCoord2sv_aH ), ref bglTexCoord2sv ) as DglTexCoord2sv_aH;
            mDglTexCoord2sv_P = GetDelegate( "glTexCoord2sv", typeof( DglTexCoord2sv_P ), ref bglTexCoord2sv ) as DglTexCoord2sv_P;
            mDglTexCoord3d_DDD = GetDelegate( "glTexCoord3d", typeof( DglTexCoord3d_DDD ), ref bglTexCoord3d ) as DglTexCoord3d_DDD;
            mDglTexCoord3dv_aD = GetDelegate( "glTexCoord3dv", typeof( DglTexCoord3dv_aD ), ref bglTexCoord3dv ) as DglTexCoord3dv_aD;
            mDglTexCoord3dv_P = GetDelegate( "glTexCoord3dv", typeof( DglTexCoord3dv_P ), ref bglTexCoord3dv ) as DglTexCoord3dv_P;
            mDglTexCoord3f_FFF = GetDelegate( "glTexCoord3f", typeof( DglTexCoord3f_FFF ), ref bglTexCoord3f ) as DglTexCoord3f_FFF;
            mDglTexCoord3fv_aF = GetDelegate( "glTexCoord3fv", typeof( DglTexCoord3fv_aF ), ref bglTexCoord3fv ) as DglTexCoord3fv_aF;
            mDglTexCoord3fv_P = GetDelegate( "glTexCoord3fv", typeof( DglTexCoord3fv_P ), ref bglTexCoord3fv ) as DglTexCoord3fv_P;
            mDglTexCoord3hNV_HHH = GetDelegate( "glTexCoord3hNV", typeof( DglTexCoord3hNV_HHH ), ref bglTexCoord3hNV ) as DglTexCoord3hNV_HHH;
            mDglTexCoord3hvNV_aH = GetDelegate( "glTexCoord3hvNV", typeof( DglTexCoord3hvNV_aH ), ref bglTexCoord3hvNV ) as DglTexCoord3hvNV_aH;
            mDglTexCoord3hvNV_P = GetDelegate( "glTexCoord3hvNV", typeof( DglTexCoord3hvNV_P ), ref bglTexCoord3hvNV ) as DglTexCoord3hvNV_P;
            mDglTexCoord3i_III = GetDelegate( "glTexCoord3i", typeof( DglTexCoord3i_III ), ref bglTexCoord3i ) as DglTexCoord3i_III;
            mDglTexCoord3iv_aI = GetDelegate( "glTexCoord3iv", typeof( DglTexCoord3iv_aI ), ref bglTexCoord3iv ) as DglTexCoord3iv_aI;
            mDglTexCoord3iv_P = GetDelegate( "glTexCoord3iv", typeof( DglTexCoord3iv_P ), ref bglTexCoord3iv ) as DglTexCoord3iv_P;
            mDglTexCoord3s_HHH = GetDelegate( "glTexCoord3s", typeof( DglTexCoord3s_HHH ), ref bglTexCoord3s ) as DglTexCoord3s_HHH;
            mDglTexCoord3sv_aH = GetDelegate( "glTexCoord3sv", typeof( DglTexCoord3sv_aH ), ref bglTexCoord3sv ) as DglTexCoord3sv_aH;
            mDglTexCoord3sv_P = GetDelegate( "glTexCoord3sv", typeof( DglTexCoord3sv_P ), ref bglTexCoord3sv ) as DglTexCoord3sv_P;
            mDglTexCoord4d_DDDD = GetDelegate( "glTexCoord4d", typeof( DglTexCoord4d_DDDD ), ref bglTexCoord4d ) as DglTexCoord4d_DDDD;
            mDglTexCoord4dv_aD = GetDelegate( "glTexCoord4dv", typeof( DglTexCoord4dv_aD ), ref bglTexCoord4dv ) as DglTexCoord4dv_aD;
            mDglTexCoord4dv_P = GetDelegate( "glTexCoord4dv", typeof( DglTexCoord4dv_P ), ref bglTexCoord4dv ) as DglTexCoord4dv_P;
            mDglTexCoord4f_FFFF = GetDelegate( "glTexCoord4f", typeof( DglTexCoord4f_FFFF ), ref bglTexCoord4f ) as DglTexCoord4f_FFFF;
            mDglTexCoord4fColor4fNormal3fVertex4fSUN_FFFFFFFFFFFFFFF = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fSUN_FFFFFFFFFFFFFFF ), ref bglTexCoord4fColor4fNormal3fVertex4fSUN ) as DglTexCoord4fColor4fNormal3fVertex4fSUN_FFFFFFFFFFFFFFF;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFaF = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFaF ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFaF;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFP = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFP ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFaFP;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPaF = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPaF ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPaF;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPP = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPP ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFaFPP;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFaF = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFaF ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFaF;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFP = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFP ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPaFP;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPaF = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPaF ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPaF;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPP = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPP ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_aFPPP;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFaF = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFaF ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFaF;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFP = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFP ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFaFP;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPaF = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPaF ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPaF;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPP = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPP ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_PaFPP;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFaF = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFaF ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFaF;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFP = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFP ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPaFP;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPaF = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPaF ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPaF;
            mDglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPP = GetDelegate( "glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof( DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPP ), ref bglTexCoord4fColor4fNormal3fVertex4fvSUN ) as DglTexCoord4fColor4fNormal3fVertex4fvSUN_PPPP;
            mDglTexCoord4fv_aF = GetDelegate( "glTexCoord4fv", typeof( DglTexCoord4fv_aF ), ref bglTexCoord4fv ) as DglTexCoord4fv_aF;
            mDglTexCoord4fv_P = GetDelegate( "glTexCoord4fv", typeof( DglTexCoord4fv_P ), ref bglTexCoord4fv ) as DglTexCoord4fv_P;
            mDglTexCoord4fVertex4fSUN_FFFFFFFF = GetDelegate( "glTexCoord4fVertex4fSUN", typeof( DglTexCoord4fVertex4fSUN_FFFFFFFF ), ref bglTexCoord4fVertex4fSUN ) as DglTexCoord4fVertex4fSUN_FFFFFFFF;
            mDglTexCoord4fVertex4fvSUN_aFaF = GetDelegate( "glTexCoord4fVertex4fvSUN", typeof( DglTexCoord4fVertex4fvSUN_aFaF ), ref bglTexCoord4fVertex4fvSUN ) as DglTexCoord4fVertex4fvSUN_aFaF;
            mDglTexCoord4fVertex4fvSUN_aFP = GetDelegate( "glTexCoord4fVertex4fvSUN", typeof( DglTexCoord4fVertex4fvSUN_aFP ), ref bglTexCoord4fVertex4fvSUN ) as DglTexCoord4fVertex4fvSUN_aFP;
            mDglTexCoord4fVertex4fvSUN_PaF = GetDelegate( "glTexCoord4fVertex4fvSUN", typeof( DglTexCoord4fVertex4fvSUN_PaF ), ref bglTexCoord4fVertex4fvSUN ) as DglTexCoord4fVertex4fvSUN_PaF;
            mDglTexCoord4fVertex4fvSUN_PP = GetDelegate( "glTexCoord4fVertex4fvSUN", typeof( DglTexCoord4fVertex4fvSUN_PP ), ref bglTexCoord4fVertex4fvSUN ) as DglTexCoord4fVertex4fvSUN_PP;
            mDglTexCoord4hNV_HHHH = GetDelegate( "glTexCoord4hNV", typeof( DglTexCoord4hNV_HHHH ), ref bglTexCoord4hNV ) as DglTexCoord4hNV_HHHH;
            mDglTexCoord4hvNV_aH = GetDelegate( "glTexCoord4hvNV", typeof( DglTexCoord4hvNV_aH ), ref bglTexCoord4hvNV ) as DglTexCoord4hvNV_aH;
            mDglTexCoord4hvNV_P = GetDelegate( "glTexCoord4hvNV", typeof( DglTexCoord4hvNV_P ), ref bglTexCoord4hvNV ) as DglTexCoord4hvNV_P;
            mDglTexCoord4i_IIII = GetDelegate( "glTexCoord4i", typeof( DglTexCoord4i_IIII ), ref bglTexCoord4i ) as DglTexCoord4i_IIII;
            mDglTexCoord4iv_aI = GetDelegate( "glTexCoord4iv", typeof( DglTexCoord4iv_aI ), ref bglTexCoord4iv ) as DglTexCoord4iv_aI;
            mDglTexCoord4iv_P = GetDelegate( "glTexCoord4iv", typeof( DglTexCoord4iv_P ), ref bglTexCoord4iv ) as DglTexCoord4iv_P;
            mDglTexCoord4s_HHHH = GetDelegate( "glTexCoord4s", typeof( DglTexCoord4s_HHHH ), ref bglTexCoord4s ) as DglTexCoord4s_HHHH;
            mDglTexCoord4sv_aH = GetDelegate( "glTexCoord4sv", typeof( DglTexCoord4sv_aH ), ref bglTexCoord4sv ) as DglTexCoord4sv_aH;
            mDglTexCoord4sv_P = GetDelegate( "glTexCoord4sv", typeof( DglTexCoord4sv_P ), ref bglTexCoord4sv ) as DglTexCoord4sv_P;
            mDglTexCoordPointer_IIIaB = GetDelegate( "glTexCoordPointer", typeof( DglTexCoordPointer_IIIaB ), ref bglTexCoordPointer ) as DglTexCoordPointer_IIIaB;
            mDglTexCoordPointer_IIIaH = GetDelegate( "glTexCoordPointer", typeof( DglTexCoordPointer_IIIaH ), ref bglTexCoordPointer ) as DglTexCoordPointer_IIIaH;
            mDglTexCoordPointer_IIIaI = GetDelegate( "glTexCoordPointer", typeof( DglTexCoordPointer_IIIaI ), ref bglTexCoordPointer ) as DglTexCoordPointer_IIIaI;
            mDglTexCoordPointer_IIIaF = GetDelegate( "glTexCoordPointer", typeof( DglTexCoordPointer_IIIaF ), ref bglTexCoordPointer ) as DglTexCoordPointer_IIIaF;
            mDglTexCoordPointer_IIIaD = GetDelegate( "glTexCoordPointer", typeof( DglTexCoordPointer_IIIaD ), ref bglTexCoordPointer ) as DglTexCoordPointer_IIIaD;
            mDglTexCoordPointer_IIIP = GetDelegate( "glTexCoordPointer", typeof( DglTexCoordPointer_IIIP ), ref bglTexCoordPointer ) as DglTexCoordPointer_IIIP;
            mDglTexCoordPointerEXT_IIIIaB = GetDelegate( "glTexCoordPointerEXT", typeof( DglTexCoordPointerEXT_IIIIaB ), ref bglTexCoordPointerEXT ) as DglTexCoordPointerEXT_IIIIaB;
            mDglTexCoordPointerEXT_IIIIaH = GetDelegate( "glTexCoordPointerEXT", typeof( DglTexCoordPointerEXT_IIIIaH ), ref bglTexCoordPointerEXT ) as DglTexCoordPointerEXT_IIIIaH;
            mDglTexCoordPointerEXT_IIIIaI = GetDelegate( "glTexCoordPointerEXT", typeof( DglTexCoordPointerEXT_IIIIaI ), ref bglTexCoordPointerEXT ) as DglTexCoordPointerEXT_IIIIaI;
            mDglTexCoordPointerEXT_IIIIaF = GetDelegate( "glTexCoordPointerEXT", typeof( DglTexCoordPointerEXT_IIIIaF ), ref bglTexCoordPointerEXT ) as DglTexCoordPointerEXT_IIIIaF;
            mDglTexCoordPointerEXT_IIIIaD = GetDelegate( "glTexCoordPointerEXT", typeof( DglTexCoordPointerEXT_IIIIaD ), ref bglTexCoordPointerEXT ) as DglTexCoordPointerEXT_IIIIaD;
            mDglTexCoordPointerEXT_IIIIP = GetDelegate( "glTexCoordPointerEXT", typeof( DglTexCoordPointerEXT_IIIIP ), ref bglTexCoordPointerEXT ) as DglTexCoordPointerEXT_IIIIP;
            mDglTexCoordPointerListIBM_IIIrPI = GetDelegate( "glTexCoordPointerListIBM", typeof( DglTexCoordPointerListIBM_IIIrPI ), ref bglTexCoordPointerListIBM ) as DglTexCoordPointerListIBM_IIIrPI;
            mDglTexCoordPointervINTEL_IIrP = GetDelegate( "glTexCoordPointervINTEL", typeof( DglTexCoordPointervINTEL_IIrP ), ref bglTexCoordPointervINTEL ) as DglTexCoordPointervINTEL_IIrP;
            mDglTexEnvf_IIF = GetDelegate( "glTexEnvf", typeof( DglTexEnvf_IIF ), ref bglTexEnvf ) as DglTexEnvf_IIF;
            mDglTexEnvfv_IIaF = GetDelegate( "glTexEnvfv", typeof( DglTexEnvfv_IIaF ), ref bglTexEnvfv ) as DglTexEnvfv_IIaF;
            mDglTexEnvfv_IIP = GetDelegate( "glTexEnvfv", typeof( DglTexEnvfv_IIP ), ref bglTexEnvfv ) as DglTexEnvfv_IIP;
            mDglTexEnvi_III = GetDelegate( "glTexEnvi", typeof( DglTexEnvi_III ), ref bglTexEnvi ) as DglTexEnvi_III;
            mDglTexEnviv_IIaI = GetDelegate( "glTexEnviv", typeof( DglTexEnviv_IIaI ), ref bglTexEnviv ) as DglTexEnviv_IIaI;
            mDglTexEnviv_IIP = GetDelegate( "glTexEnviv", typeof( DglTexEnviv_IIP ), ref bglTexEnviv ) as DglTexEnviv_IIP;
            mDglTexFilterFuncSGIS_IIIaF = GetDelegate( "glTexFilterFuncSGIS", typeof( DglTexFilterFuncSGIS_IIIaF ), ref bglTexFilterFuncSGIS ) as DglTexFilterFuncSGIS_IIIaF;
            mDglTexFilterFuncSGIS_IIIP = GetDelegate( "glTexFilterFuncSGIS", typeof( DglTexFilterFuncSGIS_IIIP ), ref bglTexFilterFuncSGIS ) as DglTexFilterFuncSGIS_IIIP;
            mDglTexGend_IID = GetDelegate( "glTexGend", typeof( DglTexGend_IID ), ref bglTexGend ) as DglTexGend_IID;
            mDglTexGendv_IIaD = GetDelegate( "glTexGendv", typeof( DglTexGendv_IIaD ), ref bglTexGendv ) as DglTexGendv_IIaD;
            mDglTexGendv_IIP = GetDelegate( "glTexGendv", typeof( DglTexGendv_IIP ), ref bglTexGendv ) as DglTexGendv_IIP;
            mDglTexGenf_IIF = GetDelegate( "glTexGenf", typeof( DglTexGenf_IIF ), ref bglTexGenf ) as DglTexGenf_IIF;
            mDglTexGenfv_IIaF = GetDelegate( "glTexGenfv", typeof( DglTexGenfv_IIaF ), ref bglTexGenfv ) as DglTexGenfv_IIaF;
            mDglTexGenfv_IIP = GetDelegate( "glTexGenfv", typeof( DglTexGenfv_IIP ), ref bglTexGenfv ) as DglTexGenfv_IIP;
            mDglTexGeni_III = GetDelegate( "glTexGeni", typeof( DglTexGeni_III ), ref bglTexGeni ) as DglTexGeni_III;
            mDglTexGeniv_IIaI = GetDelegate( "glTexGeniv", typeof( DglTexGeniv_IIaI ), ref bglTexGeniv ) as DglTexGeniv_IIaI;
            mDglTexGeniv_IIP = GetDelegate( "glTexGeniv", typeof( DglTexGeniv_IIP ), ref bglTexGeniv ) as DglTexGeniv_IIP;
            mDglTexImage1D_IIIIIIIaB = GetDelegate( "glTexImage1D", typeof( DglTexImage1D_IIIIIIIaB ), ref bglTexImage1D ) as DglTexImage1D_IIIIIIIaB;
            mDglTexImage1D_IIIIIIIaH = GetDelegate( "glTexImage1D", typeof( DglTexImage1D_IIIIIIIaH ), ref bglTexImage1D ) as DglTexImage1D_IIIIIIIaH;
            mDglTexImage1D_IIIIIIIaI = GetDelegate( "glTexImage1D", typeof( DglTexImage1D_IIIIIIIaI ), ref bglTexImage1D ) as DglTexImage1D_IIIIIIIaI;
            mDglTexImage1D_IIIIIIIaF = GetDelegate( "glTexImage1D", typeof( DglTexImage1D_IIIIIIIaF ), ref bglTexImage1D ) as DglTexImage1D_IIIIIIIaF;
            mDglTexImage1D_IIIIIIIP = GetDelegate( "glTexImage1D", typeof( DglTexImage1D_IIIIIIIP ), ref bglTexImage1D ) as DglTexImage1D_IIIIIIIP;
            mDglTexImage2D_IIIIIIIIaB = GetDelegate( "glTexImage2D", typeof( DglTexImage2D_IIIIIIIIaB ), ref bglTexImage2D ) as DglTexImage2D_IIIIIIIIaB;
            mDglTexImage2D_IIIIIIIIaH = GetDelegate( "glTexImage2D", typeof( DglTexImage2D_IIIIIIIIaH ), ref bglTexImage2D ) as DglTexImage2D_IIIIIIIIaH;
            mDglTexImage2D_IIIIIIIIaI = GetDelegate( "glTexImage2D", typeof( DglTexImage2D_IIIIIIIIaI ), ref bglTexImage2D ) as DglTexImage2D_IIIIIIIIaI;
            mDglTexImage2D_IIIIIIIIaF = GetDelegate( "glTexImage2D", typeof( DglTexImage2D_IIIIIIIIaF ), ref bglTexImage2D ) as DglTexImage2D_IIIIIIIIaF;
            mDglTexImage2D_IIIIIIIIP = GetDelegate( "glTexImage2D", typeof( DglTexImage2D_IIIIIIIIP ), ref bglTexImage2D ) as DglTexImage2D_IIIIIIIIP;
            mDglTexImage3D_IIIIIIIIIaB = GetDelegate( "glTexImage3D", typeof( DglTexImage3D_IIIIIIIIIaB ), ref bglTexImage3D ) as DglTexImage3D_IIIIIIIIIaB;
            mDglTexImage3D_IIIIIIIIIaH = GetDelegate( "glTexImage3D", typeof( DglTexImage3D_IIIIIIIIIaH ), ref bglTexImage3D ) as DglTexImage3D_IIIIIIIIIaH;
            mDglTexImage3D_IIIIIIIIIaI = GetDelegate( "glTexImage3D", typeof( DglTexImage3D_IIIIIIIIIaI ), ref bglTexImage3D ) as DglTexImage3D_IIIIIIIIIaI;
            mDglTexImage3D_IIIIIIIIIaF = GetDelegate( "glTexImage3D", typeof( DglTexImage3D_IIIIIIIIIaF ), ref bglTexImage3D ) as DglTexImage3D_IIIIIIIIIaF;
            mDglTexImage3D_IIIIIIIIIP = GetDelegate( "glTexImage3D", typeof( DglTexImage3D_IIIIIIIIIP ), ref bglTexImage3D ) as DglTexImage3D_IIIIIIIIIP;
            mDglTexImage3DEXT_IIIIIIIIIaB = GetDelegate( "glTexImage3DEXT", typeof( DglTexImage3DEXT_IIIIIIIIIaB ), ref bglTexImage3DEXT ) as DglTexImage3DEXT_IIIIIIIIIaB;
            mDglTexImage3DEXT_IIIIIIIIIaH = GetDelegate( "glTexImage3DEXT", typeof( DglTexImage3DEXT_IIIIIIIIIaH ), ref bglTexImage3DEXT ) as DglTexImage3DEXT_IIIIIIIIIaH;
            mDglTexImage3DEXT_IIIIIIIIIaI = GetDelegate( "glTexImage3DEXT", typeof( DglTexImage3DEXT_IIIIIIIIIaI ), ref bglTexImage3DEXT ) as DglTexImage3DEXT_IIIIIIIIIaI;
            mDglTexImage3DEXT_IIIIIIIIIaF = GetDelegate( "glTexImage3DEXT", typeof( DglTexImage3DEXT_IIIIIIIIIaF ), ref bglTexImage3DEXT ) as DglTexImage3DEXT_IIIIIIIIIaF;
            mDglTexImage3DEXT_IIIIIIIIIP = GetDelegate( "glTexImage3DEXT", typeof( DglTexImage3DEXT_IIIIIIIIIP ), ref bglTexImage3DEXT ) as DglTexImage3DEXT_IIIIIIIIIP;
            mDglTexImage4DSGIS_IIIIIIIIIIaB = GetDelegate( "glTexImage4DSGIS", typeof( DglTexImage4DSGIS_IIIIIIIIIIaB ), ref bglTexImage4DSGIS ) as DglTexImage4DSGIS_IIIIIIIIIIaB;
            mDglTexImage4DSGIS_IIIIIIIIIIaH = GetDelegate( "glTexImage4DSGIS", typeof( DglTexImage4DSGIS_IIIIIIIIIIaH ), ref bglTexImage4DSGIS ) as DglTexImage4DSGIS_IIIIIIIIIIaH;
            mDglTexImage4DSGIS_IIIIIIIIIIaI = GetDelegate( "glTexImage4DSGIS", typeof( DglTexImage4DSGIS_IIIIIIIIIIaI ), ref bglTexImage4DSGIS ) as DglTexImage4DSGIS_IIIIIIIIIIaI;
            mDglTexImage4DSGIS_IIIIIIIIIIaF = GetDelegate( "glTexImage4DSGIS", typeof( DglTexImage4DSGIS_IIIIIIIIIIaF ), ref bglTexImage4DSGIS ) as DglTexImage4DSGIS_IIIIIIIIIIaF;
            mDglTexImage4DSGIS_IIIIIIIIIIP = GetDelegate( "glTexImage4DSGIS", typeof( DglTexImage4DSGIS_IIIIIIIIIIP ), ref bglTexImage4DSGIS ) as DglTexImage4DSGIS_IIIIIIIIIIP;
            mDglTexParameterf_IIF = GetDelegate( "glTexParameterf", typeof( DglTexParameterf_IIF ), ref bglTexParameterf ) as DglTexParameterf_IIF;
            mDglTexParameterfv_IIaF = GetDelegate( "glTexParameterfv", typeof( DglTexParameterfv_IIaF ), ref bglTexParameterfv ) as DglTexParameterfv_IIaF;
            mDglTexParameterfv_IIP = GetDelegate( "glTexParameterfv", typeof( DglTexParameterfv_IIP ), ref bglTexParameterfv ) as DglTexParameterfv_IIP;
            mDglTexParameteri_III = GetDelegate( "glTexParameteri", typeof( DglTexParameteri_III ), ref bglTexParameteri ) as DglTexParameteri_III;
            mDglTexParameteriv_IIaI = GetDelegate( "glTexParameteriv", typeof( DglTexParameteriv_IIaI ), ref bglTexParameteriv ) as DglTexParameteriv_IIaI;
            mDglTexParameteriv_IIP = GetDelegate( "glTexParameteriv", typeof( DglTexParameteriv_IIP ), ref bglTexParameteriv ) as DglTexParameteriv_IIP;
            mDglTexSubImage1D_IIIIIIaB = GetDelegate( "glTexSubImage1D", typeof( DglTexSubImage1D_IIIIIIaB ), ref bglTexSubImage1D ) as DglTexSubImage1D_IIIIIIaB;
            mDglTexSubImage1D_IIIIIIaH = GetDelegate( "glTexSubImage1D", typeof( DglTexSubImage1D_IIIIIIaH ), ref bglTexSubImage1D ) as DglTexSubImage1D_IIIIIIaH;
            mDglTexSubImage1D_IIIIIIaI = GetDelegate( "glTexSubImage1D", typeof( DglTexSubImage1D_IIIIIIaI ), ref bglTexSubImage1D ) as DglTexSubImage1D_IIIIIIaI;
            mDglTexSubImage1D_IIIIIIaF = GetDelegate( "glTexSubImage1D", typeof( DglTexSubImage1D_IIIIIIaF ), ref bglTexSubImage1D ) as DglTexSubImage1D_IIIIIIaF;
            mDglTexSubImage1D_IIIIIIP = GetDelegate( "glTexSubImage1D", typeof( DglTexSubImage1D_IIIIIIP ), ref bglTexSubImage1D ) as DglTexSubImage1D_IIIIIIP;
            mDglTexSubImage1DEXT_IIIIIIaB = GetDelegate( "glTexSubImage1DEXT", typeof( DglTexSubImage1DEXT_IIIIIIaB ), ref bglTexSubImage1DEXT ) as DglTexSubImage1DEXT_IIIIIIaB;
            mDglTexSubImage1DEXT_IIIIIIaH = GetDelegate( "glTexSubImage1DEXT", typeof( DglTexSubImage1DEXT_IIIIIIaH ), ref bglTexSubImage1DEXT ) as DglTexSubImage1DEXT_IIIIIIaH;
            mDglTexSubImage1DEXT_IIIIIIaI = GetDelegate( "glTexSubImage1DEXT", typeof( DglTexSubImage1DEXT_IIIIIIaI ), ref bglTexSubImage1DEXT ) as DglTexSubImage1DEXT_IIIIIIaI;
            mDglTexSubImage1DEXT_IIIIIIaF = GetDelegate( "glTexSubImage1DEXT", typeof( DglTexSubImage1DEXT_IIIIIIaF ), ref bglTexSubImage1DEXT ) as DglTexSubImage1DEXT_IIIIIIaF;
            mDglTexSubImage1DEXT_IIIIIIP = GetDelegate( "glTexSubImage1DEXT", typeof( DglTexSubImage1DEXT_IIIIIIP ), ref bglTexSubImage1DEXT ) as DglTexSubImage1DEXT_IIIIIIP;
            mDglTexSubImage2D_IIIIIIIIaB = GetDelegate( "glTexSubImage2D", typeof( DglTexSubImage2D_IIIIIIIIaB ), ref bglTexSubImage2D ) as DglTexSubImage2D_IIIIIIIIaB;
            mDglTexSubImage2D_IIIIIIIIaH = GetDelegate( "glTexSubImage2D", typeof( DglTexSubImage2D_IIIIIIIIaH ), ref bglTexSubImage2D ) as DglTexSubImage2D_IIIIIIIIaH;
            mDglTexSubImage2D_IIIIIIIIaI = GetDelegate( "glTexSubImage2D", typeof( DglTexSubImage2D_IIIIIIIIaI ), ref bglTexSubImage2D ) as DglTexSubImage2D_IIIIIIIIaI;
            mDglTexSubImage2D_IIIIIIIIaF = GetDelegate( "glTexSubImage2D", typeof( DglTexSubImage2D_IIIIIIIIaF ), ref bglTexSubImage2D ) as DglTexSubImage2D_IIIIIIIIaF;
            mDglTexSubImage2D_IIIIIIIIP = GetDelegate( "glTexSubImage2D", typeof( DglTexSubImage2D_IIIIIIIIP ), ref bglTexSubImage2D ) as DglTexSubImage2D_IIIIIIIIP;
            mDglTexSubImage2DEXT_IIIIIIIIaB = GetDelegate( "glTexSubImage2DEXT", typeof( DglTexSubImage2DEXT_IIIIIIIIaB ), ref bglTexSubImage2DEXT ) as DglTexSubImage2DEXT_IIIIIIIIaB;
            mDglTexSubImage2DEXT_IIIIIIIIaH = GetDelegate( "glTexSubImage2DEXT", typeof( DglTexSubImage2DEXT_IIIIIIIIaH ), ref bglTexSubImage2DEXT ) as DglTexSubImage2DEXT_IIIIIIIIaH;
            mDglTexSubImage2DEXT_IIIIIIIIaI = GetDelegate( "glTexSubImage2DEXT", typeof( DglTexSubImage2DEXT_IIIIIIIIaI ), ref bglTexSubImage2DEXT ) as DglTexSubImage2DEXT_IIIIIIIIaI;
            mDglTexSubImage2DEXT_IIIIIIIIaF = GetDelegate( "glTexSubImage2DEXT", typeof( DglTexSubImage2DEXT_IIIIIIIIaF ), ref bglTexSubImage2DEXT ) as DglTexSubImage2DEXT_IIIIIIIIaF;
            mDglTexSubImage2DEXT_IIIIIIIIP = GetDelegate( "glTexSubImage2DEXT", typeof( DglTexSubImage2DEXT_IIIIIIIIP ), ref bglTexSubImage2DEXT ) as DglTexSubImage2DEXT_IIIIIIIIP;
            mDglTexSubImage3D_IIIIIIIIIIaB = GetDelegate( "glTexSubImage3D", typeof( DglTexSubImage3D_IIIIIIIIIIaB ), ref bglTexSubImage3D ) as DglTexSubImage3D_IIIIIIIIIIaB;
            mDglTexSubImage3D_IIIIIIIIIIaH = GetDelegate( "glTexSubImage3D", typeof( DglTexSubImage3D_IIIIIIIIIIaH ), ref bglTexSubImage3D ) as DglTexSubImage3D_IIIIIIIIIIaH;
            mDglTexSubImage3D_IIIIIIIIIIaI = GetDelegate( "glTexSubImage3D", typeof( DglTexSubImage3D_IIIIIIIIIIaI ), ref bglTexSubImage3D ) as DglTexSubImage3D_IIIIIIIIIIaI;
            mDglTexSubImage3D_IIIIIIIIIIaF = GetDelegate( "glTexSubImage3D", typeof( DglTexSubImage3D_IIIIIIIIIIaF ), ref bglTexSubImage3D ) as DglTexSubImage3D_IIIIIIIIIIaF;
            mDglTexSubImage3D_IIIIIIIIIIP = GetDelegate( "glTexSubImage3D", typeof( DglTexSubImage3D_IIIIIIIIIIP ), ref bglTexSubImage3D ) as DglTexSubImage3D_IIIIIIIIIIP;
            mDglTexSubImage3DEXT_IIIIIIIIIIaB = GetDelegate( "glTexSubImage3DEXT", typeof( DglTexSubImage3DEXT_IIIIIIIIIIaB ), ref bglTexSubImage3DEXT ) as DglTexSubImage3DEXT_IIIIIIIIIIaB;
            mDglTexSubImage3DEXT_IIIIIIIIIIaH = GetDelegate( "glTexSubImage3DEXT", typeof( DglTexSubImage3DEXT_IIIIIIIIIIaH ), ref bglTexSubImage3DEXT ) as DglTexSubImage3DEXT_IIIIIIIIIIaH;
            mDglTexSubImage3DEXT_IIIIIIIIIIaI = GetDelegate( "glTexSubImage3DEXT", typeof( DglTexSubImage3DEXT_IIIIIIIIIIaI ), ref bglTexSubImage3DEXT ) as DglTexSubImage3DEXT_IIIIIIIIIIaI;
            mDglTexSubImage3DEXT_IIIIIIIIIIaF = GetDelegate( "glTexSubImage3DEXT", typeof( DglTexSubImage3DEXT_IIIIIIIIIIaF ), ref bglTexSubImage3DEXT ) as DglTexSubImage3DEXT_IIIIIIIIIIaF;
            mDglTexSubImage3DEXT_IIIIIIIIIIP = GetDelegate( "glTexSubImage3DEXT", typeof( DglTexSubImage3DEXT_IIIIIIIIIIP ), ref bglTexSubImage3DEXT ) as DglTexSubImage3DEXT_IIIIIIIIIIP;
            mDglTexSubImage4DSGIS_IIIIIIIIIIIIaB = GetDelegate( "glTexSubImage4DSGIS", typeof( DglTexSubImage4DSGIS_IIIIIIIIIIIIaB ), ref bglTexSubImage4DSGIS ) as DglTexSubImage4DSGIS_IIIIIIIIIIIIaB;
            mDglTexSubImage4DSGIS_IIIIIIIIIIIIaH = GetDelegate( "glTexSubImage4DSGIS", typeof( DglTexSubImage4DSGIS_IIIIIIIIIIIIaH ), ref bglTexSubImage4DSGIS ) as DglTexSubImage4DSGIS_IIIIIIIIIIIIaH;
            mDglTexSubImage4DSGIS_IIIIIIIIIIIIaI = GetDelegate( "glTexSubImage4DSGIS", typeof( DglTexSubImage4DSGIS_IIIIIIIIIIIIaI ), ref bglTexSubImage4DSGIS ) as DglTexSubImage4DSGIS_IIIIIIIIIIIIaI;
            mDglTexSubImage4DSGIS_IIIIIIIIIIIIaF = GetDelegate( "glTexSubImage4DSGIS", typeof( DglTexSubImage4DSGIS_IIIIIIIIIIIIaF ), ref bglTexSubImage4DSGIS ) as DglTexSubImage4DSGIS_IIIIIIIIIIIIaF;
            mDglTexSubImage4DSGIS_IIIIIIIIIIIIP = GetDelegate( "glTexSubImage4DSGIS", typeof( DglTexSubImage4DSGIS_IIIIIIIIIIIIP ), ref bglTexSubImage4DSGIS ) as DglTexSubImage4DSGIS_IIIIIIIIIIIIP;
            mDglTextureColorMaskSGIS_BBBB = GetDelegate( "glTextureColorMaskSGIS", typeof( DglTextureColorMaskSGIS_BBBB ), ref bglTextureColorMaskSGIS ) as DglTextureColorMaskSGIS_BBBB;
            mDglTextureLightEXT_I = GetDelegate( "glTextureLightEXT", typeof( DglTextureLightEXT_I ), ref bglTextureLightEXT ) as DglTextureLightEXT_I;
            mDglTextureMaterialEXT_II = GetDelegate( "glTextureMaterialEXT", typeof( DglTextureMaterialEXT_II ), ref bglTextureMaterialEXT ) as DglTextureMaterialEXT_II;
            mDglTextureNormalEXT_I = GetDelegate( "glTextureNormalEXT", typeof( DglTextureNormalEXT_I ), ref bglTextureNormalEXT ) as DglTextureNormalEXT_I;
            mDglTrackMatrixNV_IIII = GetDelegate( "glTrackMatrixNV", typeof( DglTrackMatrixNV_IIII ), ref bglTrackMatrixNV ) as DglTrackMatrixNV_IIII;
            mDglTranslated_DDD = GetDelegate( "glTranslated", typeof( DglTranslated_DDD ), ref bglTranslated ) as DglTranslated_DDD;
            mDglTranslatef_FFF = GetDelegate( "glTranslatef", typeof( DglTranslatef_FFF ), ref bglTranslatef ) as DglTranslatef_FFF;
            mDgluBeginCurve_P = GetDelegate( "gluBeginCurve", typeof( DgluBeginCurve_P ), ref bgluBeginCurve ) as DgluBeginCurve_P;
            mDgluBeginPolygon_P = GetDelegate( "gluBeginPolygon", typeof( DgluBeginPolygon_P ), ref bgluBeginPolygon ) as DgluBeginPolygon_P;
            mDgluBeginSurface_P = GetDelegate( "gluBeginSurface", typeof( DgluBeginSurface_P ), ref bgluBeginSurface ) as DgluBeginSurface_P;
            mDgluBeginTrim_P = GetDelegate( "gluBeginTrim", typeof( DgluBeginTrim_P ), ref bgluBeginTrim ) as DgluBeginTrim_P;
            mDgluBuild1DMipmaps_IIIIIaB = GetDelegate( "gluBuild1DMipmaps", typeof( DgluBuild1DMipmaps_IIIIIaB ), ref bgluBuild1DMipmaps ) as DgluBuild1DMipmaps_IIIIIaB;
            mDgluBuild1DMipmaps_IIIIIaH = GetDelegate( "gluBuild1DMipmaps", typeof( DgluBuild1DMipmaps_IIIIIaH ), ref bgluBuild1DMipmaps ) as DgluBuild1DMipmaps_IIIIIaH;
            mDgluBuild1DMipmaps_IIIIIaI = GetDelegate( "gluBuild1DMipmaps", typeof( DgluBuild1DMipmaps_IIIIIaI ), ref bgluBuild1DMipmaps ) as DgluBuild1DMipmaps_IIIIIaI;
            mDgluBuild1DMipmaps_IIIIIaF = GetDelegate( "gluBuild1DMipmaps", typeof( DgluBuild1DMipmaps_IIIIIaF ), ref bgluBuild1DMipmaps ) as DgluBuild1DMipmaps_IIIIIaF;
            mDgluBuild1DMipmaps_IIIIIP = GetDelegate( "gluBuild1DMipmaps", typeof( DgluBuild1DMipmaps_IIIIIP ), ref bgluBuild1DMipmaps ) as DgluBuild1DMipmaps_IIIIIP;
            mDgluBuild2DMipmaps_IIIIIIaB = GetDelegate( "gluBuild2DMipmaps", typeof( DgluBuild2DMipmaps_IIIIIIaB ), ref bgluBuild2DMipmaps ) as DgluBuild2DMipmaps_IIIIIIaB;
            mDgluBuild2DMipmaps_IIIIIIaH = GetDelegate( "gluBuild2DMipmaps", typeof( DgluBuild2DMipmaps_IIIIIIaH ), ref bgluBuild2DMipmaps ) as DgluBuild2DMipmaps_IIIIIIaH;
            mDgluBuild2DMipmaps_IIIIIIaI = GetDelegate( "gluBuild2DMipmaps", typeof( DgluBuild2DMipmaps_IIIIIIaI ), ref bgluBuild2DMipmaps ) as DgluBuild2DMipmaps_IIIIIIaI;
            mDgluBuild2DMipmaps_IIIIIIaF = GetDelegate( "gluBuild2DMipmaps", typeof( DgluBuild2DMipmaps_IIIIIIaF ), ref bgluBuild2DMipmaps ) as DgluBuild2DMipmaps_IIIIIIaF;
            mDgluBuild2DMipmaps_IIIIIIP = GetDelegate( "gluBuild2DMipmaps", typeof( DgluBuild2DMipmaps_IIIIIIP ), ref bgluBuild2DMipmaps ) as DgluBuild2DMipmaps_IIIIIIP;
            mDgluCylinder_PDDDII = GetDelegate( "gluCylinder", typeof( DgluCylinder_PDDDII ), ref bgluCylinder ) as DgluCylinder_PDDDII;
            mDgluDeleteNurbsRenderer_P = GetDelegate( "gluDeleteNurbsRenderer", typeof( DgluDeleteNurbsRenderer_P ), ref bgluDeleteNurbsRenderer ) as DgluDeleteNurbsRenderer_P;
            mDgluDeleteQuadric_P = GetDelegate( "gluDeleteQuadric", typeof( DgluDeleteQuadric_P ), ref bgluDeleteQuadric ) as DgluDeleteQuadric_P;
            mDgluDeleteTess_P = GetDelegate( "gluDeleteTess", typeof( DgluDeleteTess_P ), ref bgluDeleteTess ) as DgluDeleteTess_P;
            mDgluDisk_PDDII = GetDelegate( "gluDisk", typeof( DgluDisk_PDDII ), ref bgluDisk ) as DgluDisk_PDDII;
            mDgluEndCurve_P = GetDelegate( "gluEndCurve", typeof( DgluEndCurve_P ), ref bgluEndCurve ) as DgluEndCurve_P;
            mDgluEndPolygon_P = GetDelegate( "gluEndPolygon", typeof( DgluEndPolygon_P ), ref bgluEndPolygon ) as DgluEndPolygon_P;
            mDgluEndSurface_P = GetDelegate( "gluEndSurface", typeof( DgluEndSurface_P ), ref bgluEndSurface ) as DgluEndSurface_P;
            mDgluEndTrim_P = GetDelegate( "gluEndTrim", typeof( DgluEndTrim_P ), ref bgluEndTrim ) as DgluEndTrim_P;
            mDgluErrorString_I = GetDelegate( "gluErrorString", typeof( DgluErrorString_I ), ref bgluErrorString ) as DgluErrorString_I;
            mDgluErrorUnicodeStringEXT_I = GetDelegate( "gluErrorUnicodeStringEXT", typeof( DgluErrorUnicodeStringEXT_I ), ref bgluErrorUnicodeStringEXT ) as DgluErrorUnicodeStringEXT_I;
            mDgluGetNurbsProperty_PIrF = GetDelegate( "gluGetNurbsProperty", typeof( DgluGetNurbsProperty_PIrF ), ref bgluGetNurbsProperty ) as DgluGetNurbsProperty_PIrF;
            mDgluGetString_I = GetDelegate( "gluGetString", typeof( DgluGetString_I ), ref bgluGetString ) as DgluGetString_I;
            mDgluGetTessProperty_PIrD = GetDelegate( "gluGetTessProperty", typeof( DgluGetTessProperty_PIrD ), ref bgluGetTessProperty ) as DgluGetTessProperty_PIrD;
            mDgluLoadSamplingMatrices_PaFaFaI = GetDelegate( "gluLoadSamplingMatrices", typeof( DgluLoadSamplingMatrices_PaFaFaI ), ref bgluLoadSamplingMatrices ) as DgluLoadSamplingMatrices_PaFaFaI;
            mDgluLoadSamplingMatrices_PaFaFP = GetDelegate( "gluLoadSamplingMatrices", typeof( DgluLoadSamplingMatrices_PaFaFP ), ref bgluLoadSamplingMatrices ) as DgluLoadSamplingMatrices_PaFaFP;
            mDgluLoadSamplingMatrices_PaFPaI = GetDelegate( "gluLoadSamplingMatrices", typeof( DgluLoadSamplingMatrices_PaFPaI ), ref bgluLoadSamplingMatrices ) as DgluLoadSamplingMatrices_PaFPaI;
            mDgluLoadSamplingMatrices_PaFPP = GetDelegate( "gluLoadSamplingMatrices", typeof( DgluLoadSamplingMatrices_PaFPP ), ref bgluLoadSamplingMatrices ) as DgluLoadSamplingMatrices_PaFPP;
            mDgluLoadSamplingMatrices_PPaFaI = GetDelegate( "gluLoadSamplingMatrices", typeof( DgluLoadSamplingMatrices_PPaFaI ), ref bgluLoadSamplingMatrices ) as DgluLoadSamplingMatrices_PPaFaI;
            mDgluLoadSamplingMatrices_PPaFP = GetDelegate( "gluLoadSamplingMatrices", typeof( DgluLoadSamplingMatrices_PPaFP ), ref bgluLoadSamplingMatrices ) as DgluLoadSamplingMatrices_PPaFP;
            mDgluLoadSamplingMatrices_PPPaI = GetDelegate( "gluLoadSamplingMatrices", typeof( DgluLoadSamplingMatrices_PPPaI ), ref bgluLoadSamplingMatrices ) as DgluLoadSamplingMatrices_PPPaI;
            mDgluLoadSamplingMatrices_PPPP = GetDelegate( "gluLoadSamplingMatrices", typeof( DgluLoadSamplingMatrices_PPPP ), ref bgluLoadSamplingMatrices ) as DgluLoadSamplingMatrices_PPPP;
            mDgluLookAt_DDDDDDDDD = GetDelegate( "gluLookAt", typeof( DgluLookAt_DDDDDDDDD ), ref bgluLookAt ) as DgluLookAt_DDDDDDDDD;
            mDgluNewNurbsRenderer_V = GetDelegate( "gluNewNurbsRenderer", typeof( DgluNewNurbsRenderer_V ), ref bgluNewNurbsRenderer ) as DgluNewNurbsRenderer_V;
            mDgluNewQuadric_V = GetDelegate( "gluNewQuadric", typeof( DgluNewQuadric_V ), ref bgluNewQuadric ) as DgluNewQuadric_V;
            mDgluNewTess_V = GetDelegate( "gluNewTess", typeof( DgluNewTess_V ), ref bgluNewTess ) as DgluNewTess_V;
            mDgluNextContour_PI = GetDelegate( "gluNextContour", typeof( DgluNextContour_PI ), ref bgluNextContour ) as DgluNextContour_PI;
            mDglUniform1f_IF = GetDelegate( "glUniform1f", typeof( DglUniform1f_IF ), ref bglUniform1f ) as DglUniform1f_IF;
            mDglUniform1fARB_IF = GetDelegate( "glUniform1fARB", typeof( DglUniform1fARB_IF ), ref bglUniform1fARB ) as DglUniform1fARB_IF;
            mDglUniform1fv_IIaF = GetDelegate( "glUniform1fv", typeof( DglUniform1fv_IIaF ), ref bglUniform1fv ) as DglUniform1fv_IIaF;
            mDglUniform1fv_IIP = GetDelegate( "glUniform1fv", typeof( DglUniform1fv_IIP ), ref bglUniform1fv ) as DglUniform1fv_IIP;
            mDglUniform1fvARB_IIaF = GetDelegate( "glUniform1fvARB", typeof( DglUniform1fvARB_IIaF ), ref bglUniform1fvARB ) as DglUniform1fvARB_IIaF;
            mDglUniform1fvARB_IIP = GetDelegate( "glUniform1fvARB", typeof( DglUniform1fvARB_IIP ), ref bglUniform1fvARB ) as DglUniform1fvARB_IIP;
            mDglUniform1i_II = GetDelegate( "glUniform1i", typeof( DglUniform1i_II ), ref bglUniform1i ) as DglUniform1i_II;
            mDglUniform1iARB_II = GetDelegate( "glUniform1iARB", typeof( DglUniform1iARB_II ), ref bglUniform1iARB ) as DglUniform1iARB_II;
            mDglUniform1iv_IIaI = GetDelegate( "glUniform1iv", typeof( DglUniform1iv_IIaI ), ref bglUniform1iv ) as DglUniform1iv_IIaI;
            mDglUniform1iv_IIP = GetDelegate( "glUniform1iv", typeof( DglUniform1iv_IIP ), ref bglUniform1iv ) as DglUniform1iv_IIP;
            mDglUniform1ivARB_IIaI = GetDelegate( "glUniform1ivARB", typeof( DglUniform1ivARB_IIaI ), ref bglUniform1ivARB ) as DglUniform1ivARB_IIaI;
            mDglUniform1ivARB_IIP = GetDelegate( "glUniform1ivARB", typeof( DglUniform1ivARB_IIP ), ref bglUniform1ivARB ) as DglUniform1ivARB_IIP;
            mDglUniform2f_IFF = GetDelegate( "glUniform2f", typeof( DglUniform2f_IFF ), ref bglUniform2f ) as DglUniform2f_IFF;
            mDglUniform2fARB_IFF = GetDelegate( "glUniform2fARB", typeof( DglUniform2fARB_IFF ), ref bglUniform2fARB ) as DglUniform2fARB_IFF;
            mDglUniform2fv_IIaF = GetDelegate( "glUniform2fv", typeof( DglUniform2fv_IIaF ), ref bglUniform2fv ) as DglUniform2fv_IIaF;
            mDglUniform2fv_IIP = GetDelegate( "glUniform2fv", typeof( DglUniform2fv_IIP ), ref bglUniform2fv ) as DglUniform2fv_IIP;
            mDglUniform2fvARB_IIaF = GetDelegate( "glUniform2fvARB", typeof( DglUniform2fvARB_IIaF ), ref bglUniform2fvARB ) as DglUniform2fvARB_IIaF;
            mDglUniform2fvARB_IIP = GetDelegate( "glUniform2fvARB", typeof( DglUniform2fvARB_IIP ), ref bglUniform2fvARB ) as DglUniform2fvARB_IIP;
            mDglUniform2i_III = GetDelegate( "glUniform2i", typeof( DglUniform2i_III ), ref bglUniform2i ) as DglUniform2i_III;
            mDglUniform2iARB_III = GetDelegate( "glUniform2iARB", typeof( DglUniform2iARB_III ), ref bglUniform2iARB ) as DglUniform2iARB_III;
            mDglUniform2iv_IIaI = GetDelegate( "glUniform2iv", typeof( DglUniform2iv_IIaI ), ref bglUniform2iv ) as DglUniform2iv_IIaI;
            mDglUniform2iv_IIP = GetDelegate( "glUniform2iv", typeof( DglUniform2iv_IIP ), ref bglUniform2iv ) as DglUniform2iv_IIP;
            mDglUniform2ivARB_IIaI = GetDelegate( "glUniform2ivARB", typeof( DglUniform2ivARB_IIaI ), ref bglUniform2ivARB ) as DglUniform2ivARB_IIaI;
            mDglUniform2ivARB_IIP = GetDelegate( "glUniform2ivARB", typeof( DglUniform2ivARB_IIP ), ref bglUniform2ivARB ) as DglUniform2ivARB_IIP;
            mDglUniform3f_IFFF = GetDelegate( "glUniform3f", typeof( DglUniform3f_IFFF ), ref bglUniform3f ) as DglUniform3f_IFFF;
            mDglUniform3fARB_IFFF = GetDelegate( "glUniform3fARB", typeof( DglUniform3fARB_IFFF ), ref bglUniform3fARB ) as DglUniform3fARB_IFFF;
            mDglUniform3fv_IIaF = GetDelegate( "glUniform3fv", typeof( DglUniform3fv_IIaF ), ref bglUniform3fv ) as DglUniform3fv_IIaF;
            mDglUniform3fv_IIP = GetDelegate( "glUniform3fv", typeof( DglUniform3fv_IIP ), ref bglUniform3fv ) as DglUniform3fv_IIP;
            mDglUniform3fvARB_IIaF = GetDelegate( "glUniform3fvARB", typeof( DglUniform3fvARB_IIaF ), ref bglUniform3fvARB ) as DglUniform3fvARB_IIaF;
            mDglUniform3fvARB_IIP = GetDelegate( "glUniform3fvARB", typeof( DglUniform3fvARB_IIP ), ref bglUniform3fvARB ) as DglUniform3fvARB_IIP;
            mDglUniform3i_IIII = GetDelegate( "glUniform3i", typeof( DglUniform3i_IIII ), ref bglUniform3i ) as DglUniform3i_IIII;
            mDglUniform3iARB_IIII = GetDelegate( "glUniform3iARB", typeof( DglUniform3iARB_IIII ), ref bglUniform3iARB ) as DglUniform3iARB_IIII;
            mDglUniform3iv_IIaI = GetDelegate( "glUniform3iv", typeof( DglUniform3iv_IIaI ), ref bglUniform3iv ) as DglUniform3iv_IIaI;
            mDglUniform3iv_IIP = GetDelegate( "glUniform3iv", typeof( DglUniform3iv_IIP ), ref bglUniform3iv ) as DglUniform3iv_IIP;
            mDglUniform3ivARB_IIaI = GetDelegate( "glUniform3ivARB", typeof( DglUniform3ivARB_IIaI ), ref bglUniform3ivARB ) as DglUniform3ivARB_IIaI;
            mDglUniform3ivARB_IIP = GetDelegate( "glUniform3ivARB", typeof( DglUniform3ivARB_IIP ), ref bglUniform3ivARB ) as DglUniform3ivARB_IIP;
            mDglUniform4f_IFFFF = GetDelegate( "glUniform4f", typeof( DglUniform4f_IFFFF ), ref bglUniform4f ) as DglUniform4f_IFFFF;
            mDglUniform4fARB_IFFFF = GetDelegate( "glUniform4fARB", typeof( DglUniform4fARB_IFFFF ), ref bglUniform4fARB ) as DglUniform4fARB_IFFFF;
            mDglUniform4fv_IIaF = GetDelegate( "glUniform4fv", typeof( DglUniform4fv_IIaF ), ref bglUniform4fv ) as DglUniform4fv_IIaF;
            mDglUniform4fv_IIP = GetDelegate( "glUniform4fv", typeof( DglUniform4fv_IIP ), ref bglUniform4fv ) as DglUniform4fv_IIP;
            mDglUniform4fvARB_IIaF = GetDelegate( "glUniform4fvARB", typeof( DglUniform4fvARB_IIaF ), ref bglUniform4fvARB ) as DglUniform4fvARB_IIaF;
            mDglUniform4fvARB_IIP = GetDelegate( "glUniform4fvARB", typeof( DglUniform4fvARB_IIP ), ref bglUniform4fvARB ) as DglUniform4fvARB_IIP;
            mDglUniform4i_IIIII = GetDelegate( "glUniform4i", typeof( DglUniform4i_IIIII ), ref bglUniform4i ) as DglUniform4i_IIIII;
            mDglUniform4iARB_IIIII = GetDelegate( "glUniform4iARB", typeof( DglUniform4iARB_IIIII ), ref bglUniform4iARB ) as DglUniform4iARB_IIIII;
            mDglUniform4iv_IIaI = GetDelegate( "glUniform4iv", typeof( DglUniform4iv_IIaI ), ref bglUniform4iv ) as DglUniform4iv_IIaI;
            mDglUniform4iv_IIP = GetDelegate( "glUniform4iv", typeof( DglUniform4iv_IIP ), ref bglUniform4iv ) as DglUniform4iv_IIP;
            mDglUniform4ivARB_IIaI = GetDelegate( "glUniform4ivARB", typeof( DglUniform4ivARB_IIaI ), ref bglUniform4ivARB ) as DglUniform4ivARB_IIaI;
            mDglUniform4ivARB_IIP = GetDelegate( "glUniform4ivARB", typeof( DglUniform4ivARB_IIP ), ref bglUniform4ivARB ) as DglUniform4ivARB_IIP;
            mDglUniformMatrix2fv_IIBaF = GetDelegate( "glUniformMatrix2fv", typeof( DglUniformMatrix2fv_IIBaF ), ref bglUniformMatrix2fv ) as DglUniformMatrix2fv_IIBaF;
            mDglUniformMatrix2fv_IIBP = GetDelegate( "glUniformMatrix2fv", typeof( DglUniformMatrix2fv_IIBP ), ref bglUniformMatrix2fv ) as DglUniformMatrix2fv_IIBP;
            mDglUniformMatrix2fvARB_IIBaF = GetDelegate( "glUniformMatrix2fvARB", typeof( DglUniformMatrix2fvARB_IIBaF ), ref bglUniformMatrix2fvARB ) as DglUniformMatrix2fvARB_IIBaF;
            mDglUniformMatrix2fvARB_IIBP = GetDelegate( "glUniformMatrix2fvARB", typeof( DglUniformMatrix2fvARB_IIBP ), ref bglUniformMatrix2fvARB ) as DglUniformMatrix2fvARB_IIBP;
            mDglUniformMatrix3fv_IIBaF = GetDelegate( "glUniformMatrix3fv", typeof( DglUniformMatrix3fv_IIBaF ), ref bglUniformMatrix3fv ) as DglUniformMatrix3fv_IIBaF;
            mDglUniformMatrix3fv_IIBP = GetDelegate( "glUniformMatrix3fv", typeof( DglUniformMatrix3fv_IIBP ), ref bglUniformMatrix3fv ) as DglUniformMatrix3fv_IIBP;
            mDglUniformMatrix3fvARB_IIBaF = GetDelegate( "glUniformMatrix3fvARB", typeof( DglUniformMatrix3fvARB_IIBaF ), ref bglUniformMatrix3fvARB ) as DglUniformMatrix3fvARB_IIBaF;
            mDglUniformMatrix3fvARB_IIBP = GetDelegate( "glUniformMatrix3fvARB", typeof( DglUniformMatrix3fvARB_IIBP ), ref bglUniformMatrix3fvARB ) as DglUniformMatrix3fvARB_IIBP;
            mDglUniformMatrix4fv_IIBaF = GetDelegate( "glUniformMatrix4fv", typeof( DglUniformMatrix4fv_IIBaF ), ref bglUniformMatrix4fv ) as DglUniformMatrix4fv_IIBaF;
            mDglUniformMatrix4fv_IIBP = GetDelegate( "glUniformMatrix4fv", typeof( DglUniformMatrix4fv_IIBP ), ref bglUniformMatrix4fv ) as DglUniformMatrix4fv_IIBP;
            mDglUniformMatrix4fvARB_IIBaF = GetDelegate( "glUniformMatrix4fvARB", typeof( DglUniformMatrix4fvARB_IIBaF ), ref bglUniformMatrix4fvARB ) as DglUniformMatrix4fvARB_IIBaF;
            mDglUniformMatrix4fvARB_IIBP = GetDelegate( "glUniformMatrix4fvARB", typeof( DglUniformMatrix4fvARB_IIBP ), ref bglUniformMatrix4fvARB ) as DglUniformMatrix4fvARB_IIBP;
            mDglUnlockArraysEXT_V = GetDelegate( "glUnlockArraysEXT", typeof( DglUnlockArraysEXT_V ), ref bglUnlockArraysEXT ) as DglUnlockArraysEXT_V;
            mDglUnmapBuffer_I = GetDelegate( "glUnmapBuffer", typeof( DglUnmapBuffer_I ), ref bglUnmapBuffer ) as DglUnmapBuffer_I;
            mDglUnmapBufferARB_I = GetDelegate( "glUnmapBufferARB", typeof( DglUnmapBufferARB_I ), ref bglUnmapBufferARB ) as DglUnmapBufferARB_I;
            mDglUnmapObjectBufferATI_I = GetDelegate( "glUnmapObjectBufferATI", typeof( DglUnmapObjectBufferATI_I ), ref bglUnmapObjectBufferATI ) as DglUnmapObjectBufferATI_I;
            mDgluNurbsCallback_PIP = GetDelegate( "gluNurbsCallback", typeof( DgluNurbsCallback_PIP ), ref bgluNurbsCallback ) as DgluNurbsCallback_PIP;
            mDgluNurbsCurve_PIaFIaFII = GetDelegate( "gluNurbsCurve", typeof( DgluNurbsCurve_PIaFIaFII ), ref bgluNurbsCurve ) as DgluNurbsCurve_PIaFIaFII;
            mDgluNurbsCurve_PIaFIPII = GetDelegate( "gluNurbsCurve", typeof( DgluNurbsCurve_PIaFIPII ), ref bgluNurbsCurve ) as DgluNurbsCurve_PIaFIPII;
            mDgluNurbsCurve_PIPIaFII = GetDelegate( "gluNurbsCurve", typeof( DgluNurbsCurve_PIPIaFII ), ref bgluNurbsCurve ) as DgluNurbsCurve_PIPIaFII;
            mDgluNurbsCurve_PIPIPII = GetDelegate( "gluNurbsCurve", typeof( DgluNurbsCurve_PIPIPII ), ref bgluNurbsCurve ) as DgluNurbsCurve_PIPIPII;
            mDgluNurbsProperty_PIF = GetDelegate( "gluNurbsProperty", typeof( DgluNurbsProperty_PIF ), ref bgluNurbsProperty ) as DgluNurbsProperty_PIF;
            mDgluNurbsSurface_PIaFIaFIIaFIII = GetDelegate( "gluNurbsSurface", typeof( DgluNurbsSurface_PIaFIaFIIaFIII ), ref bgluNurbsSurface ) as DgluNurbsSurface_PIaFIaFIIaFIII;
            mDgluNurbsSurface_PIaFIaFIIPIII = GetDelegate( "gluNurbsSurface", typeof( DgluNurbsSurface_PIaFIaFIIPIII ), ref bgluNurbsSurface ) as DgluNurbsSurface_PIaFIaFIIPIII;
            mDgluNurbsSurface_PIaFIPIIaFIII = GetDelegate( "gluNurbsSurface", typeof( DgluNurbsSurface_PIaFIPIIaFIII ), ref bgluNurbsSurface ) as DgluNurbsSurface_PIaFIPIIaFIII;
            mDgluNurbsSurface_PIaFIPIIPIII = GetDelegate( "gluNurbsSurface", typeof( DgluNurbsSurface_PIaFIPIIPIII ), ref bgluNurbsSurface ) as DgluNurbsSurface_PIaFIPIIPIII;
            mDgluNurbsSurface_PIPIaFIIaFIII = GetDelegate( "gluNurbsSurface", typeof( DgluNurbsSurface_PIPIaFIIaFIII ), ref bgluNurbsSurface ) as DgluNurbsSurface_PIPIaFIIaFIII;
            mDgluNurbsSurface_PIPIaFIIPIII = GetDelegate( "gluNurbsSurface", typeof( DgluNurbsSurface_PIPIaFIIPIII ), ref bgluNurbsSurface ) as DgluNurbsSurface_PIPIaFIIPIII;
            mDgluNurbsSurface_PIPIPIIaFIII = GetDelegate( "gluNurbsSurface", typeof( DgluNurbsSurface_PIPIPIIaFIII ), ref bgluNurbsSurface ) as DgluNurbsSurface_PIPIPIIaFIII;
            mDgluNurbsSurface_PIPIPIIPIII = GetDelegate( "gluNurbsSurface", typeof( DgluNurbsSurface_PIPIPIIPIII ), ref bgluNurbsSurface ) as DgluNurbsSurface_PIPIPIIPIII;
            mDgluOrtho2D_DDDD = GetDelegate( "gluOrtho2D", typeof( DgluOrtho2D_DDDD ), ref bgluOrtho2D ) as DgluOrtho2D_DDDD;
            mDgluPartialDisk_PDDIIDD = GetDelegate( "gluPartialDisk", typeof( DgluPartialDisk_PDDIIDD ), ref bgluPartialDisk ) as DgluPartialDisk_PDDIIDD;
            mDglUpdateObjectBufferATI_IIIaBI = GetDelegate( "glUpdateObjectBufferATI", typeof( DglUpdateObjectBufferATI_IIIaBI ), ref bglUpdateObjectBufferATI ) as DglUpdateObjectBufferATI_IIIaBI;
            mDglUpdateObjectBufferATI_IIIPI = GetDelegate( "glUpdateObjectBufferATI", typeof( DglUpdateObjectBufferATI_IIIPI ), ref bglUpdateObjectBufferATI ) as DglUpdateObjectBufferATI_IIIPI;
            mDgluPerspective_DDDD = GetDelegate( "gluPerspective", typeof( DgluPerspective_DDDD ), ref bgluPerspective ) as DgluPerspective_DDDD;
            mDgluPickMatrix_DDDDaI = GetDelegate( "gluPickMatrix", typeof( DgluPickMatrix_DDDDaI ), ref bgluPickMatrix ) as DgluPickMatrix_DDDDaI;
            mDgluPickMatrix_DDDDP = GetDelegate( "gluPickMatrix", typeof( DgluPickMatrix_DDDDP ), ref bgluPickMatrix ) as DgluPickMatrix_DDDDP;
            mDgluProject_DDDaDaDaIrDrDrD = GetDelegate( "gluProject", typeof( DgluProject_DDDaDaDaIrDrDrD ), ref bgluProject ) as DgluProject_DDDaDaDaIrDrDrD;
            mDgluProject_DDDPPPPPP = GetDelegate( "gluProject", typeof( DgluProject_DDDPPPPPP ), ref bgluProject ) as DgluProject_DDDPPPPPP;
            mDgluPwlCurve_PIaFII = GetDelegate( "gluPwlCurve", typeof( DgluPwlCurve_PIaFII ), ref bgluPwlCurve ) as DgluPwlCurve_PIaFII;
            mDgluPwlCurve_PIPII = GetDelegate( "gluPwlCurve", typeof( DgluPwlCurve_PIPII ), ref bgluPwlCurve ) as DgluPwlCurve_PIPII;
            mDgluQuadricCallback_PIP = GetDelegate( "gluQuadricCallback", typeof( DgluQuadricCallback_PIP ), ref bgluQuadricCallback ) as DgluQuadricCallback_PIP;
            mDgluQuadricDrawStyle_PI = GetDelegate( "gluQuadricDrawStyle", typeof( DgluQuadricDrawStyle_PI ), ref bgluQuadricDrawStyle ) as DgluQuadricDrawStyle_PI;
            mDgluQuadricNormals_PI = GetDelegate( "gluQuadricNormals", typeof( DgluQuadricNormals_PI ), ref bgluQuadricNormals ) as DgluQuadricNormals_PI;
            mDgluQuadricOrientation_PI = GetDelegate( "gluQuadricOrientation", typeof( DgluQuadricOrientation_PI ), ref bgluQuadricOrientation ) as DgluQuadricOrientation_PI;
            mDgluQuadricTexture_PB = GetDelegate( "gluQuadricTexture", typeof( DgluQuadricTexture_PB ), ref bgluQuadricTexture ) as DgluQuadricTexture_PB;
            mDgluScaleImage_IIIIaBIIIaB = GetDelegate( "gluScaleImage", typeof( DgluScaleImage_IIIIaBIIIaB ), ref bgluScaleImage ) as DgluScaleImage_IIIIaBIIIaB;
            mDgluScaleImage_IIIIaBIIIP = GetDelegate( "gluScaleImage", typeof( DgluScaleImage_IIIIaBIIIP ), ref bgluScaleImage ) as DgluScaleImage_IIIIaBIIIP;
            mDgluScaleImage_IIIIPIIIaB = GetDelegate( "gluScaleImage", typeof( DgluScaleImage_IIIIPIIIaB ), ref bgluScaleImage ) as DgluScaleImage_IIIIPIIIaB;
            mDgluScaleImage_IIIIPIIIP = GetDelegate( "gluScaleImage", typeof( DgluScaleImage_IIIIPIIIP ), ref bgluScaleImage ) as DgluScaleImage_IIIIPIIIP;
            mDglUseProgram_I = GetDelegate( "glUseProgram", typeof( DglUseProgram_I ), ref bglUseProgram ) as DglUseProgram_I;
            mDglUseProgramObjectARB_I = GetDelegate( "glUseProgramObjectARB", typeof( DglUseProgramObjectARB_I ), ref bglUseProgramObjectARB ) as DglUseProgramObjectARB_I;
            mDgluSphere_PDII = GetDelegate( "gluSphere", typeof( DgluSphere_PDII ), ref bgluSphere ) as DgluSphere_PDII;
            mDgluTessBeginContour_P = GetDelegate( "gluTessBeginContour", typeof( DgluTessBeginContour_P ), ref bgluTessBeginContour ) as DgluTessBeginContour_P;
            mDgluTessBeginPolygon_PaB = GetDelegate( "gluTessBeginPolygon", typeof( DgluTessBeginPolygon_PaB ), ref bgluTessBeginPolygon ) as DgluTessBeginPolygon_PaB;
            mDgluTessBeginPolygon_PP = GetDelegate( "gluTessBeginPolygon", typeof( DgluTessBeginPolygon_PP ), ref bgluTessBeginPolygon ) as DgluTessBeginPolygon_PP;
            mDgluTessCallback_PIP = GetDelegate( "gluTessCallback", typeof( DgluTessCallback_PIP ), ref bgluTessCallback ) as DgluTessCallback_PIP;
            mDgluTessEndContour_P = GetDelegate( "gluTessEndContour", typeof( DgluTessEndContour_P ), ref bgluTessEndContour ) as DgluTessEndContour_P;
            mDgluTessEndPolygon_P = GetDelegate( "gluTessEndPolygon", typeof( DgluTessEndPolygon_P ), ref bgluTessEndPolygon ) as DgluTessEndPolygon_P;
            mDgluTessNormal_PDDD = GetDelegate( "gluTessNormal", typeof( DgluTessNormal_PDDD ), ref bgluTessNormal ) as DgluTessNormal_PDDD;
            mDgluTessProperty_PID = GetDelegate( "gluTessProperty", typeof( DgluTessProperty_PID ), ref bgluTessProperty ) as DgluTessProperty_PID;
            mDgluTessVertex_PaDaB = GetDelegate( "gluTessVertex", typeof( DgluTessVertex_PaDaB ), ref bgluTessVertex ) as DgluTessVertex_PaDaB;
            mDgluTessVertex_PaDP = GetDelegate( "gluTessVertex", typeof( DgluTessVertex_PaDP ), ref bgluTessVertex ) as DgluTessVertex_PaDP;
            mDgluTessVertex_PPaB = GetDelegate( "gluTessVertex", typeof( DgluTessVertex_PPaB ), ref bgluTessVertex ) as DgluTessVertex_PPaB;
            mDgluTessVertex_PPP = GetDelegate( "gluTessVertex", typeof( DgluTessVertex_PPP ), ref bgluTessVertex ) as DgluTessVertex_PPP;
            mDgluUnProject_DDDaDaDaIrDrDrD = GetDelegate( "gluUnProject", typeof( DgluUnProject_DDDaDaDaIrDrDrD ), ref bgluUnProject ) as DgluUnProject_DDDaDaDaIrDrDrD;
            mDgluUnProject_DDDPPPPPP = GetDelegate( "gluUnProject", typeof( DgluUnProject_DDDPPPPPP ), ref bgluUnProject ) as DgluUnProject_DDDPPPPPP;
            mDglValidateProgram_I = GetDelegate( "glValidateProgram", typeof( DglValidateProgram_I ), ref bglValidateProgram ) as DglValidateProgram_I;
            mDglValidateProgramARB_I = GetDelegate( "glValidateProgramARB", typeof( DglValidateProgramARB_I ), ref bglValidateProgramARB ) as DglValidateProgramARB_I;
            mDglVariantArrayObjectATI_IIIII = GetDelegate( "glVariantArrayObjectATI", typeof( DglVariantArrayObjectATI_IIIII ), ref bglVariantArrayObjectATI ) as DglVariantArrayObjectATI_IIIII;
            mDglVariantbvEXT_IaB = GetDelegate( "glVariantbvEXT", typeof( DglVariantbvEXT_IaB ), ref bglVariantbvEXT ) as DglVariantbvEXT_IaB;
            mDglVariantbvEXT_IP = GetDelegate( "glVariantbvEXT", typeof( DglVariantbvEXT_IP ), ref bglVariantbvEXT ) as DglVariantbvEXT_IP;
            mDglVariantdvEXT_IaD = GetDelegate( "glVariantdvEXT", typeof( DglVariantdvEXT_IaD ), ref bglVariantdvEXT ) as DglVariantdvEXT_IaD;
            mDglVariantdvEXT_IP = GetDelegate( "glVariantdvEXT", typeof( DglVariantdvEXT_IP ), ref bglVariantdvEXT ) as DglVariantdvEXT_IP;
            mDglVariantfvEXT_IaF = GetDelegate( "glVariantfvEXT", typeof( DglVariantfvEXT_IaF ), ref bglVariantfvEXT ) as DglVariantfvEXT_IaF;
            mDglVariantfvEXT_IP = GetDelegate( "glVariantfvEXT", typeof( DglVariantfvEXT_IP ), ref bglVariantfvEXT ) as DglVariantfvEXT_IP;
            mDglVariantivEXT_IaI = GetDelegate( "glVariantivEXT", typeof( DglVariantivEXT_IaI ), ref bglVariantivEXT ) as DglVariantivEXT_IaI;
            mDglVariantivEXT_IP = GetDelegate( "glVariantivEXT", typeof( DglVariantivEXT_IP ), ref bglVariantivEXT ) as DglVariantivEXT_IP;
            mDglVariantPointerEXT_IIIaB = GetDelegate( "glVariantPointerEXT", typeof( DglVariantPointerEXT_IIIaB ), ref bglVariantPointerEXT ) as DglVariantPointerEXT_IIIaB;
            mDglVariantPointerEXT_IIIaH = GetDelegate( "glVariantPointerEXT", typeof( DglVariantPointerEXT_IIIaH ), ref bglVariantPointerEXT ) as DglVariantPointerEXT_IIIaH;
            mDglVariantPointerEXT_IIIaI = GetDelegate( "glVariantPointerEXT", typeof( DglVariantPointerEXT_IIIaI ), ref bglVariantPointerEXT ) as DglVariantPointerEXT_IIIaI;
            mDglVariantPointerEXT_IIIaF = GetDelegate( "glVariantPointerEXT", typeof( DglVariantPointerEXT_IIIaF ), ref bglVariantPointerEXT ) as DglVariantPointerEXT_IIIaF;
            mDglVariantPointerEXT_IIIaD = GetDelegate( "glVariantPointerEXT", typeof( DglVariantPointerEXT_IIIaD ), ref bglVariantPointerEXT ) as DglVariantPointerEXT_IIIaD;
            mDglVariantPointerEXT_IIIP = GetDelegate( "glVariantPointerEXT", typeof( DglVariantPointerEXT_IIIP ), ref bglVariantPointerEXT ) as DglVariantPointerEXT_IIIP;
            mDglVariantsvEXT_IaH = GetDelegate( "glVariantsvEXT", typeof( DglVariantsvEXT_IaH ), ref bglVariantsvEXT ) as DglVariantsvEXT_IaH;
            mDglVariantsvEXT_IP = GetDelegate( "glVariantsvEXT", typeof( DglVariantsvEXT_IP ), ref bglVariantsvEXT ) as DglVariantsvEXT_IP;
            mDglVariantubvEXT_IaB = GetDelegate( "glVariantubvEXT", typeof( DglVariantubvEXT_IaB ), ref bglVariantubvEXT ) as DglVariantubvEXT_IaB;
            mDglVariantubvEXT_IP = GetDelegate( "glVariantubvEXT", typeof( DglVariantubvEXT_IP ), ref bglVariantubvEXT ) as DglVariantubvEXT_IP;
            mDglVariantuivEXT_IaI = GetDelegate( "glVariantuivEXT", typeof( DglVariantuivEXT_IaI ), ref bglVariantuivEXT ) as DglVariantuivEXT_IaI;
            mDglVariantuivEXT_IP = GetDelegate( "glVariantuivEXT", typeof( DglVariantuivEXT_IP ), ref bglVariantuivEXT ) as DglVariantuivEXT_IP;
            mDglVariantusvEXT_IaH = GetDelegate( "glVariantusvEXT", typeof( DglVariantusvEXT_IaH ), ref bglVariantusvEXT ) as DglVariantusvEXT_IaH;
            mDglVariantusvEXT_IP = GetDelegate( "glVariantusvEXT", typeof( DglVariantusvEXT_IP ), ref bglVariantusvEXT ) as DglVariantusvEXT_IP;
            mDglVertex2d_DD = GetDelegate( "glVertex2d", typeof( DglVertex2d_DD ), ref bglVertex2d ) as DglVertex2d_DD;
            mDglVertex2dv_aD = GetDelegate( "glVertex2dv", typeof( DglVertex2dv_aD ), ref bglVertex2dv ) as DglVertex2dv_aD;
            mDglVertex2dv_P = GetDelegate( "glVertex2dv", typeof( DglVertex2dv_P ), ref bglVertex2dv ) as DglVertex2dv_P;
            mDglVertex2f_FF = GetDelegate( "glVertex2f", typeof( DglVertex2f_FF ), ref bglVertex2f ) as DglVertex2f_FF;
            mDglVertex2fv_aF = GetDelegate( "glVertex2fv", typeof( DglVertex2fv_aF ), ref bglVertex2fv ) as DglVertex2fv_aF;
            mDglVertex2fv_P = GetDelegate( "glVertex2fv", typeof( DglVertex2fv_P ), ref bglVertex2fv ) as DglVertex2fv_P;
            mDglVertex2hNV_HH = GetDelegate( "glVertex2hNV", typeof( DglVertex2hNV_HH ), ref bglVertex2hNV ) as DglVertex2hNV_HH;
            mDglVertex2hvNV_aH = GetDelegate( "glVertex2hvNV", typeof( DglVertex2hvNV_aH ), ref bglVertex2hvNV ) as DglVertex2hvNV_aH;
            mDglVertex2hvNV_P = GetDelegate( "glVertex2hvNV", typeof( DglVertex2hvNV_P ), ref bglVertex2hvNV ) as DglVertex2hvNV_P;
            mDglVertex2i_II = GetDelegate( "glVertex2i", typeof( DglVertex2i_II ), ref bglVertex2i ) as DglVertex2i_II;
            mDglVertex2iv_aI = GetDelegate( "glVertex2iv", typeof( DglVertex2iv_aI ), ref bglVertex2iv ) as DglVertex2iv_aI;
            mDglVertex2iv_P = GetDelegate( "glVertex2iv", typeof( DglVertex2iv_P ), ref bglVertex2iv ) as DglVertex2iv_P;
            mDglVertex2s_HH = GetDelegate( "glVertex2s", typeof( DglVertex2s_HH ), ref bglVertex2s ) as DglVertex2s_HH;
            mDglVertex2sv_aH = GetDelegate( "glVertex2sv", typeof( DglVertex2sv_aH ), ref bglVertex2sv ) as DglVertex2sv_aH;
            mDglVertex2sv_P = GetDelegate( "glVertex2sv", typeof( DglVertex2sv_P ), ref bglVertex2sv ) as DglVertex2sv_P;
            mDglVertex3d_DDD = GetDelegate( "glVertex3d", typeof( DglVertex3d_DDD ), ref bglVertex3d ) as DglVertex3d_DDD;
            mDglVertex3dv_aD = GetDelegate( "glVertex3dv", typeof( DglVertex3dv_aD ), ref bglVertex3dv ) as DglVertex3dv_aD;
            mDglVertex3dv_P = GetDelegate( "glVertex3dv", typeof( DglVertex3dv_P ), ref bglVertex3dv ) as DglVertex3dv_P;
            mDglVertex3f_FFF = GetDelegate( "glVertex3f", typeof( DglVertex3f_FFF ), ref bglVertex3f ) as DglVertex3f_FFF;
            mDglVertex3fv_aF = GetDelegate( "glVertex3fv", typeof( DglVertex3fv_aF ), ref bglVertex3fv ) as DglVertex3fv_aF;
            mDglVertex3fv_P = GetDelegate( "glVertex3fv", typeof( DglVertex3fv_P ), ref bglVertex3fv ) as DglVertex3fv_P;
            mDglVertex3hNV_HHH = GetDelegate( "glVertex3hNV", typeof( DglVertex3hNV_HHH ), ref bglVertex3hNV ) as DglVertex3hNV_HHH;
            mDglVertex3hvNV_aH = GetDelegate( "glVertex3hvNV", typeof( DglVertex3hvNV_aH ), ref bglVertex3hvNV ) as DglVertex3hvNV_aH;
            mDglVertex3hvNV_P = GetDelegate( "glVertex3hvNV", typeof( DglVertex3hvNV_P ), ref bglVertex3hvNV ) as DglVertex3hvNV_P;
            mDglVertex3i_III = GetDelegate( "glVertex3i", typeof( DglVertex3i_III ), ref bglVertex3i ) as DglVertex3i_III;
            mDglVertex3iv_aI = GetDelegate( "glVertex3iv", typeof( DglVertex3iv_aI ), ref bglVertex3iv ) as DglVertex3iv_aI;
            mDglVertex3iv_P = GetDelegate( "glVertex3iv", typeof( DglVertex3iv_P ), ref bglVertex3iv ) as DglVertex3iv_P;
            mDglVertex3s_HHH = GetDelegate( "glVertex3s", typeof( DglVertex3s_HHH ), ref bglVertex3s ) as DglVertex3s_HHH;
            mDglVertex3sv_aH = GetDelegate( "glVertex3sv", typeof( DglVertex3sv_aH ), ref bglVertex3sv ) as DglVertex3sv_aH;
            mDglVertex3sv_P = GetDelegate( "glVertex3sv", typeof( DglVertex3sv_P ), ref bglVertex3sv ) as DglVertex3sv_P;
            mDglVertex4d_DDDD = GetDelegate( "glVertex4d", typeof( DglVertex4d_DDDD ), ref bglVertex4d ) as DglVertex4d_DDDD;
            mDglVertex4dv_aD = GetDelegate( "glVertex4dv", typeof( DglVertex4dv_aD ), ref bglVertex4dv ) as DglVertex4dv_aD;
            mDglVertex4dv_P = GetDelegate( "glVertex4dv", typeof( DglVertex4dv_P ), ref bglVertex4dv ) as DglVertex4dv_P;
            mDglVertex4f_FFFF = GetDelegate( "glVertex4f", typeof( DglVertex4f_FFFF ), ref bglVertex4f ) as DglVertex4f_FFFF;
            mDglVertex4fv_aF = GetDelegate( "glVertex4fv", typeof( DglVertex4fv_aF ), ref bglVertex4fv ) as DglVertex4fv_aF;
            mDglVertex4fv_P = GetDelegate( "glVertex4fv", typeof( DglVertex4fv_P ), ref bglVertex4fv ) as DglVertex4fv_P;
            mDglVertex4hNV_HHHH = GetDelegate( "glVertex4hNV", typeof( DglVertex4hNV_HHHH ), ref bglVertex4hNV ) as DglVertex4hNV_HHHH;
            mDglVertex4hvNV_aH = GetDelegate( "glVertex4hvNV", typeof( DglVertex4hvNV_aH ), ref bglVertex4hvNV ) as DglVertex4hvNV_aH;
            mDglVertex4hvNV_P = GetDelegate( "glVertex4hvNV", typeof( DglVertex4hvNV_P ), ref bglVertex4hvNV ) as DglVertex4hvNV_P;
            mDglVertex4i_IIII = GetDelegate( "glVertex4i", typeof( DglVertex4i_IIII ), ref bglVertex4i ) as DglVertex4i_IIII;
            mDglVertex4iv_aI = GetDelegate( "glVertex4iv", typeof( DglVertex4iv_aI ), ref bglVertex4iv ) as DglVertex4iv_aI;
            mDglVertex4iv_P = GetDelegate( "glVertex4iv", typeof( DglVertex4iv_P ), ref bglVertex4iv ) as DglVertex4iv_P;
            mDglVertex4s_HHHH = GetDelegate( "glVertex4s", typeof( DglVertex4s_HHHH ), ref bglVertex4s ) as DglVertex4s_HHHH;
            mDglVertex4sv_aH = GetDelegate( "glVertex4sv", typeof( DglVertex4sv_aH ), ref bglVertex4sv ) as DglVertex4sv_aH;
            mDglVertex4sv_P = GetDelegate( "glVertex4sv", typeof( DglVertex4sv_P ), ref bglVertex4sv ) as DglVertex4sv_P;
            mDglVertexArrayParameteriAPPLE_II = GetDelegate( "glVertexArrayParameteriAPPLE", typeof( DglVertexArrayParameteriAPPLE_II ), ref bglVertexArrayParameteriAPPLE ) as DglVertexArrayParameteriAPPLE_II;
            mDglVertexArrayRangeAPPLE_IaB = GetDelegate( "glVertexArrayRangeAPPLE", typeof( DglVertexArrayRangeAPPLE_IaB ), ref bglVertexArrayRangeAPPLE ) as DglVertexArrayRangeAPPLE_IaB;
            mDglVertexArrayRangeAPPLE_IP = GetDelegate( "glVertexArrayRangeAPPLE", typeof( DglVertexArrayRangeAPPLE_IP ), ref bglVertexArrayRangeAPPLE ) as DglVertexArrayRangeAPPLE_IP;
            mDglVertexArrayRangeNV_IaB = GetDelegate( "glVertexArrayRangeNV", typeof( DglVertexArrayRangeNV_IaB ), ref bglVertexArrayRangeNV ) as DglVertexArrayRangeNV_IaB;
            mDglVertexArrayRangeNV_IP = GetDelegate( "glVertexArrayRangeNV", typeof( DglVertexArrayRangeNV_IP ), ref bglVertexArrayRangeNV ) as DglVertexArrayRangeNV_IP;
            mDglVertexAttrib1d_ID = GetDelegate( "glVertexAttrib1d", typeof( DglVertexAttrib1d_ID ), ref bglVertexAttrib1d ) as DglVertexAttrib1d_ID;
            mDglVertexAttrib1dARB_ID = GetDelegate( "glVertexAttrib1dARB", typeof( DglVertexAttrib1dARB_ID ), ref bglVertexAttrib1dARB ) as DglVertexAttrib1dARB_ID;
            mDglVertexAttrib1dNV_ID = GetDelegate( "glVertexAttrib1dNV", typeof( DglVertexAttrib1dNV_ID ), ref bglVertexAttrib1dNV ) as DglVertexAttrib1dNV_ID;
            mDglVertexAttrib1dv_IaD = GetDelegate( "glVertexAttrib1dv", typeof( DglVertexAttrib1dv_IaD ), ref bglVertexAttrib1dv ) as DglVertexAttrib1dv_IaD;
            mDglVertexAttrib1dv_IP = GetDelegate( "glVertexAttrib1dv", typeof( DglVertexAttrib1dv_IP ), ref bglVertexAttrib1dv ) as DglVertexAttrib1dv_IP;
            mDglVertexAttrib1dvARB_IaD = GetDelegate( "glVertexAttrib1dvARB", typeof( DglVertexAttrib1dvARB_IaD ), ref bglVertexAttrib1dvARB ) as DglVertexAttrib1dvARB_IaD;
            mDglVertexAttrib1dvARB_IP = GetDelegate( "glVertexAttrib1dvARB", typeof( DglVertexAttrib1dvARB_IP ), ref bglVertexAttrib1dvARB ) as DglVertexAttrib1dvARB_IP;
            mDglVertexAttrib1dvNV_IaD = GetDelegate( "glVertexAttrib1dvNV", typeof( DglVertexAttrib1dvNV_IaD ), ref bglVertexAttrib1dvNV ) as DglVertexAttrib1dvNV_IaD;
            mDglVertexAttrib1dvNV_IP = GetDelegate( "glVertexAttrib1dvNV", typeof( DglVertexAttrib1dvNV_IP ), ref bglVertexAttrib1dvNV ) as DglVertexAttrib1dvNV_IP;
            mDglVertexAttrib1f_IF = GetDelegate( "glVertexAttrib1f", typeof( DglVertexAttrib1f_IF ), ref bglVertexAttrib1f ) as DglVertexAttrib1f_IF;
            mDglVertexAttrib1fARB_IF = GetDelegate( "glVertexAttrib1fARB", typeof( DglVertexAttrib1fARB_IF ), ref bglVertexAttrib1fARB ) as DglVertexAttrib1fARB_IF;
            mDglVertexAttrib1fNV_IF = GetDelegate( "glVertexAttrib1fNV", typeof( DglVertexAttrib1fNV_IF ), ref bglVertexAttrib1fNV ) as DglVertexAttrib1fNV_IF;
            mDglVertexAttrib1fv_IaF = GetDelegate( "glVertexAttrib1fv", typeof( DglVertexAttrib1fv_IaF ), ref bglVertexAttrib1fv ) as DglVertexAttrib1fv_IaF;
            mDglVertexAttrib1fv_IP = GetDelegate( "glVertexAttrib1fv", typeof( DglVertexAttrib1fv_IP ), ref bglVertexAttrib1fv ) as DglVertexAttrib1fv_IP;
            mDglVertexAttrib1fvARB_IaF = GetDelegate( "glVertexAttrib1fvARB", typeof( DglVertexAttrib1fvARB_IaF ), ref bglVertexAttrib1fvARB ) as DglVertexAttrib1fvARB_IaF;
            mDglVertexAttrib1fvARB_IP = GetDelegate( "glVertexAttrib1fvARB", typeof( DglVertexAttrib1fvARB_IP ), ref bglVertexAttrib1fvARB ) as DglVertexAttrib1fvARB_IP;
            mDglVertexAttrib1fvNV_IaF = GetDelegate( "glVertexAttrib1fvNV", typeof( DglVertexAttrib1fvNV_IaF ), ref bglVertexAttrib1fvNV ) as DglVertexAttrib1fvNV_IaF;
            mDglVertexAttrib1fvNV_IP = GetDelegate( "glVertexAttrib1fvNV", typeof( DglVertexAttrib1fvNV_IP ), ref bglVertexAttrib1fvNV ) as DglVertexAttrib1fvNV_IP;
            mDglVertexAttrib1hNV_IH = GetDelegate( "glVertexAttrib1hNV", typeof( DglVertexAttrib1hNV_IH ), ref bglVertexAttrib1hNV ) as DglVertexAttrib1hNV_IH;
            mDglVertexAttrib1hvNV_IaH = GetDelegate( "glVertexAttrib1hvNV", typeof( DglVertexAttrib1hvNV_IaH ), ref bglVertexAttrib1hvNV ) as DglVertexAttrib1hvNV_IaH;
            mDglVertexAttrib1hvNV_IP = GetDelegate( "glVertexAttrib1hvNV", typeof( DglVertexAttrib1hvNV_IP ), ref bglVertexAttrib1hvNV ) as DglVertexAttrib1hvNV_IP;
            mDglVertexAttrib1s_IH = GetDelegate( "glVertexAttrib1s", typeof( DglVertexAttrib1s_IH ), ref bglVertexAttrib1s ) as DglVertexAttrib1s_IH;
            mDglVertexAttrib1sARB_IH = GetDelegate( "glVertexAttrib1sARB", typeof( DglVertexAttrib1sARB_IH ), ref bglVertexAttrib1sARB ) as DglVertexAttrib1sARB_IH;
            mDglVertexAttrib1sNV_IH = GetDelegate( "glVertexAttrib1sNV", typeof( DglVertexAttrib1sNV_IH ), ref bglVertexAttrib1sNV ) as DglVertexAttrib1sNV_IH;
            mDglVertexAttrib1sv_IaH = GetDelegate( "glVertexAttrib1sv", typeof( DglVertexAttrib1sv_IaH ), ref bglVertexAttrib1sv ) as DglVertexAttrib1sv_IaH;
            mDglVertexAttrib1sv_IP = GetDelegate( "glVertexAttrib1sv", typeof( DglVertexAttrib1sv_IP ), ref bglVertexAttrib1sv ) as DglVertexAttrib1sv_IP;
            mDglVertexAttrib1svARB_IaH = GetDelegate( "glVertexAttrib1svARB", typeof( DglVertexAttrib1svARB_IaH ), ref bglVertexAttrib1svARB ) as DglVertexAttrib1svARB_IaH;
            mDglVertexAttrib1svARB_IP = GetDelegate( "glVertexAttrib1svARB", typeof( DglVertexAttrib1svARB_IP ), ref bglVertexAttrib1svARB ) as DglVertexAttrib1svARB_IP;
            mDglVertexAttrib1svNV_IaH = GetDelegate( "glVertexAttrib1svNV", typeof( DglVertexAttrib1svNV_IaH ), ref bglVertexAttrib1svNV ) as DglVertexAttrib1svNV_IaH;
            mDglVertexAttrib1svNV_IP = GetDelegate( "glVertexAttrib1svNV", typeof( DglVertexAttrib1svNV_IP ), ref bglVertexAttrib1svNV ) as DglVertexAttrib1svNV_IP;
            mDglVertexAttrib2d_IDD = GetDelegate( "glVertexAttrib2d", typeof( DglVertexAttrib2d_IDD ), ref bglVertexAttrib2d ) as DglVertexAttrib2d_IDD;
            mDglVertexAttrib2dARB_IDD = GetDelegate( "glVertexAttrib2dARB", typeof( DglVertexAttrib2dARB_IDD ), ref bglVertexAttrib2dARB ) as DglVertexAttrib2dARB_IDD;
            mDglVertexAttrib2dNV_IDD = GetDelegate( "glVertexAttrib2dNV", typeof( DglVertexAttrib2dNV_IDD ), ref bglVertexAttrib2dNV ) as DglVertexAttrib2dNV_IDD;
            mDglVertexAttrib2dv_IaD = GetDelegate( "glVertexAttrib2dv", typeof( DglVertexAttrib2dv_IaD ), ref bglVertexAttrib2dv ) as DglVertexAttrib2dv_IaD;
            mDglVertexAttrib2dv_IP = GetDelegate( "glVertexAttrib2dv", typeof( DglVertexAttrib2dv_IP ), ref bglVertexAttrib2dv ) as DglVertexAttrib2dv_IP;
            mDglVertexAttrib2dvARB_IaD = GetDelegate( "glVertexAttrib2dvARB", typeof( DglVertexAttrib2dvARB_IaD ), ref bglVertexAttrib2dvARB ) as DglVertexAttrib2dvARB_IaD;
            mDglVertexAttrib2dvARB_IP = GetDelegate( "glVertexAttrib2dvARB", typeof( DglVertexAttrib2dvARB_IP ), ref bglVertexAttrib2dvARB ) as DglVertexAttrib2dvARB_IP;
            mDglVertexAttrib2dvNV_IaD = GetDelegate( "glVertexAttrib2dvNV", typeof( DglVertexAttrib2dvNV_IaD ), ref bglVertexAttrib2dvNV ) as DglVertexAttrib2dvNV_IaD;
            mDglVertexAttrib2dvNV_IP = GetDelegate( "glVertexAttrib2dvNV", typeof( DglVertexAttrib2dvNV_IP ), ref bglVertexAttrib2dvNV ) as DglVertexAttrib2dvNV_IP;
            mDglVertexAttrib2f_IFF = GetDelegate( "glVertexAttrib2f", typeof( DglVertexAttrib2f_IFF ), ref bglVertexAttrib2f ) as DglVertexAttrib2f_IFF;
            mDglVertexAttrib2fARB_IFF = GetDelegate( "glVertexAttrib2fARB", typeof( DglVertexAttrib2fARB_IFF ), ref bglVertexAttrib2fARB ) as DglVertexAttrib2fARB_IFF;
            mDglVertexAttrib2fNV_IFF = GetDelegate( "glVertexAttrib2fNV", typeof( DglVertexAttrib2fNV_IFF ), ref bglVertexAttrib2fNV ) as DglVertexAttrib2fNV_IFF;
            mDglVertexAttrib2fv_IaF = GetDelegate( "glVertexAttrib2fv", typeof( DglVertexAttrib2fv_IaF ), ref bglVertexAttrib2fv ) as DglVertexAttrib2fv_IaF;
            mDglVertexAttrib2fv_IP = GetDelegate( "glVertexAttrib2fv", typeof( DglVertexAttrib2fv_IP ), ref bglVertexAttrib2fv ) as DglVertexAttrib2fv_IP;
            mDglVertexAttrib2fvARB_IaF = GetDelegate( "glVertexAttrib2fvARB", typeof( DglVertexAttrib2fvARB_IaF ), ref bglVertexAttrib2fvARB ) as DglVertexAttrib2fvARB_IaF;
            mDglVertexAttrib2fvARB_IP = GetDelegate( "glVertexAttrib2fvARB", typeof( DglVertexAttrib2fvARB_IP ), ref bglVertexAttrib2fvARB ) as DglVertexAttrib2fvARB_IP;
            mDglVertexAttrib2fvNV_IaF = GetDelegate( "glVertexAttrib2fvNV", typeof( DglVertexAttrib2fvNV_IaF ), ref bglVertexAttrib2fvNV ) as DglVertexAttrib2fvNV_IaF;
            mDglVertexAttrib2fvNV_IP = GetDelegate( "glVertexAttrib2fvNV", typeof( DglVertexAttrib2fvNV_IP ), ref bglVertexAttrib2fvNV ) as DglVertexAttrib2fvNV_IP;
            mDglVertexAttrib2hNV_IHH = GetDelegate( "glVertexAttrib2hNV", typeof( DglVertexAttrib2hNV_IHH ), ref bglVertexAttrib2hNV ) as DglVertexAttrib2hNV_IHH;
            mDglVertexAttrib2hvNV_IaH = GetDelegate( "glVertexAttrib2hvNV", typeof( DglVertexAttrib2hvNV_IaH ), ref bglVertexAttrib2hvNV ) as DglVertexAttrib2hvNV_IaH;
            mDglVertexAttrib2hvNV_IP = GetDelegate( "glVertexAttrib2hvNV", typeof( DglVertexAttrib2hvNV_IP ), ref bglVertexAttrib2hvNV ) as DglVertexAttrib2hvNV_IP;
            mDglVertexAttrib2s_IHH = GetDelegate( "glVertexAttrib2s", typeof( DglVertexAttrib2s_IHH ), ref bglVertexAttrib2s ) as DglVertexAttrib2s_IHH;
            mDglVertexAttrib2sARB_IHH = GetDelegate( "glVertexAttrib2sARB", typeof( DglVertexAttrib2sARB_IHH ), ref bglVertexAttrib2sARB ) as DglVertexAttrib2sARB_IHH;
            mDglVertexAttrib2sNV_IHH = GetDelegate( "glVertexAttrib2sNV", typeof( DglVertexAttrib2sNV_IHH ), ref bglVertexAttrib2sNV ) as DglVertexAttrib2sNV_IHH;
            mDglVertexAttrib2sv_IaH = GetDelegate( "glVertexAttrib2sv", typeof( DglVertexAttrib2sv_IaH ), ref bglVertexAttrib2sv ) as DglVertexAttrib2sv_IaH;
            mDglVertexAttrib2sv_IP = GetDelegate( "glVertexAttrib2sv", typeof( DglVertexAttrib2sv_IP ), ref bglVertexAttrib2sv ) as DglVertexAttrib2sv_IP;
            mDglVertexAttrib2svARB_IaH = GetDelegate( "glVertexAttrib2svARB", typeof( DglVertexAttrib2svARB_IaH ), ref bglVertexAttrib2svARB ) as DglVertexAttrib2svARB_IaH;
            mDglVertexAttrib2svARB_IP = GetDelegate( "glVertexAttrib2svARB", typeof( DglVertexAttrib2svARB_IP ), ref bglVertexAttrib2svARB ) as DglVertexAttrib2svARB_IP;
            mDglVertexAttrib2svNV_IaH = GetDelegate( "glVertexAttrib2svNV", typeof( DglVertexAttrib2svNV_IaH ), ref bglVertexAttrib2svNV ) as DglVertexAttrib2svNV_IaH;
            mDglVertexAttrib2svNV_IP = GetDelegate( "glVertexAttrib2svNV", typeof( DglVertexAttrib2svNV_IP ), ref bglVertexAttrib2svNV ) as DglVertexAttrib2svNV_IP;
            mDglVertexAttrib3d_IDDD = GetDelegate( "glVertexAttrib3d", typeof( DglVertexAttrib3d_IDDD ), ref bglVertexAttrib3d ) as DglVertexAttrib3d_IDDD;
            mDglVertexAttrib3dARB_IDDD = GetDelegate( "glVertexAttrib3dARB", typeof( DglVertexAttrib3dARB_IDDD ), ref bglVertexAttrib3dARB ) as DglVertexAttrib3dARB_IDDD;
            mDglVertexAttrib3dNV_IDDD = GetDelegate( "glVertexAttrib3dNV", typeof( DglVertexAttrib3dNV_IDDD ), ref bglVertexAttrib3dNV ) as DglVertexAttrib3dNV_IDDD;
            mDglVertexAttrib3dv_IaD = GetDelegate( "glVertexAttrib3dv", typeof( DglVertexAttrib3dv_IaD ), ref bglVertexAttrib3dv ) as DglVertexAttrib3dv_IaD;
            mDglVertexAttrib3dv_IP = GetDelegate( "glVertexAttrib3dv", typeof( DglVertexAttrib3dv_IP ), ref bglVertexAttrib3dv ) as DglVertexAttrib3dv_IP;
            mDglVertexAttrib3dvARB_IaD = GetDelegate( "glVertexAttrib3dvARB", typeof( DglVertexAttrib3dvARB_IaD ), ref bglVertexAttrib3dvARB ) as DglVertexAttrib3dvARB_IaD;
            mDglVertexAttrib3dvARB_IP = GetDelegate( "glVertexAttrib3dvARB", typeof( DglVertexAttrib3dvARB_IP ), ref bglVertexAttrib3dvARB ) as DglVertexAttrib3dvARB_IP;
            mDglVertexAttrib3dvNV_IaD = GetDelegate( "glVertexAttrib3dvNV", typeof( DglVertexAttrib3dvNV_IaD ), ref bglVertexAttrib3dvNV ) as DglVertexAttrib3dvNV_IaD;
            mDglVertexAttrib3dvNV_IP = GetDelegate( "glVertexAttrib3dvNV", typeof( DglVertexAttrib3dvNV_IP ), ref bglVertexAttrib3dvNV ) as DglVertexAttrib3dvNV_IP;
            mDglVertexAttrib3f_IFFF = GetDelegate( "glVertexAttrib3f", typeof( DglVertexAttrib3f_IFFF ), ref bglVertexAttrib3f ) as DglVertexAttrib3f_IFFF;
            mDglVertexAttrib3fARB_IFFF = GetDelegate( "glVertexAttrib3fARB", typeof( DglVertexAttrib3fARB_IFFF ), ref bglVertexAttrib3fARB ) as DglVertexAttrib3fARB_IFFF;
            mDglVertexAttrib3fNV_IFFF = GetDelegate( "glVertexAttrib3fNV", typeof( DglVertexAttrib3fNV_IFFF ), ref bglVertexAttrib3fNV ) as DglVertexAttrib3fNV_IFFF;
            mDglVertexAttrib3fv_IaF = GetDelegate( "glVertexAttrib3fv", typeof( DglVertexAttrib3fv_IaF ), ref bglVertexAttrib3fv ) as DglVertexAttrib3fv_IaF;
            mDglVertexAttrib3fv_IP = GetDelegate( "glVertexAttrib3fv", typeof( DglVertexAttrib3fv_IP ), ref bglVertexAttrib3fv ) as DglVertexAttrib3fv_IP;
            mDglVertexAttrib3fvARB_IaF = GetDelegate( "glVertexAttrib3fvARB", typeof( DglVertexAttrib3fvARB_IaF ), ref bglVertexAttrib3fvARB ) as DglVertexAttrib3fvARB_IaF;
            mDglVertexAttrib3fvARB_IP = GetDelegate( "glVertexAttrib3fvARB", typeof( DglVertexAttrib3fvARB_IP ), ref bglVertexAttrib3fvARB ) as DglVertexAttrib3fvARB_IP;
            mDglVertexAttrib3fvNV_IaF = GetDelegate( "glVertexAttrib3fvNV", typeof( DglVertexAttrib3fvNV_IaF ), ref bglVertexAttrib3fvNV ) as DglVertexAttrib3fvNV_IaF;
            mDglVertexAttrib3fvNV_IP = GetDelegate( "glVertexAttrib3fvNV", typeof( DglVertexAttrib3fvNV_IP ), ref bglVertexAttrib3fvNV ) as DglVertexAttrib3fvNV_IP;
            mDglVertexAttrib3hNV_IHHH = GetDelegate( "glVertexAttrib3hNV", typeof( DglVertexAttrib3hNV_IHHH ), ref bglVertexAttrib3hNV ) as DglVertexAttrib3hNV_IHHH;
            mDglVertexAttrib3hvNV_IaH = GetDelegate( "glVertexAttrib3hvNV", typeof( DglVertexAttrib3hvNV_IaH ), ref bglVertexAttrib3hvNV ) as DglVertexAttrib3hvNV_IaH;
            mDglVertexAttrib3hvNV_IP = GetDelegate( "glVertexAttrib3hvNV", typeof( DglVertexAttrib3hvNV_IP ), ref bglVertexAttrib3hvNV ) as DglVertexAttrib3hvNV_IP;
            mDglVertexAttrib3s_IHHH = GetDelegate( "glVertexAttrib3s", typeof( DglVertexAttrib3s_IHHH ), ref bglVertexAttrib3s ) as DglVertexAttrib3s_IHHH;
            mDglVertexAttrib3sARB_IHHH = GetDelegate( "glVertexAttrib3sARB", typeof( DglVertexAttrib3sARB_IHHH ), ref bglVertexAttrib3sARB ) as DglVertexAttrib3sARB_IHHH;
            mDglVertexAttrib3sNV_IHHH = GetDelegate( "glVertexAttrib3sNV", typeof( DglVertexAttrib3sNV_IHHH ), ref bglVertexAttrib3sNV ) as DglVertexAttrib3sNV_IHHH;
            mDglVertexAttrib3sv_IaH = GetDelegate( "glVertexAttrib3sv", typeof( DglVertexAttrib3sv_IaH ), ref bglVertexAttrib3sv ) as DglVertexAttrib3sv_IaH;
            mDglVertexAttrib3sv_IP = GetDelegate( "glVertexAttrib3sv", typeof( DglVertexAttrib3sv_IP ), ref bglVertexAttrib3sv ) as DglVertexAttrib3sv_IP;
            mDglVertexAttrib3svARB_IaH = GetDelegate( "glVertexAttrib3svARB", typeof( DglVertexAttrib3svARB_IaH ), ref bglVertexAttrib3svARB ) as DglVertexAttrib3svARB_IaH;
            mDglVertexAttrib3svARB_IP = GetDelegate( "glVertexAttrib3svARB", typeof( DglVertexAttrib3svARB_IP ), ref bglVertexAttrib3svARB ) as DglVertexAttrib3svARB_IP;
            mDglVertexAttrib3svNV_IaH = GetDelegate( "glVertexAttrib3svNV", typeof( DglVertexAttrib3svNV_IaH ), ref bglVertexAttrib3svNV ) as DglVertexAttrib3svNV_IaH;
            mDglVertexAttrib3svNV_IP = GetDelegate( "glVertexAttrib3svNV", typeof( DglVertexAttrib3svNV_IP ), ref bglVertexAttrib3svNV ) as DglVertexAttrib3svNV_IP;
            mDglVertexAttrib4bv_IaB = GetDelegate( "glVertexAttrib4bv", typeof( DglVertexAttrib4bv_IaB ), ref bglVertexAttrib4bv ) as DglVertexAttrib4bv_IaB;
            mDglVertexAttrib4bv_IP = GetDelegate( "glVertexAttrib4bv", typeof( DglVertexAttrib4bv_IP ), ref bglVertexAttrib4bv ) as DglVertexAttrib4bv_IP;
            mDglVertexAttrib4bvARB_IaB = GetDelegate( "glVertexAttrib4bvARB", typeof( DglVertexAttrib4bvARB_IaB ), ref bglVertexAttrib4bvARB ) as DglVertexAttrib4bvARB_IaB;
            mDglVertexAttrib4bvARB_IP = GetDelegate( "glVertexAttrib4bvARB", typeof( DglVertexAttrib4bvARB_IP ), ref bglVertexAttrib4bvARB ) as DglVertexAttrib4bvARB_IP;
            mDglVertexAttrib4d_IDDDD = GetDelegate( "glVertexAttrib4d", typeof( DglVertexAttrib4d_IDDDD ), ref bglVertexAttrib4d ) as DglVertexAttrib4d_IDDDD;
            mDglVertexAttrib4dARB_IDDDD = GetDelegate( "glVertexAttrib4dARB", typeof( DglVertexAttrib4dARB_IDDDD ), ref bglVertexAttrib4dARB ) as DglVertexAttrib4dARB_IDDDD;
            mDglVertexAttrib4dNV_IDDDD = GetDelegate( "glVertexAttrib4dNV", typeof( DglVertexAttrib4dNV_IDDDD ), ref bglVertexAttrib4dNV ) as DglVertexAttrib4dNV_IDDDD;
            mDglVertexAttrib4dv_IaD = GetDelegate( "glVertexAttrib4dv", typeof( DglVertexAttrib4dv_IaD ), ref bglVertexAttrib4dv ) as DglVertexAttrib4dv_IaD;
            mDglVertexAttrib4dv_IP = GetDelegate( "glVertexAttrib4dv", typeof( DglVertexAttrib4dv_IP ), ref bglVertexAttrib4dv ) as DglVertexAttrib4dv_IP;
            mDglVertexAttrib4dvARB_IaD = GetDelegate( "glVertexAttrib4dvARB", typeof( DglVertexAttrib4dvARB_IaD ), ref bglVertexAttrib4dvARB ) as DglVertexAttrib4dvARB_IaD;
            mDglVertexAttrib4dvARB_IP = GetDelegate( "glVertexAttrib4dvARB", typeof( DglVertexAttrib4dvARB_IP ), ref bglVertexAttrib4dvARB ) as DglVertexAttrib4dvARB_IP;
            mDglVertexAttrib4dvNV_IaD = GetDelegate( "glVertexAttrib4dvNV", typeof( DglVertexAttrib4dvNV_IaD ), ref bglVertexAttrib4dvNV ) as DglVertexAttrib4dvNV_IaD;
            mDglVertexAttrib4dvNV_IP = GetDelegate( "glVertexAttrib4dvNV", typeof( DglVertexAttrib4dvNV_IP ), ref bglVertexAttrib4dvNV ) as DglVertexAttrib4dvNV_IP;
            mDglVertexAttrib4f_IFFFF = GetDelegate( "glVertexAttrib4f", typeof( DglVertexAttrib4f_IFFFF ), ref bglVertexAttrib4f ) as DglVertexAttrib4f_IFFFF;
            mDglVertexAttrib4fARB_IFFFF = GetDelegate( "glVertexAttrib4fARB", typeof( DglVertexAttrib4fARB_IFFFF ), ref bglVertexAttrib4fARB ) as DglVertexAttrib4fARB_IFFFF;
            mDglVertexAttrib4fNV_IFFFF = GetDelegate( "glVertexAttrib4fNV", typeof( DglVertexAttrib4fNV_IFFFF ), ref bglVertexAttrib4fNV ) as DglVertexAttrib4fNV_IFFFF;
            mDglVertexAttrib4fv_IaF = GetDelegate( "glVertexAttrib4fv", typeof( DglVertexAttrib4fv_IaF ), ref bglVertexAttrib4fv ) as DglVertexAttrib4fv_IaF;
            mDglVertexAttrib4fv_IP = GetDelegate( "glVertexAttrib4fv", typeof( DglVertexAttrib4fv_IP ), ref bglVertexAttrib4fv ) as DglVertexAttrib4fv_IP;
            mDglVertexAttrib4fvARB_IaF = GetDelegate( "glVertexAttrib4fvARB", typeof( DglVertexAttrib4fvARB_IaF ), ref bglVertexAttrib4fvARB ) as DglVertexAttrib4fvARB_IaF;
            mDglVertexAttrib4fvARB_IP = GetDelegate( "glVertexAttrib4fvARB", typeof( DglVertexAttrib4fvARB_IP ), ref bglVertexAttrib4fvARB ) as DglVertexAttrib4fvARB_IP;
            mDglVertexAttrib4fvNV_IaF = GetDelegate( "glVertexAttrib4fvNV", typeof( DglVertexAttrib4fvNV_IaF ), ref bglVertexAttrib4fvNV ) as DglVertexAttrib4fvNV_IaF;
            mDglVertexAttrib4fvNV_IP = GetDelegate( "glVertexAttrib4fvNV", typeof( DglVertexAttrib4fvNV_IP ), ref bglVertexAttrib4fvNV ) as DglVertexAttrib4fvNV_IP;
            mDglVertexAttrib4hNV_IHHHH = GetDelegate( "glVertexAttrib4hNV", typeof( DglVertexAttrib4hNV_IHHHH ), ref bglVertexAttrib4hNV ) as DglVertexAttrib4hNV_IHHHH;
            mDglVertexAttrib4hvNV_IaH = GetDelegate( "glVertexAttrib4hvNV", typeof( DglVertexAttrib4hvNV_IaH ), ref bglVertexAttrib4hvNV ) as DglVertexAttrib4hvNV_IaH;
            mDglVertexAttrib4hvNV_IP = GetDelegate( "glVertexAttrib4hvNV", typeof( DglVertexAttrib4hvNV_IP ), ref bglVertexAttrib4hvNV ) as DglVertexAttrib4hvNV_IP;
            mDglVertexAttrib4iv_IaI = GetDelegate( "glVertexAttrib4iv", typeof( DglVertexAttrib4iv_IaI ), ref bglVertexAttrib4iv ) as DglVertexAttrib4iv_IaI;
            mDglVertexAttrib4iv_IP = GetDelegate( "glVertexAttrib4iv", typeof( DglVertexAttrib4iv_IP ), ref bglVertexAttrib4iv ) as DglVertexAttrib4iv_IP;
            mDglVertexAttrib4ivARB_IaI = GetDelegate( "glVertexAttrib4ivARB", typeof( DglVertexAttrib4ivARB_IaI ), ref bglVertexAttrib4ivARB ) as DglVertexAttrib4ivARB_IaI;
            mDglVertexAttrib4ivARB_IP = GetDelegate( "glVertexAttrib4ivARB", typeof( DglVertexAttrib4ivARB_IP ), ref bglVertexAttrib4ivARB ) as DglVertexAttrib4ivARB_IP;
            mDglVertexAttrib4Nbv_IaB = GetDelegate( "glVertexAttrib4Nbv", typeof( DglVertexAttrib4Nbv_IaB ), ref bglVertexAttrib4Nbv ) as DglVertexAttrib4Nbv_IaB;
            mDglVertexAttrib4Nbv_IP = GetDelegate( "glVertexAttrib4Nbv", typeof( DglVertexAttrib4Nbv_IP ), ref bglVertexAttrib4Nbv ) as DglVertexAttrib4Nbv_IP;
            mDglVertexAttrib4NbvARB_IaB = GetDelegate( "glVertexAttrib4NbvARB", typeof( DglVertexAttrib4NbvARB_IaB ), ref bglVertexAttrib4NbvARB ) as DglVertexAttrib4NbvARB_IaB;
            mDglVertexAttrib4NbvARB_IP = GetDelegate( "glVertexAttrib4NbvARB", typeof( DglVertexAttrib4NbvARB_IP ), ref bglVertexAttrib4NbvARB ) as DglVertexAttrib4NbvARB_IP;
            mDglVertexAttrib4Niv_IaI = GetDelegate( "glVertexAttrib4Niv", typeof( DglVertexAttrib4Niv_IaI ), ref bglVertexAttrib4Niv ) as DglVertexAttrib4Niv_IaI;
            mDglVertexAttrib4Niv_IP = GetDelegate( "glVertexAttrib4Niv", typeof( DglVertexAttrib4Niv_IP ), ref bglVertexAttrib4Niv ) as DglVertexAttrib4Niv_IP;
            mDglVertexAttrib4NivARB_IaI = GetDelegate( "glVertexAttrib4NivARB", typeof( DglVertexAttrib4NivARB_IaI ), ref bglVertexAttrib4NivARB ) as DglVertexAttrib4NivARB_IaI;
            mDglVertexAttrib4NivARB_IP = GetDelegate( "glVertexAttrib4NivARB", typeof( DglVertexAttrib4NivARB_IP ), ref bglVertexAttrib4NivARB ) as DglVertexAttrib4NivARB_IP;
            mDglVertexAttrib4Nsv_IaH = GetDelegate( "glVertexAttrib4Nsv", typeof( DglVertexAttrib4Nsv_IaH ), ref bglVertexAttrib4Nsv ) as DglVertexAttrib4Nsv_IaH;
            mDglVertexAttrib4Nsv_IP = GetDelegate( "glVertexAttrib4Nsv", typeof( DglVertexAttrib4Nsv_IP ), ref bglVertexAttrib4Nsv ) as DglVertexAttrib4Nsv_IP;
            mDglVertexAttrib4NsvARB_IaH = GetDelegate( "glVertexAttrib4NsvARB", typeof( DglVertexAttrib4NsvARB_IaH ), ref bglVertexAttrib4NsvARB ) as DglVertexAttrib4NsvARB_IaH;
            mDglVertexAttrib4NsvARB_IP = GetDelegate( "glVertexAttrib4NsvARB", typeof( DglVertexAttrib4NsvARB_IP ), ref bglVertexAttrib4NsvARB ) as DglVertexAttrib4NsvARB_IP;
            mDglVertexAttrib4Nub_IBBBB = GetDelegate( "glVertexAttrib4Nub", typeof( DglVertexAttrib4Nub_IBBBB ), ref bglVertexAttrib4Nub ) as DglVertexAttrib4Nub_IBBBB;
            mDglVertexAttrib4NubARB_IBBBB = GetDelegate( "glVertexAttrib4NubARB", typeof( DglVertexAttrib4NubARB_IBBBB ), ref bglVertexAttrib4NubARB ) as DglVertexAttrib4NubARB_IBBBB;
            mDglVertexAttrib4Nubv_IaB = GetDelegate( "glVertexAttrib4Nubv", typeof( DglVertexAttrib4Nubv_IaB ), ref bglVertexAttrib4Nubv ) as DglVertexAttrib4Nubv_IaB;
            mDglVertexAttrib4Nubv_IP = GetDelegate( "glVertexAttrib4Nubv", typeof( DglVertexAttrib4Nubv_IP ), ref bglVertexAttrib4Nubv ) as DglVertexAttrib4Nubv_IP;
            mDglVertexAttrib4NubvARB_IaB = GetDelegate( "glVertexAttrib4NubvARB", typeof( DglVertexAttrib4NubvARB_IaB ), ref bglVertexAttrib4NubvARB ) as DglVertexAttrib4NubvARB_IaB;
            mDglVertexAttrib4NubvARB_IP = GetDelegate( "glVertexAttrib4NubvARB", typeof( DglVertexAttrib4NubvARB_IP ), ref bglVertexAttrib4NubvARB ) as DglVertexAttrib4NubvARB_IP;
            mDglVertexAttrib4Nuiv_IaI = GetDelegate( "glVertexAttrib4Nuiv", typeof( DglVertexAttrib4Nuiv_IaI ), ref bglVertexAttrib4Nuiv ) as DglVertexAttrib4Nuiv_IaI;
            mDglVertexAttrib4Nuiv_IP = GetDelegate( "glVertexAttrib4Nuiv", typeof( DglVertexAttrib4Nuiv_IP ), ref bglVertexAttrib4Nuiv ) as DglVertexAttrib4Nuiv_IP;
            mDglVertexAttrib4NuivARB_IaI = GetDelegate( "glVertexAttrib4NuivARB", typeof( DglVertexAttrib4NuivARB_IaI ), ref bglVertexAttrib4NuivARB ) as DglVertexAttrib4NuivARB_IaI;
            mDglVertexAttrib4NuivARB_IP = GetDelegate( "glVertexAttrib4NuivARB", typeof( DglVertexAttrib4NuivARB_IP ), ref bglVertexAttrib4NuivARB ) as DglVertexAttrib4NuivARB_IP;
            mDglVertexAttrib4Nusv_IaH = GetDelegate( "glVertexAttrib4Nusv", typeof( DglVertexAttrib4Nusv_IaH ), ref bglVertexAttrib4Nusv ) as DglVertexAttrib4Nusv_IaH;
            mDglVertexAttrib4Nusv_IP = GetDelegate( "glVertexAttrib4Nusv", typeof( DglVertexAttrib4Nusv_IP ), ref bglVertexAttrib4Nusv ) as DglVertexAttrib4Nusv_IP;
            mDglVertexAttrib4NusvARB_IaH = GetDelegate( "glVertexAttrib4NusvARB", typeof( DglVertexAttrib4NusvARB_IaH ), ref bglVertexAttrib4NusvARB ) as DglVertexAttrib4NusvARB_IaH;
            mDglVertexAttrib4NusvARB_IP = GetDelegate( "glVertexAttrib4NusvARB", typeof( DglVertexAttrib4NusvARB_IP ), ref bglVertexAttrib4NusvARB ) as DglVertexAttrib4NusvARB_IP;
            mDglVertexAttrib4s_IHHHH = GetDelegate( "glVertexAttrib4s", typeof( DglVertexAttrib4s_IHHHH ), ref bglVertexAttrib4s ) as DglVertexAttrib4s_IHHHH;
            mDglVertexAttrib4sARB_IHHHH = GetDelegate( "glVertexAttrib4sARB", typeof( DglVertexAttrib4sARB_IHHHH ), ref bglVertexAttrib4sARB ) as DglVertexAttrib4sARB_IHHHH;
            mDglVertexAttrib4sNV_IHHHH = GetDelegate( "glVertexAttrib4sNV", typeof( DglVertexAttrib4sNV_IHHHH ), ref bglVertexAttrib4sNV ) as DglVertexAttrib4sNV_IHHHH;
            mDglVertexAttrib4sv_IaH = GetDelegate( "glVertexAttrib4sv", typeof( DglVertexAttrib4sv_IaH ), ref bglVertexAttrib4sv ) as DglVertexAttrib4sv_IaH;
            mDglVertexAttrib4sv_IP = GetDelegate( "glVertexAttrib4sv", typeof( DglVertexAttrib4sv_IP ), ref bglVertexAttrib4sv ) as DglVertexAttrib4sv_IP;
            mDglVertexAttrib4svARB_IaH = GetDelegate( "glVertexAttrib4svARB", typeof( DglVertexAttrib4svARB_IaH ), ref bglVertexAttrib4svARB ) as DglVertexAttrib4svARB_IaH;
            mDglVertexAttrib4svARB_IP = GetDelegate( "glVertexAttrib4svARB", typeof( DglVertexAttrib4svARB_IP ), ref bglVertexAttrib4svARB ) as DglVertexAttrib4svARB_IP;
            mDglVertexAttrib4svNV_IaH = GetDelegate( "glVertexAttrib4svNV", typeof( DglVertexAttrib4svNV_IaH ), ref bglVertexAttrib4svNV ) as DglVertexAttrib4svNV_IaH;
            mDglVertexAttrib4svNV_IP = GetDelegate( "glVertexAttrib4svNV", typeof( DglVertexAttrib4svNV_IP ), ref bglVertexAttrib4svNV ) as DglVertexAttrib4svNV_IP;
            mDglVertexAttrib4ubNV_IBBBB = GetDelegate( "glVertexAttrib4ubNV", typeof( DglVertexAttrib4ubNV_IBBBB ), ref bglVertexAttrib4ubNV ) as DglVertexAttrib4ubNV_IBBBB;
            mDglVertexAttrib4ubv_IaB = GetDelegate( "glVertexAttrib4ubv", typeof( DglVertexAttrib4ubv_IaB ), ref bglVertexAttrib4ubv ) as DglVertexAttrib4ubv_IaB;
            mDglVertexAttrib4ubv_IP = GetDelegate( "glVertexAttrib4ubv", typeof( DglVertexAttrib4ubv_IP ), ref bglVertexAttrib4ubv ) as DglVertexAttrib4ubv_IP;
            mDglVertexAttrib4ubvARB_IaB = GetDelegate( "glVertexAttrib4ubvARB", typeof( DglVertexAttrib4ubvARB_IaB ), ref bglVertexAttrib4ubvARB ) as DglVertexAttrib4ubvARB_IaB;
            mDglVertexAttrib4ubvARB_IP = GetDelegate( "glVertexAttrib4ubvARB", typeof( DglVertexAttrib4ubvARB_IP ), ref bglVertexAttrib4ubvARB ) as DglVertexAttrib4ubvARB_IP;
            mDglVertexAttrib4ubvNV_IaB = GetDelegate( "glVertexAttrib4ubvNV", typeof( DglVertexAttrib4ubvNV_IaB ), ref bglVertexAttrib4ubvNV ) as DglVertexAttrib4ubvNV_IaB;
            mDglVertexAttrib4ubvNV_IP = GetDelegate( "glVertexAttrib4ubvNV", typeof( DglVertexAttrib4ubvNV_IP ), ref bglVertexAttrib4ubvNV ) as DglVertexAttrib4ubvNV_IP;
            mDglVertexAttrib4uiv_IaI = GetDelegate( "glVertexAttrib4uiv", typeof( DglVertexAttrib4uiv_IaI ), ref bglVertexAttrib4uiv ) as DglVertexAttrib4uiv_IaI;
            mDglVertexAttrib4uiv_IP = GetDelegate( "glVertexAttrib4uiv", typeof( DglVertexAttrib4uiv_IP ), ref bglVertexAttrib4uiv ) as DglVertexAttrib4uiv_IP;
            mDglVertexAttrib4uivARB_IaI = GetDelegate( "glVertexAttrib4uivARB", typeof( DglVertexAttrib4uivARB_IaI ), ref bglVertexAttrib4uivARB ) as DglVertexAttrib4uivARB_IaI;
            mDglVertexAttrib4uivARB_IP = GetDelegate( "glVertexAttrib4uivARB", typeof( DglVertexAttrib4uivARB_IP ), ref bglVertexAttrib4uivARB ) as DglVertexAttrib4uivARB_IP;
            mDglVertexAttrib4usv_IaH = GetDelegate( "glVertexAttrib4usv", typeof( DglVertexAttrib4usv_IaH ), ref bglVertexAttrib4usv ) as DglVertexAttrib4usv_IaH;
            mDglVertexAttrib4usv_IP = GetDelegate( "glVertexAttrib4usv", typeof( DglVertexAttrib4usv_IP ), ref bglVertexAttrib4usv ) as DglVertexAttrib4usv_IP;
            mDglVertexAttrib4usvARB_IaH = GetDelegate( "glVertexAttrib4usvARB", typeof( DglVertexAttrib4usvARB_IaH ), ref bglVertexAttrib4usvARB ) as DglVertexAttrib4usvARB_IaH;
            mDglVertexAttrib4usvARB_IP = GetDelegate( "glVertexAttrib4usvARB", typeof( DglVertexAttrib4usvARB_IP ), ref bglVertexAttrib4usvARB ) as DglVertexAttrib4usvARB_IP;
            mDglVertexAttribArrayObjectATI_IIIBIII = GetDelegate( "glVertexAttribArrayObjectATI", typeof( DglVertexAttribArrayObjectATI_IIIBIII ), ref bglVertexAttribArrayObjectATI ) as DglVertexAttribArrayObjectATI_IIIBIII;
            mDglVertexAttribPointer_IIIBIaB = GetDelegate( "glVertexAttribPointer", typeof( DglVertexAttribPointer_IIIBIaB ), ref bglVertexAttribPointer ) as DglVertexAttribPointer_IIIBIaB;
            mDglVertexAttribPointer_IIIBIaH = GetDelegate( "glVertexAttribPointer", typeof( DglVertexAttribPointer_IIIBIaH ), ref bglVertexAttribPointer ) as DglVertexAttribPointer_IIIBIaH;
            mDglVertexAttribPointer_IIIBIaI = GetDelegate( "glVertexAttribPointer", typeof( DglVertexAttribPointer_IIIBIaI ), ref bglVertexAttribPointer ) as DglVertexAttribPointer_IIIBIaI;
            mDglVertexAttribPointer_IIIBIaF = GetDelegate( "glVertexAttribPointer", typeof( DglVertexAttribPointer_IIIBIaF ), ref bglVertexAttribPointer ) as DglVertexAttribPointer_IIIBIaF;
            mDglVertexAttribPointer_IIIBIaD = GetDelegate( "glVertexAttribPointer", typeof( DglVertexAttribPointer_IIIBIaD ), ref bglVertexAttribPointer ) as DglVertexAttribPointer_IIIBIaD;
            mDglVertexAttribPointer_IIIBIP = GetDelegate( "glVertexAttribPointer", typeof( DglVertexAttribPointer_IIIBIP ), ref bglVertexAttribPointer ) as DglVertexAttribPointer_IIIBIP;
            mDglVertexAttribPointerARB_IIIBIaB = GetDelegate( "glVertexAttribPointerARB", typeof( DglVertexAttribPointerARB_IIIBIaB ), ref bglVertexAttribPointerARB ) as DglVertexAttribPointerARB_IIIBIaB;
            mDglVertexAttribPointerARB_IIIBIaH = GetDelegate( "glVertexAttribPointerARB", typeof( DglVertexAttribPointerARB_IIIBIaH ), ref bglVertexAttribPointerARB ) as DglVertexAttribPointerARB_IIIBIaH;
            mDglVertexAttribPointerARB_IIIBIaI = GetDelegate( "glVertexAttribPointerARB", typeof( DglVertexAttribPointerARB_IIIBIaI ), ref bglVertexAttribPointerARB ) as DglVertexAttribPointerARB_IIIBIaI;
            mDglVertexAttribPointerARB_IIIBIaF = GetDelegate( "glVertexAttribPointerARB", typeof( DglVertexAttribPointerARB_IIIBIaF ), ref bglVertexAttribPointerARB ) as DglVertexAttribPointerARB_IIIBIaF;
            mDglVertexAttribPointerARB_IIIBIaD = GetDelegate( "glVertexAttribPointerARB", typeof( DglVertexAttribPointerARB_IIIBIaD ), ref bglVertexAttribPointerARB ) as DglVertexAttribPointerARB_IIIBIaD;
            mDglVertexAttribPointerARB_IIIBIP = GetDelegate( "glVertexAttribPointerARB", typeof( DglVertexAttribPointerARB_IIIBIP ), ref bglVertexAttribPointerARB ) as DglVertexAttribPointerARB_IIIBIP;
            mDglVertexAttribPointerNV_IIIIaB = GetDelegate( "glVertexAttribPointerNV", typeof( DglVertexAttribPointerNV_IIIIaB ), ref bglVertexAttribPointerNV ) as DglVertexAttribPointerNV_IIIIaB;
            mDglVertexAttribPointerNV_IIIIaH = GetDelegate( "glVertexAttribPointerNV", typeof( DglVertexAttribPointerNV_IIIIaH ), ref bglVertexAttribPointerNV ) as DglVertexAttribPointerNV_IIIIaH;
            mDglVertexAttribPointerNV_IIIIaI = GetDelegate( "glVertexAttribPointerNV", typeof( DglVertexAttribPointerNV_IIIIaI ), ref bglVertexAttribPointerNV ) as DglVertexAttribPointerNV_IIIIaI;
            mDglVertexAttribPointerNV_IIIIaF = GetDelegate( "glVertexAttribPointerNV", typeof( DglVertexAttribPointerNV_IIIIaF ), ref bglVertexAttribPointerNV ) as DglVertexAttribPointerNV_IIIIaF;
            mDglVertexAttribPointerNV_IIIIaD = GetDelegate( "glVertexAttribPointerNV", typeof( DglVertexAttribPointerNV_IIIIaD ), ref bglVertexAttribPointerNV ) as DglVertexAttribPointerNV_IIIIaD;
            mDglVertexAttribPointerNV_IIIIP = GetDelegate( "glVertexAttribPointerNV", typeof( DglVertexAttribPointerNV_IIIIP ), ref bglVertexAttribPointerNV ) as DglVertexAttribPointerNV_IIIIP;
            mDglVertexAttribs1dvNV_IIaD = GetDelegate( "glVertexAttribs1dvNV", typeof( DglVertexAttribs1dvNV_IIaD ), ref bglVertexAttribs1dvNV ) as DglVertexAttribs1dvNV_IIaD;
            mDglVertexAttribs1dvNV_IIP = GetDelegate( "glVertexAttribs1dvNV", typeof( DglVertexAttribs1dvNV_IIP ), ref bglVertexAttribs1dvNV ) as DglVertexAttribs1dvNV_IIP;
            mDglVertexAttribs1fvNV_IIaF = GetDelegate( "glVertexAttribs1fvNV", typeof( DglVertexAttribs1fvNV_IIaF ), ref bglVertexAttribs1fvNV ) as DglVertexAttribs1fvNV_IIaF;
            mDglVertexAttribs1fvNV_IIP = GetDelegate( "glVertexAttribs1fvNV", typeof( DglVertexAttribs1fvNV_IIP ), ref bglVertexAttribs1fvNV ) as DglVertexAttribs1fvNV_IIP;
            mDglVertexAttribs1hvNV_IIaH = GetDelegate( "glVertexAttribs1hvNV", typeof( DglVertexAttribs1hvNV_IIaH ), ref bglVertexAttribs1hvNV ) as DglVertexAttribs1hvNV_IIaH;
            mDglVertexAttribs1hvNV_IIP = GetDelegate( "glVertexAttribs1hvNV", typeof( DglVertexAttribs1hvNV_IIP ), ref bglVertexAttribs1hvNV ) as DglVertexAttribs1hvNV_IIP;
            mDglVertexAttribs1svNV_IIaH = GetDelegate( "glVertexAttribs1svNV", typeof( DglVertexAttribs1svNV_IIaH ), ref bglVertexAttribs1svNV ) as DglVertexAttribs1svNV_IIaH;
            mDglVertexAttribs1svNV_IIP = GetDelegate( "glVertexAttribs1svNV", typeof( DglVertexAttribs1svNV_IIP ), ref bglVertexAttribs1svNV ) as DglVertexAttribs1svNV_IIP;
            mDglVertexAttribs2dvNV_IIaD = GetDelegate( "glVertexAttribs2dvNV", typeof( DglVertexAttribs2dvNV_IIaD ), ref bglVertexAttribs2dvNV ) as DglVertexAttribs2dvNV_IIaD;
            mDglVertexAttribs2dvNV_IIP = GetDelegate( "glVertexAttribs2dvNV", typeof( DglVertexAttribs2dvNV_IIP ), ref bglVertexAttribs2dvNV ) as DglVertexAttribs2dvNV_IIP;
            mDglVertexAttribs2fvNV_IIaF = GetDelegate( "glVertexAttribs2fvNV", typeof( DglVertexAttribs2fvNV_IIaF ), ref bglVertexAttribs2fvNV ) as DglVertexAttribs2fvNV_IIaF;
            mDglVertexAttribs2fvNV_IIP = GetDelegate( "glVertexAttribs2fvNV", typeof( DglVertexAttribs2fvNV_IIP ), ref bglVertexAttribs2fvNV ) as DglVertexAttribs2fvNV_IIP;
            mDglVertexAttribs2hvNV_IIaH = GetDelegate( "glVertexAttribs2hvNV", typeof( DglVertexAttribs2hvNV_IIaH ), ref bglVertexAttribs2hvNV ) as DglVertexAttribs2hvNV_IIaH;
            mDglVertexAttribs2hvNV_IIP = GetDelegate( "glVertexAttribs2hvNV", typeof( DglVertexAttribs2hvNV_IIP ), ref bglVertexAttribs2hvNV ) as DglVertexAttribs2hvNV_IIP;
            mDglVertexAttribs2svNV_IIaH = GetDelegate( "glVertexAttribs2svNV", typeof( DglVertexAttribs2svNV_IIaH ), ref bglVertexAttribs2svNV ) as DglVertexAttribs2svNV_IIaH;
            mDglVertexAttribs2svNV_IIP = GetDelegate( "glVertexAttribs2svNV", typeof( DglVertexAttribs2svNV_IIP ), ref bglVertexAttribs2svNV ) as DglVertexAttribs2svNV_IIP;
            mDglVertexAttribs3dvNV_IIaD = GetDelegate( "glVertexAttribs3dvNV", typeof( DglVertexAttribs3dvNV_IIaD ), ref bglVertexAttribs3dvNV ) as DglVertexAttribs3dvNV_IIaD;
            mDglVertexAttribs3dvNV_IIP = GetDelegate( "glVertexAttribs3dvNV", typeof( DglVertexAttribs3dvNV_IIP ), ref bglVertexAttribs3dvNV ) as DglVertexAttribs3dvNV_IIP;
            mDglVertexAttribs3fvNV_IIaF = GetDelegate( "glVertexAttribs3fvNV", typeof( DglVertexAttribs3fvNV_IIaF ), ref bglVertexAttribs3fvNV ) as DglVertexAttribs3fvNV_IIaF;
            mDglVertexAttribs3fvNV_IIP = GetDelegate( "glVertexAttribs3fvNV", typeof( DglVertexAttribs3fvNV_IIP ), ref bglVertexAttribs3fvNV ) as DglVertexAttribs3fvNV_IIP;
            mDglVertexAttribs3hvNV_IIaH = GetDelegate( "glVertexAttribs3hvNV", typeof( DglVertexAttribs3hvNV_IIaH ), ref bglVertexAttribs3hvNV ) as DglVertexAttribs3hvNV_IIaH;
            mDglVertexAttribs3hvNV_IIP = GetDelegate( "glVertexAttribs3hvNV", typeof( DglVertexAttribs3hvNV_IIP ), ref bglVertexAttribs3hvNV ) as DglVertexAttribs3hvNV_IIP;
            mDglVertexAttribs3svNV_IIaH = GetDelegate( "glVertexAttribs3svNV", typeof( DglVertexAttribs3svNV_IIaH ), ref bglVertexAttribs3svNV ) as DglVertexAttribs3svNV_IIaH;
            mDglVertexAttribs3svNV_IIP = GetDelegate( "glVertexAttribs3svNV", typeof( DglVertexAttribs3svNV_IIP ), ref bglVertexAttribs3svNV ) as DglVertexAttribs3svNV_IIP;
            mDglVertexAttribs4dvNV_IIaD = GetDelegate( "glVertexAttribs4dvNV", typeof( DglVertexAttribs4dvNV_IIaD ), ref bglVertexAttribs4dvNV ) as DglVertexAttribs4dvNV_IIaD;
            mDglVertexAttribs4dvNV_IIP = GetDelegate( "glVertexAttribs4dvNV", typeof( DglVertexAttribs4dvNV_IIP ), ref bglVertexAttribs4dvNV ) as DglVertexAttribs4dvNV_IIP;
            mDglVertexAttribs4fvNV_IIaF = GetDelegate( "glVertexAttribs4fvNV", typeof( DglVertexAttribs4fvNV_IIaF ), ref bglVertexAttribs4fvNV ) as DglVertexAttribs4fvNV_IIaF;
            mDglVertexAttribs4fvNV_IIP = GetDelegate( "glVertexAttribs4fvNV", typeof( DglVertexAttribs4fvNV_IIP ), ref bglVertexAttribs4fvNV ) as DglVertexAttribs4fvNV_IIP;
            mDglVertexAttribs4hvNV_IIaH = GetDelegate( "glVertexAttribs4hvNV", typeof( DglVertexAttribs4hvNV_IIaH ), ref bglVertexAttribs4hvNV ) as DglVertexAttribs4hvNV_IIaH;
            mDglVertexAttribs4hvNV_IIP = GetDelegate( "glVertexAttribs4hvNV", typeof( DglVertexAttribs4hvNV_IIP ), ref bglVertexAttribs4hvNV ) as DglVertexAttribs4hvNV_IIP;
            mDglVertexAttribs4svNV_IIaH = GetDelegate( "glVertexAttribs4svNV", typeof( DglVertexAttribs4svNV_IIaH ), ref bglVertexAttribs4svNV ) as DglVertexAttribs4svNV_IIaH;
            mDglVertexAttribs4svNV_IIP = GetDelegate( "glVertexAttribs4svNV", typeof( DglVertexAttribs4svNV_IIP ), ref bglVertexAttribs4svNV ) as DglVertexAttribs4svNV_IIP;
            mDglVertexAttribs4ubvNV_IIaB = GetDelegate( "glVertexAttribs4ubvNV", typeof( DglVertexAttribs4ubvNV_IIaB ), ref bglVertexAttribs4ubvNV ) as DglVertexAttribs4ubvNV_IIaB;
            mDglVertexAttribs4ubvNV_IIP = GetDelegate( "glVertexAttribs4ubvNV", typeof( DglVertexAttribs4ubvNV_IIP ), ref bglVertexAttribs4ubvNV ) as DglVertexAttribs4ubvNV_IIP;
            mDglVertexBlendARB_I = GetDelegate( "glVertexBlendARB", typeof( DglVertexBlendARB_I ), ref bglVertexBlendARB ) as DglVertexBlendARB_I;
            mDglVertexBlendEnvfATI_IF = GetDelegate( "glVertexBlendEnvfATI", typeof( DglVertexBlendEnvfATI_IF ), ref bglVertexBlendEnvfATI ) as DglVertexBlendEnvfATI_IF;
            mDglVertexBlendEnviATI_II = GetDelegate( "glVertexBlendEnviATI", typeof( DglVertexBlendEnviATI_II ), ref bglVertexBlendEnviATI ) as DglVertexBlendEnviATI_II;
            mDglVertexPointer_IIIaH = GetDelegate( "glVertexPointer", typeof( DglVertexPointer_IIIaH ), ref bglVertexPointer ) as DglVertexPointer_IIIaH;
            mDglVertexPointer_IIIaI = GetDelegate( "glVertexPointer", typeof( DglVertexPointer_IIIaI ), ref bglVertexPointer ) as DglVertexPointer_IIIaI;
            mDglVertexPointer_IIIaF = GetDelegate( "glVertexPointer", typeof( DglVertexPointer_IIIaF ), ref bglVertexPointer ) as DglVertexPointer_IIIaF;
            mDglVertexPointer_IIIaD = GetDelegate( "glVertexPointer", typeof( DglVertexPointer_IIIaD ), ref bglVertexPointer ) as DglVertexPointer_IIIaD;
            mDglVertexPointer_IIIP = GetDelegate( "glVertexPointer", typeof( DglVertexPointer_IIIP ), ref bglVertexPointer ) as DglVertexPointer_IIIP;
            mDglVertexPointerEXT_IIIIaH = GetDelegate( "glVertexPointerEXT", typeof( DglVertexPointerEXT_IIIIaH ), ref bglVertexPointerEXT ) as DglVertexPointerEXT_IIIIaH;
            mDglVertexPointerEXT_IIIIaI = GetDelegate( "glVertexPointerEXT", typeof( DglVertexPointerEXT_IIIIaI ), ref bglVertexPointerEXT ) as DglVertexPointerEXT_IIIIaI;
            mDglVertexPointerEXT_IIIIaF = GetDelegate( "glVertexPointerEXT", typeof( DglVertexPointerEXT_IIIIaF ), ref bglVertexPointerEXT ) as DglVertexPointerEXT_IIIIaF;
            mDglVertexPointerEXT_IIIIaD = GetDelegate( "glVertexPointerEXT", typeof( DglVertexPointerEXT_IIIIaD ), ref bglVertexPointerEXT ) as DglVertexPointerEXT_IIIIaD;
            mDglVertexPointerEXT_IIIIP = GetDelegate( "glVertexPointerEXT", typeof( DglVertexPointerEXT_IIIIP ), ref bglVertexPointerEXT ) as DglVertexPointerEXT_IIIIP;
            mDglVertexPointerListIBM_IIIrPI = GetDelegate( "glVertexPointerListIBM", typeof( DglVertexPointerListIBM_IIIrPI ), ref bglVertexPointerListIBM ) as DglVertexPointerListIBM_IIIrPI;
            mDglVertexPointervINTEL_IIrP = GetDelegate( "glVertexPointervINTEL", typeof( DglVertexPointervINTEL_IIrP ), ref bglVertexPointervINTEL ) as DglVertexPointervINTEL_IIrP;
            mDglVertexStream1dATI_ID = GetDelegate( "glVertexStream1dATI", typeof( DglVertexStream1dATI_ID ), ref bglVertexStream1dATI ) as DglVertexStream1dATI_ID;
            mDglVertexStream1dvATI_IaD = GetDelegate( "glVertexStream1dvATI", typeof( DglVertexStream1dvATI_IaD ), ref bglVertexStream1dvATI ) as DglVertexStream1dvATI_IaD;
            mDglVertexStream1dvATI_IP = GetDelegate( "glVertexStream1dvATI", typeof( DglVertexStream1dvATI_IP ), ref bglVertexStream1dvATI ) as DglVertexStream1dvATI_IP;
            mDglVertexStream1fATI_IF = GetDelegate( "glVertexStream1fATI", typeof( DglVertexStream1fATI_IF ), ref bglVertexStream1fATI ) as DglVertexStream1fATI_IF;
            mDglVertexStream1fvATI_IaF = GetDelegate( "glVertexStream1fvATI", typeof( DglVertexStream1fvATI_IaF ), ref bglVertexStream1fvATI ) as DglVertexStream1fvATI_IaF;
            mDglVertexStream1fvATI_IP = GetDelegate( "glVertexStream1fvATI", typeof( DglVertexStream1fvATI_IP ), ref bglVertexStream1fvATI ) as DglVertexStream1fvATI_IP;
            mDglVertexStream1iATI_II = GetDelegate( "glVertexStream1iATI", typeof( DglVertexStream1iATI_II ), ref bglVertexStream1iATI ) as DglVertexStream1iATI_II;
            mDglVertexStream1ivATI_IaI = GetDelegate( "glVertexStream1ivATI", typeof( DglVertexStream1ivATI_IaI ), ref bglVertexStream1ivATI ) as DglVertexStream1ivATI_IaI;
            mDglVertexStream1ivATI_IP = GetDelegate( "glVertexStream1ivATI", typeof( DglVertexStream1ivATI_IP ), ref bglVertexStream1ivATI ) as DglVertexStream1ivATI_IP;
            mDglVertexStream1sATI_IH = GetDelegate( "glVertexStream1sATI", typeof( DglVertexStream1sATI_IH ), ref bglVertexStream1sATI ) as DglVertexStream1sATI_IH;
            mDglVertexStream1svATI_IaH = GetDelegate( "glVertexStream1svATI", typeof( DglVertexStream1svATI_IaH ), ref bglVertexStream1svATI ) as DglVertexStream1svATI_IaH;
            mDglVertexStream1svATI_IP = GetDelegate( "glVertexStream1svATI", typeof( DglVertexStream1svATI_IP ), ref bglVertexStream1svATI ) as DglVertexStream1svATI_IP;
            mDglVertexStream2dATI_IDD = GetDelegate( "glVertexStream2dATI", typeof( DglVertexStream2dATI_IDD ), ref bglVertexStream2dATI ) as DglVertexStream2dATI_IDD;
            mDglVertexStream2dvATI_IaD = GetDelegate( "glVertexStream2dvATI", typeof( DglVertexStream2dvATI_IaD ), ref bglVertexStream2dvATI ) as DglVertexStream2dvATI_IaD;
            mDglVertexStream2dvATI_IP = GetDelegate( "glVertexStream2dvATI", typeof( DglVertexStream2dvATI_IP ), ref bglVertexStream2dvATI ) as DglVertexStream2dvATI_IP;
            mDglVertexStream2fATI_IFF = GetDelegate( "glVertexStream2fATI", typeof( DglVertexStream2fATI_IFF ), ref bglVertexStream2fATI ) as DglVertexStream2fATI_IFF;
            mDglVertexStream2fvATI_IaF = GetDelegate( "glVertexStream2fvATI", typeof( DglVertexStream2fvATI_IaF ), ref bglVertexStream2fvATI ) as DglVertexStream2fvATI_IaF;
            mDglVertexStream2fvATI_IP = GetDelegate( "glVertexStream2fvATI", typeof( DglVertexStream2fvATI_IP ), ref bglVertexStream2fvATI ) as DglVertexStream2fvATI_IP;
            mDglVertexStream2iATI_III = GetDelegate( "glVertexStream2iATI", typeof( DglVertexStream2iATI_III ), ref bglVertexStream2iATI ) as DglVertexStream2iATI_III;
            mDglVertexStream2ivATI_IaI = GetDelegate( "glVertexStream2ivATI", typeof( DglVertexStream2ivATI_IaI ), ref bglVertexStream2ivATI ) as DglVertexStream2ivATI_IaI;
            mDglVertexStream2ivATI_IP = GetDelegate( "glVertexStream2ivATI", typeof( DglVertexStream2ivATI_IP ), ref bglVertexStream2ivATI ) as DglVertexStream2ivATI_IP;
            mDglVertexStream2sATI_IHH = GetDelegate( "glVertexStream2sATI", typeof( DglVertexStream2sATI_IHH ), ref bglVertexStream2sATI ) as DglVertexStream2sATI_IHH;
            mDglVertexStream2svATI_IaH = GetDelegate( "glVertexStream2svATI", typeof( DglVertexStream2svATI_IaH ), ref bglVertexStream2svATI ) as DglVertexStream2svATI_IaH;
            mDglVertexStream2svATI_IP = GetDelegate( "glVertexStream2svATI", typeof( DglVertexStream2svATI_IP ), ref bglVertexStream2svATI ) as DglVertexStream2svATI_IP;
            mDglVertexStream3dATI_IDDD = GetDelegate( "glVertexStream3dATI", typeof( DglVertexStream3dATI_IDDD ), ref bglVertexStream3dATI ) as DglVertexStream3dATI_IDDD;
            mDglVertexStream3dvATI_IaD = GetDelegate( "glVertexStream3dvATI", typeof( DglVertexStream3dvATI_IaD ), ref bglVertexStream3dvATI ) as DglVertexStream3dvATI_IaD;
            mDglVertexStream3dvATI_IP = GetDelegate( "glVertexStream3dvATI", typeof( DglVertexStream3dvATI_IP ), ref bglVertexStream3dvATI ) as DglVertexStream3dvATI_IP;
            mDglVertexStream3fATI_IFFF = GetDelegate( "glVertexStream3fATI", typeof( DglVertexStream3fATI_IFFF ), ref bglVertexStream3fATI ) as DglVertexStream3fATI_IFFF;
            mDglVertexStream3fvATI_IaF = GetDelegate( "glVertexStream3fvATI", typeof( DglVertexStream3fvATI_IaF ), ref bglVertexStream3fvATI ) as DglVertexStream3fvATI_IaF;
            mDglVertexStream3fvATI_IP = GetDelegate( "glVertexStream3fvATI", typeof( DglVertexStream3fvATI_IP ), ref bglVertexStream3fvATI ) as DglVertexStream3fvATI_IP;
            mDglVertexStream3iATI_IIII = GetDelegate( "glVertexStream3iATI", typeof( DglVertexStream3iATI_IIII ), ref bglVertexStream3iATI ) as DglVertexStream3iATI_IIII;
            mDglVertexStream3ivATI_IaI = GetDelegate( "glVertexStream3ivATI", typeof( DglVertexStream3ivATI_IaI ), ref bglVertexStream3ivATI ) as DglVertexStream3ivATI_IaI;
            mDglVertexStream3ivATI_IP = GetDelegate( "glVertexStream3ivATI", typeof( DglVertexStream3ivATI_IP ), ref bglVertexStream3ivATI ) as DglVertexStream3ivATI_IP;
            mDglVertexStream3sATI_IHHH = GetDelegate( "glVertexStream3sATI", typeof( DglVertexStream3sATI_IHHH ), ref bglVertexStream3sATI ) as DglVertexStream3sATI_IHHH;
            mDglVertexStream3svATI_IaH = GetDelegate( "glVertexStream3svATI", typeof( DglVertexStream3svATI_IaH ), ref bglVertexStream3svATI ) as DglVertexStream3svATI_IaH;
            mDglVertexStream3svATI_IP = GetDelegate( "glVertexStream3svATI", typeof( DglVertexStream3svATI_IP ), ref bglVertexStream3svATI ) as DglVertexStream3svATI_IP;
            mDglVertexStream4dATI_IDDDD = GetDelegate( "glVertexStream4dATI", typeof( DglVertexStream4dATI_IDDDD ), ref bglVertexStream4dATI ) as DglVertexStream4dATI_IDDDD;
            mDglVertexStream4dvATI_IaD = GetDelegate( "glVertexStream4dvATI", typeof( DglVertexStream4dvATI_IaD ), ref bglVertexStream4dvATI ) as DglVertexStream4dvATI_IaD;
            mDglVertexStream4dvATI_IP = GetDelegate( "glVertexStream4dvATI", typeof( DglVertexStream4dvATI_IP ), ref bglVertexStream4dvATI ) as DglVertexStream4dvATI_IP;
            mDglVertexStream4fATI_IFFFF = GetDelegate( "glVertexStream4fATI", typeof( DglVertexStream4fATI_IFFFF ), ref bglVertexStream4fATI ) as DglVertexStream4fATI_IFFFF;
            mDglVertexStream4fvATI_IaF = GetDelegate( "glVertexStream4fvATI", typeof( DglVertexStream4fvATI_IaF ), ref bglVertexStream4fvATI ) as DglVertexStream4fvATI_IaF;
            mDglVertexStream4fvATI_IP = GetDelegate( "glVertexStream4fvATI", typeof( DglVertexStream4fvATI_IP ), ref bglVertexStream4fvATI ) as DglVertexStream4fvATI_IP;
            mDglVertexStream4iATI_IIIII = GetDelegate( "glVertexStream4iATI", typeof( DglVertexStream4iATI_IIIII ), ref bglVertexStream4iATI ) as DglVertexStream4iATI_IIIII;
            mDglVertexStream4ivATI_IaI = GetDelegate( "glVertexStream4ivATI", typeof( DglVertexStream4ivATI_IaI ), ref bglVertexStream4ivATI ) as DglVertexStream4ivATI_IaI;
            mDglVertexStream4ivATI_IP = GetDelegate( "glVertexStream4ivATI", typeof( DglVertexStream4ivATI_IP ), ref bglVertexStream4ivATI ) as DglVertexStream4ivATI_IP;
            mDglVertexStream4sATI_IHHHH = GetDelegate( "glVertexStream4sATI", typeof( DglVertexStream4sATI_IHHHH ), ref bglVertexStream4sATI ) as DglVertexStream4sATI_IHHHH;
            mDglVertexStream4svATI_IaH = GetDelegate( "glVertexStream4svATI", typeof( DglVertexStream4svATI_IaH ), ref bglVertexStream4svATI ) as DglVertexStream4svATI_IaH;
            mDglVertexStream4svATI_IP = GetDelegate( "glVertexStream4svATI", typeof( DglVertexStream4svATI_IP ), ref bglVertexStream4svATI ) as DglVertexStream4svATI_IP;
            mDglVertexWeightfEXT_F = GetDelegate( "glVertexWeightfEXT", typeof( DglVertexWeightfEXT_F ), ref bglVertexWeightfEXT ) as DglVertexWeightfEXT_F;
            mDglVertexWeightfvEXT_aF = GetDelegate( "glVertexWeightfvEXT", typeof( DglVertexWeightfvEXT_aF ), ref bglVertexWeightfvEXT ) as DglVertexWeightfvEXT_aF;
            mDglVertexWeightfvEXT_P = GetDelegate( "glVertexWeightfvEXT", typeof( DglVertexWeightfvEXT_P ), ref bglVertexWeightfvEXT ) as DglVertexWeightfvEXT_P;
            mDglVertexWeighthNV_H = GetDelegate( "glVertexWeighthNV", typeof( DglVertexWeighthNV_H ), ref bglVertexWeighthNV ) as DglVertexWeighthNV_H;
            mDglVertexWeighthvNV_aH = GetDelegate( "glVertexWeighthvNV", typeof( DglVertexWeighthvNV_aH ), ref bglVertexWeighthvNV ) as DglVertexWeighthvNV_aH;
            mDglVertexWeighthvNV_P = GetDelegate( "glVertexWeighthvNV", typeof( DglVertexWeighthvNV_P ), ref bglVertexWeighthvNV ) as DglVertexWeighthvNV_P;
            mDglVertexWeightPointerEXT_IIIaB = GetDelegate( "glVertexWeightPointerEXT", typeof( DglVertexWeightPointerEXT_IIIaB ), ref bglVertexWeightPointerEXT ) as DglVertexWeightPointerEXT_IIIaB;
            mDglVertexWeightPointerEXT_IIIaH = GetDelegate( "glVertexWeightPointerEXT", typeof( DglVertexWeightPointerEXT_IIIaH ), ref bglVertexWeightPointerEXT ) as DglVertexWeightPointerEXT_IIIaH;
            mDglVertexWeightPointerEXT_IIIaI = GetDelegate( "glVertexWeightPointerEXT", typeof( DglVertexWeightPointerEXT_IIIaI ), ref bglVertexWeightPointerEXT ) as DglVertexWeightPointerEXT_IIIaI;
            mDglVertexWeightPointerEXT_IIIaF = GetDelegate( "glVertexWeightPointerEXT", typeof( DglVertexWeightPointerEXT_IIIaF ), ref bglVertexWeightPointerEXT ) as DglVertexWeightPointerEXT_IIIaF;
            mDglVertexWeightPointerEXT_IIIaD = GetDelegate( "glVertexWeightPointerEXT", typeof( DglVertexWeightPointerEXT_IIIaD ), ref bglVertexWeightPointerEXT ) as DglVertexWeightPointerEXT_IIIaD;
            mDglVertexWeightPointerEXT_IIIP = GetDelegate( "glVertexWeightPointerEXT", typeof( DglVertexWeightPointerEXT_IIIP ), ref bglVertexWeightPointerEXT ) as DglVertexWeightPointerEXT_IIIP;
            mDglViewport_IIII = GetDelegate( "glViewport", typeof( DglViewport_IIII ), ref bglViewport ) as DglViewport_IIII;
            mDglWeightbvARB_IaB = GetDelegate( "glWeightbvARB", typeof( DglWeightbvARB_IaB ), ref bglWeightbvARB ) as DglWeightbvARB_IaB;
            mDglWeightbvARB_IP = GetDelegate( "glWeightbvARB", typeof( DglWeightbvARB_IP ), ref bglWeightbvARB ) as DglWeightbvARB_IP;
            mDglWeightdvARB_IaD = GetDelegate( "glWeightdvARB", typeof( DglWeightdvARB_IaD ), ref bglWeightdvARB ) as DglWeightdvARB_IaD;
            mDglWeightdvARB_IP = GetDelegate( "glWeightdvARB", typeof( DglWeightdvARB_IP ), ref bglWeightdvARB ) as DglWeightdvARB_IP;
            mDglWeightfvARB_IaF = GetDelegate( "glWeightfvARB", typeof( DglWeightfvARB_IaF ), ref bglWeightfvARB ) as DglWeightfvARB_IaF;
            mDglWeightfvARB_IP = GetDelegate( "glWeightfvARB", typeof( DglWeightfvARB_IP ), ref bglWeightfvARB ) as DglWeightfvARB_IP;
            mDglWeightivARB_IaI = GetDelegate( "glWeightivARB", typeof( DglWeightivARB_IaI ), ref bglWeightivARB ) as DglWeightivARB_IaI;
            mDglWeightivARB_IP = GetDelegate( "glWeightivARB", typeof( DglWeightivARB_IP ), ref bglWeightivARB ) as DglWeightivARB_IP;
            mDglWeightPointerARB_IIIaB = GetDelegate( "glWeightPointerARB", typeof( DglWeightPointerARB_IIIaB ), ref bglWeightPointerARB ) as DglWeightPointerARB_IIIaB;
            mDglWeightPointerARB_IIIaH = GetDelegate( "glWeightPointerARB", typeof( DglWeightPointerARB_IIIaH ), ref bglWeightPointerARB ) as DglWeightPointerARB_IIIaH;
            mDglWeightPointerARB_IIIaI = GetDelegate( "glWeightPointerARB", typeof( DglWeightPointerARB_IIIaI ), ref bglWeightPointerARB ) as DglWeightPointerARB_IIIaI;
            mDglWeightPointerARB_IIIaF = GetDelegate( "glWeightPointerARB", typeof( DglWeightPointerARB_IIIaF ), ref bglWeightPointerARB ) as DglWeightPointerARB_IIIaF;
            mDglWeightPointerARB_IIIaD = GetDelegate( "glWeightPointerARB", typeof( DglWeightPointerARB_IIIaD ), ref bglWeightPointerARB ) as DglWeightPointerARB_IIIaD;
            mDglWeightPointerARB_IIIP = GetDelegate( "glWeightPointerARB", typeof( DglWeightPointerARB_IIIP ), ref bglWeightPointerARB ) as DglWeightPointerARB_IIIP;
            mDglWeightsvARB_IaH = GetDelegate( "glWeightsvARB", typeof( DglWeightsvARB_IaH ), ref bglWeightsvARB ) as DglWeightsvARB_IaH;
            mDglWeightsvARB_IP = GetDelegate( "glWeightsvARB", typeof( DglWeightsvARB_IP ), ref bglWeightsvARB ) as DglWeightsvARB_IP;
            mDglWeightubvARB_IaB = GetDelegate( "glWeightubvARB", typeof( DglWeightubvARB_IaB ), ref bglWeightubvARB ) as DglWeightubvARB_IaB;
            mDglWeightubvARB_IP = GetDelegate( "glWeightubvARB", typeof( DglWeightubvARB_IP ), ref bglWeightubvARB ) as DglWeightubvARB_IP;
            mDglWeightuivARB_IaI = GetDelegate( "glWeightuivARB", typeof( DglWeightuivARB_IaI ), ref bglWeightuivARB ) as DglWeightuivARB_IaI;
            mDglWeightuivARB_IP = GetDelegate( "glWeightuivARB", typeof( DglWeightuivARB_IP ), ref bglWeightuivARB ) as DglWeightuivARB_IP;
            mDglWeightusvARB_IaH = GetDelegate( "glWeightusvARB", typeof( DglWeightusvARB_IaH ), ref bglWeightusvARB ) as DglWeightusvARB_IaH;
            mDglWeightusvARB_IP = GetDelegate( "glWeightusvARB", typeof( DglWeightusvARB_IP ), ref bglWeightusvARB ) as DglWeightusvARB_IP;
            mDglWindowPos2d_DD = GetDelegate( "glWindowPos2d", typeof( DglWindowPos2d_DD ), ref bglWindowPos2d ) as DglWindowPos2d_DD;
            mDglWindowPos2dARB_DD = GetDelegate( "glWindowPos2dARB", typeof( DglWindowPos2dARB_DD ), ref bglWindowPos2dARB ) as DglWindowPos2dARB_DD;
            mDglWindowPos2dMESA_DD = GetDelegate( "glWindowPos2dMESA", typeof( DglWindowPos2dMESA_DD ), ref bglWindowPos2dMESA ) as DglWindowPos2dMESA_DD;
            mDglWindowPos2dv_aD = GetDelegate( "glWindowPos2dv", typeof( DglWindowPos2dv_aD ), ref bglWindowPos2dv ) as DglWindowPos2dv_aD;
            mDglWindowPos2dv_P = GetDelegate( "glWindowPos2dv", typeof( DglWindowPos2dv_P ), ref bglWindowPos2dv ) as DglWindowPos2dv_P;
            mDglWindowPos2dvARB_aD = GetDelegate( "glWindowPos2dvARB", typeof( DglWindowPos2dvARB_aD ), ref bglWindowPos2dvARB ) as DglWindowPos2dvARB_aD;
            mDglWindowPos2dvARB_P = GetDelegate( "glWindowPos2dvARB", typeof( DglWindowPos2dvARB_P ), ref bglWindowPos2dvARB ) as DglWindowPos2dvARB_P;
            mDglWindowPos2dvMESA_aD = GetDelegate( "glWindowPos2dvMESA", typeof( DglWindowPos2dvMESA_aD ), ref bglWindowPos2dvMESA ) as DglWindowPos2dvMESA_aD;
            mDglWindowPos2dvMESA_P = GetDelegate( "glWindowPos2dvMESA", typeof( DglWindowPos2dvMESA_P ), ref bglWindowPos2dvMESA ) as DglWindowPos2dvMESA_P;
            mDglWindowPos2f_FF = GetDelegate( "glWindowPos2f", typeof( DglWindowPos2f_FF ), ref bglWindowPos2f ) as DglWindowPos2f_FF;
            mDglWindowPos2fARB_FF = GetDelegate( "glWindowPos2fARB", typeof( DglWindowPos2fARB_FF ), ref bglWindowPos2fARB ) as DglWindowPos2fARB_FF;
            mDglWindowPos2fMESA_FF = GetDelegate( "glWindowPos2fMESA", typeof( DglWindowPos2fMESA_FF ), ref bglWindowPos2fMESA ) as DglWindowPos2fMESA_FF;
            mDglWindowPos2fv_aF = GetDelegate( "glWindowPos2fv", typeof( DglWindowPos2fv_aF ), ref bglWindowPos2fv ) as DglWindowPos2fv_aF;
            mDglWindowPos2fv_P = GetDelegate( "glWindowPos2fv", typeof( DglWindowPos2fv_P ), ref bglWindowPos2fv ) as DglWindowPos2fv_P;
            mDglWindowPos2fvARB_aF = GetDelegate( "glWindowPos2fvARB", typeof( DglWindowPos2fvARB_aF ), ref bglWindowPos2fvARB ) as DglWindowPos2fvARB_aF;
            mDglWindowPos2fvARB_P = GetDelegate( "glWindowPos2fvARB", typeof( DglWindowPos2fvARB_P ), ref bglWindowPos2fvARB ) as DglWindowPos2fvARB_P;
            mDglWindowPos2fvMESA_aF = GetDelegate( "glWindowPos2fvMESA", typeof( DglWindowPos2fvMESA_aF ), ref bglWindowPos2fvMESA ) as DglWindowPos2fvMESA_aF;
            mDglWindowPos2fvMESA_P = GetDelegate( "glWindowPos2fvMESA", typeof( DglWindowPos2fvMESA_P ), ref bglWindowPos2fvMESA ) as DglWindowPos2fvMESA_P;
            mDglWindowPos2i_II = GetDelegate( "glWindowPos2i", typeof( DglWindowPos2i_II ), ref bglWindowPos2i ) as DglWindowPos2i_II;
            mDglWindowPos2iARB_II = GetDelegate( "glWindowPos2iARB", typeof( DglWindowPos2iARB_II ), ref bglWindowPos2iARB ) as DglWindowPos2iARB_II;
            mDglWindowPos2iMESA_II = GetDelegate( "glWindowPos2iMESA", typeof( DglWindowPos2iMESA_II ), ref bglWindowPos2iMESA ) as DglWindowPos2iMESA_II;
            mDglWindowPos2iv_aI = GetDelegate( "glWindowPos2iv", typeof( DglWindowPos2iv_aI ), ref bglWindowPos2iv ) as DglWindowPos2iv_aI;
            mDglWindowPos2iv_P = GetDelegate( "glWindowPos2iv", typeof( DglWindowPos2iv_P ), ref bglWindowPos2iv ) as DglWindowPos2iv_P;
            mDglWindowPos2ivARB_aI = GetDelegate( "glWindowPos2ivARB", typeof( DglWindowPos2ivARB_aI ), ref bglWindowPos2ivARB ) as DglWindowPos2ivARB_aI;
            mDglWindowPos2ivARB_P = GetDelegate( "glWindowPos2ivARB", typeof( DglWindowPos2ivARB_P ), ref bglWindowPos2ivARB ) as DglWindowPos2ivARB_P;
            mDglWindowPos2ivMESA_aI = GetDelegate( "glWindowPos2ivMESA", typeof( DglWindowPos2ivMESA_aI ), ref bglWindowPos2ivMESA ) as DglWindowPos2ivMESA_aI;
            mDglWindowPos2ivMESA_P = GetDelegate( "glWindowPos2ivMESA", typeof( DglWindowPos2ivMESA_P ), ref bglWindowPos2ivMESA ) as DglWindowPos2ivMESA_P;
            mDglWindowPos2s_HH = GetDelegate( "glWindowPos2s", typeof( DglWindowPos2s_HH ), ref bglWindowPos2s ) as DglWindowPos2s_HH;
            mDglWindowPos2sARB_HH = GetDelegate( "glWindowPos2sARB", typeof( DglWindowPos2sARB_HH ), ref bglWindowPos2sARB ) as DglWindowPos2sARB_HH;
            mDglWindowPos2sMESA_HH = GetDelegate( "glWindowPos2sMESA", typeof( DglWindowPos2sMESA_HH ), ref bglWindowPos2sMESA ) as DglWindowPos2sMESA_HH;
            mDglWindowPos2sv_aH = GetDelegate( "glWindowPos2sv", typeof( DglWindowPos2sv_aH ), ref bglWindowPos2sv ) as DglWindowPos2sv_aH;
            mDglWindowPos2sv_P = GetDelegate( "glWindowPos2sv", typeof( DglWindowPos2sv_P ), ref bglWindowPos2sv ) as DglWindowPos2sv_P;
            mDglWindowPos2svARB_aH = GetDelegate( "glWindowPos2svARB", typeof( DglWindowPos2svARB_aH ), ref bglWindowPos2svARB ) as DglWindowPos2svARB_aH;
            mDglWindowPos2svARB_P = GetDelegate( "glWindowPos2svARB", typeof( DglWindowPos2svARB_P ), ref bglWindowPos2svARB ) as DglWindowPos2svARB_P;
            mDglWindowPos2svMESA_aH = GetDelegate( "glWindowPos2svMESA", typeof( DglWindowPos2svMESA_aH ), ref bglWindowPos2svMESA ) as DglWindowPos2svMESA_aH;
            mDglWindowPos2svMESA_P = GetDelegate( "glWindowPos2svMESA", typeof( DglWindowPos2svMESA_P ), ref bglWindowPos2svMESA ) as DglWindowPos2svMESA_P;
            mDglWindowPos3d_DDD = GetDelegate( "glWindowPos3d", typeof( DglWindowPos3d_DDD ), ref bglWindowPos3d ) as DglWindowPos3d_DDD;
            mDglWindowPos3dARB_DDD = GetDelegate( "glWindowPos3dARB", typeof( DglWindowPos3dARB_DDD ), ref bglWindowPos3dARB ) as DglWindowPos3dARB_DDD;
            mDglWindowPos3dMESA_DDD = GetDelegate( "glWindowPos3dMESA", typeof( DglWindowPos3dMESA_DDD ), ref bglWindowPos3dMESA ) as DglWindowPos3dMESA_DDD;
            mDglWindowPos3dv_aD = GetDelegate( "glWindowPos3dv", typeof( DglWindowPos3dv_aD ), ref bglWindowPos3dv ) as DglWindowPos3dv_aD;
            mDglWindowPos3dv_P = GetDelegate( "glWindowPos3dv", typeof( DglWindowPos3dv_P ), ref bglWindowPos3dv ) as DglWindowPos3dv_P;
            mDglWindowPos3dvARB_aD = GetDelegate( "glWindowPos3dvARB", typeof( DglWindowPos3dvARB_aD ), ref bglWindowPos3dvARB ) as DglWindowPos3dvARB_aD;
            mDglWindowPos3dvARB_P = GetDelegate( "glWindowPos3dvARB", typeof( DglWindowPos3dvARB_P ), ref bglWindowPos3dvARB ) as DglWindowPos3dvARB_P;
            mDglWindowPos3dvMESA_aD = GetDelegate( "glWindowPos3dvMESA", typeof( DglWindowPos3dvMESA_aD ), ref bglWindowPos3dvMESA ) as DglWindowPos3dvMESA_aD;
            mDglWindowPos3dvMESA_P = GetDelegate( "glWindowPos3dvMESA", typeof( DglWindowPos3dvMESA_P ), ref bglWindowPos3dvMESA ) as DglWindowPos3dvMESA_P;
            mDglWindowPos3f_FFF = GetDelegate( "glWindowPos3f", typeof( DglWindowPos3f_FFF ), ref bglWindowPos3f ) as DglWindowPos3f_FFF;
            mDglWindowPos3fARB_FFF = GetDelegate( "glWindowPos3fARB", typeof( DglWindowPos3fARB_FFF ), ref bglWindowPos3fARB ) as DglWindowPos3fARB_FFF;
            mDglWindowPos3fMESA_FFF = GetDelegate( "glWindowPos3fMESA", typeof( DglWindowPos3fMESA_FFF ), ref bglWindowPos3fMESA ) as DglWindowPos3fMESA_FFF;
            mDglWindowPos3fv_aF = GetDelegate( "glWindowPos3fv", typeof( DglWindowPos3fv_aF ), ref bglWindowPos3fv ) as DglWindowPos3fv_aF;
            mDglWindowPos3fv_P = GetDelegate( "glWindowPos3fv", typeof( DglWindowPos3fv_P ), ref bglWindowPos3fv ) as DglWindowPos3fv_P;
            mDglWindowPos3fvARB_aF = GetDelegate( "glWindowPos3fvARB", typeof( DglWindowPos3fvARB_aF ), ref bglWindowPos3fvARB ) as DglWindowPos3fvARB_aF;
            mDglWindowPos3fvARB_P = GetDelegate( "glWindowPos3fvARB", typeof( DglWindowPos3fvARB_P ), ref bglWindowPos3fvARB ) as DglWindowPos3fvARB_P;
            mDglWindowPos3fvMESA_aF = GetDelegate( "glWindowPos3fvMESA", typeof( DglWindowPos3fvMESA_aF ), ref bglWindowPos3fvMESA ) as DglWindowPos3fvMESA_aF;
            mDglWindowPos3fvMESA_P = GetDelegate( "glWindowPos3fvMESA", typeof( DglWindowPos3fvMESA_P ), ref bglWindowPos3fvMESA ) as DglWindowPos3fvMESA_P;
            mDglWindowPos3i_III = GetDelegate( "glWindowPos3i", typeof( DglWindowPos3i_III ), ref bglWindowPos3i ) as DglWindowPos3i_III;
            mDglWindowPos3iARB_III = GetDelegate( "glWindowPos3iARB", typeof( DglWindowPos3iARB_III ), ref bglWindowPos3iARB ) as DglWindowPos3iARB_III;
            mDglWindowPos3iMESA_III = GetDelegate( "glWindowPos3iMESA", typeof( DglWindowPos3iMESA_III ), ref bglWindowPos3iMESA ) as DglWindowPos3iMESA_III;
            mDglWindowPos3iv_aI = GetDelegate( "glWindowPos3iv", typeof( DglWindowPos3iv_aI ), ref bglWindowPos3iv ) as DglWindowPos3iv_aI;
            mDglWindowPos3iv_P = GetDelegate( "glWindowPos3iv", typeof( DglWindowPos3iv_P ), ref bglWindowPos3iv ) as DglWindowPos3iv_P;
            mDglWindowPos3ivARB_aI = GetDelegate( "glWindowPos3ivARB", typeof( DglWindowPos3ivARB_aI ), ref bglWindowPos3ivARB ) as DglWindowPos3ivARB_aI;
            mDglWindowPos3ivARB_P = GetDelegate( "glWindowPos3ivARB", typeof( DglWindowPos3ivARB_P ), ref bglWindowPos3ivARB ) as DglWindowPos3ivARB_P;
            mDglWindowPos3ivMESA_aI = GetDelegate( "glWindowPos3ivMESA", typeof( DglWindowPos3ivMESA_aI ), ref bglWindowPos3ivMESA ) as DglWindowPos3ivMESA_aI;
            mDglWindowPos3ivMESA_P = GetDelegate( "glWindowPos3ivMESA", typeof( DglWindowPos3ivMESA_P ), ref bglWindowPos3ivMESA ) as DglWindowPos3ivMESA_P;
            mDglWindowPos3s_HHH = GetDelegate( "glWindowPos3s", typeof( DglWindowPos3s_HHH ), ref bglWindowPos3s ) as DglWindowPos3s_HHH;
            mDglWindowPos3sARB_HHH = GetDelegate( "glWindowPos3sARB", typeof( DglWindowPos3sARB_HHH ), ref bglWindowPos3sARB ) as DglWindowPos3sARB_HHH;
            mDglWindowPos3sMESA_HHH = GetDelegate( "glWindowPos3sMESA", typeof( DglWindowPos3sMESA_HHH ), ref bglWindowPos3sMESA ) as DglWindowPos3sMESA_HHH;
            mDglWindowPos3sv_aH = GetDelegate( "glWindowPos3sv", typeof( DglWindowPos3sv_aH ), ref bglWindowPos3sv ) as DglWindowPos3sv_aH;
            mDglWindowPos3sv_P = GetDelegate( "glWindowPos3sv", typeof( DglWindowPos3sv_P ), ref bglWindowPos3sv ) as DglWindowPos3sv_P;
            mDglWindowPos3svARB_aH = GetDelegate( "glWindowPos3svARB", typeof( DglWindowPos3svARB_aH ), ref bglWindowPos3svARB ) as DglWindowPos3svARB_aH;
            mDglWindowPos3svARB_P = GetDelegate( "glWindowPos3svARB", typeof( DglWindowPos3svARB_P ), ref bglWindowPos3svARB ) as DglWindowPos3svARB_P;
            mDglWindowPos3svMESA_aH = GetDelegate( "glWindowPos3svMESA", typeof( DglWindowPos3svMESA_aH ), ref bglWindowPos3svMESA ) as DglWindowPos3svMESA_aH;
            mDglWindowPos3svMESA_P = GetDelegate( "glWindowPos3svMESA", typeof( DglWindowPos3svMESA_P ), ref bglWindowPos3svMESA ) as DglWindowPos3svMESA_P;
            mDglWindowPos4dMESA_DDDD = GetDelegate( "glWindowPos4dMESA", typeof( DglWindowPos4dMESA_DDDD ), ref bglWindowPos4dMESA ) as DglWindowPos4dMESA_DDDD;
            mDglWindowPos4dvMESA_aD = GetDelegate( "glWindowPos4dvMESA", typeof( DglWindowPos4dvMESA_aD ), ref bglWindowPos4dvMESA ) as DglWindowPos4dvMESA_aD;
            mDglWindowPos4dvMESA_P = GetDelegate( "glWindowPos4dvMESA", typeof( DglWindowPos4dvMESA_P ), ref bglWindowPos4dvMESA ) as DglWindowPos4dvMESA_P;
            mDglWindowPos4fMESA_FFFF = GetDelegate( "glWindowPos4fMESA", typeof( DglWindowPos4fMESA_FFFF ), ref bglWindowPos4fMESA ) as DglWindowPos4fMESA_FFFF;
            mDglWindowPos4fvMESA_aF = GetDelegate( "glWindowPos4fvMESA", typeof( DglWindowPos4fvMESA_aF ), ref bglWindowPos4fvMESA ) as DglWindowPos4fvMESA_aF;
            mDglWindowPos4fvMESA_P = GetDelegate( "glWindowPos4fvMESA", typeof( DglWindowPos4fvMESA_P ), ref bglWindowPos4fvMESA ) as DglWindowPos4fvMESA_P;
            mDglWindowPos4iMESA_IIII = GetDelegate( "glWindowPos4iMESA", typeof( DglWindowPos4iMESA_IIII ), ref bglWindowPos4iMESA ) as DglWindowPos4iMESA_IIII;
            mDglWindowPos4ivMESA_aI = GetDelegate( "glWindowPos4ivMESA", typeof( DglWindowPos4ivMESA_aI ), ref bglWindowPos4ivMESA ) as DglWindowPos4ivMESA_aI;
            mDglWindowPos4ivMESA_P = GetDelegate( "glWindowPos4ivMESA", typeof( DglWindowPos4ivMESA_P ), ref bglWindowPos4ivMESA ) as DglWindowPos4ivMESA_P;
            mDglWindowPos4sMESA_HHHH = GetDelegate( "glWindowPos4sMESA", typeof( DglWindowPos4sMESA_HHHH ), ref bglWindowPos4sMESA ) as DglWindowPos4sMESA_HHHH;
            mDglWindowPos4svMESA_aH = GetDelegate( "glWindowPos4svMESA", typeof( DglWindowPos4svMESA_aH ), ref bglWindowPos4svMESA ) as DglWindowPos4svMESA_aH;
            mDglWindowPos4svMESA_P = GetDelegate( "glWindowPos4svMESA", typeof( DglWindowPos4svMESA_P ), ref bglWindowPos4svMESA ) as DglWindowPos4svMESA_P;
            mDglWriteMaskEXT_IIIIII = GetDelegate( "glWriteMaskEXT", typeof( DglWriteMaskEXT_IIIIII ), ref bglWriteMaskEXT ) as DglWriteMaskEXT_IIIIII;
            mDSwapBuffers_P = GetDelegate( "SwapBuffers", typeof( DSwapBuffers_P ), ref bSwapBuffers ) as DSwapBuffers_P;
            mDwglAllocateMemoryNV_IFFF = GetDelegate( "wglAllocateMemoryNV", typeof( DwglAllocateMemoryNV_IFFF ), ref bwglAllocateMemoryNV ) as DwglAllocateMemoryNV_IFFF;
            mDwglAssociateImageBufferEventsI3D_PrPrPrII = GetDelegate( "wglAssociateImageBufferEventsI3D", typeof( DwglAssociateImageBufferEventsI3D_PrPrPrII ), ref bwglAssociateImageBufferEventsI3D ) as DwglAssociateImageBufferEventsI3D_PrPrPrII;
            mDwglBeginFrameTrackingI3D_V = GetDelegate( "wglBeginFrameTrackingI3D", typeof( DwglBeginFrameTrackingI3D_V ), ref bwglBeginFrameTrackingI3D ) as DwglBeginFrameTrackingI3D_V;
            mDwglBindDisplayColorTableEXT_H = GetDelegate( "wglBindDisplayColorTableEXT", typeof( DwglBindDisplayColorTableEXT_H ), ref bwglBindDisplayColorTableEXT ) as DwglBindDisplayColorTableEXT_H;
            mDwglBindTexImageARB_PI = GetDelegate( "wglBindTexImageARB", typeof( DwglBindTexImageARB_PI ), ref bwglBindTexImageARB ) as DwglBindTexImageARB_PI;
            mDwglChoosePixelFormatARB_PaIaFIaIrI = GetDelegate( "wglChoosePixelFormatARB", typeof( DwglChoosePixelFormatARB_PaIaFIaIrI ), ref bwglChoosePixelFormatARB ) as DwglChoosePixelFormatARB_PaIaFIaIrI;
            mDwglChoosePixelFormatARB_PPPIPP = GetDelegate( "wglChoosePixelFormatARB", typeof( DwglChoosePixelFormatARB_PPPIPP ), ref bwglChoosePixelFormatARB ) as DwglChoosePixelFormatARB_PPPIPP;
            mDwglChoosePixelFormatEXT_PaIaFIaIrI = GetDelegate( "wglChoosePixelFormatEXT", typeof( DwglChoosePixelFormatEXT_PaIaFIaIrI ), ref bwglChoosePixelFormatEXT ) as DwglChoosePixelFormatEXT_PaIaFIaIrI;
            mDwglChoosePixelFormatEXT_PPPIPP = GetDelegate( "wglChoosePixelFormatEXT", typeof( DwglChoosePixelFormatEXT_PPPIPP ), ref bwglChoosePixelFormatEXT ) as DwglChoosePixelFormatEXT_PPPIPP;
            mDwglCopyContext_PPI = GetDelegate( "wglCopyContext", typeof( DwglCopyContext_PPI ), ref bwglCopyContext ) as DwglCopyContext_PPI;
            mDwglCreateBufferRegionARB_PII = GetDelegate( "wglCreateBufferRegionARB", typeof( DwglCreateBufferRegionARB_PII ), ref bwglCreateBufferRegionARB ) as DwglCreateBufferRegionARB_PII;
            mDwglCreateContext_P = GetDelegate( "wglCreateContext", typeof( DwglCreateContext_P ), ref bwglCreateContext ) as DwglCreateContext_P;
            mDwglCreateDisplayColorTableEXT_H = GetDelegate( "wglCreateDisplayColorTableEXT", typeof( DwglCreateDisplayColorTableEXT_H ), ref bwglCreateDisplayColorTableEXT ) as DwglCreateDisplayColorTableEXT_H;
            mDwglCreateImageBufferI3D_PII = GetDelegate( "wglCreateImageBufferI3D", typeof( DwglCreateImageBufferI3D_PII ), ref bwglCreateImageBufferI3D ) as DwglCreateImageBufferI3D_PII;
            mDwglCreateLayerContext_PI = GetDelegate( "wglCreateLayerContext", typeof( DwglCreateLayerContext_PI ), ref bwglCreateLayerContext ) as DwglCreateLayerContext_PI;
            mDwglCreatePbufferARB_PIIIaI = GetDelegate( "wglCreatePbufferARB", typeof( DwglCreatePbufferARB_PIIIaI ), ref bwglCreatePbufferARB ) as DwglCreatePbufferARB_PIIIaI;
            mDwglCreatePbufferARB_PIIIP = GetDelegate( "wglCreatePbufferARB", typeof( DwglCreatePbufferARB_PIIIP ), ref bwglCreatePbufferARB ) as DwglCreatePbufferARB_PIIIP;
            mDwglCreatePbufferEXT_PIIIaI = GetDelegate( "wglCreatePbufferEXT", typeof( DwglCreatePbufferEXT_PIIIaI ), ref bwglCreatePbufferEXT ) as DwglCreatePbufferEXT_PIIIaI;
            mDwglCreatePbufferEXT_PIIIP = GetDelegate( "wglCreatePbufferEXT", typeof( DwglCreatePbufferEXT_PIIIP ), ref bwglCreatePbufferEXT ) as DwglCreatePbufferEXT_PIIIP;
            mDwglDeleteBufferRegionARB_P = GetDelegate( "wglDeleteBufferRegionARB", typeof( DwglDeleteBufferRegionARB_P ), ref bwglDeleteBufferRegionARB ) as DwglDeleteBufferRegionARB_P;
            mDwglDeleteContext_P = GetDelegate( "wglDeleteContext", typeof( DwglDeleteContext_P ), ref bwglDeleteContext ) as DwglDeleteContext_P;
            mDwglDescribeLayerPlane_PIIIrX = GetDelegate( "wglDescribeLayerPlane", typeof( DwglDescribeLayerPlane_PIIIrX ), ref bwglDescribeLayerPlane ) as DwglDescribeLayerPlane_PIIIrX;
            mDwglDestroyDisplayColorTableEXT_H = GetDelegate( "wglDestroyDisplayColorTableEXT", typeof( DwglDestroyDisplayColorTableEXT_H ), ref bwglDestroyDisplayColorTableEXT ) as DwglDestroyDisplayColorTableEXT_H;
            mDwglDestroyImageBufferI3D_PaB = GetDelegate( "wglDestroyImageBufferI3D", typeof( DwglDestroyImageBufferI3D_PaB ), ref bwglDestroyImageBufferI3D ) as DwglDestroyImageBufferI3D_PaB;
            mDwglDestroyImageBufferI3D_PP = GetDelegate( "wglDestroyImageBufferI3D", typeof( DwglDestroyImageBufferI3D_PP ), ref bwglDestroyImageBufferI3D ) as DwglDestroyImageBufferI3D_PP;
            mDwglDestroyPbufferARB_P = GetDelegate( "wglDestroyPbufferARB", typeof( DwglDestroyPbufferARB_P ), ref bwglDestroyPbufferARB ) as DwglDestroyPbufferARB_P;
            mDwglDestroyPbufferEXT_P = GetDelegate( "wglDestroyPbufferEXT", typeof( DwglDestroyPbufferEXT_P ), ref bwglDestroyPbufferEXT ) as DwglDestroyPbufferEXT_P;
            mDwglDisableFrameLockI3D_V = GetDelegate( "wglDisableFrameLockI3D", typeof( DwglDisableFrameLockI3D_V ), ref bwglDisableFrameLockI3D ) as DwglDisableFrameLockI3D_V;
            mDwglDisableGenlockI3D_P = GetDelegate( "wglDisableGenlockI3D", typeof( DwglDisableGenlockI3D_P ), ref bwglDisableGenlockI3D ) as DwglDisableGenlockI3D_P;
            mDwglEnableFrameLockI3D_V = GetDelegate( "wglEnableFrameLockI3D", typeof( DwglEnableFrameLockI3D_V ), ref bwglEnableFrameLockI3D ) as DwglEnableFrameLockI3D_V;
            mDwglEnableGenlockI3D_P = GetDelegate( "wglEnableGenlockI3D", typeof( DwglEnableGenlockI3D_P ), ref bwglEnableGenlockI3D ) as DwglEnableGenlockI3D_P;
            mDwglEndFrameTrackingI3D_V = GetDelegate( "wglEndFrameTrackingI3D", typeof( DwglEndFrameTrackingI3D_V ), ref bwglEndFrameTrackingI3D ) as DwglEndFrameTrackingI3D_V;
            mDwglFreeMemoryNV_P = GetDelegate( "wglFreeMemoryNV", typeof( DwglFreeMemoryNV_P ), ref bwglFreeMemoryNV ) as DwglFreeMemoryNV_P;
            mDwglGenlockSampleRateI3D_PI = GetDelegate( "wglGenlockSampleRateI3D", typeof( DwglGenlockSampleRateI3D_PI ), ref bwglGenlockSampleRateI3D ) as DwglGenlockSampleRateI3D_PI;
            mDwglGenlockSourceDelayI3D_PI = GetDelegate( "wglGenlockSourceDelayI3D", typeof( DwglGenlockSourceDelayI3D_PI ), ref bwglGenlockSourceDelayI3D ) as DwglGenlockSourceDelayI3D_PI;
            mDwglGenlockSourceEdgeI3D_PI = GetDelegate( "wglGenlockSourceEdgeI3D", typeof( DwglGenlockSourceEdgeI3D_PI ), ref bwglGenlockSourceEdgeI3D ) as DwglGenlockSourceEdgeI3D_PI;
            mDwglGenlockSourceI3D_PI = GetDelegate( "wglGenlockSourceI3D", typeof( DwglGenlockSourceI3D_PI ), ref bwglGenlockSourceI3D ) as DwglGenlockSourceI3D_PI;
            mDwglGetCurrentContext_V = GetDelegate( "wglGetCurrentContext", typeof( DwglGetCurrentContext_V ), ref bwglGetCurrentContext ) as DwglGetCurrentContext_V;
            mDwglGetCurrentDC_V = GetDelegate( "wglGetCurrentDC", typeof( DwglGetCurrentDC_V ), ref bwglGetCurrentDC ) as DwglGetCurrentDC_V;
            mDwglGetCurrentReadDCARB_V = GetDelegate( "wglGetCurrentReadDCARB", typeof( DwglGetCurrentReadDCARB_V ), ref bwglGetCurrentReadDCARB ) as DwglGetCurrentReadDCARB_V;
            mDwglGetCurrentReadDCEXT_V = GetDelegate( "wglGetCurrentReadDCEXT", typeof( DwglGetCurrentReadDCEXT_V ), ref bwglGetCurrentReadDCEXT ) as DwglGetCurrentReadDCEXT_V;
            mDwglGetDigitalVideoParametersI3D_PIrI = GetDelegate( "wglGetDigitalVideoParametersI3D", typeof( DwglGetDigitalVideoParametersI3D_PIrI ), ref bwglGetDigitalVideoParametersI3D ) as DwglGetDigitalVideoParametersI3D_PIrI;
            mDwglGetExtensionsStringARB_P = GetDelegate( "wglGetExtensionsStringARB", typeof( DwglGetExtensionsStringARB_P ), ref bwglGetExtensionsStringARB ) as DwglGetExtensionsStringARB_P;
            mDwglGetExtensionsStringEXT_V = GetDelegate( "wglGetExtensionsStringEXT", typeof( DwglGetExtensionsStringEXT_V ), ref bwglGetExtensionsStringEXT ) as DwglGetExtensionsStringEXT_V;
            mDwglGetFrameUsageI3D_rF = GetDelegate( "wglGetFrameUsageI3D", typeof( DwglGetFrameUsageI3D_rF ), ref bwglGetFrameUsageI3D ) as DwglGetFrameUsageI3D_rF;
            mDwglGetGammaTableI3D_PIaHaHaH = GetDelegate( "wglGetGammaTableI3D", typeof( DwglGetGammaTableI3D_PIaHaHaH ), ref bwglGetGammaTableI3D ) as DwglGetGammaTableI3D_PIaHaHaH;
            mDwglGetGammaTableI3D_PIPPP = GetDelegate( "wglGetGammaTableI3D", typeof( DwglGetGammaTableI3D_PIPPP ), ref bwglGetGammaTableI3D ) as DwglGetGammaTableI3D_PIPPP;
            mDwglGetGammaTableParametersI3D_PIrI = GetDelegate( "wglGetGammaTableParametersI3D", typeof( DwglGetGammaTableParametersI3D_PIrI ), ref bwglGetGammaTableParametersI3D ) as DwglGetGammaTableParametersI3D_PIrI;
            mDwglGetGenlockSampleRateI3D_PrI = GetDelegate( "wglGetGenlockSampleRateI3D", typeof( DwglGetGenlockSampleRateI3D_PrI ), ref bwglGetGenlockSampleRateI3D ) as DwglGetGenlockSampleRateI3D_PrI;
            mDwglGetGenlockSourceDelayI3D_PrI = GetDelegate( "wglGetGenlockSourceDelayI3D", typeof( DwglGetGenlockSourceDelayI3D_PrI ), ref bwglGetGenlockSourceDelayI3D ) as DwglGetGenlockSourceDelayI3D_PrI;
            mDwglGetGenlockSourceEdgeI3D_PrI = GetDelegate( "wglGetGenlockSourceEdgeI3D", typeof( DwglGetGenlockSourceEdgeI3D_PrI ), ref bwglGetGenlockSourceEdgeI3D ) as DwglGetGenlockSourceEdgeI3D_PrI;
            mDwglGetGenlockSourceI3D_PrI = GetDelegate( "wglGetGenlockSourceI3D", typeof( DwglGetGenlockSourceI3D_PrI ), ref bwglGetGenlockSourceI3D ) as DwglGetGenlockSourceI3D_PrI;
            mDwglGetLayerPaletteEntries_PIIIaI = GetDelegate( "wglGetLayerPaletteEntries", typeof( DwglGetLayerPaletteEntries_PIIIaI ), ref bwglGetLayerPaletteEntries ) as DwglGetLayerPaletteEntries_PIIIaI;
            mDwglGetLayerPaletteEntries_PIIIP = GetDelegate( "wglGetLayerPaletteEntries", typeof( DwglGetLayerPaletteEntries_PIIIP ), ref bwglGetLayerPaletteEntries ) as DwglGetLayerPaletteEntries_PIIIP;
            mDwglGetMscRateOML_PrIrI = GetDelegate( "wglGetMscRateOML", typeof( DwglGetMscRateOML_PrIrI ), ref bwglGetMscRateOML ) as DwglGetMscRateOML_PrIrI;
            mDwglGetPbufferDCARB_P = GetDelegate( "wglGetPbufferDCARB", typeof( DwglGetPbufferDCARB_P ), ref bwglGetPbufferDCARB ) as DwglGetPbufferDCARB_P;
            mDwglGetPbufferDCEXT_P = GetDelegate( "wglGetPbufferDCEXT", typeof( DwglGetPbufferDCEXT_P ), ref bwglGetPbufferDCEXT ) as DwglGetPbufferDCEXT_P;
            mDwglGetPixelFormatAttribfvARB_PIIIaIaF = GetDelegate( "wglGetPixelFormatAttribfvARB", typeof( DwglGetPixelFormatAttribfvARB_PIIIaIaF ), ref bwglGetPixelFormatAttribfvARB ) as DwglGetPixelFormatAttribfvARB_PIIIaIaF;
            mDwglGetPixelFormatAttribfvARB_PIIIPP = GetDelegate( "wglGetPixelFormatAttribfvARB", typeof( DwglGetPixelFormatAttribfvARB_PIIIPP ), ref bwglGetPixelFormatAttribfvARB ) as DwglGetPixelFormatAttribfvARB_PIIIPP;
            mDwglGetPixelFormatAttribfvEXT_PIIIaIaF = GetDelegate( "wglGetPixelFormatAttribfvEXT", typeof( DwglGetPixelFormatAttribfvEXT_PIIIaIaF ), ref bwglGetPixelFormatAttribfvEXT ) as DwglGetPixelFormatAttribfvEXT_PIIIaIaF;
            mDwglGetPixelFormatAttribfvEXT_PIIIPP = GetDelegate( "wglGetPixelFormatAttribfvEXT", typeof( DwglGetPixelFormatAttribfvEXT_PIIIPP ), ref bwglGetPixelFormatAttribfvEXT ) as DwglGetPixelFormatAttribfvEXT_PIIIPP;
            mDwglGetPixelFormatAttribivARB_PIIIaIaI = GetDelegate( "wglGetPixelFormatAttribivARB", typeof( DwglGetPixelFormatAttribivARB_PIIIaIaI ), ref bwglGetPixelFormatAttribivARB ) as DwglGetPixelFormatAttribivARB_PIIIaIaI;
            mDwglGetPixelFormatAttribivARB_PIIIPP = GetDelegate( "wglGetPixelFormatAttribivARB", typeof( DwglGetPixelFormatAttribivARB_PIIIPP ), ref bwglGetPixelFormatAttribivARB ) as DwglGetPixelFormatAttribivARB_PIIIPP;
            mDwglGetPixelFormatAttribivEXT_PIIIaIaI = GetDelegate( "wglGetPixelFormatAttribivEXT", typeof( DwglGetPixelFormatAttribivEXT_PIIIaIaI ), ref bwglGetPixelFormatAttribivEXT ) as DwglGetPixelFormatAttribivEXT_PIIIaIaI;
            mDwglGetPixelFormatAttribivEXT_PIIIPP = GetDelegate( "wglGetPixelFormatAttribivEXT", typeof( DwglGetPixelFormatAttribivEXT_PIIIPP ), ref bwglGetPixelFormatAttribivEXT ) as DwglGetPixelFormatAttribivEXT_PIIIPP;
            mDwglGetProcAddress_S = GetDelegate( "wglGetProcAddress", typeof( DwglGetProcAddress_S ), ref bwglGetProcAddress ) as DwglGetProcAddress_S;
            mDwglGetSwapIntervalEXT_V = GetDelegate( "wglGetSwapIntervalEXT", typeof( DwglGetSwapIntervalEXT_V ), ref bwglGetSwapIntervalEXT ) as DwglGetSwapIntervalEXT_V;
            mDwglGetSyncValuesOML_PrLrLrL = GetDelegate( "wglGetSyncValuesOML", typeof( DwglGetSyncValuesOML_PrLrLrL ), ref bwglGetSyncValuesOML ) as DwglGetSyncValuesOML_PrLrLrL;
            mDwglIsEnabledFrameLockI3D_rI = GetDelegate( "wglIsEnabledFrameLockI3D", typeof( DwglIsEnabledFrameLockI3D_rI ), ref bwglIsEnabledFrameLockI3D ) as DwglIsEnabledFrameLockI3D_rI;
            mDwglIsEnabledGenlockI3D_PrI = GetDelegate( "wglIsEnabledGenlockI3D", typeof( DwglIsEnabledGenlockI3D_PrI ), ref bwglIsEnabledGenlockI3D ) as DwglIsEnabledGenlockI3D_PrI;
            mDwglLoadDisplayColorTableEXT_aHI = GetDelegate( "wglLoadDisplayColorTableEXT", typeof( DwglLoadDisplayColorTableEXT_aHI ), ref bwglLoadDisplayColorTableEXT ) as DwglLoadDisplayColorTableEXT_aHI;
            mDwglLoadDisplayColorTableEXT_PI = GetDelegate( "wglLoadDisplayColorTableEXT", typeof( DwglLoadDisplayColorTableEXT_PI ), ref bwglLoadDisplayColorTableEXT ) as DwglLoadDisplayColorTableEXT_PI;
            mDwglMakeContextCurrentARB_PPP = GetDelegate( "wglMakeContextCurrentARB", typeof( DwglMakeContextCurrentARB_PPP ), ref bwglMakeContextCurrentARB ) as DwglMakeContextCurrentARB_PPP;
            mDwglMakeContextCurrentEXT_PPP = GetDelegate( "wglMakeContextCurrentEXT", typeof( DwglMakeContextCurrentEXT_PPP ), ref bwglMakeContextCurrentEXT ) as DwglMakeContextCurrentEXT_PPP;
            mDwglMakeCurrent_PP = GetDelegate( "wglMakeCurrent", typeof( DwglMakeCurrent_PP ), ref bwglMakeCurrent ) as DwglMakeCurrent_PP;
            mDwglQueryFrameLockMasterI3D_rI = GetDelegate( "wglQueryFrameLockMasterI3D", typeof( DwglQueryFrameLockMasterI3D_rI ), ref bwglQueryFrameLockMasterI3D ) as DwglQueryFrameLockMasterI3D_rI;
            mDwglQueryFrameTrackingI3D_rIrIrF = GetDelegate( "wglQueryFrameTrackingI3D", typeof( DwglQueryFrameTrackingI3D_rIrIrF ), ref bwglQueryFrameTrackingI3D ) as DwglQueryFrameTrackingI3D_rIrIrF;
            mDwglQueryGenlockMaxSourceDelayI3D_PrIrI = GetDelegate( "wglQueryGenlockMaxSourceDelayI3D", typeof( DwglQueryGenlockMaxSourceDelayI3D_PrIrI ), ref bwglQueryGenlockMaxSourceDelayI3D ) as DwglQueryGenlockMaxSourceDelayI3D_PrIrI;
            mDwglQueryPbufferARB_PIrI = GetDelegate( "wglQueryPbufferARB", typeof( DwglQueryPbufferARB_PIrI ), ref bwglQueryPbufferARB ) as DwglQueryPbufferARB_PIrI;
            mDwglQueryPbufferEXT_PIrI = GetDelegate( "wglQueryPbufferEXT", typeof( DwglQueryPbufferEXT_PIrI ), ref bwglQueryPbufferEXT ) as DwglQueryPbufferEXT_PIrI;
            mDwglRealizeLayerPalette_PII = GetDelegate( "wglRealizeLayerPalette", typeof( DwglRealizeLayerPalette_PII ), ref bwglRealizeLayerPalette ) as DwglRealizeLayerPalette_PII;
            mDwglReleaseImageBufferEventsI3D_PrPI = GetDelegate( "wglReleaseImageBufferEventsI3D", typeof( DwglReleaseImageBufferEventsI3D_PrPI ), ref bwglReleaseImageBufferEventsI3D ) as DwglReleaseImageBufferEventsI3D_PrPI;
            mDwglReleasePbufferDCARB_PP = GetDelegate( "wglReleasePbufferDCARB", typeof( DwglReleasePbufferDCARB_PP ), ref bwglReleasePbufferDCARB ) as DwglReleasePbufferDCARB_PP;
            mDwglReleasePbufferDCEXT_PP = GetDelegate( "wglReleasePbufferDCEXT", typeof( DwglReleasePbufferDCEXT_PP ), ref bwglReleasePbufferDCEXT ) as DwglReleasePbufferDCEXT_PP;
            mDwglReleaseTexImageARB_PI = GetDelegate( "wglReleaseTexImageARB", typeof( DwglReleaseTexImageARB_PI ), ref bwglReleaseTexImageARB ) as DwglReleaseTexImageARB_PI;
            mDwglRestoreBufferRegionARB_PIIIIII = GetDelegate( "wglRestoreBufferRegionARB", typeof( DwglRestoreBufferRegionARB_PIIIIII ), ref bwglRestoreBufferRegionARB ) as DwglRestoreBufferRegionARB_PIIIIII;
            mDwglSaveBufferRegionARB_PIIII = GetDelegate( "wglSaveBufferRegionARB", typeof( DwglSaveBufferRegionARB_PIIII ), ref bwglSaveBufferRegionARB ) as DwglSaveBufferRegionARB_PIIII;
            mDwglSetDigitalVideoParametersI3D_PIrI = GetDelegate( "wglSetDigitalVideoParametersI3D", typeof( DwglSetDigitalVideoParametersI3D_PIrI ), ref bwglSetDigitalVideoParametersI3D ) as DwglSetDigitalVideoParametersI3D_PIrI;
            mDwglSetGammaTableI3D_PIaHaHaH = GetDelegate( "wglSetGammaTableI3D", typeof( DwglSetGammaTableI3D_PIaHaHaH ), ref bwglSetGammaTableI3D ) as DwglSetGammaTableI3D_PIaHaHaH;
            mDwglSetGammaTableI3D_PIPPP = GetDelegate( "wglSetGammaTableI3D", typeof( DwglSetGammaTableI3D_PIPPP ), ref bwglSetGammaTableI3D ) as DwglSetGammaTableI3D_PIPPP;
            mDwglSetGammaTableParametersI3D_PIrI = GetDelegate( "wglSetGammaTableParametersI3D", typeof( DwglSetGammaTableParametersI3D_PIrI ), ref bwglSetGammaTableParametersI3D ) as DwglSetGammaTableParametersI3D_PIrI;
            mDwglSetLayerPaletteEntries_PIIIaI = GetDelegate( "wglSetLayerPaletteEntries", typeof( DwglSetLayerPaletteEntries_PIIIaI ), ref bwglSetLayerPaletteEntries ) as DwglSetLayerPaletteEntries_PIIIaI;
            mDwglSetLayerPaletteEntries_PIIIP = GetDelegate( "wglSetLayerPaletteEntries", typeof( DwglSetLayerPaletteEntries_PIIIP ), ref bwglSetLayerPaletteEntries ) as DwglSetLayerPaletteEntries_PIIIP;
            mDwglSetPbufferAttribARB_PaI = GetDelegate( "wglSetPbufferAttribARB", typeof( DwglSetPbufferAttribARB_PaI ), ref bwglSetPbufferAttribARB ) as DwglSetPbufferAttribARB_PaI;
            mDwglSetPbufferAttribARB_PP = GetDelegate( "wglSetPbufferAttribARB", typeof( DwglSetPbufferAttribARB_PP ), ref bwglSetPbufferAttribARB ) as DwglSetPbufferAttribARB_PP;
            mDwglShareLists_PP = GetDelegate( "wglShareLists", typeof( DwglShareLists_PP ), ref bwglShareLists ) as DwglShareLists_PP;
            mDwglSwapBuffers_P = GetDelegate( "wglSwapBuffers", typeof( DwglSwapBuffers_P ), ref bwglSwapBuffers ) as DwglSwapBuffers_P;
            mDwglSwapBuffersMscOML_PLLL = GetDelegate( "wglSwapBuffersMscOML", typeof( DwglSwapBuffersMscOML_PLLL ), ref bwglSwapBuffersMscOML ) as DwglSwapBuffersMscOML_PLLL;
            mDwglSwapIntervalEXT_I = GetDelegate( "wglSwapIntervalEXT", typeof( DwglSwapIntervalEXT_I ), ref bwglSwapIntervalEXT ) as DwglSwapIntervalEXT_I;
            mDwglSwapLayerBuffers_PI = GetDelegate( "wglSwapLayerBuffers", typeof( DwglSwapLayerBuffers_PI ), ref bwglSwapLayerBuffers ) as DwglSwapLayerBuffers_PI;
            mDwglSwapLayerBuffersMscOML_PILLL = GetDelegate( "wglSwapLayerBuffersMscOML", typeof( DwglSwapLayerBuffersMscOML_PILLL ), ref bwglSwapLayerBuffersMscOML ) as DwglSwapLayerBuffersMscOML_PILLL;
            mDwglSwapMultipleBuffers_IrX = GetDelegate( "wglSwapMultipleBuffers", typeof( DwglSwapMultipleBuffers_IrX ), ref bwglSwapMultipleBuffers ) as DwglSwapMultipleBuffers_IrX;
            mDwglUseFontBitmapsA_PIII = GetDelegate( "wglUseFontBitmapsA", typeof( DwglUseFontBitmapsA_PIII ), ref bwglUseFontBitmapsA ) as DwglUseFontBitmapsA_PIII;
            mDwglUseFontBitmapsW_PIII = GetDelegate( "wglUseFontBitmapsW", typeof( DwglUseFontBitmapsW_PIII ), ref bwglUseFontBitmapsW ) as DwglUseFontBitmapsW_PIII;
            mDwglUseFontOutlinesA_PIIIFFIX = GetDelegate( "wglUseFontOutlinesA", typeof( DwglUseFontOutlinesA_PIIIFFIX ), ref bwglUseFontOutlinesA ) as DwglUseFontOutlinesA_PIIIFFIX;
            mDwglUseFontOutlinesA_PIIIFFIP = GetDelegate( "wglUseFontOutlinesA", typeof( DwglUseFontOutlinesA_PIIIFFIP ), ref bwglUseFontOutlinesA ) as DwglUseFontOutlinesA_PIIIFFIP;
            mDwglUseFontOutlinesW_PIIIFFIX = GetDelegate( "wglUseFontOutlinesW", typeof( DwglUseFontOutlinesW_PIIIFFIX ), ref bwglUseFontOutlinesW ) as DwglUseFontOutlinesW_PIIIFFIX;
            mDwglUseFontOutlinesW_PIIIFFIP = GetDelegate( "wglUseFontOutlinesW", typeof( DwglUseFontOutlinesW_PIIIFFIP ), ref bwglUseFontOutlinesW ) as DwglUseFontOutlinesW_PIIIFFIP;
            mDwglWaitForMscOML_PLLLrLrLrL = GetDelegate( "wglWaitForMscOML", typeof( DwglWaitForMscOML_PLLLrLrLrL ), ref bwglWaitForMscOML ) as DwglWaitForMscOML_PLLLrLrLrL;
            mDwglWaitForMscOML_PLLLPPP = GetDelegate( "wglWaitForMscOML", typeof( DwglWaitForMscOML_PLLLPPP ), ref bwglWaitForMscOML ) as DwglWaitForMscOML_PLLLPPP;
            mDwglWaitForSbcOML_PLPPP = GetDelegate( "wglWaitForSbcOML", typeof( DwglWaitForSbcOML_PLPPP ), ref bwglWaitForSbcOML ) as DwglWaitForSbcOML_PLPPP;


#endif


        }
















        private Delegate GetDelegate( String functionName, Type delegateType, ref bool foundFunction )
        {
            foundFunction = false;

            IntPtr intPtr = IntPtr.Zero;


            // OPENGL32.DLL

            intPtr = GL.Kernel32_GetProcAddress( mhModuleGL, functionName );
            
            if (IntPtr.Zero != intPtr)
            {
                foundFunction = true;

                Delegate delegateFromFunctionPointer = 
                    System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer( intPtr, delegateType );

                return (delegateFromFunctionPointer);
            }


            // GLU32.DLL

            intPtr = GL.Kernel32_GetProcAddress( mhModuleGLU, functionName );
            
            if (IntPtr.Zero != intPtr)
            {
                foundFunction = true;

                Delegate delegateFromFunctionPointer =
                    System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(intPtr, delegateType);

                return (delegateFromFunctionPointer);
            }


            // GDI32.DLL
            
            intPtr = GL.Kernel32_GetProcAddress( mhModuleGDI, functionName );
            
            if (IntPtr.Zero != intPtr)
            {
                foundFunction = true;

                Delegate delegateFromFunctionPointer =
                    System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(intPtr, delegateType);

                return (delegateFromFunctionPointer);
            }


            // OPENGL extension function (via wglGetProcAddress())

            intPtr = GL.OpenGL32_wglGetProcAddress( functionName );
            
            if (IntPtr.Zero != intPtr)
            {
                foundFunction = true;

                Delegate delegateFromFunctionPointer =
                    System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(intPtr, delegateType);

                return (delegateFromFunctionPointer);
            }


            // Failed to find a function

            return ((Delegate)null);
        }
















        public void InitializeOpenGL
        (
            IntPtr hwnd,  // in
            ref IntPtr hdc,   // out
            ref IntPtr hglrc  // out
        )
        {
            // Clear the OpenGL Render Context (RC) handle result.

            hglrc = IntPtr.Zero;


            // Get the Device Context (DC) handle for the specified window.

            hdc = GL.User32_GetDC(hwnd);




            // ================================================================
            // THE MOST IMPORTANT PART OF THIS WHOLE PROGRAM!
            // ----------------------------------------------------------------
            // DO NOT MOVE THIS CODE PAST ChoosePixelFormat()!!!
            // ----------------------------------------------------------------
            // CAUTION: Not doing the following wgl.wglSwapBuffers() on the DC 
            // *before* calling ChoosePixelFormat() and SetPixelFormat() will
            // result in a failure to subsequently create the RC.  WHY ? !
            // ================================================================
            GL.OpenGL32_wglSwapBuffers(hdc);
            // ================================================================
            // DO NOT MOVE THIS CODE PAST ChoosePixelFormat()!!!
            // ================================================================




            // Search for a suitable pixel format for the Device Context (DC).  
            // Confusingly, the function used to perform a search is called 
            // ChoosePixelFormat().

            GL.PIXELFORMATDESCRIPTOR pfd = new GL.PIXELFORMATDESCRIPTOR();

            pfd.nSize = 40; // sizeof(PIXELFORMATDESCRIPTOR); 
            pfd.nVersion = 1;
            pfd.dwFlags = (GL.PFD_DRAW_TO_WINDOW | GL.PFD_SUPPORT_OPENGL | GL.PFD_DOUBLEBUFFER); // | GL.PFD_SUPPORT_GDI  );
            pfd.iPixelType = (byte)(GL.PFD_TYPE_RGBA);
            pfd.cColorBits = 32;
            pfd.cRedBits = 0;
            pfd.cRedShift = 0;
            pfd.cGreenBits = 0;
            pfd.cGreenShift = 0;
            pfd.cBlueBits = 0;
            pfd.cBlueShift = 0;
            pfd.cAlphaBits = 0;
            pfd.cAlphaShift = 0;
            pfd.cAccumBits = 0;
            pfd.cAccumRedBits = 0;
            pfd.cAccumGreenBits = 0;
            pfd.cAccumBlueBits = 0;
            pfd.cAccumAlphaBits = 0;
            pfd.cDepthBits = 24;
            pfd.cStencilBits = 0;
            pfd.cAuxBuffers = 0;
            pfd.iLayerType = (byte)(GL.PFD_MAIN_PLANE);
            pfd.bReserved = 0;
            pfd.dwLayerMask = 0;
            pfd.dwVisibleMask = 0;
            pfd.dwDamageMask = 0;

            int pixelFormatIndex = 0;

            pixelFormatIndex = GL.GDI32_ChoosePixelFormat(hdc, ref pfd);

            if (0 == pixelFormatIndex)
            {
                string message = "ChoosePixelFormat() failed; "
                    + "Win32 Error #" + Kernel32_GetLastError();

                MessageBox.Show( null, message, Version + " Error", MessageBoxButtons.OK );
                
                return;
            }




            // Set the pixel format for the Device Context (DC) to be the one
            // we found in our search, indicated by pixelFormatIndex.

            int resultSPF = 0;

            resultSPF = GL.GDI32_SetPixelFormat(hdc, pixelFormatIndex, ref pfd);
            
            if (0 == resultSPF)
            {
                string message = "SetPixelFormat() failed; "
                    + "Win32 Error #" + Kernel32_GetLastError();

                MessageBox.Show( null, message, Version + " Error", MessageBoxButtons.OK );
                
                return;
            }




            // Create an OpenGL Rendering Context (RC).

            // NOTE: If you don't call wglSwapBuffers(hdc) before ChoosePixelFormat()
            // and SetPixelFormat(), then you might see one of the following errors:
            //
            //              126 : ERROR_MOD_NOT_FOUND
            //
            //             2000 : Invalid pixel format
            //
            // So, be sure to call wglSwapBuffers(hdc) before ChoosePixelFormat()
            // and SetPixelFormat().  This is totally bizarre.


            hglrc = GL.OpenGL32_wglCreateContext( hdc );


            if (IntPtr.Zero == hglrc)
            {
                string message =
                    "wglCreateContext() failed; "
                    + "Win32 Error #" + Kernel32_GetLastError();

                MessageBox.Show( null, message, Version + " Error", MessageBoxButtons.OK );
                
                return;
            }




            // Make the new Render Context (RC) the current Render Context (RC)
            
            int resultMC = 0;
            
            resultMC = GL.OpenGL32_wglMakeCurrent( hdc, hglrc );
            
            if (0 == resultMC)
            {
                string message = "wglMakeCurrent() failed; "
                    + "Win32 Error #" + Kernel32_GetLastError();

                MessageBox.Show( null, message, Version + " Error", MessageBoxButtons.OK );
                
                GL.OpenGL32_wglDeleteContext( hglrc );
                
                hglrc = IntPtr.Zero;
                
                return;
            }




            // Now that we have an OpenGL Rendering Context (RC), and the 
            // Rendering Context is also *current* (for the window's Device 
            // Context (DC)), we can get the pointers of OpenGL functions 
            // suitable for this *particular* Rendering Context (RC).

            BuildFunctionListAssumingGLRCIsCurrent();
        }




    }




}








